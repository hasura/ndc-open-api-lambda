import {
  XmlStringMaxLen511,
  FailedScheduledUpdateGroupActionRequests,
  XmlStringMaxLen255,
  TimestampType,
  AutoScalingGroupMinSize,
  AutoScalingGroupMaxSize,
  AutoScalingGroupDesiredCapacity,
  LaunchTemplateSpecification,
  Overrides,
  XmlString,
  OnDemandBaseCapacity,
  OnDemandPercentageAboveBaseCapacity,
  SpotInstancePools,
  MixedInstanceSpotPrice,
  AsciiStringMaxLen255,
  LifecycleTransition,
  XmlStringMaxLen1023,
  HeartbeatTimeout,
  LifecycleActionResult,
  NotificationTargetResourceName,
  TagKey,
  TagValue,
  PropagateAtLaunch,
  Ebs,
  NoDevice,
  MaxNumberOfAutoScalingGroups,
  MaxNumberOfLaunchConfigurations,
  NumberOfAutoScalingGroups,
  NumberOfLaunchConfigurations,
  AdjustmentTypes,
  AutoScalingGroups,
  Values,
  AutoScalingInstances,
  AutoScalingNotificationTypes,
  InstanceRefreshes,
  LaunchConfigurations,
  LifecycleHooks,
  LoadBalancerTargetGroupStates,
  LoadBalancerStates,
  MetricCollectionTypes,
  MetricGranularityTypes,
  NotificationConfigurations,
  ScalingPolicies,
  Activities,
  Processes,
  ScheduledUpdateGroupActions,
  TagDescriptionList,
  TerminationPolicies,
  TrafficSourceStates,
  WarmPoolConfiguration,
  Instances,
  LoadForecasts,
  CapacityForecast,
  ResourceName,
  Alarms,
  MetricScale,
  PolicyIncrement,
  MetricType,
  MetricName,
  MetricNamespace,
  MetricDimensions,
  MetricStatistic,
  MetricUnit,
  TargetTrackingMetricDataQueries,
  PredictiveScalingMetricSpecification,
  LaunchTemplateName,
  LaunchTemplate,
  InstancesDistribution,
  NonZeroIntPercent,
  Activity,
  NullablePositiveInteger,
  AcceleratorManufacturer,
  AcceleratorName,
  AcceleratorType,
  ScalingActivityStatusCode,
  Progress,
  AutoScalingGroupState,
  AdjustmentType,
  Alarm,
  AllowedInstanceType,
  XmlStringMaxLen19,
  InstanceIds,
  TargetGroupARNs,
  LoadBalancerNames,
  TrafficSourceIdentifier,
  TrafficSources,
  Instance,
  SuspendedProcess,
  EnabledMetric,
  TagDescription,
  XmlStringMaxLen1600,
  MaxGroupPreparedCapacity,
  WarmPoolMinSize,
  WarmPoolState,
  WarmPoolStatus,
  InstanceReusePolicy,
  MixedInstancesPolicy,
  AutoScalingGroupPredictedCapacity,
  Cooldown,
  AvailabilityZones,
  XmlStringMaxLen32,
  HealthCheckGracePeriod,
  SuspendedProcesses,
  XmlStringMaxLen2047,
  EnabledMetrics,
  InstanceProtected,
  MaxInstanceLifetime,
  CapacityRebalanceEnabled,
  WarmPoolSize,
  Context,
  DefaultInstanceWarmup,
  Filter,
  AutoScalingGroupNames,
  MaxRecords,
  Filters,
  AutoScalingGroup,
  AutoScalingInstanceDetails,
  FailedScheduledUpdateGroupActionRequest,
  ScheduledActionNames,
  ScheduledUpdateGroupActionRequest,
  ScheduledUpdateGroupActionRequests,
  BlockDeviceEbsVolumeSize,
  BlockDeviceEbsVolumeType,
  BlockDeviceEbsDeleteOnTermination,
  BlockDeviceEbsIops,
  BlockDeviceEbsEncrypted,
  BlockDeviceEbsThroughput,
  BlockDeviceMapping,
  PredictiveScalingForecastTimestamps,
  PredictiveScalingForecastValues,
  LifecycleActionToken,
  CpuManufacturer,
  LifecycleHookSpecification,
  Tag,
  LifecycleHookSpecifications,
  Tags,
  MonitoringEnabled,
  InstanceMetadataHttpTokensState,
  InstanceMetadataHttpPutResponseHopLimit,
  InstanceMetadataEndpointState,
  SecurityGroups,
  ClassicLinkVPCSecurityGroups,
  XmlStringUserData,
  BlockDeviceMappings,
  InstanceMonitoring,
  SpotPrice,
  EbsOptimized,
  AssociatePublicIpAddress,
  XmlStringMaxLen64,
  InstanceMetadataOptions,
  MetricDimension,
  TargetTrackingMetricDataQuery,
  ForceDelete,
  InstanceRefresh,
  InstanceRefreshIds,
  LifecycleHook,
  LifecycleHookNames,
  LoadBalancerTargetGroupState,
  LoadBalancerState,
  MetricCollectionType,
  MetricGranularityType,
  NotificationConfiguration,
  PolicyNames,
  PolicyTypes,
  ActivityIds,
  IncludeDeletedGroups,
  TrafficSourceState,
  ShouldDecrementDesiredCapacity,
  Metrics,
  ExcludedInstance,
  HonorCooldown,
  LoadForecast,
  LifecycleState,
  InstanceGeneration,
  InstanceRefreshLivePoolProgress,
  InstanceRefreshWarmPoolProgress,
  IntPercent,
  RefreshInstanceWarmup,
  CheckpointPercentages,
  CheckpointDelay,
  SkipMatching,
  AutoRollback,
  ScaleInProtectedInstances,
  StandbyInstances,
  InstancesToUpdate,
  InstanceRefreshProgressDetails,
  InstanceRefreshStatus,
  RefreshPreferences,
  DesiredConfiguration,
  RollbackDetails,
  NullablePositiveDouble,
  LocalStorageType,
  VCpuCountRequest,
  MemoryMiBRequest,
  CpuManufacturers,
  MemoryGiBPerVCpuRequest,
  ExcludedInstanceTypes,
  InstanceGenerations,
  BareMetal,
  BurstablePerformance,
  NullableBoolean,
  NetworkInterfaceCountRequest,
  LocalStorage,
  LocalStorageTypes,
  TotalLocalStorageGBRequest,
  BaselineEbsBandwidthMbpsRequest,
  AcceleratorTypes,
  AcceleratorCountRequest,
  AcceleratorManufacturers,
  AcceleratorNames,
  AcceleratorTotalMemoryMiBRequest,
  NetworkBandwidthGbpsRequest,
  AllowedInstanceTypes,
  ReuseOnScaleIn,
  LaunchConfigurationNames,
  LaunchConfiguration,
  LaunchTemplateOverrides,
  InstanceRequirements,
  GlobalTimeout,
  PredictiveScalingPredefinedMetricPair,
  PredictiveScalingPredefinedScalingMetric,
  PredictiveScalingPredefinedLoadMetric,
  PredictiveScalingCustomizedScalingMetric,
  PredictiveScalingCustomizedLoadMetric,
  PredictiveScalingCustomizedCapacityMetric,
  MetricStat,
  XmlStringMetricLabel,
  ReturnData,
  MetricDataQuery,
  Metric,
  XmlStringMetricStat,
  MetricDimensionName,
  MetricDimensionValue,
  ScalingPolicy,
  PredictiveScalingMetricSpecifications,
  PredictiveScalingMode,
  PredictiveScalingSchedulingBufferTime,
  PredictiveScalingMaxCapacityBreachBehavior,
  PredictiveScalingMaxCapacityBuffer,
  MetricDataQueries,
  PredefinedMetricPairType,
  PredefinedScalingMetricType,
  PredefinedLoadMetricType,
  ProcessType,
  StepAdjustment,
  PredefinedMetricSpecification,
  CustomizedMetricSpecification,
  DisableScaleIn,
  MinAdjustmentStep,
  MinAdjustmentMagnitude,
  StepAdjustments,
  EstimatedInstanceWarmup,
  TargetTrackingConfiguration,
  ScalingPolicyEnabled,
  PredictiveScalingConfiguration,
  ProcessNames,
  ScheduledUpdateGroupAction,
  ShouldRespectGracePeriod,
  ProtectedFromScaleIn,
  RefreshStrategy,
  TargetTrackingMetricStat,
  PolicyARNType,
  ResourceContentionFault,
  ServiceLinkedRoleFailure,
  AttachLoadBalancerTargetGroupsResultType,
  AttachLoadBalancersResultType,
  AttachTrafficSourcesResultType,
  BatchDeleteScheduledActionAnswer,
  BatchPutScheduledUpdateGroupActionAnswer,
  AlreadyExistsFault,
  LimitExceededFault,
  CancelInstanceRefreshAnswer,
  ActiveInstanceRefreshNotFoundFault,
  CompleteLifecycleActionAnswer,
  ResourceInUseFault,
  ScalingActivityInProgressFault,
  DeleteLifecycleHookAnswer,
  DeleteWarmPoolAnswer,
  DescribeAccountLimitsAnswer,
  DescribeAdjustmentTypesAnswer,
  AutoScalingGroupsType,
  InvalidNextToken,
  AutoScalingInstancesType,
  DescribeAutoScalingNotificationTypesAnswer,
  DescribeInstanceRefreshesAnswer,
  LaunchConfigurationsType,
  DescribeLifecycleHookTypesAnswer,
  DescribeLifecycleHooksAnswer,
  DescribeLoadBalancerTargetGroupsResponse,
  DescribeLoadBalancersResponse,
  DescribeMetricCollectionTypesAnswer,
  DescribeNotificationConfigurationsAnswer,
  PoliciesType,
  ActivitiesType,
  ProcessesType,
  ScheduledActionsType,
  TagsType,
  DescribeTerminationPolicyTypesAnswer,
  DescribeTrafficSourcesResponse,
  DescribeWarmPoolAnswer,
  DetachInstancesAnswer,
  DetachLoadBalancerTargetGroupsResultType,
  DetachLoadBalancersResultType,
  DetachTrafficSourcesResultType,
  EnterStandbyAnswer,
  ExitStandbyAnswer,
  GetPredictiveScalingForecastAnswer,
  PutLifecycleHookAnswer,
  PutWarmPoolAnswer,
  RecordLifecycleActionHeartbeatAnswer,
  RollbackInstanceRefreshAnswer,
  IrreversibleInstanceRefreshFault,
  SetInstanceProtectionAnswer,
  StartInstanceRefreshAnswer,
  InstanceRefreshInProgressFault,
  ActivityType,
  AttachInstancesQuery,
  AttachLoadBalancerTargetGroupsType,
  AttachLoadBalancersType,
  AttachTrafficSourcesType,
  AutoScalingGroupNamesType,
  BatchDeleteScheduledActionType,
  BatchPutScheduledUpdateGroupActionType,
  CancelInstanceRefreshType,
  CompleteLifecycleActionType,
  CreateAutoScalingGroupType,
  CreateLaunchConfigurationType,
  CreateOrUpdateTagsType,
  DeleteAutoScalingGroupType,
  DeleteLifecycleHookType,
  DeleteNotificationConfigurationType,
  DeletePolicyType,
  DeleteScheduledActionType,
  DeleteTagsType,
  DeleteWarmPoolType,
  DescribeAutoScalingInstancesType,
  DescribeInstanceRefreshesType,
  DescribeLifecycleHooksType,
  DescribeLoadBalancerTargetGroupsRequest,
  DescribeLoadBalancersRequest,
  DescribeNotificationConfigurationsType,
  DescribePoliciesType,
  DescribeScalingActivitiesType,
  DescribeScheduledActionsType,
  DescribeTagsType,
  DescribeTrafficSourcesRequest,
  DescribeWarmPoolType,
  DetachInstancesQuery,
  DetachLoadBalancerTargetGroupsType,
  DetachLoadBalancersType,
  DetachTrafficSourcesType,
  DisableMetricsCollectionQuery,
  EnableMetricsCollectionQuery,
  EnterStandbyQuery,
  ExecutePolicyType,
  ExitStandbyQuery,
  GetPredictiveScalingForecastType,
  LaunchConfigurationNameType,
  LaunchConfigurationNamesType,
  PutLifecycleHookType,
  PutNotificationConfigurationType,
  PutScalingPolicyType,
  PutScheduledUpdateGroupActionType,
  PutWarmPoolType,
  RecordLifecycleActionHeartbeatType,
  RollbackInstanceRefreshType,
  ScalingProcessQuery,
  SetDesiredCapacityType,
  SetInstanceHealthQuery,
  SetInstanceProtectionQuery,
  StartInstanceRefreshType,
  TerminateInstanceInAutoScalingGroupType,
  UpdateAutoScalingGroupType,
  Api,
} from "./api";
import * as hasuraSdk from "@hasura/ndc-lambda-sdk";

const api = new Api({
  baseUrl: "http://localhost:13191",
});

/**
 * undefined
 * @request GET :/#Action=PutScalingPolicy
 * @allowrelaxedtypes
 * @readonly
 */
export async function getActionPutScalingPolicyGetPutScalingPolicy(query: {
  /**
   * The name of the Auto Scaling group.
   */
  AutoScalingGroupName: string;
  /**
   * The name of the policy.
   */
  PolicyName: string;
  /**
   * <p>One of the following policy types: </p> <ul> <li> <p> <code>TargetTrackingScaling</code> </p> </li> <li> <p> <code>StepScaling</code> </p> </li> <li> <p> <code>SimpleScaling</code> (default)</p> </li> <li> <p> <code>PredictiveScaling</code> </p> </li> </ul>
   */
  PolicyType?: string;
  /**
   * <p>Specifies how the scaling adjustment is interpreted (for example, an absolute number or a percentage). The valid values are <code>ChangeInCapacity</code>, <code>ExactCapacity</code>, and <code>PercentChangeInCapacity</code>.</p> <p>Required if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling adjustment types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p>
   */
  AdjustmentType?: string;
  /**
   * Available for backward compatibility. Use <code>MinAdjustmentMagnitude</code> instead.
   */
  MinAdjustmentStep?: number;
  /**
   * <p>The minimum value to scale by when the adjustment type is <code>PercentChangeInCapacity</code>. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a <code>MinAdjustmentMagnitude</code> of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a <code>MinAdjustmentMagnitude</code> of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances.</p> <p>Valid only if the policy type is <code>StepScaling</code> or <code>SimpleScaling</code>. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment">Scaling adjustment types</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <note> <p>Some Auto Scaling groups use instance weights. In this case, set the <code>MinAdjustmentMagnitude</code> to a value that is at least as large as your largest instance weight.</p> </note>
   */
  MinAdjustmentMagnitude?: number;
  /**
   * <p>The amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity while a negative number removes from the current capacity. For exact capacity, you must specify a positive value.</p> <p>Required if the policy type is <code>SimpleScaling</code>. (Not used with any other policy type.) </p>
   */
  ScalingAdjustment?: number;
  /**
   * <p>A cooldown period, in seconds, that applies to a specific simple scaling policy. When a cooldown period is specified here, it overrides the default cooldown.</p> <p>Valid only if the policy type is <code>SimpleScaling</code>. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html">Scaling cooldowns for Amazon EC2 Auto Scaling</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.</p> <p>Default: None</p>
   */
  Cooldown?: number;
  /**
   * <p>The aggregation type for the CloudWatch metrics. The valid values are <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code>. If the aggregation type is null, the value is treated as <code>Average</code>.</p> <p>Valid only if the policy type is <code>StepScaling</code>.</p>
   */
  MetricAggregationType?: string;
  /**
   * <p>A set of adjustments that enable you to scale based on the size of the alarm breach.</p> <p>Required if the policy type is <code>StepScaling</code>. (Not used with any other policy type.) </p>
   */
  StepAdjustments?: StepAdjustment[];
  /**
   * <p> <i>Not needed if the default instance warmup is defined for the group.</i> </p> <p>The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. This warm-up period applies to instances launched due to a specific target tracking or step scaling policy. When a warm-up period is specified here, it overrides the default instance warmup.</p> <p>Valid only if the policy type is <code>TargetTrackingScaling</code> or <code>StepScaling</code>.</p> <note> <p>The default is to use the value for the default instance warmup defined for the group. If default instance warmup is null, then <code>EstimatedInstanceWarmup</code> falls back to the value of default cooldown.</p> </note>
   */
  EstimatedInstanceWarmup?: number;
  /**
   * Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
   */
  TargetTrackingConfiguration?: {
    /**
     * A predefined metric. You must specify either a predefined metric or a customized metric.
     */
    PredefinedMetricSpecification?: PredefinedMetricSpecification;
    /**
     * A customized metric. You must specify either a predefined metric or a customized metric.
     */
    CustomizedMetricSpecification?: CustomizedMetricSpecification;
    /**
     * <p>The target value for the metric.</p> <note> <p>Some metrics are based on a count instead of a percentage, such as the request count for an Application Load Balancer or the number of messages in an SQS queue. If the scaling policy specifies one of these metrics, specify the target utilization as the optimal average request or message count per instance during any one-minute interval. </p> </note>
     */
    TargetValue: MetricScale;
    /**
     * Indicates whether scaling in by the target tracking scaling policy is disabled. If scaling in is disabled, the target tracking scaling policy doesn't remove instances from the Auto Scaling group. Otherwise, the target tracking scaling policy can remove instances from the Auto Scaling group. The default is <code>false</code>.
     */
    DisableScaleIn?: DisableScaleIn;
  };
  /**
   * Indicates whether the scaling policy is enabled or disabled. The default is enabled. For more information, see <a href="https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enable-disable-scaling-policy.html">Disabling a scaling policy for an Auto Scaling group</a> in the <i>Amazon EC2 Auto Scaling User Guide</i>.
   */
  Enabled?: boolean;
  /**
   * Represents a predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.
   */
  PredictiveScalingConfiguration?: {
    /**
     * <p>This structure includes the metrics and target utilization to use for predictive scaling. </p> <p>This is an array, but we currently only support a single metric specification. That is, you can specify a target value and a single metric pair, or a target value and one scaling metric and one load metric.</p>
     */
    MetricSpecifications: PredictiveScalingMetricSpecifications;
    /**
     * The predictive scaling mode. Defaults to <code>ForecastOnly</code> if not specified.
     */
    Mode?: PredictiveScalingMode;
    /**
     * <p>The amount of time, in seconds, by which the instance launch time can be advanced. For example, the forecast says to add capacity at 10:00 AM, and you choose to pre-launch instances by 5 minutes. In that case, the instances will be launched at 9:55 AM. The intention is to give resources time to be provisioned. It can take a few minutes to launch an EC2 instance. The actual amount of time required depends on several factors, such as the size of the instance and whether there are startup scripts to complete. </p> <p>The value must be less than the forecast interval duration of 3600 seconds (60 minutes). Defaults to 300 seconds if not specified. </p>
     */
    SchedulingBufferTime?: PredictiveScalingSchedulingBufferTime;
    /**
     * <p>Defines the behavior that should be applied if the forecast capacity approaches or exceeds the maximum capacity of the Auto Scaling group. Defaults to <code>HonorMaxCapacity</code> if not specified.</p> <p>The following are possible values:</p> <ul> <li> <p> <code>HonorMaxCapacity</code> - Amazon EC2 Auto Scaling cannot scale out capacity higher than the maximum capacity. The maximum capacity is enforced as a hard limit. </p> </li> <li> <p> <code>IncreaseMaxCapacity</code> - Amazon EC2 Auto Scaling can scale out capacity higher than the maximum capacity when the forecast capacity is close to or exceeds the maximum capacity. The upper limit is determined by the forecasted capacity and the value for <code>MaxCapacityBuffer</code>.</p> </li> </ul>
     */
    MaxCapacityBreachBehavior?: PredictiveScalingMaxCapacityBreachBehavior;
    /**
     * <p>The size of the capacity buffer to use when the forecast capacity is close to or exceeds the maximum capacity. The value is specified as a percentage relative to the forecast capacity. For example, if the buffer is 10, this means a 10 percent buffer, such that if the forecast capacity is 50, and the maximum capacity is 40, then the effective maximum capacity is 55.</p> <p>If set to 0, Amazon EC2 Auto Scaling may scale capacity higher than the maximum capacity to equal but not exceed forecast capacity. </p> <p>Required if the <code>MaxCapacityBreachBehavior</code> property is set to <code>IncreaseMaxCapacity</code>, and cannot be used otherwise.</p>
     */
    MaxCapacityBuffer?: PredictiveScalingMaxCapacityBuffer;
  };
  Action: "PutScalingPolicy";
  Version: "2011-01-01";
}): Promise<PolicyARNType> {
  const result = await api.actionPutScalingPolicy.getPutScalingPolicy({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}
