import {
  Artifact,
  Lifecycle,
  PreviousBuild,
  CommitDetails,
  User,
  Outcome,
  Status,
  Sha1,
  Build,
  CommitDetail,
  Envvar,
  Key,
  Aws,
  StringOrNull,
  Scope,
  Project,
  Artifacts,
  BuildDetail,
  BuildParameters,
  BuildSummary,
  Builds,
  Envvars,
  Keys,
  Parallel,
  Projects,
  Revision,
  Tag,
  Tests,
  Api,
} from "./api";
import * as hasuraSdk from "@hasura/ndc-lambda-sdk";

const api = new Api({
  baseUrl: "http://localhost:13191",
});

/**
 * undefined
 * @request GET :/me
 * @readonly
 */
export async function getMeGetMe(): Promise<User> {
  const result = await api.me.getMe({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/project/{username}/{project}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getProjectProjectDetail(
  query: {
    /** The number of builds to return. Maximum 100, defaults to 30.
     */ limit?: number;
    /** The API returns builds starting from this offset, defaults to 0.
     */ offset?: number;
    /** Restricts which builds are returned.
Set to "completed", "successful", "failed", "running", or defaults to no filter.
 */ filter?: "completed" | "successful" | "failed" | "running";
  },
  /** XXXXXXXXX
   */
  username: string,
  /** XXXXXXXXX
   */
  project: string,
): Promise<Builds> {
  const result = await api.project.projectDetail({
    query: query,
    username: username,
    project: project,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/project/{username}/{project}
 */
export async function postProjectProjectCreate(
  /** XXXXXXXXX
   */
  username: string,
  /** XXXXXXXXX
   */
  project: string,
  /** Request body */
  data: {
    /** Additional environment variables to inject into the build environment. A map of names to values. */
    build_parameters?: BuildParameters;
    /** The number of containers to use to run the build. Default is null and the project default is used. */
    parallel?: Parallel;
    /**
     * The specific revision to build.
     * Default is null and the head of the branch is used. Cannot be used with tag parameter.
     */
    revision?: Revision;
    /** The tag to build. Default is null. Cannot be used with revision parameter. */
    tag?: Tag;
  },
): Promise<BuildSummary> {
  const result = await api.project.projectCreate({
    username: username,
    project: project,
    data: data,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/project/{username}/{project}/build-cache
 */
export async function deleteProjectBuildCacheDelete(
  /** XXXXXXXXX
   */
  username: string,
  /** XXXXXXXXX
   */
  project: string,
): Promise<{
  status?: string;
}> {
  const result = await api.project.buildCacheDelete({
    username: username,
    project: project,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/project/{username}/{project}/checkout-key
 * @readonly
 */
export async function getProjectCheckoutKeyDetail(
  /** XXXXXXXXX
   */
  username: string,
  /** XXXXXXXXX
   */
  project: string,
): Promise<Keys> {
  const result = await api.project.checkoutKeyDetail({
    username: username,
    project: project,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/project/{username}/{project}/checkout-key
 * @allowrelaxedtypes
 */
export async function postProjectCheckoutKeyCreate(
  /** XXXXXXXXX
   */
  username: string,
  /** XXXXXXXXX
   */
  project: string,
  /** Request body */
  data: "deploy-key" | "github-user-key",
): Promise<Key> {
  const result = await api.project.checkoutKeyCreate({
    username: username,
    project: project,
    data: data,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/project/{username}/{project}/checkout-key/{fingerprint}
 */
export async function deleteProjectCheckoutKeyDelete(
  /** XXXXXXXXX
   */
  username: string,
  /** XXXXXXXXX
   */
  project: string,
  /** XXXXXXXXXX
   */
  fingerprint: string,
): Promise<{
  message?: "OK";
}> {
  const result = await api.project.checkoutKeyDelete({
    username: username,
    project: project,
    fingerprint: fingerprint,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/project/{username}/{project}/checkout-key/{fingerprint}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getProjectCheckoutKeyDetail2(
  /** XXXXXXXXX
   */
  username: string,
  /** XXXXXXXXX
   */
  project: string,
  /** XXXXXXXXXX
   */
  fingerprint: string,
): Promise<Key> {
  const result = await api.project.checkoutKeyDetail2({
    username: username,
    project: project,
    fingerprint: fingerprint,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/project/{username}/{project}/envvar
 * @readonly
 */
export async function getProjectEnvvarDetail(
  /** XXXXXXXXX
   */
  username: string,
  /** XXXXXXXXX
   */
  project: string,
): Promise<Envvars> {
  const result = await api.project.envvarDetail({
    username: username,
    project: project,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/project/{username}/{project}/envvar
 */
export async function postProjectEnvvarCreate(
  /** XXXXXXXXX
   */
  username: string,
  /** XXXXXXXXX
   */
  project: string,
): Promise<Envvar> {
  const result = await api.project.envvarCreate({
    username: username,
    project: project,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/project/{username}/{project}/envvar/{name}
 */
export async function deleteProjectEnvvarDelete(
  /** XXXXXXXXX
   */
  username: string,
  /** XXXXXXXXX
   */
  project: string,
  /** XXXXXXXXXX
   */
  name: string,
): Promise<{
  message?: "OK";
}> {
  const result = await api.project.envvarDelete({
    username: username,
    project: project,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/project/{username}/{project}/envvar/{name}
 * @readonly
 */
export async function getProjectEnvvarDetail2(
  /** XXXXXXXXX
   */
  username: string,
  /** XXXXXXXXX
   */
  project: string,
  /** XXXXXXXXXX
   */
  name: string,
): Promise<Envvar> {
  const result = await api.project.envvarDetail2({
    username: username,
    project: project,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/project/{username}/{project}/ssh-key
 * @allowrelaxedtypes
 */
export async function postProjectSshKeyCreate(
  /** XXXXXXXXX
   */
  username: string,
  /** XXXXXXXXX
   */
  project: string,
  /** Request body */
  data: {
    hostname?: string;
    private_key?: string;
  },
): Promise<hasuraSdk.JSONValue> {
  const result = await api.project.sshKeyCreate({
    username: username,
    project: project,
    data: data,
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/project/{username}/{project}/tree/{branch}
 */
export async function postProjectTreeCreate(
  /** XXXXXXXXX
   */
  username: string,
  /** XXXXXXXXX
   */
  project: string,
  /** The branch name should be url-encoded.
   */
  branch: string,
  /** Request body */
  data: {
    /** Additional environment variables to inject into the build environment. A map of names to values. */
    build_parameters?: BuildParameters;
    /** The number of containers to use to run the build. Default is null and the project default is used. */
    parallel?: Parallel;
    /**
     * The specific revision to build.
     * Default is null and the head of the branch is used. Cannot be used with tag parameter.
     */
    revision?: Revision;
  },
): Promise<Build> {
  const result = await api.project.treeCreate({
    username: username,
    project: project,
    branch: branch,
    data: data,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/project/{username}/{project}/{build_num}
 * @readonly
 */
export async function getProjectProjectDetail2(
  /** XXXXXXXXX
   */
  username: string,
  /** XXXXXXXXX
   */
  project: string,
  /** XXXXXXXXXX
   */
  buildNum: number,
): Promise<BuildDetail> {
  const result = await api.project.projectDetail2({
    username: username,
    project: project,
    buildNum: buildNum,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/project/{username}/{project}/{build_num}/artifacts
 * @readonly
 */
export async function getProjectArtifactsDetail(
  /** XXXXXXXXX
   */
  username: string,
  /** XXXXXXXXX
   */
  project: string,
  /** XXXXXXXXXX
   */
  buildNum: number,
): Promise<Artifacts> {
  const result = await api.project.artifactsDetail({
    username: username,
    project: project,
    buildNum: buildNum,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/project/{username}/{project}/{build_num}/cancel
 */
export async function postProjectCancelCreate(
  /** XXXXXXXXX
   */
  username: string,
  /** XXXXXXXXX
   */
  project: string,
  /** XXXXXXXXXX
   */
  buildNum: number,
): Promise<Build> {
  const result = await api.project.cancelCreate({
    username: username,
    project: project,
    buildNum: buildNum,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/project/{username}/{project}/{build_num}/retry
 */
export async function postProjectRetryCreate(
  /** XXXXXXXXX
   */
  username: string,
  /** XXXXXXXXX
   */
  project: string,
  /** XXXXXXXXXX
   */
  buildNum: number,
): Promise<Build> {
  const result = await api.project.retryCreate({
    username: username,
    project: project,
    buildNum: buildNum,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/project/{username}/{project}/{build_num}/tests
 * @readonly
 */
export async function getProjectTestsDetail(
  /** XXXXXXXXX
   */
  username: string,
  /** XXXXXXXXX
   */
  project: string,
  /** XXXXXXXXXX
   */
  buildNum: number,
): Promise<Tests> {
  const result = await api.project.testsDetail({
    username: username,
    project: project,
    buildNum: buildNum,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/projects
 * @readonly
 */
export async function getProjectsProjectsList(): Promise<Projects> {
  const result = await api.projects.projectsList({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/recent-builds
 * @readonly
 */
export async function getRecentBuildsRecentBuildsList(query: {
  /** The number of builds to return. Maximum 100, defaults to 30.
   */ limit?: number;
  /** The API returns builds starting from this offset, defaults to 0.
   */ offset?: number;
}): Promise<Builds> {
  const result = await api.recentBuilds.recentBuildsList({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/user/heroku-key
 * @allowrelaxedtypes
 */
export async function postUserHerokuKeyCreate(): Promise<hasuraSdk.JSONValue> {
  const result = await api.user.herokuKeyCreate({});
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}
