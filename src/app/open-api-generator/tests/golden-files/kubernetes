import {
  IoK8SApiAdmissionregistrationV1WebhookClientConfig,
  IoK8SApimachineryPkgApisMetaV1LabelSelector,
  IoK8SApiAdmissionregistrationV1RuleWithOperations,
  IoK8SApimachineryPkgApisMetaV1ObjectMeta,
  IoK8SApiAdmissionregistrationV1MutatingWebhook,
  IoK8SApiAdmissionregistrationV1MutatingWebhookConfiguration,
  IoK8SApimachineryPkgApisMetaV1ListMeta,
  IoK8SApiAdmissionregistrationV1ValidatingWebhook,
  IoK8SApiAdmissionregistrationV1ValidatingWebhookConfiguration,
  IoK8SApiAdmissionregistrationV1ServiceReference,
  IoK8SApiAdmissionregistrationV1Alpha1NamedRuleWithOperations,
  IoK8SApiAdmissionregistrationV1Alpha1ValidatingAdmissionPolicySpec,
  IoK8SApiAdmissionregistrationV1Alpha1ValidatingAdmissionPolicyBindingSpec,
  IoK8SApiAdmissionregistrationV1Alpha1ValidatingAdmissionPolicyBinding,
  IoK8SApiAdmissionregistrationV1Alpha1MatchResources,
  IoK8SApiAdmissionregistrationV1Alpha1ParamRef,
  IoK8SApiAdmissionregistrationV1Alpha1ValidatingAdmissionPolicy,
  IoK8SApiAdmissionregistrationV1Alpha1ParamKind,
  IoK8SApiAdmissionregistrationV1Alpha1Validation,
  IoK8SApiApiserverinternalV1Alpha1StorageVersionSpec,
  IoK8SApiApiserverinternalV1Alpha1StorageVersionStatus,
  IoK8SApimachineryPkgApisMetaV1Time,
  IoK8SApiApiserverinternalV1Alpha1StorageVersion,
  IoK8SApiApiserverinternalV1Alpha1StorageVersionCondition,
  IoK8SApiApiserverinternalV1Alpha1ServerStorageVersion,
  IoK8SApimachineryPkgRuntimeRawExtension,
  IoK8SApiAppsV1ControllerRevision,
  IoK8SApiAppsV1DaemonSetSpec,
  IoK8SApiAppsV1DaemonSetStatus,
  IoK8SApiAppsV1DaemonSet,
  IoK8SApiCoreV1PodTemplateSpec,
  IoK8SApiAppsV1DaemonSetUpdateStrategy,
  IoK8SApiAppsV1DaemonSetCondition,
  IoK8SApiAppsV1RollingUpdateDaemonSet,
  IoK8SApiAppsV1DeploymentSpec,
  IoK8SApiAppsV1DeploymentStatus,
  IoK8SApiAppsV1Deployment,
  IoK8SApiAppsV1DeploymentStrategy,
  IoK8SApiAppsV1DeploymentCondition,
  IoK8SApiAppsV1RollingUpdateDeployment,
  IoK8SApiAppsV1ReplicaSetSpec,
  IoK8SApiAppsV1ReplicaSetStatus,
  IoK8SApiAppsV1ReplicaSet,
  IoK8SApiAppsV1ReplicaSetCondition,
  IoK8SApimachineryPkgUtilIntstrIntOrString,
  IoK8SApiAppsV1StatefulSetSpec,
  IoK8SApiAppsV1StatefulSetStatus,
  IoK8SApiAppsV1StatefulSet,
  IoK8SApiAppsV1StatefulSetOrdinals,
  IoK8SApiAppsV1StatefulSetPersistentVolumeClaimRetentionPolicy,
  IoK8SApiAppsV1StatefulSetUpdateStrategy,
  IoK8SApiCoreV1PersistentVolumeClaim,
  IoK8SApiAppsV1StatefulSetCondition,
  IoK8SApiAppsV1RollingUpdateStatefulSetStrategy,
  IoK8SApiAuthenticationV1TokenRequestSpec,
  IoK8SApiAuthenticationV1TokenRequestStatus,
  IoK8SApiAuthenticationV1BoundObjectReference,
  IoK8SApiAuthenticationV1TokenReviewSpec,
  IoK8SApiAuthenticationV1TokenReviewStatus,
  IoK8SApiAuthenticationV1UserInfo,
  IoK8SApiAuthenticationV1Alpha1SelfSubjectReviewStatus,
  IoK8SApiAuthorizationV1SubjectAccessReviewSpec,
  IoK8SApiAuthorizationV1SubjectAccessReviewStatus,
  IoK8SApiAuthorizationV1SelfSubjectAccessReviewSpec,
  IoK8SApiAuthorizationV1NonResourceAttributes,
  IoK8SApiAuthorizationV1ResourceAttributes,
  IoK8SApiAuthorizationV1SelfSubjectRulesReviewSpec,
  IoK8SApiAuthorizationV1SubjectRulesReviewStatus,
  IoK8SApiAuthorizationV1NonResourceRule,
  IoK8SApiAuthorizationV1ResourceRule,
  IoK8SApiAutoscalingV1HorizontalPodAutoscalerSpec,
  IoK8SApiAutoscalingV1HorizontalPodAutoscalerStatus,
  IoK8SApiAutoscalingV1HorizontalPodAutoscaler,
  IoK8SApiAutoscalingV1CrossVersionObjectReference,
  IoK8SApiAutoscalingV1ScaleSpec,
  IoK8SApiAutoscalingV1ScaleStatus,
  IoK8SApiAutoscalingV2MetricTarget,
  IoK8SApiAutoscalingV2MetricValueStatus,
  IoK8SApiAutoscalingV2MetricIdentifier,
  IoK8SApiAutoscalingV2HPAScalingPolicy,
  IoK8SApiAutoscalingV2HorizontalPodAutoscalerSpec,
  IoK8SApiAutoscalingV2HorizontalPodAutoscalerStatus,
  IoK8SApiAutoscalingV2HPAScalingRules,
  IoK8SApiAutoscalingV2HorizontalPodAutoscaler,
  IoK8SApiAutoscalingV2HorizontalPodAutoscalerBehavior,
  IoK8SApiAutoscalingV2MetricSpec,
  IoK8SApiAutoscalingV2CrossVersionObjectReference,
  IoK8SApiAutoscalingV2HorizontalPodAutoscalerCondition,
  IoK8SApiAutoscalingV2MetricStatus,
  IoK8SApiAutoscalingV2ContainerResourceMetricSource,
  IoK8SApiAutoscalingV2ExternalMetricSource,
  IoK8SApiAutoscalingV2ObjectMetricSource,
  IoK8SApiAutoscalingV2PodsMetricSource,
  IoK8SApiAutoscalingV2ResourceMetricSource,
  IoK8SApiAutoscalingV2ContainerResourceMetricStatus,
  IoK8SApiAutoscalingV2ExternalMetricStatus,
  IoK8SApiAutoscalingV2ObjectMetricStatus,
  IoK8SApiAutoscalingV2PodsMetricStatus,
  IoK8SApiAutoscalingV2ResourceMetricStatus,
  IoK8SApimachineryPkgApiResourceQuantity,
  IoK8SApiBatchV1CronJobSpec,
  IoK8SApiBatchV1CronJobStatus,
  IoK8SApiBatchV1CronJob,
  IoK8SApiBatchV1JobTemplateSpec,
  IoK8SApiCoreV1ObjectReference,
  IoK8SApiBatchV1JobSpec,
  IoK8SApiBatchV1JobStatus,
  IoK8SApiBatchV1Job,
  IoK8SApiBatchV1PodFailurePolicy,
  IoK8SApiBatchV1JobCondition,
  IoK8SApiBatchV1UncountedTerminatedPods,
  IoK8SApiBatchV1PodFailurePolicyRule,
  IoK8SApiBatchV1PodFailurePolicyOnExitCodesRequirement,
  IoK8SApiBatchV1PodFailurePolicyOnPodConditionsPattern,
  IoK8SApiCertificatesV1CertificateSigningRequestSpec,
  IoK8SApiCertificatesV1CertificateSigningRequestStatus,
  IoK8SApiCertificatesV1CertificateSigningRequest,
  IoK8SApiCertificatesV1CertificateSigningRequestCondition,
  IoK8SApiCoordinationV1LeaseSpec,
  IoK8SApiCoordinationV1Lease,
  IoK8SApimachineryPkgApisMetaV1MicroTime,
  IoK8SApiCoreV1NodeAffinity,
  IoK8SApiCoreV1PodAffinity,
  IoK8SApiCoreV1PodAntiAffinity,
  IoK8SApiCoreV1SecretReference,
  IoK8SApiCoreV1LocalObjectReference,
  IoK8SApiCoreV1ComponentCondition,
  IoK8SApiCoreV1ComponentStatus,
  IoK8SApiCoreV1ConfigMap,
  IoK8SApiCoreV1KeyToPath,
  IoK8SApiCoreV1EnvVar,
  IoK8SApiCoreV1EnvFromSource,
  IoK8SApiCoreV1Lifecycle,
  IoK8SApiCoreV1Probe,
  IoK8SApiCoreV1ContainerPort,
  IoK8SApiCoreV1ContainerResizePolicy,
  IoK8SApiCoreV1ResourceRequirements,
  IoK8SApiCoreV1SecurityContext,
  IoK8SApiCoreV1VolumeDevice,
  IoK8SApiCoreV1VolumeMount,
  IoK8SApiCoreV1ContainerStateRunning,
  IoK8SApiCoreV1ContainerStateTerminated,
  IoK8SApiCoreV1ContainerStateWaiting,
  IoK8SApiCoreV1ContainerState,
  IoK8SApiCoreV1DownwardAPIVolumeFile,
  IoK8SApiCoreV1ObjectFieldSelector,
  IoK8SApiCoreV1ResourceFieldSelector,
  IoK8SApiCoreV1EndpointAddress,
  IoK8SApiCoreV1EndpointPort,
  IoK8SApiCoreV1EndpointSubset,
  IoK8SApiCoreV1Endpoints,
  IoK8SApiCoreV1ConfigMapEnvSource,
  IoK8SApiCoreV1SecretEnvSource,
  IoK8SApiCoreV1EnvVarSource,
  IoK8SApiCoreV1ConfigMapKeySelector,
  IoK8SApiCoreV1SecretKeySelector,
  IoK8SApiCoreV1PersistentVolumeClaimTemplate,
  IoK8SApiCoreV1EventSeries,
  IoK8SApiCoreV1EventSource,
  IoK8SApiCoreV1Event,
  IoK8SApiCoreV1HTTPHeader,
  IoK8SApiCoreV1LifecycleHandler,
  IoK8SApiCoreV1ExecAction,
  IoK8SApiCoreV1HTTPGetAction,
  IoK8SApiCoreV1TCPSocketAction,
  IoK8SApiCoreV1LimitRangeSpec,
  IoK8SApiCoreV1LimitRange,
  IoK8SApiCoreV1LimitRangeItem,
  IoK8SApiCoreV1PortStatus,
  IoK8SApiCoreV1LoadBalancerIngress,
  IoK8SApiCoreV1NamespaceSpec,
  IoK8SApiCoreV1NamespaceStatus,
  IoK8SApiCoreV1Namespace,
  IoK8SApiCoreV1NamespaceCondition,
  IoK8SApiCoreV1NodeSpec,
  IoK8SApiCoreV1NodeStatus,
  IoK8SApiCoreV1PreferredSchedulingTerm,
  IoK8SApiCoreV1NodeSelector,
  IoK8SApiCoreV1ConfigMapNodeConfigSource,
  IoK8SApiCoreV1NodeConfigSource,
  IoK8SApiCoreV1DaemonEndpoint,
  IoK8SApiCoreV1Node,
  IoK8SApiCoreV1NodeSelectorTerm,
  IoK8SApiCoreV1NodeSelectorRequirement,
  IoK8SApiCoreV1Taint,
  IoK8SApiCoreV1NodeAddress,
  IoK8SApiCoreV1NodeCondition,
  IoK8SApiCoreV1NodeConfigStatus,
  IoK8SApiCoreV1NodeDaemonEndpoints,
  IoK8SApiCoreV1ContainerImage,
  IoK8SApiCoreV1NodeSystemInfo,
  IoK8SApiCoreV1AttachedVolume,
  IoK8SApiCoreV1PersistentVolumeSpec,
  IoK8SApiCoreV1PersistentVolumeStatus,
  IoK8SApiCoreV1PersistentVolumeClaimSpec,
  IoK8SApiCoreV1PersistentVolumeClaimStatus,
  IoK8SApiCoreV1TypedLocalObjectReference,
  IoK8SApiCoreV1TypedObjectReference,
  IoK8SApiCoreV1PersistentVolumeClaimCondition,
  IoK8SApiCoreV1PersistentVolume,
  IoK8SApiCoreV1AWSElasticBlockStoreVolumeSource,
  IoK8SApiCoreV1AzureDiskVolumeSource,
  IoK8SApiCoreV1AzureFilePersistentVolumeSource,
  IoK8SApiCoreV1CephFSPersistentVolumeSource,
  IoK8SApiCoreV1CinderPersistentVolumeSource,
  IoK8SApiCoreV1CSIPersistentVolumeSource,
  IoK8SApiCoreV1FCVolumeSource,
  IoK8SApiCoreV1FlexPersistentVolumeSource,
  IoK8SApiCoreV1FlockerVolumeSource,
  IoK8SApiCoreV1GCEPersistentDiskVolumeSource,
  IoK8SApiCoreV1GlusterfsPersistentVolumeSource,
  IoK8SApiCoreV1HostPathVolumeSource,
  IoK8SApiCoreV1ISCSIPersistentVolumeSource,
  IoK8SApiCoreV1LocalVolumeSource,
  IoK8SApiCoreV1NFSVolumeSource,
  IoK8SApiCoreV1VolumeNodeAffinity,
  IoK8SApiCoreV1PhotonPersistentDiskVolumeSource,
  IoK8SApiCoreV1PortworxVolumeSource,
  IoK8SApiCoreV1QuobyteVolumeSource,
  IoK8SApiCoreV1RBDPersistentVolumeSource,
  IoK8SApiCoreV1ScaleIOPersistentVolumeSource,
  IoK8SApiCoreV1StorageOSPersistentVolumeSource,
  IoK8SApiCoreV1VsphereVirtualDiskVolumeSource,
  IoK8SApiCoreV1PodSpec,
  IoK8SApiCoreV1PodStatus,
  IoK8SApiCoreV1WeightedPodAffinityTerm,
  IoK8SApiCoreV1PodAffinityTerm,
  IoK8SApiCoreV1PodDNSConfigOption,
  IoK8SApiCoreV1Pod,
  IoK8SApiCoreV1ClaimSource,
  IoK8SApiCoreV1SELinuxOptions,
  IoK8SApiCoreV1SeccompProfile,
  IoK8SApiCoreV1Sysctl,
  IoK8SApiCoreV1WindowsSecurityContextOptions,
  IoK8SApiCoreV1Affinity,
  IoK8SApiCoreV1Container,
  IoK8SApiCoreV1PodDNSConfig,
  IoK8SApiCoreV1EphemeralContainer,
  IoK8SApiCoreV1HostAlias,
  IoK8SApiCoreV1PodOS,
  IoK8SApiCoreV1PodReadinessGate,
  IoK8SApiCoreV1PodResourceClaim,
  IoK8SApiCoreV1PodSchedulingGate,
  IoK8SApiCoreV1PodSecurityContext,
  IoK8SApiCoreV1Toleration,
  IoK8SApiCoreV1TopologySpreadConstraint,
  IoK8SApiCoreV1Volume,
  IoK8SApiCoreV1PodCondition,
  IoK8SApiCoreV1ContainerStatus,
  IoK8SApiCoreV1PodIP,
  IoK8SApiCoreV1PodTemplate,
  IoK8SApiCoreV1GRPCAction,
  IoK8SApiCoreV1VolumeProjection,
  IoK8SApiCoreV1ReplicationControllerSpec,
  IoK8SApiCoreV1ReplicationControllerStatus,
  IoK8SApiCoreV1ReplicationController,
  IoK8SApiCoreV1ReplicationControllerCondition,
  IoK8SApiCoreV1ResourceQuotaSpec,
  IoK8SApiCoreV1ResourceQuotaStatus,
  IoK8SApiCoreV1ResourceQuota,
  IoK8SApiCoreV1ScopeSelector,
  IoK8SApiCoreV1ResourceClaim,
  IoK8SApiCoreV1ScopedResourceSelectorRequirement,
  IoK8SApiCoreV1Secret,
  IoK8SApiCoreV1Capabilities,
  IoK8SApiCoreV1ServiceSpec,
  IoK8SApiCoreV1ServiceStatus,
  IoK8SApiCoreV1ServiceAccount,
  IoK8SApiCoreV1Service,
  IoK8SApiCoreV1ServicePort,
  IoK8SApiCoreV1SessionAffinityConfig,
  IoK8SApimachineryPkgApisMetaV1Condition,
  IoK8SApiCoreV1LoadBalancerStatus,
  IoK8SApiCoreV1ClientIPConfig,
  IoK8SApiCoreV1TopologySelectorLabelRequirement,
  IoK8SApiCoreV1AzureFileVolumeSource,
  IoK8SApiCoreV1CephFSVolumeSource,
  IoK8SApiCoreV1CinderVolumeSource,
  IoK8SApiCoreV1ConfigMapVolumeSource,
  IoK8SApiCoreV1CSIVolumeSource,
  IoK8SApiCoreV1DownwardAPIVolumeSource,
  IoK8SApiCoreV1EmptyDirVolumeSource,
  IoK8SApiCoreV1EphemeralVolumeSource,
  IoK8SApiCoreV1FlexVolumeSource,
  IoK8SApiCoreV1GitRepoVolumeSource,
  IoK8SApiCoreV1GlusterfsVolumeSource,
  IoK8SApiCoreV1ISCSIVolumeSource,
  IoK8SApiCoreV1PersistentVolumeClaimVolumeSource,
  IoK8SApiCoreV1ProjectedVolumeSource,
  IoK8SApiCoreV1RBDVolumeSource,
  IoK8SApiCoreV1ScaleIOVolumeSource,
  IoK8SApiCoreV1SecretVolumeSource,
  IoK8SApiCoreV1StorageOSVolumeSource,
  IoK8SApiCoreV1ConfigMapProjection,
  IoK8SApiCoreV1DownwardAPIProjection,
  IoK8SApiCoreV1SecretProjection,
  IoK8SApiCoreV1ServiceAccountTokenProjection,
  IoK8SApiDiscoveryV1EndpointConditions,
  IoK8SApiDiscoveryV1EndpointHints,
  IoK8SApiDiscoveryV1ForZone,
  IoK8SApiDiscoveryV1Endpoint,
  IoK8SApiDiscoveryV1EndpointPort,
  IoK8SApiDiscoveryV1EndpointSlice,
  IoK8SApiEventsV1EventSeries,
  IoK8SApiEventsV1Event,
  IoK8SApiFlowcontrolV1Beta2FlowSchemaSpec,
  IoK8SApiFlowcontrolV1Beta2FlowSchemaStatus,
  IoK8SApiFlowcontrolV1Beta2FlowSchema,
  IoK8SApiFlowcontrolV1Beta2FlowDistinguisherMethod,
  IoK8SApiFlowcontrolV1Beta2PriorityLevelConfigurationReference,
  IoK8SApiFlowcontrolV1Beta2PolicyRulesWithSubjects,
  IoK8SApiFlowcontrolV1Beta2FlowSchemaCondition,
  IoK8SApiFlowcontrolV1Beta2QueuingConfiguration,
  IoK8SApiFlowcontrolV1Beta2LimitResponse,
  IoK8SApiFlowcontrolV1Beta2NonResourcePolicyRule,
  IoK8SApiFlowcontrolV1Beta2ResourcePolicyRule,
  IoK8SApiFlowcontrolV1Beta2Subject,
  IoK8SApiFlowcontrolV1Beta2PriorityLevelConfigurationSpec,
  IoK8SApiFlowcontrolV1Beta2PriorityLevelConfigurationStatus,
  IoK8SApiFlowcontrolV1Beta2PriorityLevelConfiguration,
  IoK8SApiFlowcontrolV1Beta2LimitedPriorityLevelConfiguration,
  IoK8SApiFlowcontrolV1Beta2PriorityLevelConfigurationCondition,
  IoK8SApiFlowcontrolV1Beta2GroupSubject,
  IoK8SApiFlowcontrolV1Beta2ServiceAccountSubject,
  IoK8SApiFlowcontrolV1Beta2UserSubject,
  IoK8SApiFlowcontrolV1Beta3FlowSchemaSpec,
  IoK8SApiFlowcontrolV1Beta3FlowSchemaStatus,
  IoK8SApiFlowcontrolV1Beta3FlowSchema,
  IoK8SApiFlowcontrolV1Beta3FlowDistinguisherMethod,
  IoK8SApiFlowcontrolV1Beta3PriorityLevelConfigurationReference,
  IoK8SApiFlowcontrolV1Beta3PolicyRulesWithSubjects,
  IoK8SApiFlowcontrolV1Beta3FlowSchemaCondition,
  IoK8SApiFlowcontrolV1Beta3QueuingConfiguration,
  IoK8SApiFlowcontrolV1Beta3LimitResponse,
  IoK8SApiFlowcontrolV1Beta3NonResourcePolicyRule,
  IoK8SApiFlowcontrolV1Beta3ResourcePolicyRule,
  IoK8SApiFlowcontrolV1Beta3Subject,
  IoK8SApiFlowcontrolV1Beta3PriorityLevelConfigurationSpec,
  IoK8SApiFlowcontrolV1Beta3PriorityLevelConfigurationStatus,
  IoK8SApiFlowcontrolV1Beta3PriorityLevelConfiguration,
  IoK8SApiFlowcontrolV1Beta3LimitedPriorityLevelConfiguration,
  IoK8SApiFlowcontrolV1Beta3PriorityLevelConfigurationCondition,
  IoK8SApiFlowcontrolV1Beta3GroupSubject,
  IoK8SApiFlowcontrolV1Beta3ServiceAccountSubject,
  IoK8SApiFlowcontrolV1Beta3UserSubject,
  IoK8SApiNetworkingV1IngressBackend,
  IoK8SApiNetworkingV1HTTPIngressPath,
  IoK8SApiNetworkingV1IngressSpec,
  IoK8SApiNetworkingV1IngressStatus,
  IoK8SApiNetworkingV1IngressServiceBackend,
  IoK8SApiNetworkingV1IngressClassSpec,
  IoK8SApiNetworkingV1IngressClass,
  IoK8SApiNetworkingV1IngressClassParametersReference,
  IoK8SApiNetworkingV1Ingress,
  IoK8SApiNetworkingV1IngressPortStatus,
  IoK8SApiNetworkingV1IngressLoadBalancerIngress,
  IoK8SApiNetworkingV1HTTPIngressRuleValue,
  IoK8SApiNetworkingV1ServiceBackendPort,
  IoK8SApiNetworkingV1IngressRule,
  IoK8SApiNetworkingV1IngressTLS,
  IoK8SApiNetworkingV1IngressLoadBalancerStatus,
  IoK8SApiNetworkingV1NetworkPolicySpec,
  IoK8SApiNetworkingV1NetworkPolicyStatus,
  IoK8SApiNetworkingV1NetworkPolicyPort,
  IoK8SApiNetworkingV1NetworkPolicyPeer,
  IoK8SApiNetworkingV1NetworkPolicy,
  IoK8SApiNetworkingV1IPBlock,
  IoK8SApiNetworkingV1NetworkPolicyEgressRule,
  IoK8SApiNetworkingV1NetworkPolicyIngressRule,
  IoK8SApiNetworkingV1Alpha1ClusterCIDRSpec,
  IoK8SApiNetworkingV1Alpha1ClusterCIDR,
  IoK8SApiNodeV1Overhead,
  IoK8SApiNodeV1Scheduling,
  IoK8SApiNodeV1RuntimeClass,
  IoK8SApimachineryPkgApisMetaV1DeleteOptions,
  IoK8SApiPolicyV1PodDisruptionBudgetSpec,
  IoK8SApiPolicyV1PodDisruptionBudgetStatus,
  IoK8SApiPolicyV1PodDisruptionBudget,
  IoK8SApiRbacV1AggregationRule,
  IoK8SApiRbacV1PolicyRule,
  IoK8SApiRbacV1RoleRef,
  IoK8SApiRbacV1Subject,
  IoK8SApiRbacV1ClusterRoleBinding,
  IoK8SApiRbacV1ClusterRole,
  IoK8SApiRbacV1RoleBinding,
  IoK8SApiRbacV1Role,
  IoK8SApiResourceV1Alpha1PodSchedulingSpec,
  IoK8SApiResourceV1Alpha1PodSchedulingStatus,
  IoK8SApiResourceV1Alpha1PodScheduling,
  IoK8SApiResourceV1Alpha1ResourceClaimSchedulingStatus,
  IoK8SApiResourceV1Alpha1ResourceClaimSpec,
  IoK8SApiResourceV1Alpha1ResourceClaimStatus,
  IoK8SApiResourceV1Alpha1ResourceClaim,
  IoK8SApiResourceV1Alpha1ResourceClaimParametersReference,
  IoK8SApiResourceV1Alpha1AllocationResult,
  IoK8SApiResourceV1Alpha1ResourceClaimConsumerReference,
  IoK8SApiResourceV1Alpha1ResourceClaimTemplateSpec,
  IoK8SApiResourceV1Alpha1ResourceClaimTemplate,
  IoK8SApiResourceV1Alpha1ResourceClassParametersReference,
  IoK8SApiResourceV1Alpha1ResourceClass,
  IoK8SApiSchedulingV1PriorityClass,
  IoK8SApiStorageV1CSIDriverSpec,
  IoK8SApiStorageV1CSIDriver,
  IoK8SApiStorageV1TokenRequest,
  IoK8SApiStorageV1CSINodeSpec,
  IoK8SApiStorageV1VolumeNodeResources,
  IoK8SApiStorageV1CSINode,
  IoK8SApiStorageV1CSINodeDriver,
  IoK8SApiStorageV1CSIStorageCapacity,
  IoK8SApiCoreV1TopologySelectorTerm,
  IoK8SApiStorageV1StorageClass,
  IoK8SApiStorageV1VolumeAttachmentSpec,
  IoK8SApiStorageV1VolumeAttachmentStatus,
  IoK8SApiStorageV1VolumeAttachment,
  IoK8SApiStorageV1VolumeAttachmentSource,
  IoK8SApiStorageV1VolumeError,
  IoK8SApiStorageV1Beta1CSIStorageCapacity,
  IoK8SApiextensionsApiserverPkgApisApiextensionsV1WebhookConversion,
  IoK8SApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionSpec,
  IoK8SApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionStatus,
  IoK8SApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition,
  IoK8SApiextensionsApiserverPkgApisApiextensionsV1CustomResourceConversion,
  IoK8SApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionNames,
  IoK8SApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionVersion,
  IoK8SApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionCondition,
  IoK8SApiextensionsApiserverPkgApisApiextensionsV1CustomResourceColumnDefinition,
  IoK8SApiextensionsApiserverPkgApisApiextensionsV1CustomResourceValidation,
  IoK8SApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresources,
  IoK8SApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceScale,
  IoK8SApiextensionsApiserverPkgApisApiextensionsV1CustomResourceSubresourceStatus,
  IoK8SApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaProps,
  IoK8SApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrBool,
  IoK8SApiextensionsApiserverPkgApisApiextensionsV1JSON,
  IoK8SApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrStringArray,
  IoK8SApiextensionsApiserverPkgApisApiextensionsV1ExternalDocumentation,
  IoK8SApiextensionsApiserverPkgApisApiextensionsV1JSONSchemaPropsOrArray,
  IoK8SApiextensionsApiserverPkgApisApiextensionsV1ValidationRule,
  IoK8SApiextensionsApiserverPkgApisApiextensionsV1ServiceReference,
  IoK8SApiextensionsApiserverPkgApisApiextensionsV1WebhookClientConfig,
  IoK8SApimachineryPkgApisMetaV1GroupVersionForDiscovery,
  IoK8SApimachineryPkgApisMetaV1ServerAddressByClientCIDR,
  IoK8SApimachineryPkgApisMetaV1APIGroup,
  IoK8SApimachineryPkgApisMetaV1APIResource,
  IoK8SApimachineryPkgApisMetaV1Preconditions,
  IoK8SApimachineryPkgApisMetaV1LabelSelectorRequirement,
  IoK8SApimachineryPkgApisMetaV1FieldsV1,
  IoK8SApimachineryPkgApisMetaV1ManagedFieldsEntry,
  IoK8SApimachineryPkgApisMetaV1OwnerReference,
  IoK8SApimachineryPkgApisMetaV1StatusDetails,
  IoK8SApimachineryPkgApisMetaV1StatusCause,
  IoK8SKubeAggregatorPkgApisApiregistrationV1APIServiceSpec,
  IoK8SKubeAggregatorPkgApisApiregistrationV1APIServiceStatus,
  IoK8SKubeAggregatorPkgApisApiregistrationV1APIService,
  IoK8SKubeAggregatorPkgApisApiregistrationV1ServiceReference,
  IoK8SKubeAggregatorPkgApisApiregistrationV1APIServiceCondition,
  IoK8SApiAdmissionregistrationV1MutatingWebhookConfigurationList,
  IoK8SApiAdmissionregistrationV1ValidatingWebhookConfigurationList,
  IoK8SApiAdmissionregistrationV1Alpha1ValidatingAdmissionPolicyBindingList,
  IoK8SApiAdmissionregistrationV1Alpha1ValidatingAdmissionPolicyList,
  IoK8SApiApiserverinternalV1Alpha1StorageVersionList,
  IoK8SApiAppsV1ControllerRevisionList,
  IoK8SApiAppsV1DaemonSetList,
  IoK8SApiAppsV1DeploymentList,
  IoK8SApiAppsV1ReplicaSetList,
  IoK8SApiAppsV1StatefulSetList,
  IoK8SApiAuthenticationV1TokenRequest,
  IoK8SApiAuthenticationV1TokenReview,
  IoK8SApiAuthenticationV1Alpha1SelfSubjectReview,
  IoK8SApiAuthorizationV1LocalSubjectAccessReview,
  IoK8SApiAuthorizationV1SelfSubjectAccessReview,
  IoK8SApiAuthorizationV1SelfSubjectRulesReview,
  IoK8SApiAuthorizationV1SubjectAccessReview,
  IoK8SApiAutoscalingV1HorizontalPodAutoscalerList,
  IoK8SApiAutoscalingV1Scale,
  IoK8SApiAutoscalingV2HorizontalPodAutoscalerList,
  IoK8SApiBatchV1CronJobList,
  IoK8SApiBatchV1JobList,
  IoK8SApiCertificatesV1CertificateSigningRequestList,
  IoK8SApiCoordinationV1LeaseList,
  IoK8SApiCoreV1Binding,
  IoK8SApiCoreV1ComponentStatusList,
  IoK8SApiCoreV1ConfigMapList,
  IoK8SApiCoreV1EndpointsList,
  IoK8SApiCoreV1EventList,
  IoK8SApiCoreV1LimitRangeList,
  IoK8SApiCoreV1NamespaceList,
  IoK8SApiCoreV1NodeList,
  IoK8SApiCoreV1PersistentVolumeClaimList,
  IoK8SApiCoreV1PersistentVolumeList,
  IoK8SApiCoreV1PodList,
  IoK8SApiCoreV1PodTemplateList,
  IoK8SApiCoreV1ReplicationControllerList,
  IoK8SApiCoreV1ResourceQuotaList,
  IoK8SApiCoreV1SecretList,
  IoK8SApiCoreV1ServiceAccountList,
  IoK8SApiCoreV1ServiceList,
  IoK8SApiDiscoveryV1EndpointSliceList,
  IoK8SApiEventsV1EventList,
  IoK8SApiFlowcontrolV1Beta2FlowSchemaList,
  IoK8SApiFlowcontrolV1Beta2PriorityLevelConfigurationList,
  IoK8SApiFlowcontrolV1Beta3FlowSchemaList,
  IoK8SApiFlowcontrolV1Beta3PriorityLevelConfigurationList,
  IoK8SApiNetworkingV1IngressClassList,
  IoK8SApiNetworkingV1IngressList,
  IoK8SApiNetworkingV1NetworkPolicyList,
  IoK8SApiNetworkingV1Alpha1ClusterCIDRList,
  IoK8SApiNodeV1RuntimeClassList,
  IoK8SApiPolicyV1Eviction,
  IoK8SApiPolicyV1PodDisruptionBudgetList,
  IoK8SApiRbacV1ClusterRoleBindingList,
  IoK8SApiRbacV1ClusterRoleList,
  IoK8SApiRbacV1RoleBindingList,
  IoK8SApiRbacV1RoleList,
  IoK8SApiResourceV1Alpha1PodSchedulingList,
  IoK8SApiResourceV1Alpha1ResourceClaimList,
  IoK8SApiResourceV1Alpha1ResourceClaimTemplateList,
  IoK8SApiResourceV1Alpha1ResourceClassList,
  IoK8SApiSchedulingV1PriorityClassList,
  IoK8SApiStorageV1CSIDriverList,
  IoK8SApiStorageV1CSINodeList,
  IoK8SApiStorageV1CSIStorageCapacityList,
  IoK8SApiStorageV1StorageClassList,
  IoK8SApiStorageV1VolumeAttachmentList,
  IoK8SApiStorageV1Beta1CSIStorageCapacityList,
  IoK8SApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList,
  IoK8SApimachineryPkgApisMetaV1APIGroupList,
  IoK8SApimachineryPkgApisMetaV1APIResourceList,
  IoK8SApimachineryPkgApisMetaV1APIVersions,
  IoK8SApimachineryPkgApisMetaV1Patch,
  IoK8SApimachineryPkgApisMetaV1Status,
  IoK8SApimachineryPkgApisMetaV1WatchEvent,
  IoK8SApimachineryPkgVersionInfo,
  IoK8SKubeAggregatorPkgApisApiregistrationV1APIServiceList,
  Api,
} from "./api";
import * as hasuraSdk from "@hasura/ndc-lambda-sdk";

const api = new Api({
  baseUrl: "http://localhost:9191",
});

/**
 * undefined
 * @request GET :/.well-known/openid-configuration/
 * @readonly
 */
export async function getWellKnownGetServiceAccountIssuerOpenIdConfiguration(): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.wellKnown.getServiceAccountIssuerOpenIdConfiguration(
    {},
  );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/
 * @readonly
 */
export async function getApiGetCoreApiVersions(): Promise<IoK8SApimachineryPkgApisMetaV1APIVersions> {
  const result = await api.api.getCoreApiVersions({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/
 * @readonly
 */
export async function getApiGetCoreV1ApiResources(): Promise<IoK8SApimachineryPkgApisMetaV1APIResourceList> {
  const result = await api.api.getCoreV1ApiResources({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/componentstatuses
 * @readonly
 */
export async function getApiListCoreV1ComponentStatus(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiCoreV1ComponentStatusList> {
  const result = await api.api.listCoreV1ComponentStatus({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/componentstatuses/{name}
 * @readonly
 */
export async function getApiReadCoreV1ComponentStatus(
  query: { pretty?: string },
  name: string,
): Promise<IoK8SApiCoreV1ComponentStatus> {
  const result = await api.api.readCoreV1ComponentStatus({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/configmaps
 * @readonly
 */
export async function getApiListCoreV1ConfigMapForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiCoreV1ConfigMapList> {
  const result = await api.api.listCoreV1ConfigMapForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/endpoints
 * @readonly
 */
export async function getApiListCoreV1EndpointsForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiCoreV1EndpointsList> {
  const result = await api.api.listCoreV1EndpointsForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/events
 * @readonly
 */
export async function getApiListCoreV1EventForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiCoreV1EventList> {
  const result = await api.api.listCoreV1EventForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/limitranges
 * @readonly
 */
export async function getApiListCoreV1LimitRangeForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiCoreV1LimitRangeList> {
  const result = await api.api.listCoreV1LimitRangeForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/namespaces
 * @readonly
 */
export async function getApiListCoreV1Namespace(query: {
  pretty?: string;
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiCoreV1NamespaceList> {
  const result = await api.api.listCoreV1Namespace({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/api/v1/namespaces
 */
export async function postApiCreateCoreV1Namespace(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  /** Request body */
  body: IoK8SApiCoreV1Namespace,
): Promise<IoK8SApiCoreV1Namespace> {
  const result = await api.api.createCoreV1Namespace({
    query: query,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/api/v1/namespaces/{namespace}/bindings
 */
export async function postApiCreateCoreV1NamespacedBinding(
  query: {
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    pretty?: string;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApiCoreV1Binding,
): Promise<IoK8SApiCoreV1Binding> {
  const result = await api.api.createCoreV1NamespacedBinding({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/api/v1/namespaces/{namespace}/configmaps
 */
export async function deleteApiDeleteCoreV1CollectionNamespacedConfigMap(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.api.deleteCoreV1CollectionNamespacedConfigMap({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/namespaces/{namespace}/configmaps
 * @readonly
 */
export async function getApiListCoreV1NamespacedConfigMap(
  query: {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApiCoreV1ConfigMapList> {
  const result = await api.api.listCoreV1NamespacedConfigMap({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/api/v1/namespaces/{namespace}/configmaps
 */
export async function postApiCreateCoreV1NamespacedConfigMap(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApiCoreV1ConfigMap,
): Promise<IoK8SApiCoreV1ConfigMap> {
  const result = await api.api.createCoreV1NamespacedConfigMap({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/api/v1/namespaces/{namespace}/configmaps/{name}
 */
export async function deleteApiDeleteCoreV1NamespacedConfigMap(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.api.deleteCoreV1NamespacedConfigMap({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/namespaces/{namespace}/configmaps/{name}
 * @readonly
 */
export async function getApiReadCoreV1NamespacedConfigMap(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiCoreV1ConfigMap> {
  const result = await api.api.readCoreV1NamespacedConfigMap({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/api/v1/namespaces/{namespace}/configmaps/{name}
 */
export async function patchApiPatchCoreV1NamespacedConfigMap(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiCoreV1ConfigMap> {
  const result = await api.api.patchCoreV1NamespacedConfigMap({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/api/v1/namespaces/{namespace}/configmaps/{name}
 */
export async function putApiReplaceCoreV1NamespacedConfigMap(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiCoreV1ConfigMap,
): Promise<IoK8SApiCoreV1ConfigMap> {
  const result = await api.api.replaceCoreV1NamespacedConfigMap({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/api/v1/namespaces/{namespace}/endpoints
 */
export async function deleteApiDeleteCoreV1CollectionNamespacedEndpoints(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.api.deleteCoreV1CollectionNamespacedEndpoints({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/namespaces/{namespace}/endpoints
 * @readonly
 */
export async function getApiListCoreV1NamespacedEndpoints(
  query: {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApiCoreV1EndpointsList> {
  const result = await api.api.listCoreV1NamespacedEndpoints({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/api/v1/namespaces/{namespace}/endpoints
 */
export async function postApiCreateCoreV1NamespacedEndpoints(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApiCoreV1Endpoints,
): Promise<IoK8SApiCoreV1Endpoints> {
  const result = await api.api.createCoreV1NamespacedEndpoints({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/api/v1/namespaces/{namespace}/endpoints/{name}
 */
export async function deleteApiDeleteCoreV1NamespacedEndpoints(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.api.deleteCoreV1NamespacedEndpoints({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/namespaces/{namespace}/endpoints/{name}
 * @readonly
 */
export async function getApiReadCoreV1NamespacedEndpoints(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiCoreV1Endpoints> {
  const result = await api.api.readCoreV1NamespacedEndpoints({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/api/v1/namespaces/{namespace}/endpoints/{name}
 */
export async function patchApiPatchCoreV1NamespacedEndpoints(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiCoreV1Endpoints> {
  const result = await api.api.patchCoreV1NamespacedEndpoints({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/api/v1/namespaces/{namespace}/endpoints/{name}
 */
export async function putApiReplaceCoreV1NamespacedEndpoints(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiCoreV1Endpoints,
): Promise<IoK8SApiCoreV1Endpoints> {
  const result = await api.api.replaceCoreV1NamespacedEndpoints({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/api/v1/namespaces/{namespace}/events
 */
export async function deleteApiDeleteCoreV1CollectionNamespacedEvent(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.api.deleteCoreV1CollectionNamespacedEvent({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/namespaces/{namespace}/events
 * @readonly
 */
export async function getApiListCoreV1NamespacedEvent(
  query: {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApiCoreV1EventList> {
  const result = await api.api.listCoreV1NamespacedEvent({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/api/v1/namespaces/{namespace}/events
 */
export async function postApiCreateCoreV1NamespacedEvent(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApiCoreV1Event,
): Promise<IoK8SApiCoreV1Event> {
  const result = await api.api.createCoreV1NamespacedEvent({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/api/v1/namespaces/{namespace}/events/{name}
 */
export async function deleteApiDeleteCoreV1NamespacedEvent(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.api.deleteCoreV1NamespacedEvent({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/namespaces/{namespace}/events/{name}
 * @readonly
 */
export async function getApiReadCoreV1NamespacedEvent(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiCoreV1Event> {
  const result = await api.api.readCoreV1NamespacedEvent({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/api/v1/namespaces/{namespace}/events/{name}
 */
export async function patchApiPatchCoreV1NamespacedEvent(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiCoreV1Event> {
  const result = await api.api.patchCoreV1NamespacedEvent({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/api/v1/namespaces/{namespace}/events/{name}
 */
export async function putApiReplaceCoreV1NamespacedEvent(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiCoreV1Event,
): Promise<IoK8SApiCoreV1Event> {
  const result = await api.api.replaceCoreV1NamespacedEvent({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/api/v1/namespaces/{namespace}/limitranges
 */
export async function deleteApiDeleteCoreV1CollectionNamespacedLimitRange(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.api.deleteCoreV1CollectionNamespacedLimitRange({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/namespaces/{namespace}/limitranges
 * @readonly
 */
export async function getApiListCoreV1NamespacedLimitRange(
  query: {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApiCoreV1LimitRangeList> {
  const result = await api.api.listCoreV1NamespacedLimitRange({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/api/v1/namespaces/{namespace}/limitranges
 */
export async function postApiCreateCoreV1NamespacedLimitRange(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApiCoreV1LimitRange,
): Promise<IoK8SApiCoreV1LimitRange> {
  const result = await api.api.createCoreV1NamespacedLimitRange({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/api/v1/namespaces/{namespace}/limitranges/{name}
 */
export async function deleteApiDeleteCoreV1NamespacedLimitRange(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.api.deleteCoreV1NamespacedLimitRange({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/namespaces/{namespace}/limitranges/{name}
 * @readonly
 */
export async function getApiReadCoreV1NamespacedLimitRange(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiCoreV1LimitRange> {
  const result = await api.api.readCoreV1NamespacedLimitRange({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/api/v1/namespaces/{namespace}/limitranges/{name}
 */
export async function patchApiPatchCoreV1NamespacedLimitRange(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiCoreV1LimitRange> {
  const result = await api.api.patchCoreV1NamespacedLimitRange({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/api/v1/namespaces/{namespace}/limitranges/{name}
 */
export async function putApiReplaceCoreV1NamespacedLimitRange(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiCoreV1LimitRange,
): Promise<IoK8SApiCoreV1LimitRange> {
  const result = await api.api.replaceCoreV1NamespacedLimitRange({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/api/v1/namespaces/{namespace}/persistentvolumeclaims
 */
export async function deleteApiDeleteCoreV1CollectionNamespacedPersistentVolumeClaim(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result =
    await api.api.deleteCoreV1CollectionNamespacedPersistentVolumeClaim({
      query: query,
      namespace: namespace,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/namespaces/{namespace}/persistentvolumeclaims
 * @readonly
 */
export async function getApiListCoreV1NamespacedPersistentVolumeClaim(
  query: {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApiCoreV1PersistentVolumeClaimList> {
  const result = await api.api.listCoreV1NamespacedPersistentVolumeClaim({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/api/v1/namespaces/{namespace}/persistentvolumeclaims
 */
export async function postApiCreateCoreV1NamespacedPersistentVolumeClaim(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApiCoreV1PersistentVolumeClaim,
): Promise<IoK8SApiCoreV1PersistentVolumeClaim> {
  const result = await api.api.createCoreV1NamespacedPersistentVolumeClaim({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}
 */
export async function deleteApiDeleteCoreV1NamespacedPersistentVolumeClaim(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApiCoreV1PersistentVolumeClaim> {
  const result = await api.api.deleteCoreV1NamespacedPersistentVolumeClaim({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}
 * @readonly
 */
export async function getApiReadCoreV1NamespacedPersistentVolumeClaim(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiCoreV1PersistentVolumeClaim> {
  const result = await api.api.readCoreV1NamespacedPersistentVolumeClaim({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}
 */
export async function patchApiPatchCoreV1NamespacedPersistentVolumeClaim(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiCoreV1PersistentVolumeClaim> {
  const result = await api.api.patchCoreV1NamespacedPersistentVolumeClaim({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}
 */
export async function putApiReplaceCoreV1NamespacedPersistentVolumeClaim(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiCoreV1PersistentVolumeClaim,
): Promise<IoK8SApiCoreV1PersistentVolumeClaim> {
  const result = await api.api.replaceCoreV1NamespacedPersistentVolumeClaim({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status
 * @readonly
 */
export async function getApiReadCoreV1NamespacedPersistentVolumeClaimStatus(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiCoreV1PersistentVolumeClaim> {
  const result = await api.api.readCoreV1NamespacedPersistentVolumeClaimStatus({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status
 */
export async function patchApiPatchCoreV1NamespacedPersistentVolumeClaimStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiCoreV1PersistentVolumeClaim> {
  const result = await api.api.patchCoreV1NamespacedPersistentVolumeClaimStatus(
    {
      query: query,
      name: name,
      namespace: namespace,
      body: body,
    },
  );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status
 */
export async function putApiReplaceCoreV1NamespacedPersistentVolumeClaimStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiCoreV1PersistentVolumeClaim,
): Promise<IoK8SApiCoreV1PersistentVolumeClaim> {
  const result =
    await api.api.replaceCoreV1NamespacedPersistentVolumeClaimStatus({
      query: query,
      name: name,
      namespace: namespace,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/api/v1/namespaces/{namespace}/pods
 */
export async function deleteApiDeleteCoreV1CollectionNamespacedPod(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.api.deleteCoreV1CollectionNamespacedPod({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/namespaces/{namespace}/pods
 * @readonly
 */
export async function getApiListCoreV1NamespacedPod(
  query: {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApiCoreV1PodList> {
  const result = await api.api.listCoreV1NamespacedPod({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/api/v1/namespaces/{namespace}/pods
 */
export async function postApiCreateCoreV1NamespacedPod(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApiCoreV1Pod,
): Promise<IoK8SApiCoreV1Pod> {
  const result = await api.api.createCoreV1NamespacedPod({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/api/v1/namespaces/{namespace}/pods/{name}
 */
export async function deleteApiDeleteCoreV1NamespacedPod(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApiCoreV1Pod> {
  const result = await api.api.deleteCoreV1NamespacedPod({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/namespaces/{namespace}/pods/{name}
 * @readonly
 */
export async function getApiReadCoreV1NamespacedPod(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiCoreV1Pod> {
  const result = await api.api.readCoreV1NamespacedPod({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/api/v1/namespaces/{namespace}/pods/{name}
 */
export async function patchApiPatchCoreV1NamespacedPod(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiCoreV1Pod> {
  const result = await api.api.patchCoreV1NamespacedPod({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/api/v1/namespaces/{namespace}/pods/{name}
 */
export async function putApiReplaceCoreV1NamespacedPod(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiCoreV1Pod,
): Promise<IoK8SApiCoreV1Pod> {
  const result = await api.api.replaceCoreV1NamespacedPod({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/namespaces/{namespace}/pods/{name}/attach
 * @readonly
 */
export async function getApiConnectCoreV1GetNamespacedPodAttach(
  query: {
    container?: string;
    stderr?: boolean;
    stdin?: boolean;
    stdout?: boolean;
    tty?: boolean;
  },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1GetNamespacedPodAttach({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/api/v1/namespaces/{namespace}/pods/{name}/attach
 */
export async function postApiConnectCoreV1PostNamespacedPodAttach(
  query: {
    container?: string;
    stderr?: boolean;
    stdin?: boolean;
    stdout?: boolean;
    tty?: boolean;
  },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1PostNamespacedPodAttach({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/api/v1/namespaces/{namespace}/pods/{name}/binding
 */
export async function postApiCreateCoreV1NamespacedPodBinding(
  query: {
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    pretty?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiCoreV1Binding,
): Promise<IoK8SApiCoreV1Binding> {
  const result = await api.api.createCoreV1NamespacedPodBinding({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/namespaces/{namespace}/pods/{name}/ephemeralcontainers
 * @readonly
 */
export async function getApiReadCoreV1NamespacedPodEphemeralcontainers(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiCoreV1Pod> {
  const result = await api.api.readCoreV1NamespacedPodEphemeralcontainers({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/api/v1/namespaces/{namespace}/pods/{name}/ephemeralcontainers
 */
export async function patchApiPatchCoreV1NamespacedPodEphemeralcontainers(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiCoreV1Pod> {
  const result = await api.api.patchCoreV1NamespacedPodEphemeralcontainers({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/api/v1/namespaces/{namespace}/pods/{name}/ephemeralcontainers
 */
export async function putApiReplaceCoreV1NamespacedPodEphemeralcontainers(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiCoreV1Pod,
): Promise<IoK8SApiCoreV1Pod> {
  const result = await api.api.replaceCoreV1NamespacedPodEphemeralcontainers({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/api/v1/namespaces/{namespace}/pods/{name}/eviction
 */
export async function postApiCreateCoreV1NamespacedPodEviction(
  query: {
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    pretty?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiPolicyV1Eviction,
): Promise<IoK8SApiPolicyV1Eviction> {
  const result = await api.api.createCoreV1NamespacedPodEviction({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/namespaces/{namespace}/pods/{name}/exec
 * @readonly
 */
export async function getApiConnectCoreV1GetNamespacedPodExec(
  query: {
    command?: string;
    container?: string;
    stderr?: boolean;
    stdin?: boolean;
    stdout?: boolean;
    tty?: boolean;
  },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1GetNamespacedPodExec({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/api/v1/namespaces/{namespace}/pods/{name}/exec
 */
export async function postApiConnectCoreV1PostNamespacedPodExec(
  query: {
    command?: string;
    container?: string;
    stderr?: boolean;
    stdin?: boolean;
    stdout?: boolean;
    tty?: boolean;
  },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1PostNamespacedPodExec({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/namespaces/{namespace}/pods/{name}/log
 * @readonly
 */
export async function getApiReadCoreV1NamespacedPodLog(
  query: {
    container?: string;
    follow?: boolean;
    insecureSkipTLSVerifyBackend?: boolean;
    limitBytes?: number;
    pretty?: string;
    previous?: boolean;
    sinceSeconds?: number;
    tailLines?: number;
    timestamps?: boolean;
  },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.readCoreV1NamespacedPodLog({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/namespaces/{namespace}/pods/{name}/portforward
 * @readonly
 */
export async function getApiConnectCoreV1GetNamespacedPodPortforward(
  query: { ports?: number },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1GetNamespacedPodPortforward({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/api/v1/namespaces/{namespace}/pods/{name}/portforward
 */
export async function postApiConnectCoreV1PostNamespacedPodPortforward(
  query: { ports?: number },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1PostNamespacedPodPortforward({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/api/v1/namespaces/{namespace}/pods/{name}/proxy
 */
export async function deleteApiConnectCoreV1DeleteNamespacedPodProxy(
  query: { path?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1DeleteNamespacedPodProxy({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/namespaces/{namespace}/pods/{name}/proxy
 * @readonly
 */
export async function getApiConnectCoreV1GetNamespacedPodProxy(
  query: { path?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1GetNamespacedPodProxy({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request HEAD :/api/v1/namespaces/{namespace}/pods/{name}/proxy
 */
export async function headApiConnectCoreV1HeadNamespacedPodProxy(
  query: { path?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1HeadNamespacedPodProxy({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request OPTIONS :/api/v1/namespaces/{namespace}/pods/{name}/proxy
 */
export async function optionsApiConnectCoreV1OptionsNamespacedPodProxy(
  query: { path?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1OptionsNamespacedPodProxy({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/api/v1/namespaces/{namespace}/pods/{name}/proxy
 */
export async function patchApiConnectCoreV1PatchNamespacedPodProxy(
  query: { path?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1PatchNamespacedPodProxy({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/api/v1/namespaces/{namespace}/pods/{name}/proxy
 */
export async function postApiConnectCoreV1PostNamespacedPodProxy(
  query: { path?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1PostNamespacedPodProxy({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/api/v1/namespaces/{namespace}/pods/{name}/proxy
 */
export async function putApiConnectCoreV1PutNamespacedPodProxy(
  query: { path?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1PutNamespacedPodProxy({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}
 */
export async function deleteApiConnectCoreV1DeleteNamespacedPodProxyWithPath(
  query: { path?: string },
  name: string,
  namespace: string,
  path: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1DeleteNamespacedPodProxyWithPath({
    query: query,
    name: name,
    namespace: namespace,
    path: path,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}
 * @readonly
 */
export async function getApiConnectCoreV1GetNamespacedPodProxyWithPath(
  query: { path?: string },
  name: string,
  namespace: string,
  path: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1GetNamespacedPodProxyWithPath({
    query: query,
    name: name,
    namespace: namespace,
    path: path,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request HEAD :/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}
 */
export async function headApiConnectCoreV1HeadNamespacedPodProxyWithPath(
  query: { path?: string },
  name: string,
  namespace: string,
  path: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1HeadNamespacedPodProxyWithPath({
    query: query,
    name: name,
    namespace: namespace,
    path: path,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request OPTIONS :/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}
 */
export async function optionsApiConnectCoreV1OptionsNamespacedPodProxyWithPath(
  query: { path?: string },
  name: string,
  namespace: string,
  path: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1OptionsNamespacedPodProxyWithPath({
    query: query,
    name: name,
    namespace: namespace,
    path: path,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}
 */
export async function patchApiConnectCoreV1PatchNamespacedPodProxyWithPath(
  query: { path?: string },
  name: string,
  namespace: string,
  path: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1PatchNamespacedPodProxyWithPath({
    query: query,
    name: name,
    namespace: namespace,
    path: path,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}
 */
export async function postApiConnectCoreV1PostNamespacedPodProxyWithPath(
  query: { path?: string },
  name: string,
  namespace: string,
  path: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1PostNamespacedPodProxyWithPath({
    query: query,
    name: name,
    namespace: namespace,
    path: path,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}
 */
export async function putApiConnectCoreV1PutNamespacedPodProxyWithPath(
  query: { path?: string },
  name: string,
  namespace: string,
  path: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1PutNamespacedPodProxyWithPath({
    query: query,
    name: name,
    namespace: namespace,
    path: path,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/namespaces/{namespace}/pods/{name}/status
 * @readonly
 */
export async function getApiReadCoreV1NamespacedPodStatus(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiCoreV1Pod> {
  const result = await api.api.readCoreV1NamespacedPodStatus({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/api/v1/namespaces/{namespace}/pods/{name}/status
 */
export async function patchApiPatchCoreV1NamespacedPodStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiCoreV1Pod> {
  const result = await api.api.patchCoreV1NamespacedPodStatus({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/api/v1/namespaces/{namespace}/pods/{name}/status
 */
export async function putApiReplaceCoreV1NamespacedPodStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiCoreV1Pod,
): Promise<IoK8SApiCoreV1Pod> {
  const result = await api.api.replaceCoreV1NamespacedPodStatus({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/api/v1/namespaces/{namespace}/podtemplates
 */
export async function deleteApiDeleteCoreV1CollectionNamespacedPodTemplate(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.api.deleteCoreV1CollectionNamespacedPodTemplate({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/namespaces/{namespace}/podtemplates
 * @readonly
 */
export async function getApiListCoreV1NamespacedPodTemplate(
  query: {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApiCoreV1PodTemplateList> {
  const result = await api.api.listCoreV1NamespacedPodTemplate({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/api/v1/namespaces/{namespace}/podtemplates
 */
export async function postApiCreateCoreV1NamespacedPodTemplate(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApiCoreV1PodTemplate,
): Promise<IoK8SApiCoreV1PodTemplate> {
  const result = await api.api.createCoreV1NamespacedPodTemplate({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/api/v1/namespaces/{namespace}/podtemplates/{name}
 */
export async function deleteApiDeleteCoreV1NamespacedPodTemplate(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApiCoreV1PodTemplate> {
  const result = await api.api.deleteCoreV1NamespacedPodTemplate({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/namespaces/{namespace}/podtemplates/{name}
 * @readonly
 */
export async function getApiReadCoreV1NamespacedPodTemplate(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiCoreV1PodTemplate> {
  const result = await api.api.readCoreV1NamespacedPodTemplate({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/api/v1/namespaces/{namespace}/podtemplates/{name}
 */
export async function patchApiPatchCoreV1NamespacedPodTemplate(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiCoreV1PodTemplate> {
  const result = await api.api.patchCoreV1NamespacedPodTemplate({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/api/v1/namespaces/{namespace}/podtemplates/{name}
 */
export async function putApiReplaceCoreV1NamespacedPodTemplate(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiCoreV1PodTemplate,
): Promise<IoK8SApiCoreV1PodTemplate> {
  const result = await api.api.replaceCoreV1NamespacedPodTemplate({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/api/v1/namespaces/{namespace}/replicationcontrollers
 */
export async function deleteApiDeleteCoreV1CollectionNamespacedReplicationController(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result =
    await api.api.deleteCoreV1CollectionNamespacedReplicationController({
      query: query,
      namespace: namespace,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/namespaces/{namespace}/replicationcontrollers
 * @readonly
 */
export async function getApiListCoreV1NamespacedReplicationController(
  query: {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApiCoreV1ReplicationControllerList> {
  const result = await api.api.listCoreV1NamespacedReplicationController({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/api/v1/namespaces/{namespace}/replicationcontrollers
 */
export async function postApiCreateCoreV1NamespacedReplicationController(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApiCoreV1ReplicationController,
): Promise<IoK8SApiCoreV1ReplicationController> {
  const result = await api.api.createCoreV1NamespacedReplicationController({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/api/v1/namespaces/{namespace}/replicationcontrollers/{name}
 */
export async function deleteApiDeleteCoreV1NamespacedReplicationController(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.api.deleteCoreV1NamespacedReplicationController({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/namespaces/{namespace}/replicationcontrollers/{name}
 * @readonly
 */
export async function getApiReadCoreV1NamespacedReplicationController(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiCoreV1ReplicationController> {
  const result = await api.api.readCoreV1NamespacedReplicationController({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/api/v1/namespaces/{namespace}/replicationcontrollers/{name}
 */
export async function patchApiPatchCoreV1NamespacedReplicationController(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiCoreV1ReplicationController> {
  const result = await api.api.patchCoreV1NamespacedReplicationController({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/api/v1/namespaces/{namespace}/replicationcontrollers/{name}
 */
export async function putApiReplaceCoreV1NamespacedReplicationController(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiCoreV1ReplicationController,
): Promise<IoK8SApiCoreV1ReplicationController> {
  const result = await api.api.replaceCoreV1NamespacedReplicationController({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale
 * @readonly
 */
export async function getApiReadCoreV1NamespacedReplicationControllerScale(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiAutoscalingV1Scale> {
  const result = await api.api.readCoreV1NamespacedReplicationControllerScale({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale
 */
export async function patchApiPatchCoreV1NamespacedReplicationControllerScale(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiAutoscalingV1Scale> {
  const result = await api.api.patchCoreV1NamespacedReplicationControllerScale({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale
 */
export async function putApiReplaceCoreV1NamespacedReplicationControllerScale(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiAutoscalingV1Scale,
): Promise<IoK8SApiAutoscalingV1Scale> {
  const result =
    await api.api.replaceCoreV1NamespacedReplicationControllerScale({
      query: query,
      name: name,
      namespace: namespace,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status
 * @readonly
 */
export async function getApiReadCoreV1NamespacedReplicationControllerStatus(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiCoreV1ReplicationController> {
  const result = await api.api.readCoreV1NamespacedReplicationControllerStatus({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status
 */
export async function patchApiPatchCoreV1NamespacedReplicationControllerStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiCoreV1ReplicationController> {
  const result = await api.api.patchCoreV1NamespacedReplicationControllerStatus(
    {
      query: query,
      name: name,
      namespace: namespace,
      body: body,
    },
  );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status
 */
export async function putApiReplaceCoreV1NamespacedReplicationControllerStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiCoreV1ReplicationController,
): Promise<IoK8SApiCoreV1ReplicationController> {
  const result =
    await api.api.replaceCoreV1NamespacedReplicationControllerStatus({
      query: query,
      name: name,
      namespace: namespace,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/api/v1/namespaces/{namespace}/resourcequotas
 */
export async function deleteApiDeleteCoreV1CollectionNamespacedResourceQuota(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.api.deleteCoreV1CollectionNamespacedResourceQuota({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/namespaces/{namespace}/resourcequotas
 * @readonly
 */
export async function getApiListCoreV1NamespacedResourceQuota(
  query: {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApiCoreV1ResourceQuotaList> {
  const result = await api.api.listCoreV1NamespacedResourceQuota({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/api/v1/namespaces/{namespace}/resourcequotas
 */
export async function postApiCreateCoreV1NamespacedResourceQuota(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApiCoreV1ResourceQuota,
): Promise<IoK8SApiCoreV1ResourceQuota> {
  const result = await api.api.createCoreV1NamespacedResourceQuota({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/api/v1/namespaces/{namespace}/resourcequotas/{name}
 */
export async function deleteApiDeleteCoreV1NamespacedResourceQuota(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApiCoreV1ResourceQuota> {
  const result = await api.api.deleteCoreV1NamespacedResourceQuota({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/namespaces/{namespace}/resourcequotas/{name}
 * @readonly
 */
export async function getApiReadCoreV1NamespacedResourceQuota(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiCoreV1ResourceQuota> {
  const result = await api.api.readCoreV1NamespacedResourceQuota({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/api/v1/namespaces/{namespace}/resourcequotas/{name}
 */
export async function patchApiPatchCoreV1NamespacedResourceQuota(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiCoreV1ResourceQuota> {
  const result = await api.api.patchCoreV1NamespacedResourceQuota({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/api/v1/namespaces/{namespace}/resourcequotas/{name}
 */
export async function putApiReplaceCoreV1NamespacedResourceQuota(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiCoreV1ResourceQuota,
): Promise<IoK8SApiCoreV1ResourceQuota> {
  const result = await api.api.replaceCoreV1NamespacedResourceQuota({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/namespaces/{namespace}/resourcequotas/{name}/status
 * @readonly
 */
export async function getApiReadCoreV1NamespacedResourceQuotaStatus(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiCoreV1ResourceQuota> {
  const result = await api.api.readCoreV1NamespacedResourceQuotaStatus({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/api/v1/namespaces/{namespace}/resourcequotas/{name}/status
 */
export async function patchApiPatchCoreV1NamespacedResourceQuotaStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiCoreV1ResourceQuota> {
  const result = await api.api.patchCoreV1NamespacedResourceQuotaStatus({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/api/v1/namespaces/{namespace}/resourcequotas/{name}/status
 */
export async function putApiReplaceCoreV1NamespacedResourceQuotaStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiCoreV1ResourceQuota,
): Promise<IoK8SApiCoreV1ResourceQuota> {
  const result = await api.api.replaceCoreV1NamespacedResourceQuotaStatus({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/api/v1/namespaces/{namespace}/secrets
 */
export async function deleteApiDeleteCoreV1CollectionNamespacedSecret(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.api.deleteCoreV1CollectionNamespacedSecret({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/namespaces/{namespace}/secrets
 * @readonly
 */
export async function getApiListCoreV1NamespacedSecret(
  query: {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApiCoreV1SecretList> {
  const result = await api.api.listCoreV1NamespacedSecret({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/api/v1/namespaces/{namespace}/secrets
 */
export async function postApiCreateCoreV1NamespacedSecret(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApiCoreV1Secret,
): Promise<IoK8SApiCoreV1Secret> {
  const result = await api.api.createCoreV1NamespacedSecret({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/api/v1/namespaces/{namespace}/secrets/{name}
 */
export async function deleteApiDeleteCoreV1NamespacedSecret(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.api.deleteCoreV1NamespacedSecret({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/namespaces/{namespace}/secrets/{name}
 * @readonly
 */
export async function getApiReadCoreV1NamespacedSecret(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiCoreV1Secret> {
  const result = await api.api.readCoreV1NamespacedSecret({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/api/v1/namespaces/{namespace}/secrets/{name}
 */
export async function patchApiPatchCoreV1NamespacedSecret(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiCoreV1Secret> {
  const result = await api.api.patchCoreV1NamespacedSecret({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/api/v1/namespaces/{namespace}/secrets/{name}
 */
export async function putApiReplaceCoreV1NamespacedSecret(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiCoreV1Secret,
): Promise<IoK8SApiCoreV1Secret> {
  const result = await api.api.replaceCoreV1NamespacedSecret({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/api/v1/namespaces/{namespace}/serviceaccounts
 */
export async function deleteApiDeleteCoreV1CollectionNamespacedServiceAccount(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.api.deleteCoreV1CollectionNamespacedServiceAccount({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/namespaces/{namespace}/serviceaccounts
 * @readonly
 */
export async function getApiListCoreV1NamespacedServiceAccount(
  query: {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApiCoreV1ServiceAccountList> {
  const result = await api.api.listCoreV1NamespacedServiceAccount({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/api/v1/namespaces/{namespace}/serviceaccounts
 */
export async function postApiCreateCoreV1NamespacedServiceAccount(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApiCoreV1ServiceAccount,
): Promise<IoK8SApiCoreV1ServiceAccount> {
  const result = await api.api.createCoreV1NamespacedServiceAccount({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/api/v1/namespaces/{namespace}/serviceaccounts/{name}
 */
export async function deleteApiDeleteCoreV1NamespacedServiceAccount(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApiCoreV1ServiceAccount> {
  const result = await api.api.deleteCoreV1NamespacedServiceAccount({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/namespaces/{namespace}/serviceaccounts/{name}
 * @readonly
 */
export async function getApiReadCoreV1NamespacedServiceAccount(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiCoreV1ServiceAccount> {
  const result = await api.api.readCoreV1NamespacedServiceAccount({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/api/v1/namespaces/{namespace}/serviceaccounts/{name}
 */
export async function patchApiPatchCoreV1NamespacedServiceAccount(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiCoreV1ServiceAccount> {
  const result = await api.api.patchCoreV1NamespacedServiceAccount({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/api/v1/namespaces/{namespace}/serviceaccounts/{name}
 */
export async function putApiReplaceCoreV1NamespacedServiceAccount(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiCoreV1ServiceAccount,
): Promise<IoK8SApiCoreV1ServiceAccount> {
  const result = await api.api.replaceCoreV1NamespacedServiceAccount({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/api/v1/namespaces/{namespace}/serviceaccounts/{name}/token
 */
export async function postApiCreateCoreV1NamespacedServiceAccountToken(
  query: {
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    pretty?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiAuthenticationV1TokenRequest,
): Promise<IoK8SApiAuthenticationV1TokenRequest> {
  const result = await api.api.createCoreV1NamespacedServiceAccountToken({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/api/v1/namespaces/{namespace}/services
 */
export async function deleteApiDeleteCoreV1CollectionNamespacedService(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.api.deleteCoreV1CollectionNamespacedService({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/namespaces/{namespace}/services
 * @readonly
 */
export async function getApiListCoreV1NamespacedService(
  query: {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApiCoreV1ServiceList> {
  const result = await api.api.listCoreV1NamespacedService({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/api/v1/namespaces/{namespace}/services
 */
export async function postApiCreateCoreV1NamespacedService(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApiCoreV1Service,
): Promise<IoK8SApiCoreV1Service> {
  const result = await api.api.createCoreV1NamespacedService({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/api/v1/namespaces/{namespace}/services/{name}
 */
export async function deleteApiDeleteCoreV1NamespacedService(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApiCoreV1Service> {
  const result = await api.api.deleteCoreV1NamespacedService({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/namespaces/{namespace}/services/{name}
 * @readonly
 */
export async function getApiReadCoreV1NamespacedService(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiCoreV1Service> {
  const result = await api.api.readCoreV1NamespacedService({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/api/v1/namespaces/{namespace}/services/{name}
 */
export async function patchApiPatchCoreV1NamespacedService(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiCoreV1Service> {
  const result = await api.api.patchCoreV1NamespacedService({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/api/v1/namespaces/{namespace}/services/{name}
 */
export async function putApiReplaceCoreV1NamespacedService(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiCoreV1Service,
): Promise<IoK8SApiCoreV1Service> {
  const result = await api.api.replaceCoreV1NamespacedService({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/api/v1/namespaces/{namespace}/services/{name}/proxy
 */
export async function deleteApiConnectCoreV1DeleteNamespacedServiceProxy(
  query: { path?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1DeleteNamespacedServiceProxy({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/namespaces/{namespace}/services/{name}/proxy
 * @readonly
 */
export async function getApiConnectCoreV1GetNamespacedServiceProxy(
  query: { path?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1GetNamespacedServiceProxy({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request HEAD :/api/v1/namespaces/{namespace}/services/{name}/proxy
 */
export async function headApiConnectCoreV1HeadNamespacedServiceProxy(
  query: { path?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1HeadNamespacedServiceProxy({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request OPTIONS :/api/v1/namespaces/{namespace}/services/{name}/proxy
 */
export async function optionsApiConnectCoreV1OptionsNamespacedServiceProxy(
  query: { path?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1OptionsNamespacedServiceProxy({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/api/v1/namespaces/{namespace}/services/{name}/proxy
 */
export async function patchApiConnectCoreV1PatchNamespacedServiceProxy(
  query: { path?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1PatchNamespacedServiceProxy({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/api/v1/namespaces/{namespace}/services/{name}/proxy
 */
export async function postApiConnectCoreV1PostNamespacedServiceProxy(
  query: { path?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1PostNamespacedServiceProxy({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/api/v1/namespaces/{namespace}/services/{name}/proxy
 */
export async function putApiConnectCoreV1PutNamespacedServiceProxy(
  query: { path?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1PutNamespacedServiceProxy({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}
 */
export async function deleteApiConnectCoreV1DeleteNamespacedServiceProxyWithPath(
  query: { path?: string },
  name: string,
  namespace: string,
  path: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result =
    await api.api.connectCoreV1DeleteNamespacedServiceProxyWithPath({
      query: query,
      name: name,
      namespace: namespace,
      path: path,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}
 * @readonly
 */
export async function getApiConnectCoreV1GetNamespacedServiceProxyWithPath(
  query: { path?: string },
  name: string,
  namespace: string,
  path: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1GetNamespacedServiceProxyWithPath({
    query: query,
    name: name,
    namespace: namespace,
    path: path,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request HEAD :/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}
 */
export async function headApiConnectCoreV1HeadNamespacedServiceProxyWithPath(
  query: { path?: string },
  name: string,
  namespace: string,
  path: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1HeadNamespacedServiceProxyWithPath({
    query: query,
    name: name,
    namespace: namespace,
    path: path,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request OPTIONS :/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}
 */
export async function optionsApiConnectCoreV1OptionsNamespacedServiceProxyWithPath(
  query: { path?: string },
  name: string,
  namespace: string,
  path: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result =
    await api.api.connectCoreV1OptionsNamespacedServiceProxyWithPath({
      query: query,
      name: name,
      namespace: namespace,
      path: path,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}
 */
export async function patchApiConnectCoreV1PatchNamespacedServiceProxyWithPath(
  query: { path?: string },
  name: string,
  namespace: string,
  path: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1PatchNamespacedServiceProxyWithPath(
    {
      query: query,
      name: name,
      namespace: namespace,
      path: path,
    },
  );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}
 */
export async function postApiConnectCoreV1PostNamespacedServiceProxyWithPath(
  query: { path?: string },
  name: string,
  namespace: string,
  path: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1PostNamespacedServiceProxyWithPath({
    query: query,
    name: name,
    namespace: namespace,
    path: path,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}
 */
export async function putApiConnectCoreV1PutNamespacedServiceProxyWithPath(
  query: { path?: string },
  name: string,
  namespace: string,
  path: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1PutNamespacedServiceProxyWithPath({
    query: query,
    name: name,
    namespace: namespace,
    path: path,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/namespaces/{namespace}/services/{name}/status
 * @readonly
 */
export async function getApiReadCoreV1NamespacedServiceStatus(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiCoreV1Service> {
  const result = await api.api.readCoreV1NamespacedServiceStatus({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/api/v1/namespaces/{namespace}/services/{name}/status
 */
export async function patchApiPatchCoreV1NamespacedServiceStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiCoreV1Service> {
  const result = await api.api.patchCoreV1NamespacedServiceStatus({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/api/v1/namespaces/{namespace}/services/{name}/status
 */
export async function putApiReplaceCoreV1NamespacedServiceStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiCoreV1Service,
): Promise<IoK8SApiCoreV1Service> {
  const result = await api.api.replaceCoreV1NamespacedServiceStatus({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/api/v1/namespaces/{name}
 */
export async function deleteApiDeleteCoreV1Namespace(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.api.deleteCoreV1Namespace({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/namespaces/{name}
 * @readonly
 */
export async function getApiReadCoreV1Namespace(
  query: { pretty?: string },
  name: string,
): Promise<IoK8SApiCoreV1Namespace> {
  const result = await api.api.readCoreV1Namespace({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/api/v1/namespaces/{name}
 */
export async function patchApiPatchCoreV1Namespace(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiCoreV1Namespace> {
  const result = await api.api.patchCoreV1Namespace({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/api/v1/namespaces/{name}
 */
export async function putApiReplaceCoreV1Namespace(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApiCoreV1Namespace,
): Promise<IoK8SApiCoreV1Namespace> {
  const result = await api.api.replaceCoreV1Namespace({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/api/v1/namespaces/{name}/finalize
 */
export async function putApiReplaceCoreV1NamespaceFinalize(
  query: {
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    pretty?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApiCoreV1Namespace,
): Promise<IoK8SApiCoreV1Namespace> {
  const result = await api.api.replaceCoreV1NamespaceFinalize({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/namespaces/{name}/status
 * @readonly
 */
export async function getApiReadCoreV1NamespaceStatus(
  query: { pretty?: string },
  name: string,
): Promise<IoK8SApiCoreV1Namespace> {
  const result = await api.api.readCoreV1NamespaceStatus({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/api/v1/namespaces/{name}/status
 */
export async function patchApiPatchCoreV1NamespaceStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiCoreV1Namespace> {
  const result = await api.api.patchCoreV1NamespaceStatus({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/api/v1/namespaces/{name}/status
 */
export async function putApiReplaceCoreV1NamespaceStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApiCoreV1Namespace,
): Promise<IoK8SApiCoreV1Namespace> {
  const result = await api.api.replaceCoreV1NamespaceStatus({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/api/v1/nodes
 */
export async function deleteApiDeleteCoreV1CollectionNode(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.api.deleteCoreV1CollectionNode({
    query: query,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/nodes
 * @readonly
 */
export async function getApiListCoreV1Node(query: {
  pretty?: string;
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiCoreV1NodeList> {
  const result = await api.api.listCoreV1Node({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/api/v1/nodes
 */
export async function postApiCreateCoreV1Node(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  /** Request body */
  body: IoK8SApiCoreV1Node,
): Promise<IoK8SApiCoreV1Node> {
  const result = await api.api.createCoreV1Node({
    query: query,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/api/v1/nodes/{name}
 */
export async function deleteApiDeleteCoreV1Node(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.api.deleteCoreV1Node({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/nodes/{name}
 * @readonly
 */
export async function getApiReadCoreV1Node(
  query: { pretty?: string },
  name: string,
): Promise<IoK8SApiCoreV1Node> {
  const result = await api.api.readCoreV1Node({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/api/v1/nodes/{name}
 */
export async function patchApiPatchCoreV1Node(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiCoreV1Node> {
  const result = await api.api.patchCoreV1Node({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/api/v1/nodes/{name}
 */
export async function putApiReplaceCoreV1Node(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApiCoreV1Node,
): Promise<IoK8SApiCoreV1Node> {
  const result = await api.api.replaceCoreV1Node({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/api/v1/nodes/{name}/proxy
 */
export async function deleteApiConnectCoreV1DeleteNodeProxy(
  query: { path?: string },
  name: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1DeleteNodeProxy({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/nodes/{name}/proxy
 * @readonly
 */
export async function getApiConnectCoreV1GetNodeProxy(
  query: { path?: string },
  name: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1GetNodeProxy({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request HEAD :/api/v1/nodes/{name}/proxy
 */
export async function headApiConnectCoreV1HeadNodeProxy(
  query: { path?: string },
  name: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1HeadNodeProxy({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request OPTIONS :/api/v1/nodes/{name}/proxy
 */
export async function optionsApiConnectCoreV1OptionsNodeProxy(
  query: { path?: string },
  name: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1OptionsNodeProxy({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/api/v1/nodes/{name}/proxy
 */
export async function patchApiConnectCoreV1PatchNodeProxy(
  query: { path?: string },
  name: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1PatchNodeProxy({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/api/v1/nodes/{name}/proxy
 */
export async function postApiConnectCoreV1PostNodeProxy(
  query: { path?: string },
  name: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1PostNodeProxy({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/api/v1/nodes/{name}/proxy
 */
export async function putApiConnectCoreV1PutNodeProxy(
  query: { path?: string },
  name: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1PutNodeProxy({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/api/v1/nodes/{name}/proxy/{path}
 */
export async function deleteApiConnectCoreV1DeleteNodeProxyWithPath(
  query: { path?: string },
  name: string,
  path: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1DeleteNodeProxyWithPath({
    query: query,
    name: name,
    path: path,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/nodes/{name}/proxy/{path}
 * @readonly
 */
export async function getApiConnectCoreV1GetNodeProxyWithPath(
  query: { path?: string },
  name: string,
  path: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1GetNodeProxyWithPath({
    query: query,
    name: name,
    path: path,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request HEAD :/api/v1/nodes/{name}/proxy/{path}
 */
export async function headApiConnectCoreV1HeadNodeProxyWithPath(
  query: { path?: string },
  name: string,
  path: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1HeadNodeProxyWithPath({
    query: query,
    name: name,
    path: path,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request OPTIONS :/api/v1/nodes/{name}/proxy/{path}
 */
export async function optionsApiConnectCoreV1OptionsNodeProxyWithPath(
  query: { path?: string },
  name: string,
  path: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1OptionsNodeProxyWithPath({
    query: query,
    name: name,
    path: path,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/api/v1/nodes/{name}/proxy/{path}
 */
export async function patchApiConnectCoreV1PatchNodeProxyWithPath(
  query: { path?: string },
  name: string,
  path: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1PatchNodeProxyWithPath({
    query: query,
    name: name,
    path: path,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/api/v1/nodes/{name}/proxy/{path}
 */
export async function postApiConnectCoreV1PostNodeProxyWithPath(
  query: { path?: string },
  name: string,
  path: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1PostNodeProxyWithPath({
    query: query,
    name: name,
    path: path,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/api/v1/nodes/{name}/proxy/{path}
 */
export async function putApiConnectCoreV1PutNodeProxyWithPath(
  query: { path?: string },
  name: string,
  path: string,
): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.api.connectCoreV1PutNodeProxyWithPath({
    query: query,
    name: name,
    path: path,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/nodes/{name}/status
 * @readonly
 */
export async function getApiReadCoreV1NodeStatus(
  query: { pretty?: string },
  name: string,
): Promise<IoK8SApiCoreV1Node> {
  const result = await api.api.readCoreV1NodeStatus({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/api/v1/nodes/{name}/status
 */
export async function patchApiPatchCoreV1NodeStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiCoreV1Node> {
  const result = await api.api.patchCoreV1NodeStatus({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/api/v1/nodes/{name}/status
 */
export async function putApiReplaceCoreV1NodeStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApiCoreV1Node,
): Promise<IoK8SApiCoreV1Node> {
  const result = await api.api.replaceCoreV1NodeStatus({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/persistentvolumeclaims
 * @readonly
 */
export async function getApiListCoreV1PersistentVolumeClaimForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiCoreV1PersistentVolumeClaimList> {
  const result = await api.api.listCoreV1PersistentVolumeClaimForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/api/v1/persistentvolumes
 */
export async function deleteApiDeleteCoreV1CollectionPersistentVolume(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.api.deleteCoreV1CollectionPersistentVolume({
    query: query,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/persistentvolumes
 * @readonly
 */
export async function getApiListCoreV1PersistentVolume(query: {
  pretty?: string;
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiCoreV1PersistentVolumeList> {
  const result = await api.api.listCoreV1PersistentVolume({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/api/v1/persistentvolumes
 */
export async function postApiCreateCoreV1PersistentVolume(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  /** Request body */
  body: IoK8SApiCoreV1PersistentVolume,
): Promise<IoK8SApiCoreV1PersistentVolume> {
  const result = await api.api.createCoreV1PersistentVolume({
    query: query,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/api/v1/persistentvolumes/{name}
 */
export async function deleteApiDeleteCoreV1PersistentVolume(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApiCoreV1PersistentVolume> {
  const result = await api.api.deleteCoreV1PersistentVolume({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/persistentvolumes/{name}
 * @readonly
 */
export async function getApiReadCoreV1PersistentVolume(
  query: { pretty?: string },
  name: string,
): Promise<IoK8SApiCoreV1PersistentVolume> {
  const result = await api.api.readCoreV1PersistentVolume({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/api/v1/persistentvolumes/{name}
 */
export async function patchApiPatchCoreV1PersistentVolume(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiCoreV1PersistentVolume> {
  const result = await api.api.patchCoreV1PersistentVolume({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/api/v1/persistentvolumes/{name}
 */
export async function putApiReplaceCoreV1PersistentVolume(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApiCoreV1PersistentVolume,
): Promise<IoK8SApiCoreV1PersistentVolume> {
  const result = await api.api.replaceCoreV1PersistentVolume({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/persistentvolumes/{name}/status
 * @readonly
 */
export async function getApiReadCoreV1PersistentVolumeStatus(
  query: { pretty?: string },
  name: string,
): Promise<IoK8SApiCoreV1PersistentVolume> {
  const result = await api.api.readCoreV1PersistentVolumeStatus({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/api/v1/persistentvolumes/{name}/status
 */
export async function patchApiPatchCoreV1PersistentVolumeStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiCoreV1PersistentVolume> {
  const result = await api.api.patchCoreV1PersistentVolumeStatus({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/api/v1/persistentvolumes/{name}/status
 */
export async function putApiReplaceCoreV1PersistentVolumeStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApiCoreV1PersistentVolume,
): Promise<IoK8SApiCoreV1PersistentVolume> {
  const result = await api.api.replaceCoreV1PersistentVolumeStatus({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/pods
 * @readonly
 */
export async function getApiListCoreV1PodForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiCoreV1PodList> {
  const result = await api.api.listCoreV1PodForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/podtemplates
 * @readonly
 */
export async function getApiListCoreV1PodTemplateForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiCoreV1PodTemplateList> {
  const result = await api.api.listCoreV1PodTemplateForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/replicationcontrollers
 * @readonly
 */
export async function getApiListCoreV1ReplicationControllerForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiCoreV1ReplicationControllerList> {
  const result = await api.api.listCoreV1ReplicationControllerForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/resourcequotas
 * @readonly
 */
export async function getApiListCoreV1ResourceQuotaForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiCoreV1ResourceQuotaList> {
  const result = await api.api.listCoreV1ResourceQuotaForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/secrets
 * @readonly
 */
export async function getApiListCoreV1SecretForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiCoreV1SecretList> {
  const result = await api.api.listCoreV1SecretForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/serviceaccounts
 * @readonly
 */
export async function getApiListCoreV1ServiceAccountForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiCoreV1ServiceAccountList> {
  const result = await api.api.listCoreV1ServiceAccountForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/services
 * @readonly
 */
export async function getApiListCoreV1ServiceForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiCoreV1ServiceList> {
  const result = await api.api.listCoreV1ServiceForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/watch/configmaps
 * @readonly
 */
export async function getApiWatchCoreV1ConfigMapListForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.api.watchCoreV1ConfigMapListForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/watch/endpoints
 * @readonly
 */
export async function getApiWatchCoreV1EndpointsListForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.api.watchCoreV1EndpointsListForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/watch/events
 * @readonly
 */
export async function getApiWatchCoreV1EventListForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.api.watchCoreV1EventListForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/watch/limitranges
 * @readonly
 */
export async function getApiWatchCoreV1LimitRangeListForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.api.watchCoreV1LimitRangeListForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/watch/namespaces
 * @readonly
 */
export async function getApiWatchCoreV1NamespaceList(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.api.watchCoreV1NamespaceList({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/watch/namespaces/{namespace}/configmaps
 * @readonly
 */
export async function getApiWatchCoreV1NamespacedConfigMapList(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.api.watchCoreV1NamespacedConfigMapList({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/watch/namespaces/{namespace}/configmaps/{name}
 * @readonly
 */
export async function getApiWatchCoreV1NamespacedConfigMap(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.api.watchCoreV1NamespacedConfigMap({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/watch/namespaces/{namespace}/endpoints
 * @readonly
 */
export async function getApiWatchCoreV1NamespacedEndpointsList(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.api.watchCoreV1NamespacedEndpointsList({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/watch/namespaces/{namespace}/endpoints/{name}
 * @readonly
 */
export async function getApiWatchCoreV1NamespacedEndpoints(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.api.watchCoreV1NamespacedEndpoints({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/watch/namespaces/{namespace}/events
 * @readonly
 */
export async function getApiWatchCoreV1NamespacedEventList(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.api.watchCoreV1NamespacedEventList({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/watch/namespaces/{namespace}/events/{name}
 * @readonly
 */
export async function getApiWatchCoreV1NamespacedEvent(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.api.watchCoreV1NamespacedEvent({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/watch/namespaces/{namespace}/limitranges
 * @readonly
 */
export async function getApiWatchCoreV1NamespacedLimitRangeList(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.api.watchCoreV1NamespacedLimitRangeList({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/watch/namespaces/{namespace}/limitranges/{name}
 * @readonly
 */
export async function getApiWatchCoreV1NamespacedLimitRange(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.api.watchCoreV1NamespacedLimitRange({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims
 * @readonly
 */
export async function getApiWatchCoreV1NamespacedPersistentVolumeClaimList(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.api.watchCoreV1NamespacedPersistentVolumeClaimList({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/watch/namespaces/{namespace}/persistentvolumeclaims/{name}
 * @readonly
 */
export async function getApiWatchCoreV1NamespacedPersistentVolumeClaim(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.api.watchCoreV1NamespacedPersistentVolumeClaim({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/watch/namespaces/{namespace}/pods
 * @readonly
 */
export async function getApiWatchCoreV1NamespacedPodList(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.api.watchCoreV1NamespacedPodList({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/watch/namespaces/{namespace}/pods/{name}
 * @readonly
 */
export async function getApiWatchCoreV1NamespacedPod(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.api.watchCoreV1NamespacedPod({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/watch/namespaces/{namespace}/podtemplates
 * @readonly
 */
export async function getApiWatchCoreV1NamespacedPodTemplateList(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.api.watchCoreV1NamespacedPodTemplateList({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/watch/namespaces/{namespace}/podtemplates/{name}
 * @readonly
 */
export async function getApiWatchCoreV1NamespacedPodTemplate(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.api.watchCoreV1NamespacedPodTemplate({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/watch/namespaces/{namespace}/replicationcontrollers
 * @readonly
 */
export async function getApiWatchCoreV1NamespacedReplicationControllerList(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.api.watchCoreV1NamespacedReplicationControllerList({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/watch/namespaces/{namespace}/replicationcontrollers/{name}
 * @readonly
 */
export async function getApiWatchCoreV1NamespacedReplicationController(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.api.watchCoreV1NamespacedReplicationController({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/watch/namespaces/{namespace}/resourcequotas
 * @readonly
 */
export async function getApiWatchCoreV1NamespacedResourceQuotaList(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.api.watchCoreV1NamespacedResourceQuotaList({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/watch/namespaces/{namespace}/resourcequotas/{name}
 * @readonly
 */
export async function getApiWatchCoreV1NamespacedResourceQuota(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.api.watchCoreV1NamespacedResourceQuota({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/watch/namespaces/{namespace}/secrets
 * @readonly
 */
export async function getApiWatchCoreV1NamespacedSecretList(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.api.watchCoreV1NamespacedSecretList({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/watch/namespaces/{namespace}/secrets/{name}
 * @readonly
 */
export async function getApiWatchCoreV1NamespacedSecret(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.api.watchCoreV1NamespacedSecret({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/watch/namespaces/{namespace}/serviceaccounts
 * @readonly
 */
export async function getApiWatchCoreV1NamespacedServiceAccountList(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.api.watchCoreV1NamespacedServiceAccountList({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/watch/namespaces/{namespace}/serviceaccounts/{name}
 * @readonly
 */
export async function getApiWatchCoreV1NamespacedServiceAccount(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.api.watchCoreV1NamespacedServiceAccount({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/watch/namespaces/{namespace}/services
 * @readonly
 */
export async function getApiWatchCoreV1NamespacedServiceList(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.api.watchCoreV1NamespacedServiceList({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/watch/namespaces/{namespace}/services/{name}
 * @readonly
 */
export async function getApiWatchCoreV1NamespacedService(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.api.watchCoreV1NamespacedService({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/watch/namespaces/{name}
 * @readonly
 */
export async function getApiWatchCoreV1Namespace(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.api.watchCoreV1Namespace({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/watch/nodes
 * @readonly
 */
export async function getApiWatchCoreV1NodeList(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.api.watchCoreV1NodeList({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/watch/nodes/{name}
 * @readonly
 */
export async function getApiWatchCoreV1Node(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.api.watchCoreV1Node({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/watch/persistentvolumeclaims
 * @readonly
 */
export async function getApiWatchCoreV1PersistentVolumeClaimListForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result =
    await api.api.watchCoreV1PersistentVolumeClaimListForAllNamespaces({
      query: query,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/watch/persistentvolumes
 * @readonly
 */
export async function getApiWatchCoreV1PersistentVolumeList(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.api.watchCoreV1PersistentVolumeList({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/watch/persistentvolumes/{name}
 * @readonly
 */
export async function getApiWatchCoreV1PersistentVolume(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.api.watchCoreV1PersistentVolume({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/watch/pods
 * @readonly
 */
export async function getApiWatchCoreV1PodListForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.api.watchCoreV1PodListForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/watch/podtemplates
 * @readonly
 */
export async function getApiWatchCoreV1PodTemplateListForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.api.watchCoreV1PodTemplateListForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/watch/replicationcontrollers
 * @readonly
 */
export async function getApiWatchCoreV1ReplicationControllerListForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result =
    await api.api.watchCoreV1ReplicationControllerListForAllNamespaces({
      query: query,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/watch/resourcequotas
 * @readonly
 */
export async function getApiWatchCoreV1ResourceQuotaListForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.api.watchCoreV1ResourceQuotaListForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/watch/secrets
 * @readonly
 */
export async function getApiWatchCoreV1SecretListForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.api.watchCoreV1SecretListForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/watch/serviceaccounts
 * @readonly
 */
export async function getApiWatchCoreV1ServiceAccountListForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.api.watchCoreV1ServiceAccountListForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/api/v1/watch/services
 * @readonly
 */
export async function getApiWatchCoreV1ServiceListForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.api.watchCoreV1ServiceListForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/
 * @readonly
 */
export async function getApisGetApiVersions(): Promise<IoK8SApimachineryPkgApisMetaV1APIGroupList> {
  const result = await api.apis.getApiVersions({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/admissionregistration.k8s.io/
 * @readonly
 */
export async function getApisGetAdmissionregistrationApiGroup(): Promise<IoK8SApimachineryPkgApisMetaV1APIGroup> {
  const result = await api.apis.getAdmissionregistrationApiGroup({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/admissionregistration.k8s.io/v1/
 * @readonly
 */
export async function getApisGetAdmissionregistrationV1ApiResources(): Promise<IoK8SApimachineryPkgApisMetaV1APIResourceList> {
  const result = await api.apis.getAdmissionregistrationV1ApiResources({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations
 */
export async function deleteApisDeleteAdmissionregistrationV1CollectionMutatingWebhookConfiguration(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result =
    await api.apis.deleteAdmissionregistrationV1CollectionMutatingWebhookConfiguration(
      {
        query: query,
        body: body,
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations
 * @readonly
 */
export async function getApisListAdmissionregistrationV1MutatingWebhookConfiguration(query: {
  pretty?: string;
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiAdmissionregistrationV1MutatingWebhookConfigurationList> {
  const result =
    await api.apis.listAdmissionregistrationV1MutatingWebhookConfiguration({
      query: query,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations
 */
export async function postApisCreateAdmissionregistrationV1MutatingWebhookConfiguration(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  /** Request body */
  body: IoK8SApiAdmissionregistrationV1MutatingWebhookConfiguration,
): Promise<IoK8SApiAdmissionregistrationV1MutatingWebhookConfiguration> {
  const result =
    await api.apis.createAdmissionregistrationV1MutatingWebhookConfiguration({
      query: query,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations/{name}
 */
export async function deleteApisDeleteAdmissionregistrationV1MutatingWebhookConfiguration(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result =
    await api.apis.deleteAdmissionregistrationV1MutatingWebhookConfiguration({
      query: query,
      name: name,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations/{name}
 * @readonly
 */
export async function getApisReadAdmissionregistrationV1MutatingWebhookConfiguration(
  query: { pretty?: string },
  name: string,
): Promise<IoK8SApiAdmissionregistrationV1MutatingWebhookConfiguration> {
  const result =
    await api.apis.readAdmissionregistrationV1MutatingWebhookConfiguration({
      query: query,
      name: name,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations/{name}
 */
export async function patchApisPatchAdmissionregistrationV1MutatingWebhookConfiguration(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiAdmissionregistrationV1MutatingWebhookConfiguration> {
  const result =
    await api.apis.patchAdmissionregistrationV1MutatingWebhookConfiguration({
      query: query,
      name: name,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations/{name}
 */
export async function putApisReplaceAdmissionregistrationV1MutatingWebhookConfiguration(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApiAdmissionregistrationV1MutatingWebhookConfiguration,
): Promise<IoK8SApiAdmissionregistrationV1MutatingWebhookConfiguration> {
  const result =
    await api.apis.replaceAdmissionregistrationV1MutatingWebhookConfiguration({
      query: query,
      name: name,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations
 */
export async function deleteApisDeleteAdmissionregistrationV1CollectionValidatingWebhookConfiguration(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result =
    await api.apis.deleteAdmissionregistrationV1CollectionValidatingWebhookConfiguration(
      {
        query: query,
        body: body,
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations
 * @readonly
 */
export async function getApisListAdmissionregistrationV1ValidatingWebhookConfiguration(query: {
  pretty?: string;
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiAdmissionregistrationV1ValidatingWebhookConfigurationList> {
  const result =
    await api.apis.listAdmissionregistrationV1ValidatingWebhookConfiguration({
      query: query,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations
 */
export async function postApisCreateAdmissionregistrationV1ValidatingWebhookConfiguration(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  /** Request body */
  body: IoK8SApiAdmissionregistrationV1ValidatingWebhookConfiguration,
): Promise<IoK8SApiAdmissionregistrationV1ValidatingWebhookConfiguration> {
  const result =
    await api.apis.createAdmissionregistrationV1ValidatingWebhookConfiguration({
      query: query,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations/{name}
 */
export async function deleteApisDeleteAdmissionregistrationV1ValidatingWebhookConfiguration(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result =
    await api.apis.deleteAdmissionregistrationV1ValidatingWebhookConfiguration({
      query: query,
      name: name,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations/{name}
 * @readonly
 */
export async function getApisReadAdmissionregistrationV1ValidatingWebhookConfiguration(
  query: { pretty?: string },
  name: string,
): Promise<IoK8SApiAdmissionregistrationV1ValidatingWebhookConfiguration> {
  const result =
    await api.apis.readAdmissionregistrationV1ValidatingWebhookConfiguration({
      query: query,
      name: name,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations/{name}
 */
export async function patchApisPatchAdmissionregistrationV1ValidatingWebhookConfiguration(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiAdmissionregistrationV1ValidatingWebhookConfiguration> {
  const result =
    await api.apis.patchAdmissionregistrationV1ValidatingWebhookConfiguration({
      query: query,
      name: name,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations/{name}
 */
export async function putApisReplaceAdmissionregistrationV1ValidatingWebhookConfiguration(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApiAdmissionregistrationV1ValidatingWebhookConfiguration,
): Promise<IoK8SApiAdmissionregistrationV1ValidatingWebhookConfiguration> {
  const result =
    await api.apis.replaceAdmissionregistrationV1ValidatingWebhookConfiguration(
      {
        query: query,
        name: name,
        body: body,
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/admissionregistration.k8s.io/v1/watch/mutatingwebhookconfigurations
 * @readonly
 */
export async function getApisWatchAdmissionregistrationV1MutatingWebhookConfigurationList(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result =
    await api.apis.watchAdmissionregistrationV1MutatingWebhookConfigurationList(
      {
        query: query,
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/admissionregistration.k8s.io/v1/watch/mutatingwebhookconfigurations/{name}
 * @readonly
 */
export async function getApisWatchAdmissionregistrationV1MutatingWebhookConfiguration(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result =
    await api.apis.watchAdmissionregistrationV1MutatingWebhookConfiguration({
      query: query,
      name: name,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/admissionregistration.k8s.io/v1/watch/validatingwebhookconfigurations
 * @readonly
 */
export async function getApisWatchAdmissionregistrationV1ValidatingWebhookConfigurationList(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result =
    await api.apis.watchAdmissionregistrationV1ValidatingWebhookConfigurationList(
      {
        query: query,
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/admissionregistration.k8s.io/v1/watch/validatingwebhookconfigurations/{name}
 * @readonly
 */
export async function getApisWatchAdmissionregistrationV1ValidatingWebhookConfiguration(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result =
    await api.apis.watchAdmissionregistrationV1ValidatingWebhookConfiguration({
      query: query,
      name: name,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/admissionregistration.k8s.io/v1alpha1/
 * @readonly
 */
export async function getApisGetAdmissionregistrationV1Alpha1ApiResources(): Promise<IoK8SApimachineryPkgApisMetaV1APIResourceList> {
  const result = await api.apis.getAdmissionregistrationV1Alpha1ApiResources(
    {},
  );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicies
 */
export async function deleteApisDeleteAdmissionregistrationV1Alpha1CollectionValidatingAdmissionPolicy(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result =
    await api.apis.deleteAdmissionregistrationV1Alpha1CollectionValidatingAdmissionPolicy(
      {
        query: query,
        body: body,
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicies
 * @readonly
 */
export async function getApisListAdmissionregistrationV1Alpha1ValidatingAdmissionPolicy(query: {
  pretty?: string;
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiAdmissionregistrationV1Alpha1ValidatingAdmissionPolicyList> {
  const result =
    await api.apis.listAdmissionregistrationV1Alpha1ValidatingAdmissionPolicy({
      query: query,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicies
 */
export async function postApisCreateAdmissionregistrationV1Alpha1ValidatingAdmissionPolicy(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  /** Request body */
  body: IoK8SApiAdmissionregistrationV1Alpha1ValidatingAdmissionPolicy,
): Promise<IoK8SApiAdmissionregistrationV1Alpha1ValidatingAdmissionPolicy> {
  const result =
    await api.apis.createAdmissionregistrationV1Alpha1ValidatingAdmissionPolicy(
      {
        query: query,
        body: body,
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicies/{name}
 */
export async function deleteApisDeleteAdmissionregistrationV1Alpha1ValidatingAdmissionPolicy(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result =
    await api.apis.deleteAdmissionregistrationV1Alpha1ValidatingAdmissionPolicy(
      {
        query: query,
        name: name,
        body: body,
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicies/{name}
 * @readonly
 */
export async function getApisReadAdmissionregistrationV1Alpha1ValidatingAdmissionPolicy(
  query: { pretty?: string },
  name: string,
): Promise<IoK8SApiAdmissionregistrationV1Alpha1ValidatingAdmissionPolicy> {
  const result =
    await api.apis.readAdmissionregistrationV1Alpha1ValidatingAdmissionPolicy({
      query: query,
      name: name,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicies/{name}
 */
export async function patchApisPatchAdmissionregistrationV1Alpha1ValidatingAdmissionPolicy(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiAdmissionregistrationV1Alpha1ValidatingAdmissionPolicy> {
  const result =
    await api.apis.patchAdmissionregistrationV1Alpha1ValidatingAdmissionPolicy({
      query: query,
      name: name,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicies/{name}
 */
export async function putApisReplaceAdmissionregistrationV1Alpha1ValidatingAdmissionPolicy(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApiAdmissionregistrationV1Alpha1ValidatingAdmissionPolicy,
): Promise<IoK8SApiAdmissionregistrationV1Alpha1ValidatingAdmissionPolicy> {
  const result =
    await api.apis.replaceAdmissionregistrationV1Alpha1ValidatingAdmissionPolicy(
      {
        query: query,
        name: name,
        body: body,
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicybindings
 */
export async function deleteApisDeleteAdmissionregistrationV1Alpha1CollectionValidatingAdmissionPolicyBinding(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result =
    await api.apis.deleteAdmissionregistrationV1Alpha1CollectionValidatingAdmissionPolicyBinding(
      {
        query: query,
        body: body,
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicybindings
 * @readonly
 */
export async function getApisListAdmissionregistrationV1Alpha1ValidatingAdmissionPolicyBinding(query: {
  pretty?: string;
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiAdmissionregistrationV1Alpha1ValidatingAdmissionPolicyBindingList> {
  const result =
    await api.apis.listAdmissionregistrationV1Alpha1ValidatingAdmissionPolicyBinding(
      {
        query: query,
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicybindings
 */
export async function postApisCreateAdmissionregistrationV1Alpha1ValidatingAdmissionPolicyBinding(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  /** Request body */
  body: IoK8SApiAdmissionregistrationV1Alpha1ValidatingAdmissionPolicyBinding,
): Promise<IoK8SApiAdmissionregistrationV1Alpha1ValidatingAdmissionPolicyBinding> {
  const result =
    await api.apis.createAdmissionregistrationV1Alpha1ValidatingAdmissionPolicyBinding(
      {
        query: query,
        body: body,
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicybindings/{name}
 */
export async function deleteApisDeleteAdmissionregistrationV1Alpha1ValidatingAdmissionPolicyBinding(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result =
    await api.apis.deleteAdmissionregistrationV1Alpha1ValidatingAdmissionPolicyBinding(
      {
        query: query,
        name: name,
        body: body,
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicybindings/{name}
 * @readonly
 */
export async function getApisReadAdmissionregistrationV1Alpha1ValidatingAdmissionPolicyBinding(
  query: { pretty?: string },
  name: string,
): Promise<IoK8SApiAdmissionregistrationV1Alpha1ValidatingAdmissionPolicyBinding> {
  const result =
    await api.apis.readAdmissionregistrationV1Alpha1ValidatingAdmissionPolicyBinding(
      {
        query: query,
        name: name,
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicybindings/{name}
 */
export async function patchApisPatchAdmissionregistrationV1Alpha1ValidatingAdmissionPolicyBinding(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiAdmissionregistrationV1Alpha1ValidatingAdmissionPolicyBinding> {
  const result =
    await api.apis.patchAdmissionregistrationV1Alpha1ValidatingAdmissionPolicyBinding(
      {
        query: query,
        name: name,
        body: body,
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicybindings/{name}
 */
export async function putApisReplaceAdmissionregistrationV1Alpha1ValidatingAdmissionPolicyBinding(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApiAdmissionregistrationV1Alpha1ValidatingAdmissionPolicyBinding,
): Promise<IoK8SApiAdmissionregistrationV1Alpha1ValidatingAdmissionPolicyBinding> {
  const result =
    await api.apis.replaceAdmissionregistrationV1Alpha1ValidatingAdmissionPolicyBinding(
      {
        query: query,
        name: name,
        body: body,
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/admissionregistration.k8s.io/v1alpha1/watch/validatingadmissionpolicies
 * @readonly
 */
export async function getApisWatchAdmissionregistrationV1Alpha1ValidatingAdmissionPolicyList(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result =
    await api.apis.watchAdmissionregistrationV1Alpha1ValidatingAdmissionPolicyList(
      {
        query: query,
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/admissionregistration.k8s.io/v1alpha1/watch/validatingadmissionpolicies/{name}
 * @readonly
 */
export async function getApisWatchAdmissionregistrationV1Alpha1ValidatingAdmissionPolicy(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result =
    await api.apis.watchAdmissionregistrationV1Alpha1ValidatingAdmissionPolicy({
      query: query,
      name: name,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/admissionregistration.k8s.io/v1alpha1/watch/validatingadmissionpolicybindings
 * @readonly
 */
export async function getApisWatchAdmissionregistrationV1Alpha1ValidatingAdmissionPolicyBindingList(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result =
    await api.apis.watchAdmissionregistrationV1Alpha1ValidatingAdmissionPolicyBindingList(
      {
        query: query,
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/admissionregistration.k8s.io/v1alpha1/watch/validatingadmissionpolicybindings/{name}
 * @readonly
 */
export async function getApisWatchAdmissionregistrationV1Alpha1ValidatingAdmissionPolicyBinding(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result =
    await api.apis.watchAdmissionregistrationV1Alpha1ValidatingAdmissionPolicyBinding(
      {
        query: query,
        name: name,
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apiextensions.k8s.io/
 * @readonly
 */
export async function getApisGetApiextensionsApiGroup(): Promise<IoK8SApimachineryPkgApisMetaV1APIGroup> {
  const result = await api.apis.getApiextensionsApiGroup({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apiextensions.k8s.io/v1/
 * @readonly
 */
export async function getApisGetApiextensionsV1ApiResources(): Promise<IoK8SApimachineryPkgApisMetaV1APIResourceList> {
  const result = await api.apis.getApiextensionsV1ApiResources({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/apiextensions.k8s.io/v1/customresourcedefinitions
 */
export async function deleteApisDeleteApiextensionsV1CollectionCustomResourceDefinition(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result =
    await api.apis.deleteApiextensionsV1CollectionCustomResourceDefinition({
      query: query,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apiextensions.k8s.io/v1/customresourcedefinitions
 * @readonly
 */
export async function getApisListApiextensionsV1CustomResourceDefinition(query: {
  pretty?: string;
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinitionList> {
  const result = await api.apis.listApiextensionsV1CustomResourceDefinition({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/apiextensions.k8s.io/v1/customresourcedefinitions
 */
export async function postApisCreateApiextensionsV1CustomResourceDefinition(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  /** Request body */
  body: IoK8SApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition,
): Promise<IoK8SApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition> {
  const result = await api.apis.createApiextensionsV1CustomResourceDefinition({
    query: query,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}
 */
export async function deleteApisDeleteApiextensionsV1CustomResourceDefinition(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteApiextensionsV1CustomResourceDefinition({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}
 * @readonly
 */
export async function getApisReadApiextensionsV1CustomResourceDefinition(
  query: { pretty?: string },
  name: string,
): Promise<IoK8SApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition> {
  const result = await api.apis.readApiextensionsV1CustomResourceDefinition({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}
 */
export async function patchApisPatchApiextensionsV1CustomResourceDefinition(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition> {
  const result = await api.apis.patchApiextensionsV1CustomResourceDefinition({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}
 */
export async function putApisReplaceApiextensionsV1CustomResourceDefinition(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition,
): Promise<IoK8SApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition> {
  const result = await api.apis.replaceApiextensionsV1CustomResourceDefinition({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}/status
 * @readonly
 */
export async function getApisReadApiextensionsV1CustomResourceDefinitionStatus(
  query: { pretty?: string },
  name: string,
): Promise<IoK8SApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition> {
  const result =
    await api.apis.readApiextensionsV1CustomResourceDefinitionStatus({
      query: query,
      name: name,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}/status
 */
export async function patchApisPatchApiextensionsV1CustomResourceDefinitionStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition> {
  const result =
    await api.apis.patchApiextensionsV1CustomResourceDefinitionStatus({
      query: query,
      name: name,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}/status
 */
export async function putApisReplaceApiextensionsV1CustomResourceDefinitionStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition,
): Promise<IoK8SApiextensionsApiserverPkgApisApiextensionsV1CustomResourceDefinition> {
  const result =
    await api.apis.replaceApiextensionsV1CustomResourceDefinitionStatus({
      query: query,
      name: name,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apiextensions.k8s.io/v1/watch/customresourcedefinitions
 * @readonly
 */
export async function getApisWatchApiextensionsV1CustomResourceDefinitionList(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result =
    await api.apis.watchApiextensionsV1CustomResourceDefinitionList({
      query: query,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apiextensions.k8s.io/v1/watch/customresourcedefinitions/{name}
 * @readonly
 */
export async function getApisWatchApiextensionsV1CustomResourceDefinition(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchApiextensionsV1CustomResourceDefinition({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apiregistration.k8s.io/
 * @readonly
 */
export async function getApisGetApiregistrationApiGroup(): Promise<IoK8SApimachineryPkgApisMetaV1APIGroup> {
  const result = await api.apis.getApiregistrationApiGroup({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apiregistration.k8s.io/v1/
 * @readonly
 */
export async function getApisGetApiregistrationV1ApiResources(): Promise<IoK8SApimachineryPkgApisMetaV1APIResourceList> {
  const result = await api.apis.getApiregistrationV1ApiResources({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/apiregistration.k8s.io/v1/apiservices
 */
export async function deleteApisDeleteApiregistrationV1CollectionApiService(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteApiregistrationV1CollectionApiService({
    query: query,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apiregistration.k8s.io/v1/apiservices
 * @readonly
 */
export async function getApisListApiregistrationV1ApiService(query: {
  pretty?: string;
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SKubeAggregatorPkgApisApiregistrationV1APIServiceList> {
  const result = await api.apis.listApiregistrationV1ApiService({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/apiregistration.k8s.io/v1/apiservices
 */
export async function postApisCreateApiregistrationV1ApiService(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  /** Request body */
  body: IoK8SKubeAggregatorPkgApisApiregistrationV1APIService,
): Promise<IoK8SKubeAggregatorPkgApisApiregistrationV1APIService> {
  const result = await api.apis.createApiregistrationV1ApiService({
    query: query,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/apiregistration.k8s.io/v1/apiservices/{name}
 */
export async function deleteApisDeleteApiregistrationV1ApiService(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteApiregistrationV1ApiService({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apiregistration.k8s.io/v1/apiservices/{name}
 * @readonly
 */
export async function getApisReadApiregistrationV1ApiService(
  query: { pretty?: string },
  name: string,
): Promise<IoK8SKubeAggregatorPkgApisApiregistrationV1APIService> {
  const result = await api.apis.readApiregistrationV1ApiService({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/apiregistration.k8s.io/v1/apiservices/{name}
 */
export async function patchApisPatchApiregistrationV1ApiService(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SKubeAggregatorPkgApisApiregistrationV1APIService> {
  const result = await api.apis.patchApiregistrationV1ApiService({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/apiregistration.k8s.io/v1/apiservices/{name}
 */
export async function putApisReplaceApiregistrationV1ApiService(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SKubeAggregatorPkgApisApiregistrationV1APIService,
): Promise<IoK8SKubeAggregatorPkgApisApiregistrationV1APIService> {
  const result = await api.apis.replaceApiregistrationV1ApiService({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apiregistration.k8s.io/v1/apiservices/{name}/status
 * @readonly
 */
export async function getApisReadApiregistrationV1ApiServiceStatus(
  query: { pretty?: string },
  name: string,
): Promise<IoK8SKubeAggregatorPkgApisApiregistrationV1APIService> {
  const result = await api.apis.readApiregistrationV1ApiServiceStatus({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/apiregistration.k8s.io/v1/apiservices/{name}/status
 */
export async function patchApisPatchApiregistrationV1ApiServiceStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SKubeAggregatorPkgApisApiregistrationV1APIService> {
  const result = await api.apis.patchApiregistrationV1ApiServiceStatus({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/apiregistration.k8s.io/v1/apiservices/{name}/status
 */
export async function putApisReplaceApiregistrationV1ApiServiceStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SKubeAggregatorPkgApisApiregistrationV1APIService,
): Promise<IoK8SKubeAggregatorPkgApisApiregistrationV1APIService> {
  const result = await api.apis.replaceApiregistrationV1ApiServiceStatus({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apiregistration.k8s.io/v1/watch/apiservices
 * @readonly
 */
export async function getApisWatchApiregistrationV1ApiServiceList(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchApiregistrationV1ApiServiceList({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apiregistration.k8s.io/v1/watch/apiservices/{name}
 * @readonly
 */
export async function getApisWatchApiregistrationV1ApiService(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchApiregistrationV1ApiService({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apps/
 * @readonly
 */
export async function getApisGetAppsApiGroup(): Promise<IoK8SApimachineryPkgApisMetaV1APIGroup> {
  const result = await api.apis.getAppsApiGroup({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apps/v1/
 * @readonly
 */
export async function getApisGetAppsV1ApiResources(): Promise<IoK8SApimachineryPkgApisMetaV1APIResourceList> {
  const result = await api.apis.getAppsV1ApiResources({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apps/v1/controllerrevisions
 * @readonly
 */
export async function getApisListAppsV1ControllerRevisionForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiAppsV1ControllerRevisionList> {
  const result = await api.apis.listAppsV1ControllerRevisionForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apps/v1/daemonsets
 * @readonly
 */
export async function getApisListAppsV1DaemonSetForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiAppsV1DaemonSetList> {
  const result = await api.apis.listAppsV1DaemonSetForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apps/v1/deployments
 * @readonly
 */
export async function getApisListAppsV1DeploymentForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiAppsV1DeploymentList> {
  const result = await api.apis.listAppsV1DeploymentForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/apps/v1/namespaces/{namespace}/controllerrevisions
 */
export async function deleteApisDeleteAppsV1CollectionNamespacedControllerRevision(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result =
    await api.apis.deleteAppsV1CollectionNamespacedControllerRevision({
      query: query,
      namespace: namespace,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apps/v1/namespaces/{namespace}/controllerrevisions
 * @readonly
 */
export async function getApisListAppsV1NamespacedControllerRevision(
  query: {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApiAppsV1ControllerRevisionList> {
  const result = await api.apis.listAppsV1NamespacedControllerRevision({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/apps/v1/namespaces/{namespace}/controllerrevisions
 */
export async function postApisCreateAppsV1NamespacedControllerRevision(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApiAppsV1ControllerRevision,
): Promise<IoK8SApiAppsV1ControllerRevision> {
  const result = await api.apis.createAppsV1NamespacedControllerRevision({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}
 */
export async function deleteApisDeleteAppsV1NamespacedControllerRevision(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteAppsV1NamespacedControllerRevision({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}
 * @readonly
 */
export async function getApisReadAppsV1NamespacedControllerRevision(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiAppsV1ControllerRevision> {
  const result = await api.apis.readAppsV1NamespacedControllerRevision({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}
 */
export async function patchApisPatchAppsV1NamespacedControllerRevision(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiAppsV1ControllerRevision> {
  const result = await api.apis.patchAppsV1NamespacedControllerRevision({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}
 */
export async function putApisReplaceAppsV1NamespacedControllerRevision(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiAppsV1ControllerRevision,
): Promise<IoK8SApiAppsV1ControllerRevision> {
  const result = await api.apis.replaceAppsV1NamespacedControllerRevision({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/apps/v1/namespaces/{namespace}/daemonsets
 */
export async function deleteApisDeleteAppsV1CollectionNamespacedDaemonSet(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteAppsV1CollectionNamespacedDaemonSet({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apps/v1/namespaces/{namespace}/daemonsets
 * @readonly
 */
export async function getApisListAppsV1NamespacedDaemonSet(
  query: {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApiAppsV1DaemonSetList> {
  const result = await api.apis.listAppsV1NamespacedDaemonSet({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/apps/v1/namespaces/{namespace}/daemonsets
 */
export async function postApisCreateAppsV1NamespacedDaemonSet(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApiAppsV1DaemonSet,
): Promise<IoK8SApiAppsV1DaemonSet> {
  const result = await api.apis.createAppsV1NamespacedDaemonSet({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}
 */
export async function deleteApisDeleteAppsV1NamespacedDaemonSet(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteAppsV1NamespacedDaemonSet({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}
 * @readonly
 */
export async function getApisReadAppsV1NamespacedDaemonSet(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiAppsV1DaemonSet> {
  const result = await api.apis.readAppsV1NamespacedDaemonSet({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}
 */
export async function patchApisPatchAppsV1NamespacedDaemonSet(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiAppsV1DaemonSet> {
  const result = await api.apis.patchAppsV1NamespacedDaemonSet({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}
 */
export async function putApisReplaceAppsV1NamespacedDaemonSet(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiAppsV1DaemonSet,
): Promise<IoK8SApiAppsV1DaemonSet> {
  const result = await api.apis.replaceAppsV1NamespacedDaemonSet({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}/status
 * @readonly
 */
export async function getApisReadAppsV1NamespacedDaemonSetStatus(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiAppsV1DaemonSet> {
  const result = await api.apis.readAppsV1NamespacedDaemonSetStatus({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}/status
 */
export async function patchApisPatchAppsV1NamespacedDaemonSetStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiAppsV1DaemonSet> {
  const result = await api.apis.patchAppsV1NamespacedDaemonSetStatus({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}/status
 */
export async function putApisReplaceAppsV1NamespacedDaemonSetStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiAppsV1DaemonSet,
): Promise<IoK8SApiAppsV1DaemonSet> {
  const result = await api.apis.replaceAppsV1NamespacedDaemonSetStatus({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/apps/v1/namespaces/{namespace}/deployments
 */
export async function deleteApisDeleteAppsV1CollectionNamespacedDeployment(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteAppsV1CollectionNamespacedDeployment({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apps/v1/namespaces/{namespace}/deployments
 * @readonly
 */
export async function getApisListAppsV1NamespacedDeployment(
  query: {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApiAppsV1DeploymentList> {
  const result = await api.apis.listAppsV1NamespacedDeployment({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/apps/v1/namespaces/{namespace}/deployments
 */
export async function postApisCreateAppsV1NamespacedDeployment(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApiAppsV1Deployment,
): Promise<IoK8SApiAppsV1Deployment> {
  const result = await api.apis.createAppsV1NamespacedDeployment({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/apps/v1/namespaces/{namespace}/deployments/{name}
 */
export async function deleteApisDeleteAppsV1NamespacedDeployment(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteAppsV1NamespacedDeployment({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apps/v1/namespaces/{namespace}/deployments/{name}
 * @readonly
 */
export async function getApisReadAppsV1NamespacedDeployment(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiAppsV1Deployment> {
  const result = await api.apis.readAppsV1NamespacedDeployment({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/apps/v1/namespaces/{namespace}/deployments/{name}
 */
export async function patchApisPatchAppsV1NamespacedDeployment(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiAppsV1Deployment> {
  const result = await api.apis.patchAppsV1NamespacedDeployment({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/apps/v1/namespaces/{namespace}/deployments/{name}
 */
export async function putApisReplaceAppsV1NamespacedDeployment(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiAppsV1Deployment,
): Promise<IoK8SApiAppsV1Deployment> {
  const result = await api.apis.replaceAppsV1NamespacedDeployment({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apps/v1/namespaces/{namespace}/deployments/{name}/scale
 * @readonly
 */
export async function getApisReadAppsV1NamespacedDeploymentScale(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiAutoscalingV1Scale> {
  const result = await api.apis.readAppsV1NamespacedDeploymentScale({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/apps/v1/namespaces/{namespace}/deployments/{name}/scale
 */
export async function patchApisPatchAppsV1NamespacedDeploymentScale(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiAutoscalingV1Scale> {
  const result = await api.apis.patchAppsV1NamespacedDeploymentScale({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/apps/v1/namespaces/{namespace}/deployments/{name}/scale
 */
export async function putApisReplaceAppsV1NamespacedDeploymentScale(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiAutoscalingV1Scale,
): Promise<IoK8SApiAutoscalingV1Scale> {
  const result = await api.apis.replaceAppsV1NamespacedDeploymentScale({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apps/v1/namespaces/{namespace}/deployments/{name}/status
 * @readonly
 */
export async function getApisReadAppsV1NamespacedDeploymentStatus(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiAppsV1Deployment> {
  const result = await api.apis.readAppsV1NamespacedDeploymentStatus({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/apps/v1/namespaces/{namespace}/deployments/{name}/status
 */
export async function patchApisPatchAppsV1NamespacedDeploymentStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiAppsV1Deployment> {
  const result = await api.apis.patchAppsV1NamespacedDeploymentStatus({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/apps/v1/namespaces/{namespace}/deployments/{name}/status
 */
export async function putApisReplaceAppsV1NamespacedDeploymentStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiAppsV1Deployment,
): Promise<IoK8SApiAppsV1Deployment> {
  const result = await api.apis.replaceAppsV1NamespacedDeploymentStatus({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/apps/v1/namespaces/{namespace}/replicasets
 */
export async function deleteApisDeleteAppsV1CollectionNamespacedReplicaSet(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteAppsV1CollectionNamespacedReplicaSet({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apps/v1/namespaces/{namespace}/replicasets
 * @readonly
 */
export async function getApisListAppsV1NamespacedReplicaSet(
  query: {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApiAppsV1ReplicaSetList> {
  const result = await api.apis.listAppsV1NamespacedReplicaSet({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/apps/v1/namespaces/{namespace}/replicasets
 */
export async function postApisCreateAppsV1NamespacedReplicaSet(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApiAppsV1ReplicaSet,
): Promise<IoK8SApiAppsV1ReplicaSet> {
  const result = await api.apis.createAppsV1NamespacedReplicaSet({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/apps/v1/namespaces/{namespace}/replicasets/{name}
 */
export async function deleteApisDeleteAppsV1NamespacedReplicaSet(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteAppsV1NamespacedReplicaSet({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apps/v1/namespaces/{namespace}/replicasets/{name}
 * @readonly
 */
export async function getApisReadAppsV1NamespacedReplicaSet(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiAppsV1ReplicaSet> {
  const result = await api.apis.readAppsV1NamespacedReplicaSet({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/apps/v1/namespaces/{namespace}/replicasets/{name}
 */
export async function patchApisPatchAppsV1NamespacedReplicaSet(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiAppsV1ReplicaSet> {
  const result = await api.apis.patchAppsV1NamespacedReplicaSet({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/apps/v1/namespaces/{namespace}/replicasets/{name}
 */
export async function putApisReplaceAppsV1NamespacedReplicaSet(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiAppsV1ReplicaSet,
): Promise<IoK8SApiAppsV1ReplicaSet> {
  const result = await api.apis.replaceAppsV1NamespacedReplicaSet({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/scale
 * @readonly
 */
export async function getApisReadAppsV1NamespacedReplicaSetScale(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiAutoscalingV1Scale> {
  const result = await api.apis.readAppsV1NamespacedReplicaSetScale({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/scale
 */
export async function patchApisPatchAppsV1NamespacedReplicaSetScale(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiAutoscalingV1Scale> {
  const result = await api.apis.patchAppsV1NamespacedReplicaSetScale({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/scale
 */
export async function putApisReplaceAppsV1NamespacedReplicaSetScale(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiAutoscalingV1Scale,
): Promise<IoK8SApiAutoscalingV1Scale> {
  const result = await api.apis.replaceAppsV1NamespacedReplicaSetScale({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/status
 * @readonly
 */
export async function getApisReadAppsV1NamespacedReplicaSetStatus(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiAppsV1ReplicaSet> {
  const result = await api.apis.readAppsV1NamespacedReplicaSetStatus({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/status
 */
export async function patchApisPatchAppsV1NamespacedReplicaSetStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiAppsV1ReplicaSet> {
  const result = await api.apis.patchAppsV1NamespacedReplicaSetStatus({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/status
 */
export async function putApisReplaceAppsV1NamespacedReplicaSetStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiAppsV1ReplicaSet,
): Promise<IoK8SApiAppsV1ReplicaSet> {
  const result = await api.apis.replaceAppsV1NamespacedReplicaSetStatus({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/apps/v1/namespaces/{namespace}/statefulsets
 */
export async function deleteApisDeleteAppsV1CollectionNamespacedStatefulSet(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteAppsV1CollectionNamespacedStatefulSet({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apps/v1/namespaces/{namespace}/statefulsets
 * @readonly
 */
export async function getApisListAppsV1NamespacedStatefulSet(
  query: {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApiAppsV1StatefulSetList> {
  const result = await api.apis.listAppsV1NamespacedStatefulSet({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/apps/v1/namespaces/{namespace}/statefulsets
 */
export async function postApisCreateAppsV1NamespacedStatefulSet(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApiAppsV1StatefulSet,
): Promise<IoK8SApiAppsV1StatefulSet> {
  const result = await api.apis.createAppsV1NamespacedStatefulSet({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}
 */
export async function deleteApisDeleteAppsV1NamespacedStatefulSet(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteAppsV1NamespacedStatefulSet({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}
 * @readonly
 */
export async function getApisReadAppsV1NamespacedStatefulSet(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiAppsV1StatefulSet> {
  const result = await api.apis.readAppsV1NamespacedStatefulSet({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}
 */
export async function patchApisPatchAppsV1NamespacedStatefulSet(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiAppsV1StatefulSet> {
  const result = await api.apis.patchAppsV1NamespacedStatefulSet({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}
 */
export async function putApisReplaceAppsV1NamespacedStatefulSet(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiAppsV1StatefulSet,
): Promise<IoK8SApiAppsV1StatefulSet> {
  const result = await api.apis.replaceAppsV1NamespacedStatefulSet({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/scale
 * @readonly
 */
export async function getApisReadAppsV1NamespacedStatefulSetScale(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiAutoscalingV1Scale> {
  const result = await api.apis.readAppsV1NamespacedStatefulSetScale({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/scale
 */
export async function patchApisPatchAppsV1NamespacedStatefulSetScale(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiAutoscalingV1Scale> {
  const result = await api.apis.patchAppsV1NamespacedStatefulSetScale({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/scale
 */
export async function putApisReplaceAppsV1NamespacedStatefulSetScale(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiAutoscalingV1Scale,
): Promise<IoK8SApiAutoscalingV1Scale> {
  const result = await api.apis.replaceAppsV1NamespacedStatefulSetScale({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/status
 * @readonly
 */
export async function getApisReadAppsV1NamespacedStatefulSetStatus(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiAppsV1StatefulSet> {
  const result = await api.apis.readAppsV1NamespacedStatefulSetStatus({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/status
 */
export async function patchApisPatchAppsV1NamespacedStatefulSetStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiAppsV1StatefulSet> {
  const result = await api.apis.patchAppsV1NamespacedStatefulSetStatus({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/status
 */
export async function putApisReplaceAppsV1NamespacedStatefulSetStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiAppsV1StatefulSet,
): Promise<IoK8SApiAppsV1StatefulSet> {
  const result = await api.apis.replaceAppsV1NamespacedStatefulSetStatus({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apps/v1/replicasets
 * @readonly
 */
export async function getApisListAppsV1ReplicaSetForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiAppsV1ReplicaSetList> {
  const result = await api.apis.listAppsV1ReplicaSetForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apps/v1/statefulsets
 * @readonly
 */
export async function getApisListAppsV1StatefulSetForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiAppsV1StatefulSetList> {
  const result = await api.apis.listAppsV1StatefulSetForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apps/v1/watch/controllerrevisions
 * @readonly
 */
export async function getApisWatchAppsV1ControllerRevisionListForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result =
    await api.apis.watchAppsV1ControllerRevisionListForAllNamespaces({
      query: query,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apps/v1/watch/daemonsets
 * @readonly
 */
export async function getApisWatchAppsV1DaemonSetListForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchAppsV1DaemonSetListForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apps/v1/watch/deployments
 * @readonly
 */
export async function getApisWatchAppsV1DeploymentListForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchAppsV1DeploymentListForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apps/v1/watch/namespaces/{namespace}/controllerrevisions
 * @readonly
 */
export async function getApisWatchAppsV1NamespacedControllerRevisionList(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchAppsV1NamespacedControllerRevisionList({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apps/v1/watch/namespaces/{namespace}/controllerrevisions/{name}
 * @readonly
 */
export async function getApisWatchAppsV1NamespacedControllerRevision(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchAppsV1NamespacedControllerRevision({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apps/v1/watch/namespaces/{namespace}/daemonsets
 * @readonly
 */
export async function getApisWatchAppsV1NamespacedDaemonSetList(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchAppsV1NamespacedDaemonSetList({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apps/v1/watch/namespaces/{namespace}/daemonsets/{name}
 * @readonly
 */
export async function getApisWatchAppsV1NamespacedDaemonSet(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchAppsV1NamespacedDaemonSet({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apps/v1/watch/namespaces/{namespace}/deployments
 * @readonly
 */
export async function getApisWatchAppsV1NamespacedDeploymentList(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchAppsV1NamespacedDeploymentList({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apps/v1/watch/namespaces/{namespace}/deployments/{name}
 * @readonly
 */
export async function getApisWatchAppsV1NamespacedDeployment(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchAppsV1NamespacedDeployment({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apps/v1/watch/namespaces/{namespace}/replicasets
 * @readonly
 */
export async function getApisWatchAppsV1NamespacedReplicaSetList(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchAppsV1NamespacedReplicaSetList({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apps/v1/watch/namespaces/{namespace}/replicasets/{name}
 * @readonly
 */
export async function getApisWatchAppsV1NamespacedReplicaSet(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchAppsV1NamespacedReplicaSet({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apps/v1/watch/namespaces/{namespace}/statefulsets
 * @readonly
 */
export async function getApisWatchAppsV1NamespacedStatefulSetList(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchAppsV1NamespacedStatefulSetList({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apps/v1/watch/namespaces/{namespace}/statefulsets/{name}
 * @readonly
 */
export async function getApisWatchAppsV1NamespacedStatefulSet(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchAppsV1NamespacedStatefulSet({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apps/v1/watch/replicasets
 * @readonly
 */
export async function getApisWatchAppsV1ReplicaSetListForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchAppsV1ReplicaSetListForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/apps/v1/watch/statefulsets
 * @readonly
 */
export async function getApisWatchAppsV1StatefulSetListForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchAppsV1StatefulSetListForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/authentication.k8s.io/
 * @readonly
 */
export async function getApisGetAuthenticationApiGroup(): Promise<IoK8SApimachineryPkgApisMetaV1APIGroup> {
  const result = await api.apis.getAuthenticationApiGroup({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/authentication.k8s.io/v1/
 * @readonly
 */
export async function getApisGetAuthenticationV1ApiResources(): Promise<IoK8SApimachineryPkgApisMetaV1APIResourceList> {
  const result = await api.apis.getAuthenticationV1ApiResources({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/authentication.k8s.io/v1/tokenreviews
 */
export async function postApisCreateAuthenticationV1TokenReview(
  query: {
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    pretty?: string;
  },
  /** Request body */
  body: IoK8SApiAuthenticationV1TokenReview,
): Promise<IoK8SApiAuthenticationV1TokenReview> {
  const result = await api.apis.createAuthenticationV1TokenReview({
    query: query,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/authentication.k8s.io/v1alpha1/
 * @readonly
 */
export async function getApisGetAuthenticationV1Alpha1ApiResources(): Promise<IoK8SApimachineryPkgApisMetaV1APIResourceList> {
  const result = await api.apis.getAuthenticationV1Alpha1ApiResources({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/authentication.k8s.io/v1alpha1/selfsubjectreviews
 */
export async function postApisCreateAuthenticationV1Alpha1SelfSubjectReview(
  query: {
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    pretty?: string;
  },
  /** Request body */
  body: IoK8SApiAuthenticationV1Alpha1SelfSubjectReview,
): Promise<IoK8SApiAuthenticationV1Alpha1SelfSubjectReview> {
  const result = await api.apis.createAuthenticationV1Alpha1SelfSubjectReview({
    query: query,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/authorization.k8s.io/
 * @readonly
 */
export async function getApisGetAuthorizationApiGroup(): Promise<IoK8SApimachineryPkgApisMetaV1APIGroup> {
  const result = await api.apis.getAuthorizationApiGroup({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/authorization.k8s.io/v1/
 * @readonly
 */
export async function getApisGetAuthorizationV1ApiResources(): Promise<IoK8SApimachineryPkgApisMetaV1APIResourceList> {
  const result = await api.apis.getAuthorizationV1ApiResources({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews
 */
export async function postApisCreateAuthorizationV1NamespacedLocalSubjectAccessReview(
  query: {
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    pretty?: string;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApiAuthorizationV1LocalSubjectAccessReview,
): Promise<IoK8SApiAuthorizationV1LocalSubjectAccessReview> {
  const result =
    await api.apis.createAuthorizationV1NamespacedLocalSubjectAccessReview({
      query: query,
      namespace: namespace,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/authorization.k8s.io/v1/selfsubjectaccessreviews
 */
export async function postApisCreateAuthorizationV1SelfSubjectAccessReview(
  query: {
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    pretty?: string;
  },
  /** Request body */
  body: IoK8SApiAuthorizationV1SelfSubjectAccessReview,
): Promise<IoK8SApiAuthorizationV1SelfSubjectAccessReview> {
  const result = await api.apis.createAuthorizationV1SelfSubjectAccessReview({
    query: query,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/authorization.k8s.io/v1/selfsubjectrulesreviews
 */
export async function postApisCreateAuthorizationV1SelfSubjectRulesReview(
  query: {
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    pretty?: string;
  },
  /** Request body */
  body: IoK8SApiAuthorizationV1SelfSubjectRulesReview,
): Promise<IoK8SApiAuthorizationV1SelfSubjectRulesReview> {
  const result = await api.apis.createAuthorizationV1SelfSubjectRulesReview({
    query: query,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/authorization.k8s.io/v1/subjectaccessreviews
 */
export async function postApisCreateAuthorizationV1SubjectAccessReview(
  query: {
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    pretty?: string;
  },
  /** Request body */
  body: IoK8SApiAuthorizationV1SubjectAccessReview,
): Promise<IoK8SApiAuthorizationV1SubjectAccessReview> {
  const result = await api.apis.createAuthorizationV1SubjectAccessReview({
    query: query,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/autoscaling/
 * @readonly
 */
export async function getApisGetAutoscalingApiGroup(): Promise<IoK8SApimachineryPkgApisMetaV1APIGroup> {
  const result = await api.apis.getAutoscalingApiGroup({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/autoscaling/v1/
 * @readonly
 */
export async function getApisGetAutoscalingV1ApiResources(): Promise<IoK8SApimachineryPkgApisMetaV1APIResourceList> {
  const result = await api.apis.getAutoscalingV1ApiResources({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/autoscaling/v1/horizontalpodautoscalers
 * @readonly
 */
export async function getApisListAutoscalingV1HorizontalPodAutoscalerForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiAutoscalingV1HorizontalPodAutoscalerList> {
  const result =
    await api.apis.listAutoscalingV1HorizontalPodAutoscalerForAllNamespaces({
      query: query,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers
 */
export async function deleteApisDeleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscaler(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result =
    await api.apis.deleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscaler(
      {
        query: query,
        namespace: namespace,
        body: body,
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers
 * @readonly
 */
export async function getApisListAutoscalingV1NamespacedHorizontalPodAutoscaler(
  query: {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApiAutoscalingV1HorizontalPodAutoscalerList> {
  const result =
    await api.apis.listAutoscalingV1NamespacedHorizontalPodAutoscaler({
      query: query,
      namespace: namespace,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers
 */
export async function postApisCreateAutoscalingV1NamespacedHorizontalPodAutoscaler(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApiAutoscalingV1HorizontalPodAutoscaler,
): Promise<IoK8SApiAutoscalingV1HorizontalPodAutoscaler> {
  const result =
    await api.apis.createAutoscalingV1NamespacedHorizontalPodAutoscaler({
      query: query,
      namespace: namespace,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}
 */
export async function deleteApisDeleteAutoscalingV1NamespacedHorizontalPodAutoscaler(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result =
    await api.apis.deleteAutoscalingV1NamespacedHorizontalPodAutoscaler({
      query: query,
      name: name,
      namespace: namespace,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}
 * @readonly
 */
export async function getApisReadAutoscalingV1NamespacedHorizontalPodAutoscaler(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiAutoscalingV1HorizontalPodAutoscaler> {
  const result =
    await api.apis.readAutoscalingV1NamespacedHorizontalPodAutoscaler({
      query: query,
      name: name,
      namespace: namespace,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}
 */
export async function patchApisPatchAutoscalingV1NamespacedHorizontalPodAutoscaler(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiAutoscalingV1HorizontalPodAutoscaler> {
  const result =
    await api.apis.patchAutoscalingV1NamespacedHorizontalPodAutoscaler({
      query: query,
      name: name,
      namespace: namespace,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}
 */
export async function putApisReplaceAutoscalingV1NamespacedHorizontalPodAutoscaler(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiAutoscalingV1HorizontalPodAutoscaler,
): Promise<IoK8SApiAutoscalingV1HorizontalPodAutoscaler> {
  const result =
    await api.apis.replaceAutoscalingV1NamespacedHorizontalPodAutoscaler({
      query: query,
      name: name,
      namespace: namespace,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status
 * @readonly
 */
export async function getApisReadAutoscalingV1NamespacedHorizontalPodAutoscalerStatus(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiAutoscalingV1HorizontalPodAutoscaler> {
  const result =
    await api.apis.readAutoscalingV1NamespacedHorizontalPodAutoscalerStatus({
      query: query,
      name: name,
      namespace: namespace,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status
 */
export async function patchApisPatchAutoscalingV1NamespacedHorizontalPodAutoscalerStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiAutoscalingV1HorizontalPodAutoscaler> {
  const result =
    await api.apis.patchAutoscalingV1NamespacedHorizontalPodAutoscalerStatus({
      query: query,
      name: name,
      namespace: namespace,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status
 */
export async function putApisReplaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiAutoscalingV1HorizontalPodAutoscaler,
): Promise<IoK8SApiAutoscalingV1HorizontalPodAutoscaler> {
  const result =
    await api.apis.replaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatus({
      query: query,
      name: name,
      namespace: namespace,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/autoscaling/v1/watch/horizontalpodautoscalers
 * @readonly
 */
export async function getApisWatchAutoscalingV1HorizontalPodAutoscalerListForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result =
    await api.apis.watchAutoscalingV1HorizontalPodAutoscalerListForAllNamespaces(
      {
        query: query,
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/autoscaling/v1/watch/namespaces/{namespace}/horizontalpodautoscalers
 * @readonly
 */
export async function getApisWatchAutoscalingV1NamespacedHorizontalPodAutoscalerList(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result =
    await api.apis.watchAutoscalingV1NamespacedHorizontalPodAutoscalerList({
      query: query,
      namespace: namespace,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/autoscaling/v1/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}
 * @readonly
 */
export async function getApisWatchAutoscalingV1NamespacedHorizontalPodAutoscaler(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result =
    await api.apis.watchAutoscalingV1NamespacedHorizontalPodAutoscaler({
      query: query,
      name: name,
      namespace: namespace,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/autoscaling/v2/
 * @readonly
 */
export async function getApisGetAutoscalingV2ApiResources(): Promise<IoK8SApimachineryPkgApisMetaV1APIResourceList> {
  const result = await api.apis.getAutoscalingV2ApiResources({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/autoscaling/v2/horizontalpodautoscalers
 * @readonly
 */
export async function getApisListAutoscalingV2HorizontalPodAutoscalerForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiAutoscalingV2HorizontalPodAutoscalerList> {
  const result =
    await api.apis.listAutoscalingV2HorizontalPodAutoscalerForAllNamespaces({
      query: query,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/autoscaling/v2/namespaces/{namespace}/horizontalpodautoscalers
 */
export async function deleteApisDeleteAutoscalingV2CollectionNamespacedHorizontalPodAutoscaler(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result =
    await api.apis.deleteAutoscalingV2CollectionNamespacedHorizontalPodAutoscaler(
      {
        query: query,
        namespace: namespace,
        body: body,
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/autoscaling/v2/namespaces/{namespace}/horizontalpodautoscalers
 * @readonly
 */
export async function getApisListAutoscalingV2NamespacedHorizontalPodAutoscaler(
  query: {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApiAutoscalingV2HorizontalPodAutoscalerList> {
  const result =
    await api.apis.listAutoscalingV2NamespacedHorizontalPodAutoscaler({
      query: query,
      namespace: namespace,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/autoscaling/v2/namespaces/{namespace}/horizontalpodautoscalers
 */
export async function postApisCreateAutoscalingV2NamespacedHorizontalPodAutoscaler(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApiAutoscalingV2HorizontalPodAutoscaler,
): Promise<IoK8SApiAutoscalingV2HorizontalPodAutoscaler> {
  const result =
    await api.apis.createAutoscalingV2NamespacedHorizontalPodAutoscaler({
      query: query,
      namespace: namespace,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/autoscaling/v2/namespaces/{namespace}/horizontalpodautoscalers/{name}
 */
export async function deleteApisDeleteAutoscalingV2NamespacedHorizontalPodAutoscaler(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result =
    await api.apis.deleteAutoscalingV2NamespacedHorizontalPodAutoscaler({
      query: query,
      name: name,
      namespace: namespace,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/autoscaling/v2/namespaces/{namespace}/horizontalpodautoscalers/{name}
 * @readonly
 */
export async function getApisReadAutoscalingV2NamespacedHorizontalPodAutoscaler(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiAutoscalingV2HorizontalPodAutoscaler> {
  const result =
    await api.apis.readAutoscalingV2NamespacedHorizontalPodAutoscaler({
      query: query,
      name: name,
      namespace: namespace,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/autoscaling/v2/namespaces/{namespace}/horizontalpodautoscalers/{name}
 */
export async function patchApisPatchAutoscalingV2NamespacedHorizontalPodAutoscaler(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiAutoscalingV2HorizontalPodAutoscaler> {
  const result =
    await api.apis.patchAutoscalingV2NamespacedHorizontalPodAutoscaler({
      query: query,
      name: name,
      namespace: namespace,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/autoscaling/v2/namespaces/{namespace}/horizontalpodautoscalers/{name}
 */
export async function putApisReplaceAutoscalingV2NamespacedHorizontalPodAutoscaler(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiAutoscalingV2HorizontalPodAutoscaler,
): Promise<IoK8SApiAutoscalingV2HorizontalPodAutoscaler> {
  const result =
    await api.apis.replaceAutoscalingV2NamespacedHorizontalPodAutoscaler({
      query: query,
      name: name,
      namespace: namespace,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/autoscaling/v2/namespaces/{namespace}/horizontalpodautoscalers/{name}/status
 * @readonly
 */
export async function getApisReadAutoscalingV2NamespacedHorizontalPodAutoscalerStatus(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiAutoscalingV2HorizontalPodAutoscaler> {
  const result =
    await api.apis.readAutoscalingV2NamespacedHorizontalPodAutoscalerStatus({
      query: query,
      name: name,
      namespace: namespace,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/autoscaling/v2/namespaces/{namespace}/horizontalpodautoscalers/{name}/status
 */
export async function patchApisPatchAutoscalingV2NamespacedHorizontalPodAutoscalerStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiAutoscalingV2HorizontalPodAutoscaler> {
  const result =
    await api.apis.patchAutoscalingV2NamespacedHorizontalPodAutoscalerStatus({
      query: query,
      name: name,
      namespace: namespace,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/autoscaling/v2/namespaces/{namespace}/horizontalpodautoscalers/{name}/status
 */
export async function putApisReplaceAutoscalingV2NamespacedHorizontalPodAutoscalerStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiAutoscalingV2HorizontalPodAutoscaler,
): Promise<IoK8SApiAutoscalingV2HorizontalPodAutoscaler> {
  const result =
    await api.apis.replaceAutoscalingV2NamespacedHorizontalPodAutoscalerStatus({
      query: query,
      name: name,
      namespace: namespace,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/autoscaling/v2/watch/horizontalpodautoscalers
 * @readonly
 */
export async function getApisWatchAutoscalingV2HorizontalPodAutoscalerListForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result =
    await api.apis.watchAutoscalingV2HorizontalPodAutoscalerListForAllNamespaces(
      {
        query: query,
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/autoscaling/v2/watch/namespaces/{namespace}/horizontalpodautoscalers
 * @readonly
 */
export async function getApisWatchAutoscalingV2NamespacedHorizontalPodAutoscalerList(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result =
    await api.apis.watchAutoscalingV2NamespacedHorizontalPodAutoscalerList({
      query: query,
      namespace: namespace,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/autoscaling/v2/watch/namespaces/{namespace}/horizontalpodautoscalers/{name}
 * @readonly
 */
export async function getApisWatchAutoscalingV2NamespacedHorizontalPodAutoscaler(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result =
    await api.apis.watchAutoscalingV2NamespacedHorizontalPodAutoscaler({
      query: query,
      name: name,
      namespace: namespace,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/batch/
 * @readonly
 */
export async function getApisGetBatchApiGroup(): Promise<IoK8SApimachineryPkgApisMetaV1APIGroup> {
  const result = await api.apis.getBatchApiGroup({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/batch/v1/
 * @readonly
 */
export async function getApisGetBatchV1ApiResources(): Promise<IoK8SApimachineryPkgApisMetaV1APIResourceList> {
  const result = await api.apis.getBatchV1ApiResources({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/batch/v1/cronjobs
 * @readonly
 */
export async function getApisListBatchV1CronJobForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiBatchV1CronJobList> {
  const result = await api.apis.listBatchV1CronJobForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/batch/v1/jobs
 * @readonly
 */
export async function getApisListBatchV1JobForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiBatchV1JobList> {
  const result = await api.apis.listBatchV1JobForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/batch/v1/namespaces/{namespace}/cronjobs
 */
export async function deleteApisDeleteBatchV1CollectionNamespacedCronJob(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteBatchV1CollectionNamespacedCronJob({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/batch/v1/namespaces/{namespace}/cronjobs
 * @readonly
 */
export async function getApisListBatchV1NamespacedCronJob(
  query: {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApiBatchV1CronJobList> {
  const result = await api.apis.listBatchV1NamespacedCronJob({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/batch/v1/namespaces/{namespace}/cronjobs
 */
export async function postApisCreateBatchV1NamespacedCronJob(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApiBatchV1CronJob,
): Promise<IoK8SApiBatchV1CronJob> {
  const result = await api.apis.createBatchV1NamespacedCronJob({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/batch/v1/namespaces/{namespace}/cronjobs/{name}
 */
export async function deleteApisDeleteBatchV1NamespacedCronJob(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteBatchV1NamespacedCronJob({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/batch/v1/namespaces/{namespace}/cronjobs/{name}
 * @readonly
 */
export async function getApisReadBatchV1NamespacedCronJob(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiBatchV1CronJob> {
  const result = await api.apis.readBatchV1NamespacedCronJob({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/batch/v1/namespaces/{namespace}/cronjobs/{name}
 */
export async function patchApisPatchBatchV1NamespacedCronJob(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiBatchV1CronJob> {
  const result = await api.apis.patchBatchV1NamespacedCronJob({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/batch/v1/namespaces/{namespace}/cronjobs/{name}
 */
export async function putApisReplaceBatchV1NamespacedCronJob(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiBatchV1CronJob,
): Promise<IoK8SApiBatchV1CronJob> {
  const result = await api.apis.replaceBatchV1NamespacedCronJob({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/batch/v1/namespaces/{namespace}/cronjobs/{name}/status
 * @readonly
 */
export async function getApisReadBatchV1NamespacedCronJobStatus(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiBatchV1CronJob> {
  const result = await api.apis.readBatchV1NamespacedCronJobStatus({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/batch/v1/namespaces/{namespace}/cronjobs/{name}/status
 */
export async function patchApisPatchBatchV1NamespacedCronJobStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiBatchV1CronJob> {
  const result = await api.apis.patchBatchV1NamespacedCronJobStatus({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/batch/v1/namespaces/{namespace}/cronjobs/{name}/status
 */
export async function putApisReplaceBatchV1NamespacedCronJobStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiBatchV1CronJob,
): Promise<IoK8SApiBatchV1CronJob> {
  const result = await api.apis.replaceBatchV1NamespacedCronJobStatus({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/batch/v1/namespaces/{namespace}/jobs
 */
export async function deleteApisDeleteBatchV1CollectionNamespacedJob(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteBatchV1CollectionNamespacedJob({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/batch/v1/namespaces/{namespace}/jobs
 * @readonly
 */
export async function getApisListBatchV1NamespacedJob(
  query: {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApiBatchV1JobList> {
  const result = await api.apis.listBatchV1NamespacedJob({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/batch/v1/namespaces/{namespace}/jobs
 */
export async function postApisCreateBatchV1NamespacedJob(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApiBatchV1Job,
): Promise<IoK8SApiBatchV1Job> {
  const result = await api.apis.createBatchV1NamespacedJob({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/batch/v1/namespaces/{namespace}/jobs/{name}
 */
export async function deleteApisDeleteBatchV1NamespacedJob(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteBatchV1NamespacedJob({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/batch/v1/namespaces/{namespace}/jobs/{name}
 * @readonly
 */
export async function getApisReadBatchV1NamespacedJob(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiBatchV1Job> {
  const result = await api.apis.readBatchV1NamespacedJob({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/batch/v1/namespaces/{namespace}/jobs/{name}
 */
export async function patchApisPatchBatchV1NamespacedJob(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiBatchV1Job> {
  const result = await api.apis.patchBatchV1NamespacedJob({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/batch/v1/namespaces/{namespace}/jobs/{name}
 */
export async function putApisReplaceBatchV1NamespacedJob(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiBatchV1Job,
): Promise<IoK8SApiBatchV1Job> {
  const result = await api.apis.replaceBatchV1NamespacedJob({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/batch/v1/namespaces/{namespace}/jobs/{name}/status
 * @readonly
 */
export async function getApisReadBatchV1NamespacedJobStatus(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiBatchV1Job> {
  const result = await api.apis.readBatchV1NamespacedJobStatus({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/batch/v1/namespaces/{namespace}/jobs/{name}/status
 */
export async function patchApisPatchBatchV1NamespacedJobStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiBatchV1Job> {
  const result = await api.apis.patchBatchV1NamespacedJobStatus({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/batch/v1/namespaces/{namespace}/jobs/{name}/status
 */
export async function putApisReplaceBatchV1NamespacedJobStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiBatchV1Job,
): Promise<IoK8SApiBatchV1Job> {
  const result = await api.apis.replaceBatchV1NamespacedJobStatus({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/batch/v1/watch/cronjobs
 * @readonly
 */
export async function getApisWatchBatchV1CronJobListForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchBatchV1CronJobListForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/batch/v1/watch/jobs
 * @readonly
 */
export async function getApisWatchBatchV1JobListForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchBatchV1JobListForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/batch/v1/watch/namespaces/{namespace}/cronjobs
 * @readonly
 */
export async function getApisWatchBatchV1NamespacedCronJobList(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchBatchV1NamespacedCronJobList({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/batch/v1/watch/namespaces/{namespace}/cronjobs/{name}
 * @readonly
 */
export async function getApisWatchBatchV1NamespacedCronJob(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchBatchV1NamespacedCronJob({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/batch/v1/watch/namespaces/{namespace}/jobs
 * @readonly
 */
export async function getApisWatchBatchV1NamespacedJobList(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchBatchV1NamespacedJobList({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/batch/v1/watch/namespaces/{namespace}/jobs/{name}
 * @readonly
 */
export async function getApisWatchBatchV1NamespacedJob(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchBatchV1NamespacedJob({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/certificates.k8s.io/
 * @readonly
 */
export async function getApisGetCertificatesApiGroup(): Promise<IoK8SApimachineryPkgApisMetaV1APIGroup> {
  const result = await api.apis.getCertificatesApiGroup({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/certificates.k8s.io/v1/
 * @readonly
 */
export async function getApisGetCertificatesV1ApiResources(): Promise<IoK8SApimachineryPkgApisMetaV1APIResourceList> {
  const result = await api.apis.getCertificatesV1ApiResources({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/certificates.k8s.io/v1/certificatesigningrequests
 */
export async function deleteApisDeleteCertificatesV1CollectionCertificateSigningRequest(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result =
    await api.apis.deleteCertificatesV1CollectionCertificateSigningRequest({
      query: query,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/certificates.k8s.io/v1/certificatesigningrequests
 * @readonly
 */
export async function getApisListCertificatesV1CertificateSigningRequest(query: {
  pretty?: string;
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiCertificatesV1CertificateSigningRequestList> {
  const result = await api.apis.listCertificatesV1CertificateSigningRequest({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/certificates.k8s.io/v1/certificatesigningrequests
 */
export async function postApisCreateCertificatesV1CertificateSigningRequest(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  /** Request body */
  body: IoK8SApiCertificatesV1CertificateSigningRequest,
): Promise<IoK8SApiCertificatesV1CertificateSigningRequest> {
  const result = await api.apis.createCertificatesV1CertificateSigningRequest({
    query: query,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}
 */
export async function deleteApisDeleteCertificatesV1CertificateSigningRequest(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteCertificatesV1CertificateSigningRequest({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}
 * @readonly
 */
export async function getApisReadCertificatesV1CertificateSigningRequest(
  query: { pretty?: string },
  name: string,
): Promise<IoK8SApiCertificatesV1CertificateSigningRequest> {
  const result = await api.apis.readCertificatesV1CertificateSigningRequest({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}
 */
export async function patchApisPatchCertificatesV1CertificateSigningRequest(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiCertificatesV1CertificateSigningRequest> {
  const result = await api.apis.patchCertificatesV1CertificateSigningRequest({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}
 */
export async function putApisReplaceCertificatesV1CertificateSigningRequest(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApiCertificatesV1CertificateSigningRequest,
): Promise<IoK8SApiCertificatesV1CertificateSigningRequest> {
  const result = await api.apis.replaceCertificatesV1CertificateSigningRequest({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/approval
 * @readonly
 */
export async function getApisReadCertificatesV1CertificateSigningRequestApproval(
  query: { pretty?: string },
  name: string,
): Promise<IoK8SApiCertificatesV1CertificateSigningRequest> {
  const result =
    await api.apis.readCertificatesV1CertificateSigningRequestApproval({
      query: query,
      name: name,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/approval
 */
export async function patchApisPatchCertificatesV1CertificateSigningRequestApproval(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiCertificatesV1CertificateSigningRequest> {
  const result =
    await api.apis.patchCertificatesV1CertificateSigningRequestApproval({
      query: query,
      name: name,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/approval
 */
export async function putApisReplaceCertificatesV1CertificateSigningRequestApproval(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApiCertificatesV1CertificateSigningRequest,
): Promise<IoK8SApiCertificatesV1CertificateSigningRequest> {
  const result =
    await api.apis.replaceCertificatesV1CertificateSigningRequestApproval({
      query: query,
      name: name,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/status
 * @readonly
 */
export async function getApisReadCertificatesV1CertificateSigningRequestStatus(
  query: { pretty?: string },
  name: string,
): Promise<IoK8SApiCertificatesV1CertificateSigningRequest> {
  const result =
    await api.apis.readCertificatesV1CertificateSigningRequestStatus({
      query: query,
      name: name,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/status
 */
export async function patchApisPatchCertificatesV1CertificateSigningRequestStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiCertificatesV1CertificateSigningRequest> {
  const result =
    await api.apis.patchCertificatesV1CertificateSigningRequestStatus({
      query: query,
      name: name,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/status
 */
export async function putApisReplaceCertificatesV1CertificateSigningRequestStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApiCertificatesV1CertificateSigningRequest,
): Promise<IoK8SApiCertificatesV1CertificateSigningRequest> {
  const result =
    await api.apis.replaceCertificatesV1CertificateSigningRequestStatus({
      query: query,
      name: name,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/certificates.k8s.io/v1/watch/certificatesigningrequests
 * @readonly
 */
export async function getApisWatchCertificatesV1CertificateSigningRequestList(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result =
    await api.apis.watchCertificatesV1CertificateSigningRequestList({
      query: query,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/certificates.k8s.io/v1/watch/certificatesigningrequests/{name}
 * @readonly
 */
export async function getApisWatchCertificatesV1CertificateSigningRequest(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchCertificatesV1CertificateSigningRequest({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/coordination.k8s.io/
 * @readonly
 */
export async function getApisGetCoordinationApiGroup(): Promise<IoK8SApimachineryPkgApisMetaV1APIGroup> {
  const result = await api.apis.getCoordinationApiGroup({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/coordination.k8s.io/v1/
 * @readonly
 */
export async function getApisGetCoordinationV1ApiResources(): Promise<IoK8SApimachineryPkgApisMetaV1APIResourceList> {
  const result = await api.apis.getCoordinationV1ApiResources({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/coordination.k8s.io/v1/leases
 * @readonly
 */
export async function getApisListCoordinationV1LeaseForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiCoordinationV1LeaseList> {
  const result = await api.apis.listCoordinationV1LeaseForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/coordination.k8s.io/v1/namespaces/{namespace}/leases
 */
export async function deleteApisDeleteCoordinationV1CollectionNamespacedLease(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteCoordinationV1CollectionNamespacedLease({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/coordination.k8s.io/v1/namespaces/{namespace}/leases
 * @readonly
 */
export async function getApisListCoordinationV1NamespacedLease(
  query: {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApiCoordinationV1LeaseList> {
  const result = await api.apis.listCoordinationV1NamespacedLease({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/coordination.k8s.io/v1/namespaces/{namespace}/leases
 */
export async function postApisCreateCoordinationV1NamespacedLease(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApiCoordinationV1Lease,
): Promise<IoK8SApiCoordinationV1Lease> {
  const result = await api.apis.createCoordinationV1NamespacedLease({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/coordination.k8s.io/v1/namespaces/{namespace}/leases/{name}
 */
export async function deleteApisDeleteCoordinationV1NamespacedLease(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteCoordinationV1NamespacedLease({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/coordination.k8s.io/v1/namespaces/{namespace}/leases/{name}
 * @readonly
 */
export async function getApisReadCoordinationV1NamespacedLease(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiCoordinationV1Lease> {
  const result = await api.apis.readCoordinationV1NamespacedLease({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/coordination.k8s.io/v1/namespaces/{namespace}/leases/{name}
 */
export async function patchApisPatchCoordinationV1NamespacedLease(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiCoordinationV1Lease> {
  const result = await api.apis.patchCoordinationV1NamespacedLease({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/coordination.k8s.io/v1/namespaces/{namespace}/leases/{name}
 */
export async function putApisReplaceCoordinationV1NamespacedLease(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiCoordinationV1Lease,
): Promise<IoK8SApiCoordinationV1Lease> {
  const result = await api.apis.replaceCoordinationV1NamespacedLease({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/coordination.k8s.io/v1/watch/leases
 * @readonly
 */
export async function getApisWatchCoordinationV1LeaseListForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchCoordinationV1LeaseListForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/coordination.k8s.io/v1/watch/namespaces/{namespace}/leases
 * @readonly
 */
export async function getApisWatchCoordinationV1NamespacedLeaseList(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchCoordinationV1NamespacedLeaseList({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/coordination.k8s.io/v1/watch/namespaces/{namespace}/leases/{name}
 * @readonly
 */
export async function getApisWatchCoordinationV1NamespacedLease(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchCoordinationV1NamespacedLease({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/discovery.k8s.io/
 * @readonly
 */
export async function getApisGetDiscoveryApiGroup(): Promise<IoK8SApimachineryPkgApisMetaV1APIGroup> {
  const result = await api.apis.getDiscoveryApiGroup({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/discovery.k8s.io/v1/
 * @readonly
 */
export async function getApisGetDiscoveryV1ApiResources(): Promise<IoK8SApimachineryPkgApisMetaV1APIResourceList> {
  const result = await api.apis.getDiscoveryV1ApiResources({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/discovery.k8s.io/v1/endpointslices
 * @readonly
 */
export async function getApisListDiscoveryV1EndpointSliceForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiDiscoveryV1EndpointSliceList> {
  const result = await api.apis.listDiscoveryV1EndpointSliceForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/discovery.k8s.io/v1/namespaces/{namespace}/endpointslices
 */
export async function deleteApisDeleteDiscoveryV1CollectionNamespacedEndpointSlice(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result =
    await api.apis.deleteDiscoveryV1CollectionNamespacedEndpointSlice({
      query: query,
      namespace: namespace,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/discovery.k8s.io/v1/namespaces/{namespace}/endpointslices
 * @readonly
 */
export async function getApisListDiscoveryV1NamespacedEndpointSlice(
  query: {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApiDiscoveryV1EndpointSliceList> {
  const result = await api.apis.listDiscoveryV1NamespacedEndpointSlice({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/discovery.k8s.io/v1/namespaces/{namespace}/endpointslices
 */
export async function postApisCreateDiscoveryV1NamespacedEndpointSlice(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApiDiscoveryV1EndpointSlice,
): Promise<IoK8SApiDiscoveryV1EndpointSlice> {
  const result = await api.apis.createDiscoveryV1NamespacedEndpointSlice({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/discovery.k8s.io/v1/namespaces/{namespace}/endpointslices/{name}
 */
export async function deleteApisDeleteDiscoveryV1NamespacedEndpointSlice(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteDiscoveryV1NamespacedEndpointSlice({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/discovery.k8s.io/v1/namespaces/{namespace}/endpointslices/{name}
 * @readonly
 */
export async function getApisReadDiscoveryV1NamespacedEndpointSlice(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiDiscoveryV1EndpointSlice> {
  const result = await api.apis.readDiscoveryV1NamespacedEndpointSlice({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/discovery.k8s.io/v1/namespaces/{namespace}/endpointslices/{name}
 */
export async function patchApisPatchDiscoveryV1NamespacedEndpointSlice(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiDiscoveryV1EndpointSlice> {
  const result = await api.apis.patchDiscoveryV1NamespacedEndpointSlice({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/discovery.k8s.io/v1/namespaces/{namespace}/endpointslices/{name}
 */
export async function putApisReplaceDiscoveryV1NamespacedEndpointSlice(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiDiscoveryV1EndpointSlice,
): Promise<IoK8SApiDiscoveryV1EndpointSlice> {
  const result = await api.apis.replaceDiscoveryV1NamespacedEndpointSlice({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/discovery.k8s.io/v1/watch/endpointslices
 * @readonly
 */
export async function getApisWatchDiscoveryV1EndpointSliceListForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result =
    await api.apis.watchDiscoveryV1EndpointSliceListForAllNamespaces({
      query: query,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/discovery.k8s.io/v1/watch/namespaces/{namespace}/endpointslices
 * @readonly
 */
export async function getApisWatchDiscoveryV1NamespacedEndpointSliceList(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchDiscoveryV1NamespacedEndpointSliceList({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/discovery.k8s.io/v1/watch/namespaces/{namespace}/endpointslices/{name}
 * @readonly
 */
export async function getApisWatchDiscoveryV1NamespacedEndpointSlice(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchDiscoveryV1NamespacedEndpointSlice({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/events.k8s.io/
 * @readonly
 */
export async function getApisGetEventsApiGroup(): Promise<IoK8SApimachineryPkgApisMetaV1APIGroup> {
  const result = await api.apis.getEventsApiGroup({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/events.k8s.io/v1/
 * @readonly
 */
export async function getApisGetEventsV1ApiResources(): Promise<IoK8SApimachineryPkgApisMetaV1APIResourceList> {
  const result = await api.apis.getEventsV1ApiResources({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/events.k8s.io/v1/events
 * @readonly
 */
export async function getApisListEventsV1EventForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiEventsV1EventList> {
  const result = await api.apis.listEventsV1EventForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/events.k8s.io/v1/namespaces/{namespace}/events
 */
export async function deleteApisDeleteEventsV1CollectionNamespacedEvent(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteEventsV1CollectionNamespacedEvent({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/events.k8s.io/v1/namespaces/{namespace}/events
 * @readonly
 */
export async function getApisListEventsV1NamespacedEvent(
  query: {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApiEventsV1EventList> {
  const result = await api.apis.listEventsV1NamespacedEvent({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/events.k8s.io/v1/namespaces/{namespace}/events
 */
export async function postApisCreateEventsV1NamespacedEvent(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApiEventsV1Event,
): Promise<IoK8SApiEventsV1Event> {
  const result = await api.apis.createEventsV1NamespacedEvent({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/events.k8s.io/v1/namespaces/{namespace}/events/{name}
 */
export async function deleteApisDeleteEventsV1NamespacedEvent(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteEventsV1NamespacedEvent({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/events.k8s.io/v1/namespaces/{namespace}/events/{name}
 * @readonly
 */
export async function getApisReadEventsV1NamespacedEvent(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiEventsV1Event> {
  const result = await api.apis.readEventsV1NamespacedEvent({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/events.k8s.io/v1/namespaces/{namespace}/events/{name}
 */
export async function patchApisPatchEventsV1NamespacedEvent(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiEventsV1Event> {
  const result = await api.apis.patchEventsV1NamespacedEvent({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/events.k8s.io/v1/namespaces/{namespace}/events/{name}
 */
export async function putApisReplaceEventsV1NamespacedEvent(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiEventsV1Event,
): Promise<IoK8SApiEventsV1Event> {
  const result = await api.apis.replaceEventsV1NamespacedEvent({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/events.k8s.io/v1/watch/events
 * @readonly
 */
export async function getApisWatchEventsV1EventListForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchEventsV1EventListForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/events.k8s.io/v1/watch/namespaces/{namespace}/events
 * @readonly
 */
export async function getApisWatchEventsV1NamespacedEventList(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchEventsV1NamespacedEventList({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/events.k8s.io/v1/watch/namespaces/{namespace}/events/{name}
 * @readonly
 */
export async function getApisWatchEventsV1NamespacedEvent(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchEventsV1NamespacedEvent({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/flowcontrol.apiserver.k8s.io/
 * @readonly
 */
export async function getApisGetFlowcontrolApiserverApiGroup(): Promise<IoK8SApimachineryPkgApisMetaV1APIGroup> {
  const result = await api.apis.getFlowcontrolApiserverApiGroup({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/flowcontrol.apiserver.k8s.io/v1beta2/
 * @readonly
 */
export async function getApisGetFlowcontrolApiserverV1Beta2ApiResources(): Promise<IoK8SApimachineryPkgApisMetaV1APIResourceList> {
  const result = await api.apis.getFlowcontrolApiserverV1Beta2ApiResources({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas
 */
export async function deleteApisDeleteFlowcontrolApiserverV1Beta2CollectionFlowSchema(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result =
    await api.apis.deleteFlowcontrolApiserverV1Beta2CollectionFlowSchema({
      query: query,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas
 * @readonly
 */
export async function getApisListFlowcontrolApiserverV1Beta2FlowSchema(query: {
  pretty?: string;
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiFlowcontrolV1Beta2FlowSchemaList> {
  const result = await api.apis.listFlowcontrolApiserverV1Beta2FlowSchema({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas
 */
export async function postApisCreateFlowcontrolApiserverV1Beta2FlowSchema(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  /** Request body */
  body: IoK8SApiFlowcontrolV1Beta2FlowSchema,
): Promise<IoK8SApiFlowcontrolV1Beta2FlowSchema> {
  const result = await api.apis.createFlowcontrolApiserverV1Beta2FlowSchema({
    query: query,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/{name}
 */
export async function deleteApisDeleteFlowcontrolApiserverV1Beta2FlowSchema(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteFlowcontrolApiserverV1Beta2FlowSchema({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/{name}
 * @readonly
 */
export async function getApisReadFlowcontrolApiserverV1Beta2FlowSchema(
  query: { pretty?: string },
  name: string,
): Promise<IoK8SApiFlowcontrolV1Beta2FlowSchema> {
  const result = await api.apis.readFlowcontrolApiserverV1Beta2FlowSchema({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/{name}
 */
export async function patchApisPatchFlowcontrolApiserverV1Beta2FlowSchema(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiFlowcontrolV1Beta2FlowSchema> {
  const result = await api.apis.patchFlowcontrolApiserverV1Beta2FlowSchema({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/{name}
 */
export async function putApisReplaceFlowcontrolApiserverV1Beta2FlowSchema(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApiFlowcontrolV1Beta2FlowSchema,
): Promise<IoK8SApiFlowcontrolV1Beta2FlowSchema> {
  const result = await api.apis.replaceFlowcontrolApiserverV1Beta2FlowSchema({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/{name}/status
 * @readonly
 */
export async function getApisReadFlowcontrolApiserverV1Beta2FlowSchemaStatus(
  query: { pretty?: string },
  name: string,
): Promise<IoK8SApiFlowcontrolV1Beta2FlowSchema> {
  const result = await api.apis.readFlowcontrolApiserverV1Beta2FlowSchemaStatus(
    {
      query: query,
      name: name,
    },
  );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/{name}/status
 */
export async function patchApisPatchFlowcontrolApiserverV1Beta2FlowSchemaStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiFlowcontrolV1Beta2FlowSchema> {
  const result =
    await api.apis.patchFlowcontrolApiserverV1Beta2FlowSchemaStatus({
      query: query,
      name: name,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/flowcontrol.apiserver.k8s.io/v1beta2/flowschemas/{name}/status
 */
export async function putApisReplaceFlowcontrolApiserverV1Beta2FlowSchemaStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApiFlowcontrolV1Beta2FlowSchema,
): Promise<IoK8SApiFlowcontrolV1Beta2FlowSchema> {
  const result =
    await api.apis.replaceFlowcontrolApiserverV1Beta2FlowSchemaStatus({
      query: query,
      name: name,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations
 */
export async function deleteApisDeleteFlowcontrolApiserverV1Beta2CollectionPriorityLevelConfiguration(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result =
    await api.apis.deleteFlowcontrolApiserverV1Beta2CollectionPriorityLevelConfiguration(
      {
        query: query,
        body: body,
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations
 * @readonly
 */
export async function getApisListFlowcontrolApiserverV1Beta2PriorityLevelConfiguration(query: {
  pretty?: string;
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiFlowcontrolV1Beta2PriorityLevelConfigurationList> {
  const result =
    await api.apis.listFlowcontrolApiserverV1Beta2PriorityLevelConfiguration({
      query: query,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations
 */
export async function postApisCreateFlowcontrolApiserverV1Beta2PriorityLevelConfiguration(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  /** Request body */
  body: IoK8SApiFlowcontrolV1Beta2PriorityLevelConfiguration,
): Promise<IoK8SApiFlowcontrolV1Beta2PriorityLevelConfiguration> {
  const result =
    await api.apis.createFlowcontrolApiserverV1Beta2PriorityLevelConfiguration({
      query: query,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/{name}
 */
export async function deleteApisDeleteFlowcontrolApiserverV1Beta2PriorityLevelConfiguration(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result =
    await api.apis.deleteFlowcontrolApiserverV1Beta2PriorityLevelConfiguration({
      query: query,
      name: name,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/{name}
 * @readonly
 */
export async function getApisReadFlowcontrolApiserverV1Beta2PriorityLevelConfiguration(
  query: { pretty?: string },
  name: string,
): Promise<IoK8SApiFlowcontrolV1Beta2PriorityLevelConfiguration> {
  const result =
    await api.apis.readFlowcontrolApiserverV1Beta2PriorityLevelConfiguration({
      query: query,
      name: name,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/{name}
 */
export async function patchApisPatchFlowcontrolApiserverV1Beta2PriorityLevelConfiguration(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiFlowcontrolV1Beta2PriorityLevelConfiguration> {
  const result =
    await api.apis.patchFlowcontrolApiserverV1Beta2PriorityLevelConfiguration({
      query: query,
      name: name,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/{name}
 */
export async function putApisReplaceFlowcontrolApiserverV1Beta2PriorityLevelConfiguration(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApiFlowcontrolV1Beta2PriorityLevelConfiguration,
): Promise<IoK8SApiFlowcontrolV1Beta2PriorityLevelConfiguration> {
  const result =
    await api.apis.replaceFlowcontrolApiserverV1Beta2PriorityLevelConfiguration(
      {
        query: query,
        name: name,
        body: body,
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/{name}/status
 * @readonly
 */
export async function getApisReadFlowcontrolApiserverV1Beta2PriorityLevelConfigurationStatus(
  query: { pretty?: string },
  name: string,
): Promise<IoK8SApiFlowcontrolV1Beta2PriorityLevelConfiguration> {
  const result =
    await api.apis.readFlowcontrolApiserverV1Beta2PriorityLevelConfigurationStatus(
      {
        query: query,
        name: name,
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/{name}/status
 */
export async function patchApisPatchFlowcontrolApiserverV1Beta2PriorityLevelConfigurationStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiFlowcontrolV1Beta2PriorityLevelConfiguration> {
  const result =
    await api.apis.patchFlowcontrolApiserverV1Beta2PriorityLevelConfigurationStatus(
      {
        query: query,
        name: name,
        body: body,
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/flowcontrol.apiserver.k8s.io/v1beta2/prioritylevelconfigurations/{name}/status
 */
export async function putApisReplaceFlowcontrolApiserverV1Beta2PriorityLevelConfigurationStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApiFlowcontrolV1Beta2PriorityLevelConfiguration,
): Promise<IoK8SApiFlowcontrolV1Beta2PriorityLevelConfiguration> {
  const result =
    await api.apis.replaceFlowcontrolApiserverV1Beta2PriorityLevelConfigurationStatus(
      {
        query: query,
        name: name,
        body: body,
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/flowcontrol.apiserver.k8s.io/v1beta2/watch/flowschemas
 * @readonly
 */
export async function getApisWatchFlowcontrolApiserverV1Beta2FlowSchemaList(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchFlowcontrolApiserverV1Beta2FlowSchemaList({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/flowcontrol.apiserver.k8s.io/v1beta2/watch/flowschemas/{name}
 * @readonly
 */
export async function getApisWatchFlowcontrolApiserverV1Beta2FlowSchema(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchFlowcontrolApiserverV1Beta2FlowSchema({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/flowcontrol.apiserver.k8s.io/v1beta2/watch/prioritylevelconfigurations
 * @readonly
 */
export async function getApisWatchFlowcontrolApiserverV1Beta2PriorityLevelConfigurationList(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result =
    await api.apis.watchFlowcontrolApiserverV1Beta2PriorityLevelConfigurationList(
      {
        query: query,
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/flowcontrol.apiserver.k8s.io/v1beta2/watch/prioritylevelconfigurations/{name}
 * @readonly
 */
export async function getApisWatchFlowcontrolApiserverV1Beta2PriorityLevelConfiguration(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result =
    await api.apis.watchFlowcontrolApiserverV1Beta2PriorityLevelConfiguration({
      query: query,
      name: name,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/flowcontrol.apiserver.k8s.io/v1beta3/
 * @readonly
 */
export async function getApisGetFlowcontrolApiserverV1Beta3ApiResources(): Promise<IoK8SApimachineryPkgApisMetaV1APIResourceList> {
  const result = await api.apis.getFlowcontrolApiserverV1Beta3ApiResources({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas
 */
export async function deleteApisDeleteFlowcontrolApiserverV1Beta3CollectionFlowSchema(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result =
    await api.apis.deleteFlowcontrolApiserverV1Beta3CollectionFlowSchema({
      query: query,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas
 * @readonly
 */
export async function getApisListFlowcontrolApiserverV1Beta3FlowSchema(query: {
  pretty?: string;
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiFlowcontrolV1Beta3FlowSchemaList> {
  const result = await api.apis.listFlowcontrolApiserverV1Beta3FlowSchema({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas
 */
export async function postApisCreateFlowcontrolApiserverV1Beta3FlowSchema(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  /** Request body */
  body: IoK8SApiFlowcontrolV1Beta3FlowSchema,
): Promise<IoK8SApiFlowcontrolV1Beta3FlowSchema> {
  const result = await api.apis.createFlowcontrolApiserverV1Beta3FlowSchema({
    query: query,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas/{name}
 */
export async function deleteApisDeleteFlowcontrolApiserverV1Beta3FlowSchema(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteFlowcontrolApiserverV1Beta3FlowSchema({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas/{name}
 * @readonly
 */
export async function getApisReadFlowcontrolApiserverV1Beta3FlowSchema(
  query: { pretty?: string },
  name: string,
): Promise<IoK8SApiFlowcontrolV1Beta3FlowSchema> {
  const result = await api.apis.readFlowcontrolApiserverV1Beta3FlowSchema({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas/{name}
 */
export async function patchApisPatchFlowcontrolApiserverV1Beta3FlowSchema(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiFlowcontrolV1Beta3FlowSchema> {
  const result = await api.apis.patchFlowcontrolApiserverV1Beta3FlowSchema({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas/{name}
 */
export async function putApisReplaceFlowcontrolApiserverV1Beta3FlowSchema(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApiFlowcontrolV1Beta3FlowSchema,
): Promise<IoK8SApiFlowcontrolV1Beta3FlowSchema> {
  const result = await api.apis.replaceFlowcontrolApiserverV1Beta3FlowSchema({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas/{name}/status
 * @readonly
 */
export async function getApisReadFlowcontrolApiserverV1Beta3FlowSchemaStatus(
  query: { pretty?: string },
  name: string,
): Promise<IoK8SApiFlowcontrolV1Beta3FlowSchema> {
  const result = await api.apis.readFlowcontrolApiserverV1Beta3FlowSchemaStatus(
    {
      query: query,
      name: name,
    },
  );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas/{name}/status
 */
export async function patchApisPatchFlowcontrolApiserverV1Beta3FlowSchemaStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiFlowcontrolV1Beta3FlowSchema> {
  const result =
    await api.apis.patchFlowcontrolApiserverV1Beta3FlowSchemaStatus({
      query: query,
      name: name,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas/{name}/status
 */
export async function putApisReplaceFlowcontrolApiserverV1Beta3FlowSchemaStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApiFlowcontrolV1Beta3FlowSchema,
): Promise<IoK8SApiFlowcontrolV1Beta3FlowSchema> {
  const result =
    await api.apis.replaceFlowcontrolApiserverV1Beta3FlowSchemaStatus({
      query: query,
      name: name,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations
 */
export async function deleteApisDeleteFlowcontrolApiserverV1Beta3CollectionPriorityLevelConfiguration(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result =
    await api.apis.deleteFlowcontrolApiserverV1Beta3CollectionPriorityLevelConfiguration(
      {
        query: query,
        body: body,
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations
 * @readonly
 */
export async function getApisListFlowcontrolApiserverV1Beta3PriorityLevelConfiguration(query: {
  pretty?: string;
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiFlowcontrolV1Beta3PriorityLevelConfigurationList> {
  const result =
    await api.apis.listFlowcontrolApiserverV1Beta3PriorityLevelConfiguration({
      query: query,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations
 */
export async function postApisCreateFlowcontrolApiserverV1Beta3PriorityLevelConfiguration(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  /** Request body */
  body: IoK8SApiFlowcontrolV1Beta3PriorityLevelConfiguration,
): Promise<IoK8SApiFlowcontrolV1Beta3PriorityLevelConfiguration> {
  const result =
    await api.apis.createFlowcontrolApiserverV1Beta3PriorityLevelConfiguration({
      query: query,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations/{name}
 */
export async function deleteApisDeleteFlowcontrolApiserverV1Beta3PriorityLevelConfiguration(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result =
    await api.apis.deleteFlowcontrolApiserverV1Beta3PriorityLevelConfiguration({
      query: query,
      name: name,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations/{name}
 * @readonly
 */
export async function getApisReadFlowcontrolApiserverV1Beta3PriorityLevelConfiguration(
  query: { pretty?: string },
  name: string,
): Promise<IoK8SApiFlowcontrolV1Beta3PriorityLevelConfiguration> {
  const result =
    await api.apis.readFlowcontrolApiserverV1Beta3PriorityLevelConfiguration({
      query: query,
      name: name,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations/{name}
 */
export async function patchApisPatchFlowcontrolApiserverV1Beta3PriorityLevelConfiguration(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiFlowcontrolV1Beta3PriorityLevelConfiguration> {
  const result =
    await api.apis.patchFlowcontrolApiserverV1Beta3PriorityLevelConfiguration({
      query: query,
      name: name,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations/{name}
 */
export async function putApisReplaceFlowcontrolApiserverV1Beta3PriorityLevelConfiguration(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApiFlowcontrolV1Beta3PriorityLevelConfiguration,
): Promise<IoK8SApiFlowcontrolV1Beta3PriorityLevelConfiguration> {
  const result =
    await api.apis.replaceFlowcontrolApiserverV1Beta3PriorityLevelConfiguration(
      {
        query: query,
        name: name,
        body: body,
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations/{name}/status
 * @readonly
 */
export async function getApisReadFlowcontrolApiserverV1Beta3PriorityLevelConfigurationStatus(
  query: { pretty?: string },
  name: string,
): Promise<IoK8SApiFlowcontrolV1Beta3PriorityLevelConfiguration> {
  const result =
    await api.apis.readFlowcontrolApiserverV1Beta3PriorityLevelConfigurationStatus(
      {
        query: query,
        name: name,
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations/{name}/status
 */
export async function patchApisPatchFlowcontrolApiserverV1Beta3PriorityLevelConfigurationStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiFlowcontrolV1Beta3PriorityLevelConfiguration> {
  const result =
    await api.apis.patchFlowcontrolApiserverV1Beta3PriorityLevelConfigurationStatus(
      {
        query: query,
        name: name,
        body: body,
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations/{name}/status
 */
export async function putApisReplaceFlowcontrolApiserverV1Beta3PriorityLevelConfigurationStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApiFlowcontrolV1Beta3PriorityLevelConfiguration,
): Promise<IoK8SApiFlowcontrolV1Beta3PriorityLevelConfiguration> {
  const result =
    await api.apis.replaceFlowcontrolApiserverV1Beta3PriorityLevelConfigurationStatus(
      {
        query: query,
        name: name,
        body: body,
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/flowcontrol.apiserver.k8s.io/v1beta3/watch/flowschemas
 * @readonly
 */
export async function getApisWatchFlowcontrolApiserverV1Beta3FlowSchemaList(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchFlowcontrolApiserverV1Beta3FlowSchemaList({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/flowcontrol.apiserver.k8s.io/v1beta3/watch/flowschemas/{name}
 * @readonly
 */
export async function getApisWatchFlowcontrolApiserverV1Beta3FlowSchema(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchFlowcontrolApiserverV1Beta3FlowSchema({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/flowcontrol.apiserver.k8s.io/v1beta3/watch/prioritylevelconfigurations
 * @readonly
 */
export async function getApisWatchFlowcontrolApiserverV1Beta3PriorityLevelConfigurationList(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result =
    await api.apis.watchFlowcontrolApiserverV1Beta3PriorityLevelConfigurationList(
      {
        query: query,
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/flowcontrol.apiserver.k8s.io/v1beta3/watch/prioritylevelconfigurations/{name}
 * @readonly
 */
export async function getApisWatchFlowcontrolApiserverV1Beta3PriorityLevelConfiguration(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result =
    await api.apis.watchFlowcontrolApiserverV1Beta3PriorityLevelConfiguration({
      query: query,
      name: name,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/internal.apiserver.k8s.io/
 * @readonly
 */
export async function getApisGetInternalApiserverApiGroup(): Promise<IoK8SApimachineryPkgApisMetaV1APIGroup> {
  const result = await api.apis.getInternalApiserverApiGroup({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/internal.apiserver.k8s.io/v1alpha1/
 * @readonly
 */
export async function getApisGetInternalApiserverV1Alpha1ApiResources(): Promise<IoK8SApimachineryPkgApisMetaV1APIResourceList> {
  const result = await api.apis.getInternalApiserverV1Alpha1ApiResources({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/internal.apiserver.k8s.io/v1alpha1/storageversions
 */
export async function deleteApisDeleteInternalApiserverV1Alpha1CollectionStorageVersion(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result =
    await api.apis.deleteInternalApiserverV1Alpha1CollectionStorageVersion({
      query: query,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/internal.apiserver.k8s.io/v1alpha1/storageversions
 * @readonly
 */
export async function getApisListInternalApiserverV1Alpha1StorageVersion(query: {
  pretty?: string;
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiApiserverinternalV1Alpha1StorageVersionList> {
  const result = await api.apis.listInternalApiserverV1Alpha1StorageVersion({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/internal.apiserver.k8s.io/v1alpha1/storageversions
 */
export async function postApisCreateInternalApiserverV1Alpha1StorageVersion(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  /** Request body */
  body: IoK8SApiApiserverinternalV1Alpha1StorageVersion,
): Promise<IoK8SApiApiserverinternalV1Alpha1StorageVersion> {
  const result = await api.apis.createInternalApiserverV1Alpha1StorageVersion({
    query: query,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/internal.apiserver.k8s.io/v1alpha1/storageversions/{name}
 */
export async function deleteApisDeleteInternalApiserverV1Alpha1StorageVersion(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteInternalApiserverV1Alpha1StorageVersion({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/internal.apiserver.k8s.io/v1alpha1/storageversions/{name}
 * @readonly
 */
export async function getApisReadInternalApiserverV1Alpha1StorageVersion(
  query: { pretty?: string },
  name: string,
): Promise<IoK8SApiApiserverinternalV1Alpha1StorageVersion> {
  const result = await api.apis.readInternalApiserverV1Alpha1StorageVersion({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/internal.apiserver.k8s.io/v1alpha1/storageversions/{name}
 */
export async function patchApisPatchInternalApiserverV1Alpha1StorageVersion(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiApiserverinternalV1Alpha1StorageVersion> {
  const result = await api.apis.patchInternalApiserverV1Alpha1StorageVersion({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/internal.apiserver.k8s.io/v1alpha1/storageversions/{name}
 */
export async function putApisReplaceInternalApiserverV1Alpha1StorageVersion(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApiApiserverinternalV1Alpha1StorageVersion,
): Promise<IoK8SApiApiserverinternalV1Alpha1StorageVersion> {
  const result = await api.apis.replaceInternalApiserverV1Alpha1StorageVersion({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/internal.apiserver.k8s.io/v1alpha1/storageversions/{name}/status
 * @readonly
 */
export async function getApisReadInternalApiserverV1Alpha1StorageVersionStatus(
  query: { pretty?: string },
  name: string,
): Promise<IoK8SApiApiserverinternalV1Alpha1StorageVersion> {
  const result =
    await api.apis.readInternalApiserverV1Alpha1StorageVersionStatus({
      query: query,
      name: name,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/internal.apiserver.k8s.io/v1alpha1/storageversions/{name}/status
 */
export async function patchApisPatchInternalApiserverV1Alpha1StorageVersionStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiApiserverinternalV1Alpha1StorageVersion> {
  const result =
    await api.apis.patchInternalApiserverV1Alpha1StorageVersionStatus({
      query: query,
      name: name,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/internal.apiserver.k8s.io/v1alpha1/storageversions/{name}/status
 */
export async function putApisReplaceInternalApiserverV1Alpha1StorageVersionStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApiApiserverinternalV1Alpha1StorageVersion,
): Promise<IoK8SApiApiserverinternalV1Alpha1StorageVersion> {
  const result =
    await api.apis.replaceInternalApiserverV1Alpha1StorageVersionStatus({
      query: query,
      name: name,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/internal.apiserver.k8s.io/v1alpha1/watch/storageversions
 * @readonly
 */
export async function getApisWatchInternalApiserverV1Alpha1StorageVersionList(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result =
    await api.apis.watchInternalApiserverV1Alpha1StorageVersionList({
      query: query,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/internal.apiserver.k8s.io/v1alpha1/watch/storageversions/{name}
 * @readonly
 */
export async function getApisWatchInternalApiserverV1Alpha1StorageVersion(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchInternalApiserverV1Alpha1StorageVersion({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/networking.k8s.io/
 * @readonly
 */
export async function getApisGetNetworkingApiGroup(): Promise<IoK8SApimachineryPkgApisMetaV1APIGroup> {
  const result = await api.apis.getNetworkingApiGroup({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/networking.k8s.io/v1/
 * @readonly
 */
export async function getApisGetNetworkingV1ApiResources(): Promise<IoK8SApimachineryPkgApisMetaV1APIResourceList> {
  const result = await api.apis.getNetworkingV1ApiResources({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/networking.k8s.io/v1/ingressclasses
 */
export async function deleteApisDeleteNetworkingV1CollectionIngressClass(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteNetworkingV1CollectionIngressClass({
    query: query,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/networking.k8s.io/v1/ingressclasses
 * @readonly
 */
export async function getApisListNetworkingV1IngressClass(query: {
  pretty?: string;
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiNetworkingV1IngressClassList> {
  const result = await api.apis.listNetworkingV1IngressClass({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/networking.k8s.io/v1/ingressclasses
 */
export async function postApisCreateNetworkingV1IngressClass(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  /** Request body */
  body: IoK8SApiNetworkingV1IngressClass,
): Promise<IoK8SApiNetworkingV1IngressClass> {
  const result = await api.apis.createNetworkingV1IngressClass({
    query: query,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/networking.k8s.io/v1/ingressclasses/{name}
 */
export async function deleteApisDeleteNetworkingV1IngressClass(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteNetworkingV1IngressClass({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/networking.k8s.io/v1/ingressclasses/{name}
 * @readonly
 */
export async function getApisReadNetworkingV1IngressClass(
  query: { pretty?: string },
  name: string,
): Promise<IoK8SApiNetworkingV1IngressClass> {
  const result = await api.apis.readNetworkingV1IngressClass({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/networking.k8s.io/v1/ingressclasses/{name}
 */
export async function patchApisPatchNetworkingV1IngressClass(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiNetworkingV1IngressClass> {
  const result = await api.apis.patchNetworkingV1IngressClass({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/networking.k8s.io/v1/ingressclasses/{name}
 */
export async function putApisReplaceNetworkingV1IngressClass(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApiNetworkingV1IngressClass,
): Promise<IoK8SApiNetworkingV1IngressClass> {
  const result = await api.apis.replaceNetworkingV1IngressClass({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/networking.k8s.io/v1/ingresses
 * @readonly
 */
export async function getApisListNetworkingV1IngressForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiNetworkingV1IngressList> {
  const result = await api.apis.listNetworkingV1IngressForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses
 */
export async function deleteApisDeleteNetworkingV1CollectionNamespacedIngress(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteNetworkingV1CollectionNamespacedIngress({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses
 * @readonly
 */
export async function getApisListNetworkingV1NamespacedIngress(
  query: {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApiNetworkingV1IngressList> {
  const result = await api.apis.listNetworkingV1NamespacedIngress({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses
 */
export async function postApisCreateNetworkingV1NamespacedIngress(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApiNetworkingV1Ingress,
): Promise<IoK8SApiNetworkingV1Ingress> {
  const result = await api.apis.createNetworkingV1NamespacedIngress({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}
 */
export async function deleteApisDeleteNetworkingV1NamespacedIngress(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteNetworkingV1NamespacedIngress({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}
 * @readonly
 */
export async function getApisReadNetworkingV1NamespacedIngress(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiNetworkingV1Ingress> {
  const result = await api.apis.readNetworkingV1NamespacedIngress({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}
 */
export async function patchApisPatchNetworkingV1NamespacedIngress(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiNetworkingV1Ingress> {
  const result = await api.apis.patchNetworkingV1NamespacedIngress({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}
 */
export async function putApisReplaceNetworkingV1NamespacedIngress(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiNetworkingV1Ingress,
): Promise<IoK8SApiNetworkingV1Ingress> {
  const result = await api.apis.replaceNetworkingV1NamespacedIngress({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}/status
 * @readonly
 */
export async function getApisReadNetworkingV1NamespacedIngressStatus(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiNetworkingV1Ingress> {
  const result = await api.apis.readNetworkingV1NamespacedIngressStatus({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}/status
 */
export async function patchApisPatchNetworkingV1NamespacedIngressStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiNetworkingV1Ingress> {
  const result = await api.apis.patchNetworkingV1NamespacedIngressStatus({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}/status
 */
export async function putApisReplaceNetworkingV1NamespacedIngressStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiNetworkingV1Ingress,
): Promise<IoK8SApiNetworkingV1Ingress> {
  const result = await api.apis.replaceNetworkingV1NamespacedIngressStatus({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies
 */
export async function deleteApisDeleteNetworkingV1CollectionNamespacedNetworkPolicy(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result =
    await api.apis.deleteNetworkingV1CollectionNamespacedNetworkPolicy({
      query: query,
      namespace: namespace,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies
 * @readonly
 */
export async function getApisListNetworkingV1NamespacedNetworkPolicy(
  query: {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApiNetworkingV1NetworkPolicyList> {
  const result = await api.apis.listNetworkingV1NamespacedNetworkPolicy({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies
 */
export async function postApisCreateNetworkingV1NamespacedNetworkPolicy(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApiNetworkingV1NetworkPolicy,
): Promise<IoK8SApiNetworkingV1NetworkPolicy> {
  const result = await api.apis.createNetworkingV1NamespacedNetworkPolicy({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}
 */
export async function deleteApisDeleteNetworkingV1NamespacedNetworkPolicy(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteNetworkingV1NamespacedNetworkPolicy({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}
 * @readonly
 */
export async function getApisReadNetworkingV1NamespacedNetworkPolicy(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiNetworkingV1NetworkPolicy> {
  const result = await api.apis.readNetworkingV1NamespacedNetworkPolicy({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}
 */
export async function patchApisPatchNetworkingV1NamespacedNetworkPolicy(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiNetworkingV1NetworkPolicy> {
  const result = await api.apis.patchNetworkingV1NamespacedNetworkPolicy({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}
 */
export async function putApisReplaceNetworkingV1NamespacedNetworkPolicy(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiNetworkingV1NetworkPolicy,
): Promise<IoK8SApiNetworkingV1NetworkPolicy> {
  const result = await api.apis.replaceNetworkingV1NamespacedNetworkPolicy({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}/status
 * @readonly
 */
export async function getApisReadNetworkingV1NamespacedNetworkPolicyStatus(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiNetworkingV1NetworkPolicy> {
  const result = await api.apis.readNetworkingV1NamespacedNetworkPolicyStatus({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}/status
 */
export async function patchApisPatchNetworkingV1NamespacedNetworkPolicyStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiNetworkingV1NetworkPolicy> {
  const result = await api.apis.patchNetworkingV1NamespacedNetworkPolicyStatus({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}/status
 */
export async function putApisReplaceNetworkingV1NamespacedNetworkPolicyStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiNetworkingV1NetworkPolicy,
): Promise<IoK8SApiNetworkingV1NetworkPolicy> {
  const result =
    await api.apis.replaceNetworkingV1NamespacedNetworkPolicyStatus({
      query: query,
      name: name,
      namespace: namespace,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/networking.k8s.io/v1/networkpolicies
 * @readonly
 */
export async function getApisListNetworkingV1NetworkPolicyForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiNetworkingV1NetworkPolicyList> {
  const result = await api.apis.listNetworkingV1NetworkPolicyForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/networking.k8s.io/v1/watch/ingressclasses
 * @readonly
 */
export async function getApisWatchNetworkingV1IngressClassList(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchNetworkingV1IngressClassList({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/networking.k8s.io/v1/watch/ingressclasses/{name}
 * @readonly
 */
export async function getApisWatchNetworkingV1IngressClass(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchNetworkingV1IngressClass({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/networking.k8s.io/v1/watch/ingresses
 * @readonly
 */
export async function getApisWatchNetworkingV1IngressListForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchNetworkingV1IngressListForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/networking.k8s.io/v1/watch/namespaces/{namespace}/ingresses
 * @readonly
 */
export async function getApisWatchNetworkingV1NamespacedIngressList(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchNetworkingV1NamespacedIngressList({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/networking.k8s.io/v1/watch/namespaces/{namespace}/ingresses/{name}
 * @readonly
 */
export async function getApisWatchNetworkingV1NamespacedIngress(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchNetworkingV1NamespacedIngress({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/networking.k8s.io/v1/watch/namespaces/{namespace}/networkpolicies
 * @readonly
 */
export async function getApisWatchNetworkingV1NamespacedNetworkPolicyList(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchNetworkingV1NamespacedNetworkPolicyList({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/networking.k8s.io/v1/watch/namespaces/{namespace}/networkpolicies/{name}
 * @readonly
 */
export async function getApisWatchNetworkingV1NamespacedNetworkPolicy(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchNetworkingV1NamespacedNetworkPolicy({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/networking.k8s.io/v1/watch/networkpolicies
 * @readonly
 */
export async function getApisWatchNetworkingV1NetworkPolicyListForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result =
    await api.apis.watchNetworkingV1NetworkPolicyListForAllNamespaces({
      query: query,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/networking.k8s.io/v1alpha1/
 * @readonly
 */
export async function getApisGetNetworkingV1Alpha1ApiResources(): Promise<IoK8SApimachineryPkgApisMetaV1APIResourceList> {
  const result = await api.apis.getNetworkingV1Alpha1ApiResources({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/networking.k8s.io/v1alpha1/clustercidrs
 */
export async function deleteApisDeleteNetworkingV1Alpha1CollectionClusterCidr(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteNetworkingV1Alpha1CollectionClusterCidr({
    query: query,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/networking.k8s.io/v1alpha1/clustercidrs
 * @readonly
 */
export async function getApisListNetworkingV1Alpha1ClusterCidr(query: {
  pretty?: string;
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiNetworkingV1Alpha1ClusterCIDRList> {
  const result = await api.apis.listNetworkingV1Alpha1ClusterCidr({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/networking.k8s.io/v1alpha1/clustercidrs
 */
export async function postApisCreateNetworkingV1Alpha1ClusterCidr(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  /** Request body */
  body: IoK8SApiNetworkingV1Alpha1ClusterCIDR,
): Promise<IoK8SApiNetworkingV1Alpha1ClusterCIDR> {
  const result = await api.apis.createNetworkingV1Alpha1ClusterCidr({
    query: query,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/networking.k8s.io/v1alpha1/clustercidrs/{name}
 */
export async function deleteApisDeleteNetworkingV1Alpha1ClusterCidr(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteNetworkingV1Alpha1ClusterCidr({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/networking.k8s.io/v1alpha1/clustercidrs/{name}
 * @readonly
 */
export async function getApisReadNetworkingV1Alpha1ClusterCidr(
  query: { pretty?: string },
  name: string,
): Promise<IoK8SApiNetworkingV1Alpha1ClusterCIDR> {
  const result = await api.apis.readNetworkingV1Alpha1ClusterCidr({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/networking.k8s.io/v1alpha1/clustercidrs/{name}
 */
export async function patchApisPatchNetworkingV1Alpha1ClusterCidr(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiNetworkingV1Alpha1ClusterCIDR> {
  const result = await api.apis.patchNetworkingV1Alpha1ClusterCidr({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/networking.k8s.io/v1alpha1/clustercidrs/{name}
 */
export async function putApisReplaceNetworkingV1Alpha1ClusterCidr(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApiNetworkingV1Alpha1ClusterCIDR,
): Promise<IoK8SApiNetworkingV1Alpha1ClusterCIDR> {
  const result = await api.apis.replaceNetworkingV1Alpha1ClusterCidr({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/networking.k8s.io/v1alpha1/watch/clustercidrs
 * @readonly
 */
export async function getApisWatchNetworkingV1Alpha1ClusterCidrList(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchNetworkingV1Alpha1ClusterCidrList({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/networking.k8s.io/v1alpha1/watch/clustercidrs/{name}
 * @readonly
 */
export async function getApisWatchNetworkingV1Alpha1ClusterCidr(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchNetworkingV1Alpha1ClusterCidr({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/node.k8s.io/
 * @readonly
 */
export async function getApisGetNodeApiGroup(): Promise<IoK8SApimachineryPkgApisMetaV1APIGroup> {
  const result = await api.apis.getNodeApiGroup({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/node.k8s.io/v1/
 * @readonly
 */
export async function getApisGetNodeV1ApiResources(): Promise<IoK8SApimachineryPkgApisMetaV1APIResourceList> {
  const result = await api.apis.getNodeV1ApiResources({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/node.k8s.io/v1/runtimeclasses
 */
export async function deleteApisDeleteNodeV1CollectionRuntimeClass(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteNodeV1CollectionRuntimeClass({
    query: query,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/node.k8s.io/v1/runtimeclasses
 * @readonly
 */
export async function getApisListNodeV1RuntimeClass(query: {
  pretty?: string;
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiNodeV1RuntimeClassList> {
  const result = await api.apis.listNodeV1RuntimeClass({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/node.k8s.io/v1/runtimeclasses
 */
export async function postApisCreateNodeV1RuntimeClass(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  /** Request body */
  body: IoK8SApiNodeV1RuntimeClass,
): Promise<IoK8SApiNodeV1RuntimeClass> {
  const result = await api.apis.createNodeV1RuntimeClass({
    query: query,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/node.k8s.io/v1/runtimeclasses/{name}
 */
export async function deleteApisDeleteNodeV1RuntimeClass(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteNodeV1RuntimeClass({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/node.k8s.io/v1/runtimeclasses/{name}
 * @readonly
 */
export async function getApisReadNodeV1RuntimeClass(
  query: { pretty?: string },
  name: string,
): Promise<IoK8SApiNodeV1RuntimeClass> {
  const result = await api.apis.readNodeV1RuntimeClass({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/node.k8s.io/v1/runtimeclasses/{name}
 */
export async function patchApisPatchNodeV1RuntimeClass(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiNodeV1RuntimeClass> {
  const result = await api.apis.patchNodeV1RuntimeClass({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/node.k8s.io/v1/runtimeclasses/{name}
 */
export async function putApisReplaceNodeV1RuntimeClass(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApiNodeV1RuntimeClass,
): Promise<IoK8SApiNodeV1RuntimeClass> {
  const result = await api.apis.replaceNodeV1RuntimeClass({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/node.k8s.io/v1/watch/runtimeclasses
 * @readonly
 */
export async function getApisWatchNodeV1RuntimeClassList(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchNodeV1RuntimeClassList({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/node.k8s.io/v1/watch/runtimeclasses/{name}
 * @readonly
 */
export async function getApisWatchNodeV1RuntimeClass(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchNodeV1RuntimeClass({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/policy/
 * @readonly
 */
export async function getApisGetPolicyApiGroup(): Promise<IoK8SApimachineryPkgApisMetaV1APIGroup> {
  const result = await api.apis.getPolicyApiGroup({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/policy/v1/
 * @readonly
 */
export async function getApisGetPolicyV1ApiResources(): Promise<IoK8SApimachineryPkgApisMetaV1APIResourceList> {
  const result = await api.apis.getPolicyV1ApiResources({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets
 */
export async function deleteApisDeletePolicyV1CollectionNamespacedPodDisruptionBudget(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result =
    await api.apis.deletePolicyV1CollectionNamespacedPodDisruptionBudget({
      query: query,
      namespace: namespace,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets
 * @readonly
 */
export async function getApisListPolicyV1NamespacedPodDisruptionBudget(
  query: {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApiPolicyV1PodDisruptionBudgetList> {
  const result = await api.apis.listPolicyV1NamespacedPodDisruptionBudget({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets
 */
export async function postApisCreatePolicyV1NamespacedPodDisruptionBudget(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApiPolicyV1PodDisruptionBudget,
): Promise<IoK8SApiPolicyV1PodDisruptionBudget> {
  const result = await api.apis.createPolicyV1NamespacedPodDisruptionBudget({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets/{name}
 */
export async function deleteApisDeletePolicyV1NamespacedPodDisruptionBudget(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deletePolicyV1NamespacedPodDisruptionBudget({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets/{name}
 * @readonly
 */
export async function getApisReadPolicyV1NamespacedPodDisruptionBudget(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiPolicyV1PodDisruptionBudget> {
  const result = await api.apis.readPolicyV1NamespacedPodDisruptionBudget({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets/{name}
 */
export async function patchApisPatchPolicyV1NamespacedPodDisruptionBudget(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiPolicyV1PodDisruptionBudget> {
  const result = await api.apis.patchPolicyV1NamespacedPodDisruptionBudget({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets/{name}
 */
export async function putApisReplacePolicyV1NamespacedPodDisruptionBudget(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiPolicyV1PodDisruptionBudget,
): Promise<IoK8SApiPolicyV1PodDisruptionBudget> {
  const result = await api.apis.replacePolicyV1NamespacedPodDisruptionBudget({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets/{name}/status
 * @readonly
 */
export async function getApisReadPolicyV1NamespacedPodDisruptionBudgetStatus(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiPolicyV1PodDisruptionBudget> {
  const result = await api.apis.readPolicyV1NamespacedPodDisruptionBudgetStatus(
    {
      query: query,
      name: name,
      namespace: namespace,
    },
  );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets/{name}/status
 */
export async function patchApisPatchPolicyV1NamespacedPodDisruptionBudgetStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiPolicyV1PodDisruptionBudget> {
  const result =
    await api.apis.patchPolicyV1NamespacedPodDisruptionBudgetStatus({
      query: query,
      name: name,
      namespace: namespace,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets/{name}/status
 */
export async function putApisReplacePolicyV1NamespacedPodDisruptionBudgetStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiPolicyV1PodDisruptionBudget,
): Promise<IoK8SApiPolicyV1PodDisruptionBudget> {
  const result =
    await api.apis.replacePolicyV1NamespacedPodDisruptionBudgetStatus({
      query: query,
      name: name,
      namespace: namespace,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/policy/v1/poddisruptionbudgets
 * @readonly
 */
export async function getApisListPolicyV1PodDisruptionBudgetForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiPolicyV1PodDisruptionBudgetList> {
  const result = await api.apis.listPolicyV1PodDisruptionBudgetForAllNamespaces(
    {
      query: query,
    },
  );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/policy/v1/watch/namespaces/{namespace}/poddisruptionbudgets
 * @readonly
 */
export async function getApisWatchPolicyV1NamespacedPodDisruptionBudgetList(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchPolicyV1NamespacedPodDisruptionBudgetList({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/policy/v1/watch/namespaces/{namespace}/poddisruptionbudgets/{name}
 * @readonly
 */
export async function getApisWatchPolicyV1NamespacedPodDisruptionBudget(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchPolicyV1NamespacedPodDisruptionBudget({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/policy/v1/watch/poddisruptionbudgets
 * @readonly
 */
export async function getApisWatchPolicyV1PodDisruptionBudgetListForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result =
    await api.apis.watchPolicyV1PodDisruptionBudgetListForAllNamespaces({
      query: query,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/rbac.authorization.k8s.io/
 * @readonly
 */
export async function getApisGetRbacAuthorizationApiGroup(): Promise<IoK8SApimachineryPkgApisMetaV1APIGroup> {
  const result = await api.apis.getRbacAuthorizationApiGroup({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/rbac.authorization.k8s.io/v1/
 * @readonly
 */
export async function getApisGetRbacAuthorizationV1ApiResources(): Promise<IoK8SApimachineryPkgApisMetaV1APIResourceList> {
  const result = await api.apis.getRbacAuthorizationV1ApiResources({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/rbac.authorization.k8s.io/v1/clusterrolebindings
 */
export async function deleteApisDeleteRbacAuthorizationV1CollectionClusterRoleBinding(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result =
    await api.apis.deleteRbacAuthorizationV1CollectionClusterRoleBinding({
      query: query,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/rbac.authorization.k8s.io/v1/clusterrolebindings
 * @readonly
 */
export async function getApisListRbacAuthorizationV1ClusterRoleBinding(query: {
  pretty?: string;
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiRbacV1ClusterRoleBindingList> {
  const result = await api.apis.listRbacAuthorizationV1ClusterRoleBinding({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/rbac.authorization.k8s.io/v1/clusterrolebindings
 */
export async function postApisCreateRbacAuthorizationV1ClusterRoleBinding(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  /** Request body */
  body: IoK8SApiRbacV1ClusterRoleBinding,
): Promise<IoK8SApiRbacV1ClusterRoleBinding> {
  const result = await api.apis.createRbacAuthorizationV1ClusterRoleBinding({
    query: query,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}
 */
export async function deleteApisDeleteRbacAuthorizationV1ClusterRoleBinding(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteRbacAuthorizationV1ClusterRoleBinding({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}
 * @readonly
 */
export async function getApisReadRbacAuthorizationV1ClusterRoleBinding(
  query: { pretty?: string },
  name: string,
): Promise<IoK8SApiRbacV1ClusterRoleBinding> {
  const result = await api.apis.readRbacAuthorizationV1ClusterRoleBinding({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}
 */
export async function patchApisPatchRbacAuthorizationV1ClusterRoleBinding(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiRbacV1ClusterRoleBinding> {
  const result = await api.apis.patchRbacAuthorizationV1ClusterRoleBinding({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}
 */
export async function putApisReplaceRbacAuthorizationV1ClusterRoleBinding(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApiRbacV1ClusterRoleBinding,
): Promise<IoK8SApiRbacV1ClusterRoleBinding> {
  const result = await api.apis.replaceRbacAuthorizationV1ClusterRoleBinding({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/rbac.authorization.k8s.io/v1/clusterroles
 */
export async function deleteApisDeleteRbacAuthorizationV1CollectionClusterRole(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteRbacAuthorizationV1CollectionClusterRole({
    query: query,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/rbac.authorization.k8s.io/v1/clusterroles
 * @readonly
 */
export async function getApisListRbacAuthorizationV1ClusterRole(query: {
  pretty?: string;
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiRbacV1ClusterRoleList> {
  const result = await api.apis.listRbacAuthorizationV1ClusterRole({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/rbac.authorization.k8s.io/v1/clusterroles
 */
export async function postApisCreateRbacAuthorizationV1ClusterRole(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  /** Request body */
  body: IoK8SApiRbacV1ClusterRole,
): Promise<IoK8SApiRbacV1ClusterRole> {
  const result = await api.apis.createRbacAuthorizationV1ClusterRole({
    query: query,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/rbac.authorization.k8s.io/v1/clusterroles/{name}
 */
export async function deleteApisDeleteRbacAuthorizationV1ClusterRole(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteRbacAuthorizationV1ClusterRole({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/rbac.authorization.k8s.io/v1/clusterroles/{name}
 * @readonly
 */
export async function getApisReadRbacAuthorizationV1ClusterRole(
  query: { pretty?: string },
  name: string,
): Promise<IoK8SApiRbacV1ClusterRole> {
  const result = await api.apis.readRbacAuthorizationV1ClusterRole({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/rbac.authorization.k8s.io/v1/clusterroles/{name}
 */
export async function patchApisPatchRbacAuthorizationV1ClusterRole(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiRbacV1ClusterRole> {
  const result = await api.apis.patchRbacAuthorizationV1ClusterRole({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/rbac.authorization.k8s.io/v1/clusterroles/{name}
 */
export async function putApisReplaceRbacAuthorizationV1ClusterRole(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApiRbacV1ClusterRole,
): Promise<IoK8SApiRbacV1ClusterRole> {
  const result = await api.apis.replaceRbacAuthorizationV1ClusterRole({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings
 */
export async function deleteApisDeleteRbacAuthorizationV1CollectionNamespacedRoleBinding(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result =
    await api.apis.deleteRbacAuthorizationV1CollectionNamespacedRoleBinding({
      query: query,
      namespace: namespace,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings
 * @readonly
 */
export async function getApisListRbacAuthorizationV1NamespacedRoleBinding(
  query: {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApiRbacV1RoleBindingList> {
  const result = await api.apis.listRbacAuthorizationV1NamespacedRoleBinding({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings
 */
export async function postApisCreateRbacAuthorizationV1NamespacedRoleBinding(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApiRbacV1RoleBinding,
): Promise<IoK8SApiRbacV1RoleBinding> {
  const result = await api.apis.createRbacAuthorizationV1NamespacedRoleBinding({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}
 */
export async function deleteApisDeleteRbacAuthorizationV1NamespacedRoleBinding(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteRbacAuthorizationV1NamespacedRoleBinding({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}
 * @readonly
 */
export async function getApisReadRbacAuthorizationV1NamespacedRoleBinding(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiRbacV1RoleBinding> {
  const result = await api.apis.readRbacAuthorizationV1NamespacedRoleBinding({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}
 */
export async function patchApisPatchRbacAuthorizationV1NamespacedRoleBinding(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiRbacV1RoleBinding> {
  const result = await api.apis.patchRbacAuthorizationV1NamespacedRoleBinding({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}
 */
export async function putApisReplaceRbacAuthorizationV1NamespacedRoleBinding(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiRbacV1RoleBinding,
): Promise<IoK8SApiRbacV1RoleBinding> {
  const result = await api.apis.replaceRbacAuthorizationV1NamespacedRoleBinding(
    {
      query: query,
      name: name,
      namespace: namespace,
      body: body,
    },
  );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles
 */
export async function deleteApisDeleteRbacAuthorizationV1CollectionNamespacedRole(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result =
    await api.apis.deleteRbacAuthorizationV1CollectionNamespacedRole({
      query: query,
      namespace: namespace,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles
 * @readonly
 */
export async function getApisListRbacAuthorizationV1NamespacedRole(
  query: {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApiRbacV1RoleList> {
  const result = await api.apis.listRbacAuthorizationV1NamespacedRole({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles
 */
export async function postApisCreateRbacAuthorizationV1NamespacedRole(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApiRbacV1Role,
): Promise<IoK8SApiRbacV1Role> {
  const result = await api.apis.createRbacAuthorizationV1NamespacedRole({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}
 */
export async function deleteApisDeleteRbacAuthorizationV1NamespacedRole(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteRbacAuthorizationV1NamespacedRole({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}
 * @readonly
 */
export async function getApisReadRbacAuthorizationV1NamespacedRole(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiRbacV1Role> {
  const result = await api.apis.readRbacAuthorizationV1NamespacedRole({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}
 */
export async function patchApisPatchRbacAuthorizationV1NamespacedRole(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiRbacV1Role> {
  const result = await api.apis.patchRbacAuthorizationV1NamespacedRole({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}
 */
export async function putApisReplaceRbacAuthorizationV1NamespacedRole(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiRbacV1Role,
): Promise<IoK8SApiRbacV1Role> {
  const result = await api.apis.replaceRbacAuthorizationV1NamespacedRole({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/rbac.authorization.k8s.io/v1/rolebindings
 * @readonly
 */
export async function getApisListRbacAuthorizationV1RoleBindingForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiRbacV1RoleBindingList> {
  const result =
    await api.apis.listRbacAuthorizationV1RoleBindingForAllNamespaces({
      query: query,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/rbac.authorization.k8s.io/v1/roles
 * @readonly
 */
export async function getApisListRbacAuthorizationV1RoleForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiRbacV1RoleList> {
  const result = await api.apis.listRbacAuthorizationV1RoleForAllNamespaces({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/rbac.authorization.k8s.io/v1/watch/clusterrolebindings
 * @readonly
 */
export async function getApisWatchRbacAuthorizationV1ClusterRoleBindingList(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchRbacAuthorizationV1ClusterRoleBindingList({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/rbac.authorization.k8s.io/v1/watch/clusterrolebindings/{name}
 * @readonly
 */
export async function getApisWatchRbacAuthorizationV1ClusterRoleBinding(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchRbacAuthorizationV1ClusterRoleBinding({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/rbac.authorization.k8s.io/v1/watch/clusterroles
 * @readonly
 */
export async function getApisWatchRbacAuthorizationV1ClusterRoleList(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchRbacAuthorizationV1ClusterRoleList({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/rbac.authorization.k8s.io/v1/watch/clusterroles/{name}
 * @readonly
 */
export async function getApisWatchRbacAuthorizationV1ClusterRole(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchRbacAuthorizationV1ClusterRole({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/rolebindings
 * @readonly
 */
export async function getApisWatchRbacAuthorizationV1NamespacedRoleBindingList(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result =
    await api.apis.watchRbacAuthorizationV1NamespacedRoleBindingList({
      query: query,
      namespace: namespace,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/rolebindings/{name}
 * @readonly
 */
export async function getApisWatchRbacAuthorizationV1NamespacedRoleBinding(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchRbacAuthorizationV1NamespacedRoleBinding({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/roles
 * @readonly
 */
export async function getApisWatchRbacAuthorizationV1NamespacedRoleList(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchRbacAuthorizationV1NamespacedRoleList({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/rbac.authorization.k8s.io/v1/watch/namespaces/{namespace}/roles/{name}
 * @readonly
 */
export async function getApisWatchRbacAuthorizationV1NamespacedRole(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchRbacAuthorizationV1NamespacedRole({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/rbac.authorization.k8s.io/v1/watch/rolebindings
 * @readonly
 */
export async function getApisWatchRbacAuthorizationV1RoleBindingListForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result =
    await api.apis.watchRbacAuthorizationV1RoleBindingListForAllNamespaces({
      query: query,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/rbac.authorization.k8s.io/v1/watch/roles
 * @readonly
 */
export async function getApisWatchRbacAuthorizationV1RoleListForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result =
    await api.apis.watchRbacAuthorizationV1RoleListForAllNamespaces({
      query: query,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/resource.k8s.io/
 * @readonly
 */
export async function getApisGetResourceApiGroup(): Promise<IoK8SApimachineryPkgApisMetaV1APIGroup> {
  const result = await api.apis.getResourceApiGroup({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/resource.k8s.io/v1alpha1/
 * @readonly
 */
export async function getApisGetResourceV1Alpha1ApiResources(): Promise<IoK8SApimachineryPkgApisMetaV1APIResourceList> {
  const result = await api.apis.getResourceV1Alpha1ApiResources({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/podschedulings
 */
export async function deleteApisDeleteResourceV1Alpha1CollectionNamespacedPodScheduling(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result =
    await api.apis.deleteResourceV1Alpha1CollectionNamespacedPodScheduling({
      query: query,
      namespace: namespace,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/podschedulings
 * @readonly
 */
export async function getApisListResourceV1Alpha1NamespacedPodScheduling(
  query: {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApiResourceV1Alpha1PodSchedulingList> {
  const result = await api.apis.listResourceV1Alpha1NamespacedPodScheduling({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/podschedulings
 */
export async function postApisCreateResourceV1Alpha1NamespacedPodScheduling(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApiResourceV1Alpha1PodScheduling,
): Promise<IoK8SApiResourceV1Alpha1PodScheduling> {
  const result = await api.apis.createResourceV1Alpha1NamespacedPodScheduling({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/podschedulings/{name}
 */
export async function deleteApisDeleteResourceV1Alpha1NamespacedPodScheduling(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApiResourceV1Alpha1PodScheduling> {
  const result = await api.apis.deleteResourceV1Alpha1NamespacedPodScheduling({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/podschedulings/{name}
 * @readonly
 */
export async function getApisReadResourceV1Alpha1NamespacedPodScheduling(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiResourceV1Alpha1PodScheduling> {
  const result = await api.apis.readResourceV1Alpha1NamespacedPodScheduling({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/podschedulings/{name}
 */
export async function patchApisPatchResourceV1Alpha1NamespacedPodScheduling(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiResourceV1Alpha1PodScheduling> {
  const result = await api.apis.patchResourceV1Alpha1NamespacedPodScheduling({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/podschedulings/{name}
 */
export async function putApisReplaceResourceV1Alpha1NamespacedPodScheduling(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiResourceV1Alpha1PodScheduling,
): Promise<IoK8SApiResourceV1Alpha1PodScheduling> {
  const result = await api.apis.replaceResourceV1Alpha1NamespacedPodScheduling({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/podschedulings/{name}/status
 * @readonly
 */
export async function getApisReadResourceV1Alpha1NamespacedPodSchedulingStatus(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiResourceV1Alpha1PodScheduling> {
  const result =
    await api.apis.readResourceV1Alpha1NamespacedPodSchedulingStatus({
      query: query,
      name: name,
      namespace: namespace,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/podschedulings/{name}/status
 */
export async function patchApisPatchResourceV1Alpha1NamespacedPodSchedulingStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiResourceV1Alpha1PodScheduling> {
  const result =
    await api.apis.patchResourceV1Alpha1NamespacedPodSchedulingStatus({
      query: query,
      name: name,
      namespace: namespace,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/podschedulings/{name}/status
 */
export async function putApisReplaceResourceV1Alpha1NamespacedPodSchedulingStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiResourceV1Alpha1PodScheduling,
): Promise<IoK8SApiResourceV1Alpha1PodScheduling> {
  const result =
    await api.apis.replaceResourceV1Alpha1NamespacedPodSchedulingStatus({
      query: query,
      name: name,
      namespace: namespace,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/resourceclaims
 */
export async function deleteApisDeleteResourceV1Alpha1CollectionNamespacedResourceClaim(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result =
    await api.apis.deleteResourceV1Alpha1CollectionNamespacedResourceClaim({
      query: query,
      namespace: namespace,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/resourceclaims
 * @readonly
 */
export async function getApisListResourceV1Alpha1NamespacedResourceClaim(
  query: {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApiResourceV1Alpha1ResourceClaimList> {
  const result = await api.apis.listResourceV1Alpha1NamespacedResourceClaim({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/resourceclaims
 */
export async function postApisCreateResourceV1Alpha1NamespacedResourceClaim(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApiResourceV1Alpha1ResourceClaim,
): Promise<IoK8SApiResourceV1Alpha1ResourceClaim> {
  const result = await api.apis.createResourceV1Alpha1NamespacedResourceClaim({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/resourceclaims/{name}
 */
export async function deleteApisDeleteResourceV1Alpha1NamespacedResourceClaim(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApiResourceV1Alpha1ResourceClaim> {
  const result = await api.apis.deleteResourceV1Alpha1NamespacedResourceClaim({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/resourceclaims/{name}
 * @readonly
 */
export async function getApisReadResourceV1Alpha1NamespacedResourceClaim(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiResourceV1Alpha1ResourceClaim> {
  const result = await api.apis.readResourceV1Alpha1NamespacedResourceClaim({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/resourceclaims/{name}
 */
export async function patchApisPatchResourceV1Alpha1NamespacedResourceClaim(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiResourceV1Alpha1ResourceClaim> {
  const result = await api.apis.patchResourceV1Alpha1NamespacedResourceClaim({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/resourceclaims/{name}
 */
export async function putApisReplaceResourceV1Alpha1NamespacedResourceClaim(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiResourceV1Alpha1ResourceClaim,
): Promise<IoK8SApiResourceV1Alpha1ResourceClaim> {
  const result = await api.apis.replaceResourceV1Alpha1NamespacedResourceClaim({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/resourceclaims/{name}/status
 * @readonly
 */
export async function getApisReadResourceV1Alpha1NamespacedResourceClaimStatus(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiResourceV1Alpha1ResourceClaim> {
  const result =
    await api.apis.readResourceV1Alpha1NamespacedResourceClaimStatus({
      query: query,
      name: name,
      namespace: namespace,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/resourceclaims/{name}/status
 */
export async function patchApisPatchResourceV1Alpha1NamespacedResourceClaimStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiResourceV1Alpha1ResourceClaim> {
  const result =
    await api.apis.patchResourceV1Alpha1NamespacedResourceClaimStatus({
      query: query,
      name: name,
      namespace: namespace,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/resourceclaims/{name}/status
 */
export async function putApisReplaceResourceV1Alpha1NamespacedResourceClaimStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiResourceV1Alpha1ResourceClaim,
): Promise<IoK8SApiResourceV1Alpha1ResourceClaim> {
  const result =
    await api.apis.replaceResourceV1Alpha1NamespacedResourceClaimStatus({
      query: query,
      name: name,
      namespace: namespace,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/resourceclaimtemplates
 */
export async function deleteApisDeleteResourceV1Alpha1CollectionNamespacedResourceClaimTemplate(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result =
    await api.apis.deleteResourceV1Alpha1CollectionNamespacedResourceClaimTemplate(
      {
        query: query,
        namespace: namespace,
        body: body,
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/resourceclaimtemplates
 * @readonly
 */
export async function getApisListResourceV1Alpha1NamespacedResourceClaimTemplate(
  query: {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApiResourceV1Alpha1ResourceClaimTemplateList> {
  const result =
    await api.apis.listResourceV1Alpha1NamespacedResourceClaimTemplate({
      query: query,
      namespace: namespace,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/resourceclaimtemplates
 */
export async function postApisCreateResourceV1Alpha1NamespacedResourceClaimTemplate(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApiResourceV1Alpha1ResourceClaimTemplate,
): Promise<IoK8SApiResourceV1Alpha1ResourceClaimTemplate> {
  const result =
    await api.apis.createResourceV1Alpha1NamespacedResourceClaimTemplate({
      query: query,
      namespace: namespace,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/resourceclaimtemplates/{name}
 */
export async function deleteApisDeleteResourceV1Alpha1NamespacedResourceClaimTemplate(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApiResourceV1Alpha1ResourceClaimTemplate> {
  const result =
    await api.apis.deleteResourceV1Alpha1NamespacedResourceClaimTemplate({
      query: query,
      name: name,
      namespace: namespace,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/resourceclaimtemplates/{name}
 * @readonly
 */
export async function getApisReadResourceV1Alpha1NamespacedResourceClaimTemplate(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiResourceV1Alpha1ResourceClaimTemplate> {
  const result =
    await api.apis.readResourceV1Alpha1NamespacedResourceClaimTemplate({
      query: query,
      name: name,
      namespace: namespace,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/resourceclaimtemplates/{name}
 */
export async function patchApisPatchResourceV1Alpha1NamespacedResourceClaimTemplate(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiResourceV1Alpha1ResourceClaimTemplate> {
  const result =
    await api.apis.patchResourceV1Alpha1NamespacedResourceClaimTemplate({
      query: query,
      name: name,
      namespace: namespace,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/resource.k8s.io/v1alpha1/namespaces/{namespace}/resourceclaimtemplates/{name}
 */
export async function putApisReplaceResourceV1Alpha1NamespacedResourceClaimTemplate(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiResourceV1Alpha1ResourceClaimTemplate,
): Promise<IoK8SApiResourceV1Alpha1ResourceClaimTemplate> {
  const result =
    await api.apis.replaceResourceV1Alpha1NamespacedResourceClaimTemplate({
      query: query,
      name: name,
      namespace: namespace,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/resource.k8s.io/v1alpha1/podschedulings
 * @readonly
 */
export async function getApisListResourceV1Alpha1PodSchedulingForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiResourceV1Alpha1PodSchedulingList> {
  const result =
    await api.apis.listResourceV1Alpha1PodSchedulingForAllNamespaces({
      query: query,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/resource.k8s.io/v1alpha1/resourceclaims
 * @readonly
 */
export async function getApisListResourceV1Alpha1ResourceClaimForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiResourceV1Alpha1ResourceClaimList> {
  const result =
    await api.apis.listResourceV1Alpha1ResourceClaimForAllNamespaces({
      query: query,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/resource.k8s.io/v1alpha1/resourceclaimtemplates
 * @readonly
 */
export async function getApisListResourceV1Alpha1ResourceClaimTemplateForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiResourceV1Alpha1ResourceClaimTemplateList> {
  const result =
    await api.apis.listResourceV1Alpha1ResourceClaimTemplateForAllNamespaces({
      query: query,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/resource.k8s.io/v1alpha1/resourceclasses
 */
export async function deleteApisDeleteResourceV1Alpha1CollectionResourceClass(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteResourceV1Alpha1CollectionResourceClass({
    query: query,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/resource.k8s.io/v1alpha1/resourceclasses
 * @readonly
 */
export async function getApisListResourceV1Alpha1ResourceClass(query: {
  pretty?: string;
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiResourceV1Alpha1ResourceClassList> {
  const result = await api.apis.listResourceV1Alpha1ResourceClass({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/resource.k8s.io/v1alpha1/resourceclasses
 */
export async function postApisCreateResourceV1Alpha1ResourceClass(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  /** Request body */
  body: IoK8SApiResourceV1Alpha1ResourceClass,
): Promise<IoK8SApiResourceV1Alpha1ResourceClass> {
  const result = await api.apis.createResourceV1Alpha1ResourceClass({
    query: query,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/resource.k8s.io/v1alpha1/resourceclasses/{name}
 */
export async function deleteApisDeleteResourceV1Alpha1ResourceClass(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApiResourceV1Alpha1ResourceClass> {
  const result = await api.apis.deleteResourceV1Alpha1ResourceClass({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/resource.k8s.io/v1alpha1/resourceclasses/{name}
 * @readonly
 */
export async function getApisReadResourceV1Alpha1ResourceClass(
  query: { pretty?: string },
  name: string,
): Promise<IoK8SApiResourceV1Alpha1ResourceClass> {
  const result = await api.apis.readResourceV1Alpha1ResourceClass({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/resource.k8s.io/v1alpha1/resourceclasses/{name}
 */
export async function patchApisPatchResourceV1Alpha1ResourceClass(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiResourceV1Alpha1ResourceClass> {
  const result = await api.apis.patchResourceV1Alpha1ResourceClass({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/resource.k8s.io/v1alpha1/resourceclasses/{name}
 */
export async function putApisReplaceResourceV1Alpha1ResourceClass(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApiResourceV1Alpha1ResourceClass,
): Promise<IoK8SApiResourceV1Alpha1ResourceClass> {
  const result = await api.apis.replaceResourceV1Alpha1ResourceClass({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/resource.k8s.io/v1alpha1/watch/namespaces/{namespace}/podschedulings
 * @readonly
 */
export async function getApisWatchResourceV1Alpha1NamespacedPodSchedulingList(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result =
    await api.apis.watchResourceV1Alpha1NamespacedPodSchedulingList({
      query: query,
      namespace: namespace,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/resource.k8s.io/v1alpha1/watch/namespaces/{namespace}/podschedulings/{name}
 * @readonly
 */
export async function getApisWatchResourceV1Alpha1NamespacedPodScheduling(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchResourceV1Alpha1NamespacedPodScheduling({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/resource.k8s.io/v1alpha1/watch/namespaces/{namespace}/resourceclaims
 * @readonly
 */
export async function getApisWatchResourceV1Alpha1NamespacedResourceClaimList(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result =
    await api.apis.watchResourceV1Alpha1NamespacedResourceClaimList({
      query: query,
      namespace: namespace,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/resource.k8s.io/v1alpha1/watch/namespaces/{namespace}/resourceclaims/{name}
 * @readonly
 */
export async function getApisWatchResourceV1Alpha1NamespacedResourceClaim(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchResourceV1Alpha1NamespacedResourceClaim({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/resource.k8s.io/v1alpha1/watch/namespaces/{namespace}/resourceclaimtemplates
 * @readonly
 */
export async function getApisWatchResourceV1Alpha1NamespacedResourceClaimTemplateList(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result =
    await api.apis.watchResourceV1Alpha1NamespacedResourceClaimTemplateList({
      query: query,
      namespace: namespace,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/resource.k8s.io/v1alpha1/watch/namespaces/{namespace}/resourceclaimtemplates/{name}
 * @readonly
 */
export async function getApisWatchResourceV1Alpha1NamespacedResourceClaimTemplate(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result =
    await api.apis.watchResourceV1Alpha1NamespacedResourceClaimTemplate({
      query: query,
      name: name,
      namespace: namespace,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/resource.k8s.io/v1alpha1/watch/podschedulings
 * @readonly
 */
export async function getApisWatchResourceV1Alpha1PodSchedulingListForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result =
    await api.apis.watchResourceV1Alpha1PodSchedulingListForAllNamespaces({
      query: query,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/resource.k8s.io/v1alpha1/watch/resourceclaims
 * @readonly
 */
export async function getApisWatchResourceV1Alpha1ResourceClaimListForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result =
    await api.apis.watchResourceV1Alpha1ResourceClaimListForAllNamespaces({
      query: query,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/resource.k8s.io/v1alpha1/watch/resourceclaimtemplates
 * @readonly
 */
export async function getApisWatchResourceV1Alpha1ResourceClaimTemplateListForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result =
    await api.apis.watchResourceV1Alpha1ResourceClaimTemplateListForAllNamespaces(
      {
        query: query,
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/resource.k8s.io/v1alpha1/watch/resourceclasses
 * @readonly
 */
export async function getApisWatchResourceV1Alpha1ResourceClassList(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchResourceV1Alpha1ResourceClassList({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/resource.k8s.io/v1alpha1/watch/resourceclasses/{name}
 * @readonly
 */
export async function getApisWatchResourceV1Alpha1ResourceClass(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchResourceV1Alpha1ResourceClass({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/scheduling.k8s.io/
 * @readonly
 */
export async function getApisGetSchedulingApiGroup(): Promise<IoK8SApimachineryPkgApisMetaV1APIGroup> {
  const result = await api.apis.getSchedulingApiGroup({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/scheduling.k8s.io/v1/
 * @readonly
 */
export async function getApisGetSchedulingV1ApiResources(): Promise<IoK8SApimachineryPkgApisMetaV1APIResourceList> {
  const result = await api.apis.getSchedulingV1ApiResources({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/scheduling.k8s.io/v1/priorityclasses
 */
export async function deleteApisDeleteSchedulingV1CollectionPriorityClass(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteSchedulingV1CollectionPriorityClass({
    query: query,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/scheduling.k8s.io/v1/priorityclasses
 * @readonly
 */
export async function getApisListSchedulingV1PriorityClass(query: {
  pretty?: string;
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiSchedulingV1PriorityClassList> {
  const result = await api.apis.listSchedulingV1PriorityClass({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/scheduling.k8s.io/v1/priorityclasses
 */
export async function postApisCreateSchedulingV1PriorityClass(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  /** Request body */
  body: IoK8SApiSchedulingV1PriorityClass,
): Promise<IoK8SApiSchedulingV1PriorityClass> {
  const result = await api.apis.createSchedulingV1PriorityClass({
    query: query,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/scheduling.k8s.io/v1/priorityclasses/{name}
 */
export async function deleteApisDeleteSchedulingV1PriorityClass(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteSchedulingV1PriorityClass({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/scheduling.k8s.io/v1/priorityclasses/{name}
 * @readonly
 */
export async function getApisReadSchedulingV1PriorityClass(
  query: { pretty?: string },
  name: string,
): Promise<IoK8SApiSchedulingV1PriorityClass> {
  const result = await api.apis.readSchedulingV1PriorityClass({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/scheduling.k8s.io/v1/priorityclasses/{name}
 */
export async function patchApisPatchSchedulingV1PriorityClass(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiSchedulingV1PriorityClass> {
  const result = await api.apis.patchSchedulingV1PriorityClass({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/scheduling.k8s.io/v1/priorityclasses/{name}
 */
export async function putApisReplaceSchedulingV1PriorityClass(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApiSchedulingV1PriorityClass,
): Promise<IoK8SApiSchedulingV1PriorityClass> {
  const result = await api.apis.replaceSchedulingV1PriorityClass({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/scheduling.k8s.io/v1/watch/priorityclasses
 * @readonly
 */
export async function getApisWatchSchedulingV1PriorityClassList(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchSchedulingV1PriorityClassList({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/scheduling.k8s.io/v1/watch/priorityclasses/{name}
 * @readonly
 */
export async function getApisWatchSchedulingV1PriorityClass(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchSchedulingV1PriorityClass({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/storage.k8s.io/
 * @readonly
 */
export async function getApisGetStorageApiGroup(): Promise<IoK8SApimachineryPkgApisMetaV1APIGroup> {
  const result = await api.apis.getStorageApiGroup({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/storage.k8s.io/v1/
 * @readonly
 */
export async function getApisGetStorageV1ApiResources(): Promise<IoK8SApimachineryPkgApisMetaV1APIResourceList> {
  const result = await api.apis.getStorageV1ApiResources({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/storage.k8s.io/v1/csidrivers
 */
export async function deleteApisDeleteStorageV1CollectionCsiDriver(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteStorageV1CollectionCsiDriver({
    query: query,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/storage.k8s.io/v1/csidrivers
 * @readonly
 */
export async function getApisListStorageV1CsiDriver(query: {
  pretty?: string;
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiStorageV1CSIDriverList> {
  const result = await api.apis.listStorageV1CsiDriver({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/storage.k8s.io/v1/csidrivers
 */
export async function postApisCreateStorageV1CsiDriver(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  /** Request body */
  body: IoK8SApiStorageV1CSIDriver,
): Promise<IoK8SApiStorageV1CSIDriver> {
  const result = await api.apis.createStorageV1CsiDriver({
    query: query,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/storage.k8s.io/v1/csidrivers/{name}
 */
export async function deleteApisDeleteStorageV1CsiDriver(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApiStorageV1CSIDriver> {
  const result = await api.apis.deleteStorageV1CsiDriver({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/storage.k8s.io/v1/csidrivers/{name}
 * @readonly
 */
export async function getApisReadStorageV1CsiDriver(
  query: { pretty?: string },
  name: string,
): Promise<IoK8SApiStorageV1CSIDriver> {
  const result = await api.apis.readStorageV1CsiDriver({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/storage.k8s.io/v1/csidrivers/{name}
 */
export async function patchApisPatchStorageV1CsiDriver(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiStorageV1CSIDriver> {
  const result = await api.apis.patchStorageV1CsiDriver({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/storage.k8s.io/v1/csidrivers/{name}
 */
export async function putApisReplaceStorageV1CsiDriver(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApiStorageV1CSIDriver,
): Promise<IoK8SApiStorageV1CSIDriver> {
  const result = await api.apis.replaceStorageV1CsiDriver({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/storage.k8s.io/v1/csinodes
 */
export async function deleteApisDeleteStorageV1CollectionCsiNode(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteStorageV1CollectionCsiNode({
    query: query,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/storage.k8s.io/v1/csinodes
 * @readonly
 */
export async function getApisListStorageV1CsiNode(query: {
  pretty?: string;
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiStorageV1CSINodeList> {
  const result = await api.apis.listStorageV1CsiNode({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/storage.k8s.io/v1/csinodes
 */
export async function postApisCreateStorageV1CsiNode(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  /** Request body */
  body: IoK8SApiStorageV1CSINode,
): Promise<IoK8SApiStorageV1CSINode> {
  const result = await api.apis.createStorageV1CsiNode({
    query: query,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/storage.k8s.io/v1/csinodes/{name}
 */
export async function deleteApisDeleteStorageV1CsiNode(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApiStorageV1CSINode> {
  const result = await api.apis.deleteStorageV1CsiNode({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/storage.k8s.io/v1/csinodes/{name}
 * @readonly
 */
export async function getApisReadStorageV1CsiNode(
  query: { pretty?: string },
  name: string,
): Promise<IoK8SApiStorageV1CSINode> {
  const result = await api.apis.readStorageV1CsiNode({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/storage.k8s.io/v1/csinodes/{name}
 */
export async function patchApisPatchStorageV1CsiNode(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiStorageV1CSINode> {
  const result = await api.apis.patchStorageV1CsiNode({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/storage.k8s.io/v1/csinodes/{name}
 */
export async function putApisReplaceStorageV1CsiNode(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApiStorageV1CSINode,
): Promise<IoK8SApiStorageV1CSINode> {
  const result = await api.apis.replaceStorageV1CsiNode({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/storage.k8s.io/v1/csistoragecapacities
 * @readonly
 */
export async function getApisListStorageV1CsiStorageCapacityForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiStorageV1CSIStorageCapacityList> {
  const result = await api.apis.listStorageV1CsiStorageCapacityForAllNamespaces(
    {
      query: query,
    },
  );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/storage.k8s.io/v1/namespaces/{namespace}/csistoragecapacities
 */
export async function deleteApisDeleteStorageV1CollectionNamespacedCsiStorageCapacity(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result =
    await api.apis.deleteStorageV1CollectionNamespacedCsiStorageCapacity({
      query: query,
      namespace: namespace,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/storage.k8s.io/v1/namespaces/{namespace}/csistoragecapacities
 * @readonly
 */
export async function getApisListStorageV1NamespacedCsiStorageCapacity(
  query: {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApiStorageV1CSIStorageCapacityList> {
  const result = await api.apis.listStorageV1NamespacedCsiStorageCapacity({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/storage.k8s.io/v1/namespaces/{namespace}/csistoragecapacities
 */
export async function postApisCreateStorageV1NamespacedCsiStorageCapacity(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApiStorageV1CSIStorageCapacity,
): Promise<IoK8SApiStorageV1CSIStorageCapacity> {
  const result = await api.apis.createStorageV1NamespacedCsiStorageCapacity({
    query: query,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/storage.k8s.io/v1/namespaces/{namespace}/csistoragecapacities/{name}
 */
export async function deleteApisDeleteStorageV1NamespacedCsiStorageCapacity(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteStorageV1NamespacedCsiStorageCapacity({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/storage.k8s.io/v1/namespaces/{namespace}/csistoragecapacities/{name}
 * @readonly
 */
export async function getApisReadStorageV1NamespacedCsiStorageCapacity(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiStorageV1CSIStorageCapacity> {
  const result = await api.apis.readStorageV1NamespacedCsiStorageCapacity({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/storage.k8s.io/v1/namespaces/{namespace}/csistoragecapacities/{name}
 */
export async function patchApisPatchStorageV1NamespacedCsiStorageCapacity(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiStorageV1CSIStorageCapacity> {
  const result = await api.apis.patchStorageV1NamespacedCsiStorageCapacity({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/storage.k8s.io/v1/namespaces/{namespace}/csistoragecapacities/{name}
 */
export async function putApisReplaceStorageV1NamespacedCsiStorageCapacity(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiStorageV1CSIStorageCapacity,
): Promise<IoK8SApiStorageV1CSIStorageCapacity> {
  const result = await api.apis.replaceStorageV1NamespacedCsiStorageCapacity({
    query: query,
    name: name,
    namespace: namespace,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/storage.k8s.io/v1/storageclasses
 */
export async function deleteApisDeleteStorageV1CollectionStorageClass(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteStorageV1CollectionStorageClass({
    query: query,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/storage.k8s.io/v1/storageclasses
 * @readonly
 */
export async function getApisListStorageV1StorageClass(query: {
  pretty?: string;
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiStorageV1StorageClassList> {
  const result = await api.apis.listStorageV1StorageClass({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/storage.k8s.io/v1/storageclasses
 */
export async function postApisCreateStorageV1StorageClass(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  /** Request body */
  body: IoK8SApiStorageV1StorageClass,
): Promise<IoK8SApiStorageV1StorageClass> {
  const result = await api.apis.createStorageV1StorageClass({
    query: query,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/storage.k8s.io/v1/storageclasses/{name}
 */
export async function deleteApisDeleteStorageV1StorageClass(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApiStorageV1StorageClass> {
  const result = await api.apis.deleteStorageV1StorageClass({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/storage.k8s.io/v1/storageclasses/{name}
 * @readonly
 */
export async function getApisReadStorageV1StorageClass(
  query: { pretty?: string },
  name: string,
): Promise<IoK8SApiStorageV1StorageClass> {
  const result = await api.apis.readStorageV1StorageClass({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/storage.k8s.io/v1/storageclasses/{name}
 */
export async function patchApisPatchStorageV1StorageClass(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiStorageV1StorageClass> {
  const result = await api.apis.patchStorageV1StorageClass({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/storage.k8s.io/v1/storageclasses/{name}
 */
export async function putApisReplaceStorageV1StorageClass(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApiStorageV1StorageClass,
): Promise<IoK8SApiStorageV1StorageClass> {
  const result = await api.apis.replaceStorageV1StorageClass({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/storage.k8s.io/v1/volumeattachments
 */
export async function deleteApisDeleteStorageV1CollectionVolumeAttachment(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result = await api.apis.deleteStorageV1CollectionVolumeAttachment({
    query: query,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/storage.k8s.io/v1/volumeattachments
 * @readonly
 */
export async function getApisListStorageV1VolumeAttachment(query: {
  pretty?: string;
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiStorageV1VolumeAttachmentList> {
  const result = await api.apis.listStorageV1VolumeAttachment({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/storage.k8s.io/v1/volumeattachments
 */
export async function postApisCreateStorageV1VolumeAttachment(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  /** Request body */
  body: IoK8SApiStorageV1VolumeAttachment,
): Promise<IoK8SApiStorageV1VolumeAttachment> {
  const result = await api.apis.createStorageV1VolumeAttachment({
    query: query,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/storage.k8s.io/v1/volumeattachments/{name}
 */
export async function deleteApisDeleteStorageV1VolumeAttachment(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApiStorageV1VolumeAttachment> {
  const result = await api.apis.deleteStorageV1VolumeAttachment({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/storage.k8s.io/v1/volumeattachments/{name}
 * @readonly
 */
export async function getApisReadStorageV1VolumeAttachment(
  query: { pretty?: string },
  name: string,
): Promise<IoK8SApiStorageV1VolumeAttachment> {
  const result = await api.apis.readStorageV1VolumeAttachment({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/storage.k8s.io/v1/volumeattachments/{name}
 */
export async function patchApisPatchStorageV1VolumeAttachment(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiStorageV1VolumeAttachment> {
  const result = await api.apis.patchStorageV1VolumeAttachment({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/storage.k8s.io/v1/volumeattachments/{name}
 */
export async function putApisReplaceStorageV1VolumeAttachment(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApiStorageV1VolumeAttachment,
): Promise<IoK8SApiStorageV1VolumeAttachment> {
  const result = await api.apis.replaceStorageV1VolumeAttachment({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/storage.k8s.io/v1/volumeattachments/{name}/status
 * @readonly
 */
export async function getApisReadStorageV1VolumeAttachmentStatus(
  query: { pretty?: string },
  name: string,
): Promise<IoK8SApiStorageV1VolumeAttachment> {
  const result = await api.apis.readStorageV1VolumeAttachmentStatus({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/storage.k8s.io/v1/volumeattachments/{name}/status
 */
export async function patchApisPatchStorageV1VolumeAttachmentStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiStorageV1VolumeAttachment> {
  const result = await api.apis.patchStorageV1VolumeAttachmentStatus({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/storage.k8s.io/v1/volumeattachments/{name}/status
 */
export async function putApisReplaceStorageV1VolumeAttachmentStatus(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  /** Request body */
  body: IoK8SApiStorageV1VolumeAttachment,
): Promise<IoK8SApiStorageV1VolumeAttachment> {
  const result = await api.apis.replaceStorageV1VolumeAttachmentStatus({
    query: query,
    name: name,
    body: body,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/storage.k8s.io/v1/watch/csidrivers
 * @readonly
 */
export async function getApisWatchStorageV1CsiDriverList(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchStorageV1CsiDriverList({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/storage.k8s.io/v1/watch/csidrivers/{name}
 * @readonly
 */
export async function getApisWatchStorageV1CsiDriver(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchStorageV1CsiDriver({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/storage.k8s.io/v1/watch/csinodes
 * @readonly
 */
export async function getApisWatchStorageV1CsiNodeList(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchStorageV1CsiNodeList({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/storage.k8s.io/v1/watch/csinodes/{name}
 * @readonly
 */
export async function getApisWatchStorageV1CsiNode(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchStorageV1CsiNode({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/storage.k8s.io/v1/watch/csistoragecapacities
 * @readonly
 */
export async function getApisWatchStorageV1CsiStorageCapacityListForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result =
    await api.apis.watchStorageV1CsiStorageCapacityListForAllNamespaces({
      query: query,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/storage.k8s.io/v1/watch/namespaces/{namespace}/csistoragecapacities
 * @readonly
 */
export async function getApisWatchStorageV1NamespacedCsiStorageCapacityList(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchStorageV1NamespacedCsiStorageCapacityList({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/storage.k8s.io/v1/watch/namespaces/{namespace}/csistoragecapacities/{name}
 * @readonly
 */
export async function getApisWatchStorageV1NamespacedCsiStorageCapacity(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchStorageV1NamespacedCsiStorageCapacity({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/storage.k8s.io/v1/watch/storageclasses
 * @readonly
 */
export async function getApisWatchStorageV1StorageClassList(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchStorageV1StorageClassList({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/storage.k8s.io/v1/watch/storageclasses/{name}
 * @readonly
 */
export async function getApisWatchStorageV1StorageClass(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchStorageV1StorageClass({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/storage.k8s.io/v1/watch/volumeattachments
 * @readonly
 */
export async function getApisWatchStorageV1VolumeAttachmentList(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchStorageV1VolumeAttachmentList({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/storage.k8s.io/v1/watch/volumeattachments/{name}
 * @readonly
 */
export async function getApisWatchStorageV1VolumeAttachment(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchStorageV1VolumeAttachment({
    query: query,
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/storage.k8s.io/v1beta1/
 * @readonly
 */
export async function getApisGetStorageV1Beta1ApiResources(): Promise<IoK8SApimachineryPkgApisMetaV1APIResourceList> {
  const result = await api.apis.getStorageV1Beta1ApiResources({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/storage.k8s.io/v1beta1/csistoragecapacities
 * @readonly
 */
export async function getApisListStorageV1Beta1CsiStorageCapacityForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApiStorageV1Beta1CSIStorageCapacityList> {
  const result =
    await api.apis.listStorageV1Beta1CsiStorageCapacityForAllNamespaces({
      query: query,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/storage.k8s.io/v1beta1/namespaces/{namespace}/csistoragecapacities
 */
export async function deleteApisDeleteStorageV1Beta1CollectionNamespacedCsiStorageCapacity(
  query: {
    pretty?: string;
    continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result =
    await api.apis.deleteStorageV1Beta1CollectionNamespacedCsiStorageCapacity({
      query: query,
      namespace: namespace,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/storage.k8s.io/v1beta1/namespaces/{namespace}/csistoragecapacities
 * @readonly
 */
export async function getApisListStorageV1Beta1NamespacedCsiStorageCapacity(
  query: {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApiStorageV1Beta1CSIStorageCapacityList> {
  const result = await api.apis.listStorageV1Beta1NamespacedCsiStorageCapacity({
    query: query,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apis/storage.k8s.io/v1beta1/namespaces/{namespace}/csistoragecapacities
 */
export async function postApisCreateStorageV1Beta1NamespacedCsiStorageCapacity(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  namespace: string,
  /** Request body */
  body: IoK8SApiStorageV1Beta1CSIStorageCapacity,
): Promise<IoK8SApiStorageV1Beta1CSIStorageCapacity> {
  const result =
    await api.apis.createStorageV1Beta1NamespacedCsiStorageCapacity({
      query: query,
      namespace: namespace,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/apis/storage.k8s.io/v1beta1/namespaces/{namespace}/csistoragecapacities/{name}
 */
export async function deleteApisDeleteStorageV1Beta1NamespacedCsiStorageCapacity(
  query: {
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1DeleteOptions,
): Promise<IoK8SApimachineryPkgApisMetaV1Status> {
  const result =
    await api.apis.deleteStorageV1Beta1NamespacedCsiStorageCapacity({
      query: query,
      name: name,
      namespace: namespace,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/storage.k8s.io/v1beta1/namespaces/{namespace}/csistoragecapacities/{name}
 * @readonly
 */
export async function getApisReadStorageV1Beta1NamespacedCsiStorageCapacity(
  query: { pretty?: string },
  name: string,
  namespace: string,
): Promise<IoK8SApiStorageV1Beta1CSIStorageCapacity> {
  const result = await api.apis.readStorageV1Beta1NamespacedCsiStorageCapacity({
    query: query,
    name: name,
    namespace: namespace,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PATCH :/apis/storage.k8s.io/v1beta1/namespaces/{namespace}/csistoragecapacities/{name}
 */
export async function patchApisPatchStorageV1Beta1NamespacedCsiStorageCapacity(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
    force?: boolean;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApimachineryPkgApisMetaV1Patch,
): Promise<IoK8SApiStorageV1Beta1CSIStorageCapacity> {
  const result = await api.apis.patchStorageV1Beta1NamespacedCsiStorageCapacity(
    {
      query: query,
      name: name,
      namespace: namespace,
      body: body,
    },
  );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request PUT :/apis/storage.k8s.io/v1beta1/namespaces/{namespace}/csistoragecapacities/{name}
 */
export async function putApisReplaceStorageV1Beta1NamespacedCsiStorageCapacity(
  query: {
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    fieldValidation?: string;
  },
  name: string,
  namespace: string,
  /** Request body */
  body: IoK8SApiStorageV1Beta1CSIStorageCapacity,
): Promise<IoK8SApiStorageV1Beta1CSIStorageCapacity> {
  const result =
    await api.apis.replaceStorageV1Beta1NamespacedCsiStorageCapacity({
      query: query,
      name: name,
      namespace: namespace,
      body: body,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/storage.k8s.io/v1beta1/watch/csistoragecapacities
 * @readonly
 */
export async function getApisWatchStorageV1Beta1CsiStorageCapacityListForAllNamespaces(query: {
  allowWatchBookmarks?: boolean;
  continue?: string;
  fieldSelector?: string;
  labelSelector?: string;
  limit?: number;
  pretty?: string;
  resourceVersion?: string;
  resourceVersionMatch?: string;
  sendInitialEvents?: boolean;
  timeoutSeconds?: number;
  watch?: boolean;
}): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result =
    await api.apis.watchStorageV1Beta1CsiStorageCapacityListForAllNamespaces({
      query: query,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/storage.k8s.io/v1beta1/watch/namespaces/{namespace}/csistoragecapacities
 * @readonly
 */
export async function getApisWatchStorageV1Beta1NamespacedCsiStorageCapacityList(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result =
    await api.apis.watchStorageV1Beta1NamespacedCsiStorageCapacityList({
      query: query,
      namespace: namespace,
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/apis/storage.k8s.io/v1beta1/watch/namespaces/{namespace}/csistoragecapacities/{name}
 * @readonly
 */
export async function getApisWatchStorageV1Beta1NamespacedCsiStorageCapacity(
  query: {
    allowWatchBookmarks?: boolean;
    continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    pretty?: string;
    resourceVersion?: string;
    resourceVersionMatch?: string;
    sendInitialEvents?: boolean;
    timeoutSeconds?: number;
    watch?: boolean;
  },
  name: string,
  namespace: string,
): Promise<IoK8SApimachineryPkgApisMetaV1WatchEvent> {
  const result = await api.apis.watchStorageV1Beta1NamespacedCsiStorageCapacity(
    {
      query: query,
      name: name,
      namespace: namespace,
    },
  );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/logs/
 * @allowrelaxedtypes
 * @readonly
 */
export async function getLogsLogFileListHandler(): Promise<hasuraSdk.JSONValue> {
  const result = await api.logs.logFileListHandler({});
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/logs/{logpath}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getLogsLogFileHandler(
  logpath: string,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.logs.logFileHandler({
    logpath: logpath,
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/openid/v1/jwks/
 * @readonly
 */
export async function getOpenidGetServiceAccountIssuerOpenIdKeyset(): Promise<IoK8SApimachineryPkgApiResourceQuantity> {
  const result = await api.openid.getServiceAccountIssuerOpenIdKeyset({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/version/
 * @readonly
 */
export async function getVersionGetCodeVersion(): Promise<IoK8SApimachineryPkgVersionInfo> {
  const result = await api.version.getCodeVersion({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}
