import { Api, Accounts, Account, AdClients, AdCode, AdUnits, AdUnit, CustomChannels, CustomChannel, UrlChannels, Alerts, Payments, AdsenseReportsGenerateResponse, SavedReports, SavedAdStyles, SavedAdStyle, Metadata } from './api';
import * as hasuraSdk from "@hasura/ndc-lambda-sdk"

const api = new Api({
  baseUrl: 'http://localhost:13191',
});

/**
 * undefined
 * @request GET :/accounts
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAccountsAdsenseAccountsList(
  /** Data format for the response. */
  alt?: "csv" | "json",      
  /** Selector specifying which fields to include in a partial response. */
  fields?: string,      
  /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
  key?: string,      
  /** OAuth 2.0 token for the current user. */
  oauth_token?: string,      
  /** Returns response with indentations and line breaks. */
  prettyPrint?: boolean,      
  /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
  quotaUser?: string,      
  /** Deprecated. Please use quotaUser instead. */
  userIp?: string,      
  /** The maximum number of accounts to include in the response, used for paging. */
  maxResults?: number,      
  /** A continuation token, used to page through accounts. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response. */
  pageToken?: string,      
): Promise<Accounts> {
  const result = await api.accounts.adsenseAccountsList({
    query: {
      alt: alt,
      fields: fields,
      key: key,
      oauth_token: oauth_token,
      prettyPrint: prettyPrint,
      quotaUser: quotaUser,
      userIp: userIp,
      maxResults: maxResults,
      pageToken: pageToken,
    },
  });
  if (result.data) {
    return result.data
  } else {
    throw (result.error)
  }
}

/**
 * undefined
 * @request GET :/accounts/{accountId}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAccountsAdsenseAccountsGet(
  /** Account to get information about. */
  accountId: string,      
  /** Data format for the response. */
  alt?: "csv" | "json",      
  /** Selector specifying which fields to include in a partial response. */
  fields?: string,      
  /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
  key?: string,      
  /** OAuth 2.0 token for the current user. */
  oauth_token?: string,      
  /** Returns response with indentations and line breaks. */
  prettyPrint?: boolean,      
  /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
  quotaUser?: string,      
  /** Deprecated. Please use quotaUser instead. */
  userIp?: string,      
  /** Whether the tree of sub accounts should be returned. */
  tree?: boolean,      
): Promise<Account> {
  const result = await api.accounts.adsenseAccountsGet({
    query: {
      alt: alt,
      fields: fields,
      key: key,
      oauth_token: oauth_token,
      prettyPrint: prettyPrint,
      quotaUser: quotaUser,
      userIp: userIp,
      tree: tree,
    },
    accountId: accountId,
  });
  if (result.data) {
    return result.data
  } else {
    throw (result.error)
  }
}

/**
 * undefined
 * @request GET :/accounts/{accountId}/adclients
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAccountsAdsenseAccountsAdclientsList(
  /** Account for which to list ad clients. */
  accountId: string,      
  /** Data format for the response. */
  alt?: "csv" | "json",      
  /** Selector specifying which fields to include in a partial response. */
  fields?: string,      
  /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
  key?: string,      
  /** OAuth 2.0 token for the current user. */
  oauth_token?: string,      
  /** Returns response with indentations and line breaks. */
  prettyPrint?: boolean,      
  /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
  quotaUser?: string,      
  /** Deprecated. Please use quotaUser instead. */
  userIp?: string,      
  /** The maximum number of ad clients to include in the response, used for paging. */
  maxResults?: number,      
  /** A continuation token, used to page through ad clients. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response. */
  pageToken?: string,      
): Promise<AdClients> {
  const result = await api.accounts.adsenseAccountsAdclientsList({
    query: {
      alt: alt,
      fields: fields,
      key: key,
      oauth_token: oauth_token,
      prettyPrint: prettyPrint,
      quotaUser: quotaUser,
      userIp: userIp,
      maxResults: maxResults,
      pageToken: pageToken,
    },
    accountId: accountId,
  });
  if (result.data) {
    return result.data
  } else {
    throw (result.error)
  }
}

/**
 * undefined
 * @request GET :/accounts/{accountId}/adclients/{adClientId}/adcode
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAccountsAdsenseAccountsAdclientsGetAdCode(
  /** Account which contains the ad client. */
  accountId: string,      
  /** Ad client to get the code for. */
  adClientId: string,      
  /** Data format for the response. */
  alt?: "csv" | "json",      
  /** Selector specifying which fields to include in a partial response. */
  fields?: string,      
  /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
  key?: string,      
  /** OAuth 2.0 token for the current user. */
  oauth_token?: string,      
  /** Returns response with indentations and line breaks. */
  prettyPrint?: boolean,      
  /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
  quotaUser?: string,      
  /** Deprecated. Please use quotaUser instead. */
  userIp?: string,      
  /** Tag partner to include in the ad code snippet. */
  tagPartner?: string,      
): Promise<AdCode> {
  const result = await api.accounts.adsenseAccountsAdclientsGetAdCode({
    query: {
      alt: alt,
      fields: fields,
      key: key,
      oauth_token: oauth_token,
      prettyPrint: prettyPrint,
      quotaUser: quotaUser,
      userIp: userIp,
      tagPartner: tagPartner,
    },
    accountId: accountId,
    adClientId: adClientId,
  });
  if (result.data) {
    return result.data
  } else {
    throw (result.error)
  }
}

/**
 * undefined
 * @request GET :/accounts/{accountId}/adclients/{adClientId}/adunits
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAccountsAdsenseAccountsAdunitsList(
  /** Account to which the ad client belongs. */
  accountId: string,      
  /** Ad client for which to list ad units. */
  adClientId: string,      
  /** Data format for the response. */
  alt?: "csv" | "json",      
  /** Selector specifying which fields to include in a partial response. */
  fields?: string,      
  /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
  key?: string,      
  /** OAuth 2.0 token for the current user. */
  oauth_token?: string,      
  /** Returns response with indentations and line breaks. */
  prettyPrint?: boolean,      
  /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
  quotaUser?: string,      
  /** Deprecated. Please use quotaUser instead. */
  userIp?: string,      
  /** Whether to include inactive ad units. Default: true. */
  includeInactive?: boolean,      
  /** The maximum number of ad units to include in the response, used for paging. */
  maxResults?: number,      
  /** A continuation token, used to page through ad units. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response. */
  pageToken?: string,      
): Promise<AdUnits> {
  const result = await api.accounts.adsenseAccountsAdunitsList({
    query: {
      alt: alt,
      fields: fields,
      key: key,
      oauth_token: oauth_token,
      prettyPrint: prettyPrint,
      quotaUser: quotaUser,
      userIp: userIp,
      includeInactive: includeInactive,
      maxResults: maxResults,
      pageToken: pageToken,
    },
    accountId: accountId,
    adClientId: adClientId,
  });
  if (result.data) {
    return result.data
  } else {
    throw (result.error)
  }
}

/**
 * undefined
 * @request GET :/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAccountsAdsenseAccountsAdunitsGet(
  /** Account to which the ad client belongs. */
  accountId: string,      
  /** Ad client for which to get the ad unit. */
  adClientId: string,      
  /** Ad unit to retrieve. */
  adUnitId: string,      
  /** Data format for the response. */
  alt?: "csv" | "json",      
  /** Selector specifying which fields to include in a partial response. */
  fields?: string,      
  /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
  key?: string,      
  /** OAuth 2.0 token for the current user. */
  oauth_token?: string,      
  /** Returns response with indentations and line breaks. */
  prettyPrint?: boolean,      
  /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
  quotaUser?: string,      
  /** Deprecated. Please use quotaUser instead. */
  userIp?: string,      
): Promise<AdUnit> {
  const result = await api.accounts.adsenseAccountsAdunitsGet({
    query: {
      alt: alt,
      fields: fields,
      key: key,
      oauth_token: oauth_token,
      prettyPrint: prettyPrint,
      quotaUser: quotaUser,
      userIp: userIp,
    },
    accountId: accountId,
    adClientId: adClientId,
    adUnitId: adUnitId,
  });
  if (result.data) {
    return result.data
  } else {
    throw (result.error)
  }
}

/**
 * undefined
 * @request GET :/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}/adcode
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAccountsAdsenseAccountsAdunitsGetAdCode(
  /** Account which contains the ad client. */
  accountId: string,      
  /** Ad client with contains the ad unit. */
  adClientId: string,      
  /** Ad unit to get the code for. */
  adUnitId: string,      
  /** Data format for the response. */
  alt?: "csv" | "json",      
  /** Selector specifying which fields to include in a partial response. */
  fields?: string,      
  /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
  key?: string,      
  /** OAuth 2.0 token for the current user. */
  oauth_token?: string,      
  /** Returns response with indentations and line breaks. */
  prettyPrint?: boolean,      
  /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
  quotaUser?: string,      
  /** Deprecated. Please use quotaUser instead. */
  userIp?: string,      
): Promise<AdCode> {
  const result = await api.accounts.adsenseAccountsAdunitsGetAdCode({
    query: {
      alt: alt,
      fields: fields,
      key: key,
      oauth_token: oauth_token,
      prettyPrint: prettyPrint,
      quotaUser: quotaUser,
      userIp: userIp,
    },
    accountId: accountId,
    adClientId: adClientId,
    adUnitId: adUnitId,
  });
  if (result.data) {
    return result.data
  } else {
    throw (result.error)
  }
}

/**
 * undefined
 * @request GET :/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}/customchannels
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAccountsAdsenseAccountsAdunitsCustomchannelsList(
  /** Account to which the ad client belongs. */
  accountId: string,      
  /** Ad client which contains the ad unit. */
  adClientId: string,      
  /** Ad unit for which to list custom channels. */
  adUnitId: string,      
  /** Data format for the response. */
  alt?: "csv" | "json",      
  /** Selector specifying which fields to include in a partial response. */
  fields?: string,      
  /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
  key?: string,      
  /** OAuth 2.0 token for the current user. */
  oauth_token?: string,      
  /** Returns response with indentations and line breaks. */
  prettyPrint?: boolean,      
  /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
  quotaUser?: string,      
  /** Deprecated. Please use quotaUser instead. */
  userIp?: string,      
  /** The maximum number of custom channels to include in the response, used for paging. */
  maxResults?: number,      
  /** A continuation token, used to page through custom channels. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response. */
  pageToken?: string,      
): Promise<CustomChannels> {
  const result = await api.accounts.adsenseAccountsAdunitsCustomchannelsList({
    query: {
      alt: alt,
      fields: fields,
      key: key,
      oauth_token: oauth_token,
      prettyPrint: prettyPrint,
      quotaUser: quotaUser,
      userIp: userIp,
      maxResults: maxResults,
      pageToken: pageToken,
    },
    accountId: accountId,
    adClientId: adClientId,
    adUnitId: adUnitId,
  });
  if (result.data) {
    return result.data
  } else {
    throw (result.error)
  }
}

/**
 * undefined
 * @request GET :/accounts/{accountId}/adclients/{adClientId}/customchannels
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAccountsAdsenseAccountsCustomchannelsList(
  /** Account to which the ad client belongs. */
  accountId: string,      
  /** Ad client for which to list custom channels. */
  adClientId: string,      
  /** Data format for the response. */
  alt?: "csv" | "json",      
  /** Selector specifying which fields to include in a partial response. */
  fields?: string,      
  /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
  key?: string,      
  /** OAuth 2.0 token for the current user. */
  oauth_token?: string,      
  /** Returns response with indentations and line breaks. */
  prettyPrint?: boolean,      
  /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
  quotaUser?: string,      
  /** Deprecated. Please use quotaUser instead. */
  userIp?: string,      
  /** The maximum number of custom channels to include in the response, used for paging. */
  maxResults?: number,      
  /** A continuation token, used to page through custom channels. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response. */
  pageToken?: string,      
): Promise<CustomChannels> {
  const result = await api.accounts.adsenseAccountsCustomchannelsList({
    query: {
      alt: alt,
      fields: fields,
      key: key,
      oauth_token: oauth_token,
      prettyPrint: prettyPrint,
      quotaUser: quotaUser,
      userIp: userIp,
      maxResults: maxResults,
      pageToken: pageToken,
    },
    accountId: accountId,
    adClientId: adClientId,
  });
  if (result.data) {
    return result.data
  } else {
    throw (result.error)
  }
}

/**
 * undefined
 * @request GET :/accounts/{accountId}/adclients/{adClientId}/customchannels/{customChannelId}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAccountsAdsenseAccountsCustomchannelsGet(
  /** Account to which the ad client belongs. */
  accountId: string,      
  /** Ad client which contains the custom channel. */
  adClientId: string,      
  /** Custom channel to retrieve. */
  customChannelId: string,      
  /** Data format for the response. */
  alt?: "csv" | "json",      
  /** Selector specifying which fields to include in a partial response. */
  fields?: string,      
  /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
  key?: string,      
  /** OAuth 2.0 token for the current user. */
  oauth_token?: string,      
  /** Returns response with indentations and line breaks. */
  prettyPrint?: boolean,      
  /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
  quotaUser?: string,      
  /** Deprecated. Please use quotaUser instead. */
  userIp?: string,      
): Promise<CustomChannel> {
  const result = await api.accounts.adsenseAccountsCustomchannelsGet({
    query: {
      alt: alt,
      fields: fields,
      key: key,
      oauth_token: oauth_token,
      prettyPrint: prettyPrint,
      quotaUser: quotaUser,
      userIp: userIp,
    },
    accountId: accountId,
    adClientId: adClientId,
    customChannelId: customChannelId,
  });
  if (result.data) {
    return result.data
  } else {
    throw (result.error)
  }
}

/**
 * undefined
 * @request GET :/accounts/{accountId}/adclients/{adClientId}/customchannels/{customChannelId}/adunits
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAccountsAdsenseAccountsCustomchannelsAdunitsList(
  /** Account to which the ad client belongs. */
  accountId: string,      
  /** Ad client which contains the custom channel. */
  adClientId: string,      
  /** Custom channel for which to list ad units. */
  customChannelId: string,      
  /** Data format for the response. */
  alt?: "csv" | "json",      
  /** Selector specifying which fields to include in a partial response. */
  fields?: string,      
  /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
  key?: string,      
  /** OAuth 2.0 token for the current user. */
  oauth_token?: string,      
  /** Returns response with indentations and line breaks. */
  prettyPrint?: boolean,      
  /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
  quotaUser?: string,      
  /** Deprecated. Please use quotaUser instead. */
  userIp?: string,      
  /** Whether to include inactive ad units. Default: true. */
  includeInactive?: boolean,      
  /** The maximum number of ad units to include in the response, used for paging. */
  maxResults?: number,      
  /** A continuation token, used to page through ad units. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response. */
  pageToken?: string,      
): Promise<AdUnits> {
  const result = await api.accounts.adsenseAccountsCustomchannelsAdunitsList({
    query: {
      alt: alt,
      fields: fields,
      key: key,
      oauth_token: oauth_token,
      prettyPrint: prettyPrint,
      quotaUser: quotaUser,
      userIp: userIp,
      includeInactive: includeInactive,
      maxResults: maxResults,
      pageToken: pageToken,
    },
    accountId: accountId,
    adClientId: adClientId,
    customChannelId: customChannelId,
  });
  if (result.data) {
    return result.data
  } else {
    throw (result.error)
  }
}

/**
 * undefined
 * @request GET :/accounts/{accountId}/adclients/{adClientId}/urlchannels
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAccountsAdsenseAccountsUrlchannelsList(
  /** Account to which the ad client belongs. */
  accountId: string,      
  /** Ad client for which to list URL channels. */
  adClientId: string,      
  /** Data format for the response. */
  alt?: "csv" | "json",      
  /** Selector specifying which fields to include in a partial response. */
  fields?: string,      
  /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
  key?: string,      
  /** OAuth 2.0 token for the current user. */
  oauth_token?: string,      
  /** Returns response with indentations and line breaks. */
  prettyPrint?: boolean,      
  /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
  quotaUser?: string,      
  /** Deprecated. Please use quotaUser instead. */
  userIp?: string,      
  /** The maximum number of URL channels to include in the response, used for paging. */
  maxResults?: number,      
  /** A continuation token, used to page through URL channels. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response. */
  pageToken?: string,      
): Promise<UrlChannels> {
  const result = await api.accounts.adsenseAccountsUrlchannelsList({
    query: {
      alt: alt,
      fields: fields,
      key: key,
      oauth_token: oauth_token,
      prettyPrint: prettyPrint,
      quotaUser: quotaUser,
      userIp: userIp,
      maxResults: maxResults,
      pageToken: pageToken,
    },
    accountId: accountId,
    adClientId: adClientId,
  });
  if (result.data) {
    return result.data
  } else {
    throw (result.error)
  }
}

/**
 * undefined
 * @request GET :/accounts/{accountId}/alerts
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAccountsAdsenseAccountsAlertsList(
  /** Account for which to retrieve the alerts. */
  accountId: string,      
  /** Data format for the response. */
  alt?: "csv" | "json",      
  /** Selector specifying which fields to include in a partial response. */
  fields?: string,      
  /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
  key?: string,      
  /** OAuth 2.0 token for the current user. */
  oauth_token?: string,      
  /** Returns response with indentations and line breaks. */
  prettyPrint?: boolean,      
  /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
  quotaUser?: string,      
  /** Deprecated. Please use quotaUser instead. */
  userIp?: string,      
  /** The locale to use for translating alert messages. The account locale will be used if this is not supplied. The AdSense default (English) will be used if the supplied locale is invalid or unsupported. */
  locale?: string,      
): Promise<Alerts> {
  const result = await api.accounts.adsenseAccountsAlertsList({
    query: {
      alt: alt,
      fields: fields,
      key: key,
      oauth_token: oauth_token,
      prettyPrint: prettyPrint,
      quotaUser: quotaUser,
      userIp: userIp,
      locale: locale,
    },
    accountId: accountId,
  });
  if (result.data) {
    return result.data
  } else {
    throw (result.error)
  }
}

/**
 * undefined
 * @request DELETE :/accounts/{accountId}/alerts/{alertId}
 * @allowrelaxedtypes
 */
export async function deleteAccountsAdsenseAccountsAlertsDelete(
  /** Account which contains the ad unit. */
  accountId: string,      
  /** Alert to delete. */
  alertId: string,      
  /** Data format for the response. */
  alt?: "csv" | "json",      
  /** Selector specifying which fields to include in a partial response. */
  fields?: string,      
  /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
  key?: string,      
  /** OAuth 2.0 token for the current user. */
  oauth_token?: string,      
  /** Returns response with indentations and line breaks. */
  prettyPrint?: boolean,      
  /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
  quotaUser?: string,      
  /** Deprecated. Please use quotaUser instead. */
  userIp?: string,      
): Promise<hasuraSdk.JSONValue> {
  const result = await api.accounts.adsenseAccountsAlertsDelete({
    query: {
      alt: alt,
      fields: fields,
      key: key,
      oauth_token: oauth_token,
      prettyPrint: prettyPrint,
      quotaUser: quotaUser,
      userIp: userIp,
    },
    accountId: accountId,
    alertId: alertId,
  });
  if (result.error) {
    throw (result.error)
  } else {
    return new hasuraSdk.JSONValue(result.data);
  }
}

/**
 * undefined
 * @request GET :/accounts/{accountId}/payments
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAccountsAdsenseAccountsPaymentsList(
  /** Account for which to retrieve the payments. */
  accountId: string,      
  /** Data format for the response. */
  alt?: "csv" | "json",      
  /** Selector specifying which fields to include in a partial response. */
  fields?: string,      
  /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
  key?: string,      
  /** OAuth 2.0 token for the current user. */
  oauth_token?: string,      
  /** Returns response with indentations and line breaks. */
  prettyPrint?: boolean,      
  /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
  quotaUser?: string,      
  /** Deprecated. Please use quotaUser instead. */
  userIp?: string,      
): Promise<Payments> {
  const result = await api.accounts.adsenseAccountsPaymentsList({
    query: {
      alt: alt,
      fields: fields,
      key: key,
      oauth_token: oauth_token,
      prettyPrint: prettyPrint,
      quotaUser: quotaUser,
      userIp: userIp,
    },
    accountId: accountId,
  });
  if (result.data) {
    return result.data
  } else {
    throw (result.error)
  }
}

/**
 * undefined
 * @request GET :/accounts/{accountId}/reports
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAccountsAdsenseAccountsReportsGenerate(
  /** Start of the date range to report on in "YYYY-MM-DD" format, inclusive. */
  startDate: string,      
  /** End of the date range to report on in "YYYY-MM-DD" format, inclusive. */
  endDate: string,      
  /** Account upon which to report. */
  accountId: string,      
  /** Data format for the response. */
  alt?: "csv" | "json",      
  /** Selector specifying which fields to include in a partial response. */
  fields?: string,      
  /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
  key?: string,      
  /** OAuth 2.0 token for the current user. */
  oauth_token?: string,      
  /** Returns response with indentations and line breaks. */
  prettyPrint?: boolean,      
  /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
  quotaUser?: string,      
  /** Deprecated. Please use quotaUser instead. */
  userIp?: string,      
  /** Optional currency to use when reporting on monetary metrics. Defaults to the account's currency if not set. */
  currency?: string,      
  /** Dimensions to base the report on. */
  dimension?: string[],      
  /** Filters to be run on the report. */
  filter?: string[],      
  /** Optional locale to use for translating report output to a local language. Defaults to "en_US" if not specified. */
  locale?: string,      
  /** The maximum number of rows of report data to return. */
  maxResults?: number,      
  /** Numeric columns to include in the report. */
  metric?: string[],      
  /** The name of a dimension or metric to sort the resulting report on, optionally prefixed with "+" to sort ascending or "-" to sort descending. If no prefix is specified, the column is sorted ascending. */
  sort?: string[],      
  /** Index of the first row of report data to return. */
  startIndex?: number,      
  /** Whether the report should be generated in the AdSense account's local timezone. If false default PST/PDT timezone will be used. */
  useTimezoneReporting?: boolean,      
): Promise<AdsenseReportsGenerateResponse> {
  const result = await api.accounts.adsenseAccountsReportsGenerate({
    query: {
      alt: alt,
      fields: fields,
      key: key,
      oauth_token: oauth_token,
      prettyPrint: prettyPrint,
      quotaUser: quotaUser,
      userIp: userIp,
      startDate: startDate,
      endDate: endDate,
      currency: currency,
      dimension: dimension,
      filter: filter,
      locale: locale,
      maxResults: maxResults,
      metric: metric,
      sort: sort,
      startIndex: startIndex,
      useTimezoneReporting: useTimezoneReporting,
    },
    accountId: accountId,
  });
  if (result.data) {
    return result.data
  } else {
    throw (result.error)
  }
}

/**
 * undefined
 * @request GET :/accounts/{accountId}/reports/saved
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAccountsAdsenseAccountsReportsSavedList(
  /** Account to which the saved reports belong. */
  accountId: string,      
  /** Data format for the response. */
  alt?: "csv" | "json",      
  /** Selector specifying which fields to include in a partial response. */
  fields?: string,      
  /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
  key?: string,      
  /** OAuth 2.0 token for the current user. */
  oauth_token?: string,      
  /** Returns response with indentations and line breaks. */
  prettyPrint?: boolean,      
  /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
  quotaUser?: string,      
  /** Deprecated. Please use quotaUser instead. */
  userIp?: string,      
  /** The maximum number of saved reports to include in the response, used for paging. */
  maxResults?: number,      
  /** A continuation token, used to page through saved reports. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response. */
  pageToken?: string,      
): Promise<SavedReports> {
  const result = await api.accounts.adsenseAccountsReportsSavedList({
    query: {
      alt: alt,
      fields: fields,
      key: key,
      oauth_token: oauth_token,
      prettyPrint: prettyPrint,
      quotaUser: quotaUser,
      userIp: userIp,
      maxResults: maxResults,
      pageToken: pageToken,
    },
    accountId: accountId,
  });
  if (result.data) {
    return result.data
  } else {
    throw (result.error)
  }
}

/**
 * undefined
 * @request GET :/accounts/{accountId}/reports/{savedReportId}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAccountsAdsenseAccountsReportsSavedGenerate(
  /** Account to which the saved reports belong. */
  accountId: string,      
  /** The saved report to retrieve. */
  savedReportId: string,      
  /** Data format for the response. */
  alt?: "csv" | "json",      
  /** Selector specifying which fields to include in a partial response. */
  fields?: string,      
  /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
  key?: string,      
  /** OAuth 2.0 token for the current user. */
  oauth_token?: string,      
  /** Returns response with indentations and line breaks. */
  prettyPrint?: boolean,      
  /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
  quotaUser?: string,      
  /** Deprecated. Please use quotaUser instead. */
  userIp?: string,      
  /** Optional locale to use for translating report output to a local language. Defaults to "en_US" if not specified. */
  locale?: string,      
  /** The maximum number of rows of report data to return. */
  maxResults?: number,      
  /** Index of the first row of report data to return. */
  startIndex?: number,      
): Promise<AdsenseReportsGenerateResponse> {
  const result = await api.accounts.adsenseAccountsReportsSavedGenerate({
    query: {
      alt: alt,
      fields: fields,
      key: key,
      oauth_token: oauth_token,
      prettyPrint: prettyPrint,
      quotaUser: quotaUser,
      userIp: userIp,
      locale: locale,
      maxResults: maxResults,
      startIndex: startIndex,
    },
    accountId: accountId,
    savedReportId: savedReportId,
  });
  if (result.data) {
    return result.data
  } else {
    throw (result.error)
  }
}

/**
 * undefined
 * @request GET :/accounts/{accountId}/savedadstyles
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAccountsAdsenseAccountsSavedadstylesList(
  /** Account for which to list saved ad styles. */
  accountId: string,      
  /** Data format for the response. */
  alt?: "csv" | "json",      
  /** Selector specifying which fields to include in a partial response. */
  fields?: string,      
  /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
  key?: string,      
  /** OAuth 2.0 token for the current user. */
  oauth_token?: string,      
  /** Returns response with indentations and line breaks. */
  prettyPrint?: boolean,      
  /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
  quotaUser?: string,      
  /** Deprecated. Please use quotaUser instead. */
  userIp?: string,      
  /** The maximum number of saved ad styles to include in the response, used for paging. */
  maxResults?: number,      
  /** A continuation token, used to page through saved ad styles. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response. */
  pageToken?: string,      
): Promise<SavedAdStyles> {
  const result = await api.accounts.adsenseAccountsSavedadstylesList({
    query: {
      alt: alt,
      fields: fields,
      key: key,
      oauth_token: oauth_token,
      prettyPrint: prettyPrint,
      quotaUser: quotaUser,
      userIp: userIp,
      maxResults: maxResults,
      pageToken: pageToken,
    },
    accountId: accountId,
  });
  if (result.data) {
    return result.data
  } else {
    throw (result.error)
  }
}

/**
 * undefined
 * @request GET :/accounts/{accountId}/savedadstyles/{savedAdStyleId}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAccountsAdsenseAccountsSavedadstylesGet(
  /** Account for which to get the saved ad style. */
  accountId: string,      
  /** Saved ad style to retrieve. */
  savedAdStyleId: string,      
  /** Data format for the response. */
  alt?: "csv" | "json",      
  /** Selector specifying which fields to include in a partial response. */
  fields?: string,      
  /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
  key?: string,      
  /** OAuth 2.0 token for the current user. */
  oauth_token?: string,      
  /** Returns response with indentations and line breaks. */
  prettyPrint?: boolean,      
  /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
  quotaUser?: string,      
  /** Deprecated. Please use quotaUser instead. */
  userIp?: string,      
): Promise<SavedAdStyle> {
  const result = await api.accounts.adsenseAccountsSavedadstylesGet({
    query: {
      alt: alt,
      fields: fields,
      key: key,
      oauth_token: oauth_token,
      prettyPrint: prettyPrint,
      quotaUser: quotaUser,
      userIp: userIp,
    },
    accountId: accountId,
    savedAdStyleId: savedAdStyleId,
  });
  if (result.data) {
    return result.data
  } else {
    throw (result.error)
  }
}

/**
 * undefined
 * @request GET :/adclients
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAdclientsAdsenseAdclientsList(
  /** Data format for the response. */
  alt?: "csv" | "json",      
  /** Selector specifying which fields to include in a partial response. */
  fields?: string,      
  /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
  key?: string,      
  /** OAuth 2.0 token for the current user. */
  oauth_token?: string,      
  /** Returns response with indentations and line breaks. */
  prettyPrint?: boolean,      
  /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
  quotaUser?: string,      
  /** Deprecated. Please use quotaUser instead. */
  userIp?: string,      
  /** The maximum number of ad clients to include in the response, used for paging. */
  maxResults?: number,      
  /** A continuation token, used to page through ad clients. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response. */
  pageToken?: string,      
): Promise<AdClients> {
  const result = await api.adclients.adsenseAdclientsList({
    query: {
      alt: alt,
      fields: fields,
      key: key,
      oauth_token: oauth_token,
      prettyPrint: prettyPrint,
      quotaUser: quotaUser,
      userIp: userIp,
      maxResults: maxResults,
      pageToken: pageToken,
    },
  });
  if (result.data) {
    return result.data
  } else {
    throw (result.error)
  }
}

/**
 * undefined
 * @request GET :/adclients/{adClientId}/adunits
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAdclientsAdsenseAdunitsList(
  /** Ad client for which to list ad units. */
  adClientId: string,      
  /** Data format for the response. */
  alt?: "csv" | "json",      
  /** Selector specifying which fields to include in a partial response. */
  fields?: string,      
  /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
  key?: string,      
  /** OAuth 2.0 token for the current user. */
  oauth_token?: string,      
  /** Returns response with indentations and line breaks. */
  prettyPrint?: boolean,      
  /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
  quotaUser?: string,      
  /** Deprecated. Please use quotaUser instead. */
  userIp?: string,      
  /** Whether to include inactive ad units. Default: true. */
  includeInactive?: boolean,      
  /** The maximum number of ad units to include in the response, used for paging. */
  maxResults?: number,      
  /** A continuation token, used to page through ad units. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response. */
  pageToken?: string,      
): Promise<AdUnits> {
  const result = await api.adclients.adsenseAdunitsList({
    query: {
      alt: alt,
      fields: fields,
      key: key,
      oauth_token: oauth_token,
      prettyPrint: prettyPrint,
      quotaUser: quotaUser,
      userIp: userIp,
      includeInactive: includeInactive,
      maxResults: maxResults,
      pageToken: pageToken,
    },
    adClientId: adClientId,
  });
  if (result.data) {
    return result.data
  } else {
    throw (result.error)
  }
}

/**
 * undefined
 * @request GET :/adclients/{adClientId}/adunits/{adUnitId}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAdclientsAdsenseAdunitsGet(
  /** Ad client for which to get the ad unit. */
  adClientId: string,      
  /** Ad unit to retrieve. */
  adUnitId: string,      
  /** Data format for the response. */
  alt?: "csv" | "json",      
  /** Selector specifying which fields to include in a partial response. */
  fields?: string,      
  /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
  key?: string,      
  /** OAuth 2.0 token for the current user. */
  oauth_token?: string,      
  /** Returns response with indentations and line breaks. */
  prettyPrint?: boolean,      
  /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
  quotaUser?: string,      
  /** Deprecated. Please use quotaUser instead. */
  userIp?: string,      
): Promise<AdUnit> {
  const result = await api.adclients.adsenseAdunitsGet({
    query: {
      alt: alt,
      fields: fields,
      key: key,
      oauth_token: oauth_token,
      prettyPrint: prettyPrint,
      quotaUser: quotaUser,
      userIp: userIp,
    },
    adClientId: adClientId,
    adUnitId: adUnitId,
  });
  if (result.data) {
    return result.data
  } else {
    throw (result.error)
  }
}

/**
 * undefined
 * @request GET :/adclients/{adClientId}/adunits/{adUnitId}/adcode
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAdclientsAdsenseAdunitsGetAdCode(
  /** Ad client with contains the ad unit. */
  adClientId: string,      
  /** Ad unit to get the code for. */
  adUnitId: string,      
  /** Data format for the response. */
  alt?: "csv" | "json",      
  /** Selector specifying which fields to include in a partial response. */
  fields?: string,      
  /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
  key?: string,      
  /** OAuth 2.0 token for the current user. */
  oauth_token?: string,      
  /** Returns response with indentations and line breaks. */
  prettyPrint?: boolean,      
  /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
  quotaUser?: string,      
  /** Deprecated. Please use quotaUser instead. */
  userIp?: string,      
): Promise<AdCode> {
  const result = await api.adclients.adsenseAdunitsGetAdCode({
    query: {
      alt: alt,
      fields: fields,
      key: key,
      oauth_token: oauth_token,
      prettyPrint: prettyPrint,
      quotaUser: quotaUser,
      userIp: userIp,
    },
    adClientId: adClientId,
    adUnitId: adUnitId,
  });
  if (result.data) {
    return result.data
  } else {
    throw (result.error)
  }
}

/**
 * undefined
 * @request GET :/adclients/{adClientId}/adunits/{adUnitId}/customchannels
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAdclientsAdsenseAdunitsCustomchannelsList(
  /** Ad client which contains the ad unit. */
  adClientId: string,      
  /** Ad unit for which to list custom channels. */
  adUnitId: string,      
  /** Data format for the response. */
  alt?: "csv" | "json",      
  /** Selector specifying which fields to include in a partial response. */
  fields?: string,      
  /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
  key?: string,      
  /** OAuth 2.0 token for the current user. */
  oauth_token?: string,      
  /** Returns response with indentations and line breaks. */
  prettyPrint?: boolean,      
  /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
  quotaUser?: string,      
  /** Deprecated. Please use quotaUser instead. */
  userIp?: string,      
  /** The maximum number of custom channels to include in the response, used for paging. */
  maxResults?: number,      
  /** A continuation token, used to page through custom channels. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response. */
  pageToken?: string,      
): Promise<CustomChannels> {
  const result = await api.adclients.adsenseAdunitsCustomchannelsList({
    query: {
      alt: alt,
      fields: fields,
      key: key,
      oauth_token: oauth_token,
      prettyPrint: prettyPrint,
      quotaUser: quotaUser,
      userIp: userIp,
      maxResults: maxResults,
      pageToken: pageToken,
    },
    adClientId: adClientId,
    adUnitId: adUnitId,
  });
  if (result.data) {
    return result.data
  } else {
    throw (result.error)
  }
}

/**
 * undefined
 * @request GET :/adclients/{adClientId}/customchannels
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAdclientsAdsenseCustomchannelsList(
  /** Ad client for which to list custom channels. */
  adClientId: string,      
  /** Data format for the response. */
  alt?: "csv" | "json",      
  /** Selector specifying which fields to include in a partial response. */
  fields?: string,      
  /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
  key?: string,      
  /** OAuth 2.0 token for the current user. */
  oauth_token?: string,      
  /** Returns response with indentations and line breaks. */
  prettyPrint?: boolean,      
  /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
  quotaUser?: string,      
  /** Deprecated. Please use quotaUser instead. */
  userIp?: string,      
  /** The maximum number of custom channels to include in the response, used for paging. */
  maxResults?: number,      
  /** A continuation token, used to page through custom channels. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response. */
  pageToken?: string,      
): Promise<CustomChannels> {
  const result = await api.adclients.adsenseCustomchannelsList({
    query: {
      alt: alt,
      fields: fields,
      key: key,
      oauth_token: oauth_token,
      prettyPrint: prettyPrint,
      quotaUser: quotaUser,
      userIp: userIp,
      maxResults: maxResults,
      pageToken: pageToken,
    },
    adClientId: adClientId,
  });
  if (result.data) {
    return result.data
  } else {
    throw (result.error)
  }
}

/**
 * undefined
 * @request GET :/adclients/{adClientId}/customchannels/{customChannelId}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAdclientsAdsenseCustomchannelsGet(
  /** Ad client which contains the custom channel. */
  adClientId: string,      
  /** Custom channel to retrieve. */
  customChannelId: string,      
  /** Data format for the response. */
  alt?: "csv" | "json",      
  /** Selector specifying which fields to include in a partial response. */
  fields?: string,      
  /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
  key?: string,      
  /** OAuth 2.0 token for the current user. */
  oauth_token?: string,      
  /** Returns response with indentations and line breaks. */
  prettyPrint?: boolean,      
  /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
  quotaUser?: string,      
  /** Deprecated. Please use quotaUser instead. */
  userIp?: string,      
): Promise<CustomChannel> {
  const result = await api.adclients.adsenseCustomchannelsGet({
    query: {
      alt: alt,
      fields: fields,
      key: key,
      oauth_token: oauth_token,
      prettyPrint: prettyPrint,
      quotaUser: quotaUser,
      userIp: userIp,
    },
    adClientId: adClientId,
    customChannelId: customChannelId,
  });
  if (result.data) {
    return result.data
  } else {
    throw (result.error)
  }
}

/**
 * undefined
 * @request GET :/adclients/{adClientId}/customchannels/{customChannelId}/adunits
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAdclientsAdsenseCustomchannelsAdunitsList(
  /** Ad client which contains the custom channel. */
  adClientId: string,      
  /** Custom channel for which to list ad units. */
  customChannelId: string,      
  /** Data format for the response. */
  alt?: "csv" | "json",      
  /** Selector specifying which fields to include in a partial response. */
  fields?: string,      
  /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
  key?: string,      
  /** OAuth 2.0 token for the current user. */
  oauth_token?: string,      
  /** Returns response with indentations and line breaks. */
  prettyPrint?: boolean,      
  /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
  quotaUser?: string,      
  /** Deprecated. Please use quotaUser instead. */
  userIp?: string,      
  /** Whether to include inactive ad units. Default: true. */
  includeInactive?: boolean,      
  /** The maximum number of ad units to include in the response, used for paging. */
  maxResults?: number,      
  /** A continuation token, used to page through ad units. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response. */
  pageToken?: string,      
): Promise<AdUnits> {
  const result = await api.adclients.adsenseCustomchannelsAdunitsList({
    query: {
      alt: alt,
      fields: fields,
      key: key,
      oauth_token: oauth_token,
      prettyPrint: prettyPrint,
      quotaUser: quotaUser,
      userIp: userIp,
      includeInactive: includeInactive,
      maxResults: maxResults,
      pageToken: pageToken,
    },
    adClientId: adClientId,
    customChannelId: customChannelId,
  });
  if (result.data) {
    return result.data
  } else {
    throw (result.error)
  }
}

/**
 * undefined
 * @request GET :/adclients/{adClientId}/urlchannels
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAdclientsAdsenseUrlchannelsList(
  /** Ad client for which to list URL channels. */
  adClientId: string,      
  /** Data format for the response. */
  alt?: "csv" | "json",      
  /** Selector specifying which fields to include in a partial response. */
  fields?: string,      
  /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
  key?: string,      
  /** OAuth 2.0 token for the current user. */
  oauth_token?: string,      
  /** Returns response with indentations and line breaks. */
  prettyPrint?: boolean,      
  /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
  quotaUser?: string,      
  /** Deprecated. Please use quotaUser instead. */
  userIp?: string,      
  /** The maximum number of URL channels to include in the response, used for paging. */
  maxResults?: number,      
  /** A continuation token, used to page through URL channels. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response. */
  pageToken?: string,      
): Promise<UrlChannels> {
  const result = await api.adclients.adsenseUrlchannelsList({
    query: {
      alt: alt,
      fields: fields,
      key: key,
      oauth_token: oauth_token,
      prettyPrint: prettyPrint,
      quotaUser: quotaUser,
      userIp: userIp,
      maxResults: maxResults,
      pageToken: pageToken,
    },
    adClientId: adClientId,
  });
  if (result.data) {
    return result.data
  } else {
    throw (result.error)
  }
}

/**
 * undefined
 * @request GET :/alerts
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAlertsAdsenseAlertsList(
  /** Data format for the response. */
  alt?: "csv" | "json",      
  /** Selector specifying which fields to include in a partial response. */
  fields?: string,      
  /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
  key?: string,      
  /** OAuth 2.0 token for the current user. */
  oauth_token?: string,      
  /** Returns response with indentations and line breaks. */
  prettyPrint?: boolean,      
  /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
  quotaUser?: string,      
  /** Deprecated. Please use quotaUser instead. */
  userIp?: string,      
  /** The locale to use for translating alert messages. The account locale will be used if this is not supplied. The AdSense default (English) will be used if the supplied locale is invalid or unsupported. */
  locale?: string,      
): Promise<Alerts> {
  const result = await api.alerts.adsenseAlertsList({
    query: {
      alt: alt,
      fields: fields,
      key: key,
      oauth_token: oauth_token,
      prettyPrint: prettyPrint,
      quotaUser: quotaUser,
      userIp: userIp,
      locale: locale,
    },
  });
  if (result.data) {
    return result.data
  } else {
    throw (result.error)
  }
}

/**
 * undefined
 * @request DELETE :/alerts/{alertId}
 * @allowrelaxedtypes
 */
export async function deleteAlertsAdsenseAlertsDelete(
  /** Alert to delete. */
  alertId: string,      
  /** Data format for the response. */
  alt?: "csv" | "json",      
  /** Selector specifying which fields to include in a partial response. */
  fields?: string,      
  /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
  key?: string,      
  /** OAuth 2.0 token for the current user. */
  oauth_token?: string,      
  /** Returns response with indentations and line breaks. */
  prettyPrint?: boolean,      
  /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
  quotaUser?: string,      
  /** Deprecated. Please use quotaUser instead. */
  userIp?: string,      
): Promise<hasuraSdk.JSONValue> {
  const result = await api.alerts.adsenseAlertsDelete({
    query: {
      alt: alt,
      fields: fields,
      key: key,
      oauth_token: oauth_token,
      prettyPrint: prettyPrint,
      quotaUser: quotaUser,
      userIp: userIp,
    },
    alertId: alertId,
  });
  if (result.error) {
    throw (result.error)
  } else {
    return new hasuraSdk.JSONValue(result.data);
  }
}

/**
 * undefined
 * @request GET :/metadata/dimensions
 * @allowrelaxedtypes
 * @readonly
 */
export async function getMetadataAdsenseMetadataDimensionsList(
  /** Data format for the response. */
  alt?: "csv" | "json",      
  /** Selector specifying which fields to include in a partial response. */
  fields?: string,      
  /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
  key?: string,      
  /** OAuth 2.0 token for the current user. */
  oauth_token?: string,      
  /** Returns response with indentations and line breaks. */
  prettyPrint?: boolean,      
  /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
  quotaUser?: string,      
  /** Deprecated. Please use quotaUser instead. */
  userIp?: string,      
): Promise<Metadata> {
  const result = await api.metadata.adsenseMetadataDimensionsList({
    query: {
      alt: alt,
      fields: fields,
      key: key,
      oauth_token: oauth_token,
      prettyPrint: prettyPrint,
      quotaUser: quotaUser,
      userIp: userIp,
    },
  });
  if (result.data) {
    return result.data
  } else {
    throw (result.error)
  }
}

/**
 * undefined
 * @request GET :/metadata/metrics
 * @allowrelaxedtypes
 * @readonly
 */
export async function getMetadataAdsenseMetadataMetricsList(
  /** Data format for the response. */
  alt?: "csv" | "json",      
  /** Selector specifying which fields to include in a partial response. */
  fields?: string,      
  /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
  key?: string,      
  /** OAuth 2.0 token for the current user. */
  oauth_token?: string,      
  /** Returns response with indentations and line breaks. */
  prettyPrint?: boolean,      
  /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
  quotaUser?: string,      
  /** Deprecated. Please use quotaUser instead. */
  userIp?: string,      
): Promise<Metadata> {
  const result = await api.metadata.adsenseMetadataMetricsList({
    query: {
      alt: alt,
      fields: fields,
      key: key,
      oauth_token: oauth_token,
      prettyPrint: prettyPrint,
      quotaUser: quotaUser,
      userIp: userIp,
    },
  });
  if (result.data) {
    return result.data
  } else {
    throw (result.error)
  }
}

/**
 * undefined
 * @request GET :/payments
 * @allowrelaxedtypes
 * @readonly
 */
export async function getPaymentsAdsensePaymentsList(
  /** Data format for the response. */
  alt?: "csv" | "json",      
  /** Selector specifying which fields to include in a partial response. */
  fields?: string,      
  /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
  key?: string,      
  /** OAuth 2.0 token for the current user. */
  oauth_token?: string,      
  /** Returns response with indentations and line breaks. */
  prettyPrint?: boolean,      
  /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
  quotaUser?: string,      
  /** Deprecated. Please use quotaUser instead. */
  userIp?: string,      
): Promise<Payments> {
  const result = await api.payments.adsensePaymentsList({
    query: {
      alt: alt,
      fields: fields,
      key: key,
      oauth_token: oauth_token,
      prettyPrint: prettyPrint,
      quotaUser: quotaUser,
      userIp: userIp,
    },
  });
  if (result.data) {
    return result.data
  } else {
    throw (result.error)
  }
}

/**
 * undefined
 * @request GET :/reports
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReportsAdsenseReportsGenerate(
  /** Start of the date range to report on in "YYYY-MM-DD" format, inclusive. */
  startDate: string,      
  /** End of the date range to report on in "YYYY-MM-DD" format, inclusive. */
  endDate: string,      
  /** Data format for the response. */
  alt?: "csv" | "json",      
  /** Selector specifying which fields to include in a partial response. */
  fields?: string,      
  /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
  key?: string,      
  /** OAuth 2.0 token for the current user. */
  oauth_token?: string,      
  /** Returns response with indentations and line breaks. */
  prettyPrint?: boolean,      
  /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
  quotaUser?: string,      
  /** Deprecated. Please use quotaUser instead. */
  userIp?: string,      
  /** Accounts upon which to report. */
  accountId?: string[],      
  /** Optional currency to use when reporting on monetary metrics. Defaults to the account's currency if not set. */
  currency?: string,      
  /** Dimensions to base the report on. */
  dimension?: string[],      
  /** Filters to be run on the report. */
  filter?: string[],      
  /** Optional locale to use for translating report output to a local language. Defaults to "en_US" if not specified. */
  locale?: string,      
  /** The maximum number of rows of report data to return. */
  maxResults?: number,      
  /** Numeric columns to include in the report. */
  metric?: string[],      
  /** The name of a dimension or metric to sort the resulting report on, optionally prefixed with "+" to sort ascending or "-" to sort descending. If no prefix is specified, the column is sorted ascending. */
  sort?: string[],      
  /** Index of the first row of report data to return. */
  startIndex?: number,      
  /** Whether the report should be generated in the AdSense account's local timezone. If false default PST/PDT timezone will be used. */
  useTimezoneReporting?: boolean,      
): Promise<AdsenseReportsGenerateResponse> {
  const result = await api.reports.adsenseReportsGenerate({
    query: {
      alt: alt,
      fields: fields,
      key: key,
      oauth_token: oauth_token,
      prettyPrint: prettyPrint,
      quotaUser: quotaUser,
      userIp: userIp,
      startDate: startDate,
      endDate: endDate,
      accountId: accountId,
      currency: currency,
      dimension: dimension,
      filter: filter,
      locale: locale,
      maxResults: maxResults,
      metric: metric,
      sort: sort,
      startIndex: startIndex,
      useTimezoneReporting: useTimezoneReporting,
    },
  });
  if (result.data) {
    return result.data
  } else {
    throw (result.error)
  }
}

/**
 * undefined
 * @request GET :/reports/saved
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReportsAdsenseReportsSavedList(
  /** Data format for the response. */
  alt?: "csv" | "json",      
  /** Selector specifying which fields to include in a partial response. */
  fields?: string,      
  /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
  key?: string,      
  /** OAuth 2.0 token for the current user. */
  oauth_token?: string,      
  /** Returns response with indentations and line breaks. */
  prettyPrint?: boolean,      
  /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
  quotaUser?: string,      
  /** Deprecated. Please use quotaUser instead. */
  userIp?: string,      
  /** The maximum number of saved reports to include in the response, used for paging. */
  maxResults?: number,      
  /** A continuation token, used to page through saved reports. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response. */
  pageToken?: string,      
): Promise<SavedReports> {
  const result = await api.reports.adsenseReportsSavedList({
    query: {
      alt: alt,
      fields: fields,
      key: key,
      oauth_token: oauth_token,
      prettyPrint: prettyPrint,
      quotaUser: quotaUser,
      userIp: userIp,
      maxResults: maxResults,
      pageToken: pageToken,
    },
  });
  if (result.data) {
    return result.data
  } else {
    throw (result.error)
  }
}

/**
 * undefined
 * @request GET :/reports/{savedReportId}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReportsAdsenseReportsSavedGenerate(
  /** The saved report to retrieve. */
  savedReportId: string,      
  /** Data format for the response. */
  alt?: "csv" | "json",      
  /** Selector specifying which fields to include in a partial response. */
  fields?: string,      
  /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
  key?: string,      
  /** OAuth 2.0 token for the current user. */
  oauth_token?: string,      
  /** Returns response with indentations and line breaks. */
  prettyPrint?: boolean,      
  /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
  quotaUser?: string,      
  /** Deprecated. Please use quotaUser instead. */
  userIp?: string,      
  /** Optional locale to use for translating report output to a local language. Defaults to "en_US" if not specified. */
  locale?: string,      
  /** The maximum number of rows of report data to return. */
  maxResults?: number,      
  /** Index of the first row of report data to return. */
  startIndex?: number,      
): Promise<AdsenseReportsGenerateResponse> {
  const result = await api.reports.adsenseReportsSavedGenerate({
    query: {
      alt: alt,
      fields: fields,
      key: key,
      oauth_token: oauth_token,
      prettyPrint: prettyPrint,
      quotaUser: quotaUser,
      userIp: userIp,
      locale: locale,
      maxResults: maxResults,
      startIndex: startIndex,
    },
    savedReportId: savedReportId,
  });
  if (result.data) {
    return result.data
  } else {
    throw (result.error)
  }
}

/**
 * undefined
 * @request GET :/savedadstyles
 * @allowrelaxedtypes
 * @readonly
 */
export async function getSavedadstylesAdsenseSavedadstylesList(
  /** Data format for the response. */
  alt?: "csv" | "json",      
  /** Selector specifying which fields to include in a partial response. */
  fields?: string,      
  /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
  key?: string,      
  /** OAuth 2.0 token for the current user. */
  oauth_token?: string,      
  /** Returns response with indentations and line breaks. */
  prettyPrint?: boolean,      
  /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
  quotaUser?: string,      
  /** Deprecated. Please use quotaUser instead. */
  userIp?: string,      
  /** The maximum number of saved ad styles to include in the response, used for paging. */
  maxResults?: number,      
  /** A continuation token, used to page through saved ad styles. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response. */
  pageToken?: string,      
): Promise<SavedAdStyles> {
  const result = await api.savedadstyles.adsenseSavedadstylesList({
    query: {
      alt: alt,
      fields: fields,
      key: key,
      oauth_token: oauth_token,
      prettyPrint: prettyPrint,
      quotaUser: quotaUser,
      userIp: userIp,
      maxResults: maxResults,
      pageToken: pageToken,
    },
  });
  if (result.data) {
    return result.data
  } else {
    throw (result.error)
  }
}

/**
 * undefined
 * @request GET :/savedadstyles/{savedAdStyleId}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getSavedadstylesAdsenseSavedadstylesGet(
  /** Saved ad style to retrieve. */
  savedAdStyleId: string,      
  /** Data format for the response. */
  alt?: "csv" | "json",      
  /** Selector specifying which fields to include in a partial response. */
  fields?: string,      
  /** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */
  key?: string,      
  /** OAuth 2.0 token for the current user. */
  oauth_token?: string,      
  /** Returns response with indentations and line breaks. */
  prettyPrint?: boolean,      
  /** An opaque string that represents a user for quota purposes. Must not exceed 40 characters. */
  quotaUser?: string,      
  /** Deprecated. Please use quotaUser instead. */
  userIp?: string,      
): Promise<SavedAdStyle> {
  const result = await api.savedadstyles.adsenseSavedadstylesGet({
    query: {
      alt: alt,
      fields: fields,
      key: key,
      oauth_token: oauth_token,
      prettyPrint: prettyPrint,
      quotaUser: quotaUser,
      userIp: userIp,
    },
    savedAdStyleId: savedAdStyleId,
  });
  if (result.data) {
    return result.data
  } else {
    throw (result.error)
  }
}
