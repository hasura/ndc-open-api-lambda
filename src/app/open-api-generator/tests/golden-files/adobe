import {
  BundleDataProp,
  BundleData,
  KeystoreItems,
  KeystoreChainItems,
  SamlConfigurationProperties,
  SamlConfigurationPropertyItemsBoolean,
  SamlConfigurationPropertyItemsString,
  SamlConfigurationPropertyItemsLong,
  SamlConfigurationPropertyItemsArray,
  TruststoreItems,
  BundleInfo,
  InstallStatus,
  KeystoreInfo,
  SamlConfigurationInfo,
  TruststoreInfo,
  Api,
} from "./api";
import * as hasuraSdk from "@hasura/ndc-lambda-sdk";

const api = new Api({
  baseUrl: "http://localhost:13191",
});

/**
 * undefined
 * @request POST :/.cqactions.html
 * @allowrelaxedtypes
 */
export async function postCqactionsHtmlPostCqActions(query: {
  authorizableId: string;
  changelog: string;
}): Promise<hasuraSdk.JSONValue> {
  const result = await api.cqactionsHtml.postCqActions({
    query: query,
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config
 * @allowrelaxedtypes
 */
export async function postAppsPostConfigAdobeGraniteSamlAuthenticationHandler(query: {
  keyStorePassword?: string;
  "keyStorePassword@TypeHint"?: string;
  serviceRanking?: number;
  serviceRankingTypeHint?: string;
  idpHttpRedirect?: boolean;
  "idpHttpRedirect@TypeHint"?: string;
  createUser?: boolean;
  "createUser@TypeHint"?: string;
  defaultRedirectUrl?: string;
  "defaultRedirectUrl@TypeHint"?: string;
  userIDAttribute?: string;
  "userIDAttribute@TypeHint"?: string;
  defaultGroups?: string[];
  "defaultGroups@TypeHint"?: string;
  idpCertAlias?: string;
  "idpCertAlias@TypeHint"?: string;
  addGroupMemberships?: boolean;
  "addGroupMemberships@TypeHint"?: string;
  path?: string[];
  "path@TypeHint"?: string;
  synchronizeAttributes?: string[];
  "synchronizeAttributes@TypeHint"?: string;
  clockTolerance?: number;
  "clockTolerance@TypeHint"?: string;
  groupMembershipAttribute?: string;
  "groupMembershipAttribute@TypeHint"?: string;
  idpUrl?: string;
  "idpUrl@TypeHint"?: string;
  logoutUrl?: string;
  "logoutUrl@TypeHint"?: string;
  serviceProviderEntityId?: string;
  "serviceProviderEntityId@TypeHint"?: string;
  assertionConsumerServiceURL?: string;
  "assertionConsumerServiceURL@TypeHint"?: string;
  handleLogout?: boolean;
  "handleLogout@TypeHint"?: string;
  spPrivateKeyAlias?: string;
  "spPrivateKeyAlias@TypeHint"?: string;
  useEncryption?: boolean;
  "useEncryption@TypeHint"?: string;
  nameIdFormat?: string;
  "nameIdFormat@TypeHint"?: string;
  digestMethod?: string;
  "digestMethod@TypeHint"?: string;
  signatureMethod?: string;
  "signatureMethod@TypeHint"?: string;
  userIntermediatePath?: string;
  "userIntermediatePath@TypeHint"?: string;
}): Promise<hasuraSdk.JSONValue> {
  const result = await api.apps.postConfigAdobeGraniteSamlAuthenticationHandler(
    {
      query: query,
    },
  );
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apps/system/config/com.shinesolutions.aem.passwordreset.Activator
 * @allowrelaxedtypes
 */
export async function postAppsPostConfigAemPasswordReset(query: {
  pwdresetAuthorizables?: string[];
  pwdresetAuthorizablesTypeHint?: string;
}): Promise<hasuraSdk.JSONValue> {
  const result = await api.apps.postConfigAemPasswordReset({
    query: query,
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apps/system/config/com.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheck
 * @allowrelaxedtypes
 */
export async function postAppsPostConfigAemHealthCheckServlet(query: {
  bundlesIgnored?: string[];
  bundlesIgnoredTypeHint?: string;
}): Promise<hasuraSdk.JSONValue> {
  const result = await api.apps.postConfigAemHealthCheckServlet({
    query: query,
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apps/system/config/org.apache.felix.http
 * @allowrelaxedtypes
 */
export async function postAppsPostConfigApacheFelixJettyBasedHttpService(query: {
  orgApacheFelixHttpsNio?: boolean;
  orgApacheFelixHttpsNioTypeHint?: string;
  orgApacheFelixHttpsKeystore?: string;
  orgApacheFelixHttpsKeystoreTypeHint?: string;
  orgApacheFelixHttpsKeystorePassword?: string;
  orgApacheFelixHttpsKeystorePasswordTypeHint?: string;
  orgApacheFelixHttpsKeystoreKey?: string;
  orgApacheFelixHttpsKeystoreKeyTypeHint?: string;
  orgApacheFelixHttpsKeystoreKeyPassword?: string;
  orgApacheFelixHttpsKeystoreKeyPasswordTypeHint?: string;
  orgApacheFelixHttpsTruststore?: string;
  orgApacheFelixHttpsTruststoreTypeHint?: string;
  orgApacheFelixHttpsTruststorePassword?: string;
  orgApacheFelixHttpsTruststorePasswordTypeHint?: string;
  orgApacheFelixHttpsClientcertificate?: string;
  orgApacheFelixHttpsClientcertificateTypeHint?: string;
  orgApacheFelixHttpsEnable?: boolean;
  orgApacheFelixHttpsEnableTypeHint?: string;
  orgOsgiServiceHttpPortSecure?: string;
  orgOsgiServiceHttpPortSecureTypeHint?: string;
}): Promise<hasuraSdk.JSONValue> {
  const result = await api.apps.postConfigApacheFelixJettyBasedHttpService({
    query: query,
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apps/system/config/org.apache.http.proxyconfigurator.config
 * @allowrelaxedtypes
 */
export async function postAppsPostConfigApacheHttpComponentsProxyConfiguration(query: {
  proxyHost?: string;
  proxyHostTypeHint?: string;
  proxyPort?: number;
  proxyPortTypeHint?: string;
  proxyExceptions?: string[];
  proxyExceptionsTypeHint?: string;
  proxyEnabled?: boolean;
  proxyEnabledTypeHint?: string;
  proxyUser?: string;
  proxyUserTypeHint?: string;
  proxyPassword?: string;
  proxyPasswordTypeHint?: string;
}): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.apps.postConfigApacheHttpComponentsProxyConfiguration({
      query: query,
    });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet
 * @allowrelaxedtypes
 */
export async function postAppsPostConfigApacheSlingDavExServlet(query: {
  alias?: string;
  "alias@TypeHint"?: string;
  davCreateAbsoluteUri?: boolean;
  davCreateAbsoluteUriTypeHint?: string;
}): Promise<hasuraSdk.JSONValue> {
  const result = await api.apps.postConfigApacheSlingDavExServlet({
    query: query,
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apps/system/config/org.apache.sling.security.impl.ReferrerFilter
 * @allowrelaxedtypes
 */
export async function postAppsPostConfigApacheSlingReferrerFilter(query: {
  allowEmpty?: boolean;
  allowEmptyTypeHint?: string;
  allowHosts?: string;
  allowHostsTypeHint?: string;
  allowHostsRegexp?: string;
  allowHostsRegexpTypeHint?: string;
  filterMethods?: string;
  filterMethodsTypeHint?: string;
}): Promise<hasuraSdk.JSONValue> {
  const result = await api.apps.postConfigApacheSlingReferrerFilter({
    query: query,
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet
 * @allowrelaxedtypes
 */
export async function postAppsPostConfigApacheSlingGetServlet(query: {
  jsonMaximumresults?: string;
  jsonMaximumresultsTypeHint?: string;
  enableHtml?: boolean;
  enableHtmlTypeHint?: string;
  enableTxt?: boolean;
  enableTxtTypeHint?: string;
  enableXml?: boolean;
  enableXmlTypeHint?: string;
}): Promise<hasuraSdk.JSONValue> {
  const result = await api.apps.postConfigApacheSlingGetServlet({
    query: query,
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/apps/system/config/{configNodeName}
 * @allowrelaxedtypes
 */
export async function postAppsPostConfigProperty(
  configNodeName: string,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.apps.postConfigProperty({
    configNodeName: configNodeName,
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/bin/querybuilder.json
 * @allowrelaxedtypes
 * @readonly
 */
export async function getBinGetQuery(query: {
  path: string;
  pLimit: number;
  "1_property": string;
  "1PropertyValue": string;
}): Promise<hasuraSdk.JSONValue> {
  const result = await api.bin.getQuery({
    query: query,
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/bin/querybuilder.json
 * @allowrelaxedtypes
 */
export async function postBinPostQuery(query: {
  path: string;
  pLimit: number;
  "1_property": string;
  "1PropertyValue": string;
}): Promise<hasuraSdk.JSONValue> {
  const result = await api.bin.postQuery({
    query: query,
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/crx/explorer/ui/setpassword.jsp
 * @allowrelaxedtypes
 */
export async function postCrxPostSetPassword(query: {
  old: string;
  plain: string;
  verify: string;
}): Promise<hasuraSdk.JSONValue> {
  const result = await api.crx.postSetPassword({
    query: query,
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/crx/packmgr/installstatus.jsp
 * @readonly
 */
export async function getCrxGetInstallStatus(): Promise<InstallStatus> {
  const result = await api.crx.getInstallStatus({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/crx/packmgr/service.jsp
 * @allowrelaxedtypes
 */
export async function postCrxPostPackageService(query: {
  cmd: string;
}): Promise<hasuraSdk.JSONValue> {
  const result = await api.crx.postPackageService({
    query: query,
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/crx/packmgr/service/.json/{path}
 * @allowrelaxedtypes
 */
export async function postCrxPostPackageServiceJson(
  query: {
    cmd: string;
    groupName?: string;
    packageName?: string;
    packageVersion?: string;
    _charset_?: string;
    force?: boolean;
    recursive?: boolean;
  },
  path: string,
  /** Request body */
  data: {
    /** @format binary */
    package?: File;
  },
): Promise<hasuraSdk.JSONValue> {
  const result = await api.crx.postPackageServiceJson({
    query: query,
    path: path,
    data: data,
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/crx/packmgr/service/script.html
 * @allowrelaxedtypes
 * @readonly
 */
export async function getCrxGetPackageManagerServlet(): Promise<hasuraSdk.JSONValue> {
  const result = await api.crx.getPackageManagerServlet({});
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/crx/packmgr/update.jsp
 * @allowrelaxedtypes
 */
export async function postCrxPostPackageUpdate(query: {
  groupName: string;
  packageName: string;
  version: string;
  path: string;
  filter?: string;
  _charset_?: string;
}): Promise<hasuraSdk.JSONValue> {
  const result = await api.crx.postPackageUpdate({
    query: query,
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/crx/server/crx.default/jcr:root/.1.json
 * @readonly
 */
export async function getCrxGetCrxdeStatus(root: string): Promise<string> {
  const result = await api.crx.getCrxdeStatus({
    root: root,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/etc/packages/{group}/{name}-{version}.zip
 * @allowrelaxedtypes
 * @readonly
 */
export async function getEtcGetPackage(
  group: string,
  name: string,
  version: string,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.etc.getPackage({
    group: group,
    name: name,
    version: version,
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json
 * @allowrelaxedtypes
 * @readonly
 */
export async function getEtcGetPackageFilter(
  group: string,
  name: string,
  version: string,
  content: string,
  definition: string,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.etc.getPackageFilter({
    group: group,
    name: name,
    version: version,
    content: content,
    definition: definition,
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/etc/replication/agents.{runmode}.-1.json
 * @allowrelaxedtypes
 * @readonly
 */
export async function getEtcGetAgents(
  runmode: string,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.etc.getAgents({
    runmode: runmode,
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/etc/replication/agents.{runmode}/{name}
 * @allowrelaxedtypes
 */
export async function deleteEtcDeleteAgent(
  runmode: string,
  name: string,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.etc.deleteAgent({
    runmode: runmode,
    name: name,
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/etc/replication/agents.{runmode}/{name}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getEtcGetAgent(
  runmode: string,
  name: string,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.etc.getAgent({
    runmode: runmode,
    name: name,
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/etc/replication/agents.{runmode}/{name}
 * @allowrelaxedtypes
 */
export async function postEtcPostAgent(
  query: {
    "jcr:content/cq:distribute"?: boolean;
    "jcr:content/cq:distribute@TypeHint"?: string;
    "jcr:content/cq:name"?: string;
    "jcr:content/cq:template"?: string;
    "jcr:content/enabled"?: boolean;
    "jcr:content/jcr:description"?: string;
    "jcr:content/jcr:lastModified"?: string;
    "jcr:content/jcr:lastModifiedBy"?: string;
    "jcr:content/jcr:mixinTypes"?: string;
    "jcr:content/jcr:title"?: string;
    "jcr:content/logLevel"?: string;
    "jcr:content/noStatusUpdate"?: boolean;
    "jcr:content/noVersioning"?: boolean;
    "jcr:content/protocolConnectTimeout"?: number;
    "jcr:content/protocolHTTPConnectionClosed"?: boolean;
    "jcr:content/protocolHTTPExpired"?: string;
    "jcr:content/protocolHTTPHeaders"?: string[];
    "jcr:content/protocolHTTPHeaders@TypeHint"?: string;
    "jcr:content/protocolHTTPMethod"?: string;
    "jcr:content/protocolHTTPSRelaxed"?: boolean;
    "jcr:content/protocolInterface"?: string;
    "jcr:content/protocolSocketTimeout"?: number;
    "jcr:content/protocolVersion"?: string;
    "jcr:content/proxyNTLMDomain"?: string;
    "jcr:content/proxyNTLMHost"?: string;
    "jcr:content/proxyHost"?: string;
    "jcr:content/proxyPassword"?: string;
    "jcr:content/proxyPort"?: number;
    "jcr:content/proxyUser"?: string;
    "jcr:content/queueBatchMaxSize"?: number;
    "jcr:content/queueBatchMode"?: string;
    "jcr:content/queueBatchWaitTime"?: number;
    "jcr:content/retryDelay"?: string;
    "jcr:content/reverseReplication"?: boolean;
    "jcr:content/serializationType"?: string;
    "jcr:content/sling:resourceType"?: string;
    "jcr:content/ssl"?: string;
    "jcr:content/transportNTLMDomain"?: string;
    "jcr:content/transportNTLMHost"?: string;
    "jcr:content/transportPassword"?: string;
    "jcr:content/transportUri"?: string;
    "jcr:content/transportUser"?: string;
    "jcr:content/triggerDistribute"?: boolean;
    "jcr:content/triggerModified"?: boolean;
    "jcr:content/triggerOnOffTime"?: boolean;
    "jcr:content/triggerReceive"?: boolean;
    "jcr:content/triggerSpecific"?: boolean;
    "jcr:content/userId"?: string;
    "jcr:primaryType"?: string;
    ":operation"?: string;
  },
  runmode: string,
  name: string,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.etc.postAgent({
    query: query,
    runmode: runmode,
    name: name,
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/etc/truststore
 * @allowrelaxedtypes
 */
export async function postEtcPostTruststorePkcs12(
  /** Request body */
  data: {
    /** @format binary */
    "truststore.p12"?: File;
  },
): Promise<hasuraSdk.JSONValue> {
  const result = await api.etc.postTruststorePkcs12({
    data: data,
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/etc/truststore/truststore.p12
 * @allowrelaxedtypes
 * @readonly
 */
export async function getEtcGetTruststore(): Promise<hasuraSdk.JSONValue> {
  const result = await api.etc.getTruststore({});
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/libs/granite/core/content/login.html
 * @allowrelaxedtypes
 * @readonly
 */
export async function getLibsGetLoginPage(): Promise<hasuraSdk.JSONValue> {
  const result = await api.libs.getLoginPage({});
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/libs/granite/security/post/authorizables
 * @allowrelaxedtypes
 */
export async function postLibsPostAuthorizables(query: {
  authorizableId: string;
  intermediatePath: string;
  createUser?: string;
  createGroup?: string;
  "rep:password"?: string;
  "profile/givenName"?: string;
}): Promise<hasuraSdk.JSONValue> {
  const result = await api.libs.postAuthorizables({
    query: query,
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/libs/granite/security/post/sslSetup.html
 * @allowrelaxedtypes
 */
export async function postLibsSslSetup(
  query: {
    keystorePassword: string;
    keystorePasswordConfirm: string;
    truststorePassword: string;
    truststorePasswordConfirm: string;
    httpsHostname: string;
    httpsPort: string;
  },
  /** Request body */
  data: {
    /** @format binary */
    certificateFile?: File;
    /** @format binary */
    privatekeyFile?: File;
  },
): Promise<hasuraSdk.JSONValue> {
  const result = await api.libs.sslSetup({
    query: query,
    data: data,
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/libs/granite/security/post/truststore
 * @allowrelaxedtypes
 */
export async function postLibsPostTruststore(
  query: {
    ":operation"?: string;
    newPassword?: string;
    rePassword?: string;
    keyStoreType?: string;
    removeAlias?: string;
  },
  /** Request body */
  data: {
    /** @format binary */
    certificate?: File;
  },
): Promise<hasuraSdk.JSONValue> {
  const result = await api.libs.postTruststore({
    query: query,
    data: data,
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/libs/granite/security/truststore.json
 * @readonly
 */
export async function getLibsGetTruststoreInfo(): Promise<TruststoreInfo> {
  const result = await api.libs.getTruststoreInfo({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/libs/replication/treeactivation.html
 * @allowrelaxedtypes
 */
export async function postLibsPostTreeActivation(query: {
  ignoredeactivated: boolean;
  onlymodified: boolean;
  path: string;
  cmd: string;
}): Promise<hasuraSdk.JSONValue> {
  const result = await api.libs.postTreeActivation({
    query: query,
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/system/console/bundles/{name}
 * @allowrelaxedtypes
 */
export async function postSystemPostBundle(
  query: { action: string },
  name: string,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.system.postBundle({
    query: query,
    name: name,
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/system/console/bundles/{name}.json
 * @readonly
 */
export async function getSystemGetBundleInfo(
  name: string,
): Promise<BundleInfo> {
  const result = await api.system.getBundleInfo({
    name: name,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/system/console/configMgr
 * @readonly
 */
export async function getSystemGetConfigMgr(): Promise<string> {
  const result = await api.system.getConfigMgr({});
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler
 */
export async function postSystemPostSamlConfiguration(query: {
  post?: boolean;
  apply?: boolean;
  delete?: boolean;
  action?: string;
  $location?: string;
  path?: string[];
  serviceRanking?: number;
  idpUrl?: string;
  idpCertAlias?: string;
  idpHttpRedirect?: boolean;
  serviceProviderEntityId?: string;
  assertionConsumerServiceURL?: string;
  spPrivateKeyAlias?: string;
  keyStorePassword?: string;
  defaultRedirectUrl?: string;
  userIDAttribute?: string;
  useEncryption?: boolean;
  createUser?: boolean;
  addGroupMemberships?: boolean;
  groupMembershipAttribute?: string;
  defaultGroups?: string[];
  nameIdFormat?: string;
  synchronizeAttributes?: string[];
  handleLogout?: boolean;
  logoutUrl?: string;
  clockTolerance?: number;
  digestMethod?: string;
  signatureMethod?: string;
  userIntermediatePath?: string;
  propertylist?: string[];
}): Promise<SamlConfigurationInfo> {
  const result = await api.system.postSamlConfiguration({
    query: query,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/system/console/jmx/com.adobe.granite:type=Repository/op/{action}
 * @allowrelaxedtypes
 */
export async function postSystemPostJmxRepository(
  action: string,
  type: string,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.system.postJmxRepository({
    action: action,
    type: type,
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/system/console/status-productinfo.json
 * @allowrelaxedtypes
 * @readonly
 */
export async function getSystemGetAemProductInfo(): Promise<hasuraSdk.JSONValue> {
  const result = await api.system.getAemProductInfo({});
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/system/health
 * @allowrelaxedtypes
 * @readonly
 */
export async function getSystemGetAemHealthCheck(query: {
  tags?: string;
  combineTagsOr?: boolean;
}): Promise<hasuraSdk.JSONValue> {
  const result = await api.system.getAemHealthCheck({
    query: query,
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/{intermediatePath}/{authorizableId}.ks.html
 */
export async function postIntermediatePathPostAuthorizableKeystore(
  query: {
    ":operation"?: string;
    currentPassword?: string;
    newPassword?: string;
    rePassword?: string;
    keyPassword?: string;
    keyStorePass?: string;
    alias?: string;
    newAlias?: string;
    removeAlias?: string;
  },
  intermediatePath: string,
  authorizableId: string,
  /** Request body */
  data: {
    /** @format binary */
    "cert-chain"?: File;
    /** @format binary */
    keyStore?: File;
    /** @format binary */
    pk?: File;
  },
): Promise<KeystoreInfo> {
  const result = await api.intermediatePath.postAuthorizableKeystore({
    query: query,
    intermediatePath: intermediatePath,
    authorizableId: authorizableId,
    data: data,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/{intermediatePath}/{authorizableId}.ks.json
 * @readonly
 */
export async function getIntermediatePathGetAuthorizableKeystore(
  intermediatePath: string,
  authorizableId: string,
): Promise<KeystoreInfo> {
  const result = await api.intermediatePath.getAuthorizableKeystore({
    intermediatePath: intermediatePath,
    authorizableId: authorizableId,
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/{intermediatePath}/{authorizableId}/keystore/store.p12
 * @allowrelaxedtypes
 * @readonly
 */
export async function getIntermediatePathGetKeystore(
  intermediatePath: string,
  authorizableId: string,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.intermediatePath.getKeystore({
    intermediatePath: intermediatePath,
    authorizableId: authorizableId,
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/{path}/
 * @allowrelaxedtypes
 */
export async function postPathPostPath(
  query: { "jcr:primaryType": string; ":name": string },
  path: string,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.path.postPath({
    query: query,
    path: path,
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/{path}/{name}
 * @allowrelaxedtypes
 */
export async function deletePathDeleteNode(
  path: string,
  name: string,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.path.deleteNode({
    path: path,
    name: name,
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/{path}/{name}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getPathGetNode(
  path: string,
  name: string,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.path.getNode({
    path: path,
    name: name,
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/{path}/{name}
 * @allowrelaxedtypes
 */
export async function postPathPostNode(
  query: { ":operation"?: string; deleteAuthorizable?: string },
  path: string,
  name: string,
  /** Request body */
  data: {
    /** @format binary */
    file?: File;
  },
): Promise<hasuraSdk.JSONValue> {
  const result = await api.path.postNode({
    query: query,
    path: path,
    name: name,
    data: data,
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request POST :/{path}/{name}.rw.html
 * @allowrelaxedtypes
 */
export async function postPathPostNodeRw(
  query: { addMembers?: string },
  path: string,
  name: string,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.path.postNodeRw({
    query: query,
    path: path,
    name: name,
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}
