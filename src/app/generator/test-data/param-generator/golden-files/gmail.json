{
  "get__/gmail/v1/users/{userId}/drafts": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, \n/** Include drafts from `SPAM` and `TRASH` in the results. */\n includeSpamTrash?: boolean, \n/** Maximum number of drafts to return. This field defaults to 100. The maximum allowed value for this field is 500. */\n maxResults?: number, \n/** Page token to retrieve a specific page of results in the list. */\n pageToken?: string, \n/** Only return draft messages matching the specified query. Supports the same query format as the Gmail search box. For example, `\"from:someuser@example.com rfc822msgid: is:unread\"`. */\n q?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.includeSpamTrash": {
        "rendered": "\n/** Include drafts from `SPAM` and `TRASH` in the results. */\n includeSpamTrash?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** Maximum number of drafts to return. This field defaults to 100. The maximum allowed value for this field is 500. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** Page token to retrieve a specific page of results in the list. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.q": {
        "rendered": "\n/** Only return draft messages matching the specified query. Supports the same query format as the Gmail search box. For example, `\"from:someuser@example.com rfc822msgid: is:unread\"`. */\n q?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The user's email address. The special value `me` can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "post__/gmail/v1/users/{userId}/drafts": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The user's email address. The special value `me` can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "post__/gmail/v1/users/{userId}/drafts/send": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The user's email address. The special value `me` can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "delete__/gmail/v1/users/{userId}/drafts/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The user's email address. The special value `me` can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".id": {
        "rendered": "\n/** The ID of the draft to delete. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "get__/gmail/v1/users/{userId}/drafts/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, \n/** The format to return the draft in. */\n format?: \"minimal\" | \"full\" | \"raw\" | \"metadata\", },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.format": {
        "rendered": "\n/** The format to return the draft in. */\n format?: \"minimal\" | \"full\" | \"raw\" | \"metadata\",",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The user's email address. The special value `me` can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".id": {
        "rendered": "\n/** The ID of the draft to retrieve. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "put__/gmail/v1/users/{userId}/drafts/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The user's email address. The special value `me` can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".id": {
        "rendered": "\n/** The ID of the draft to update. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "get__/gmail/v1/users/{userId}/history": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, \n/** History types to be returned by the function */\n historyTypes?: (\"messageAdded\" | \"messageDeleted\" | \"labelAdded\" | \"labelRemoved\")[], \n/** Only return messages with a label matching the ID. */\n labelId?: string, \n/** Maximum number of history records to return. This field defaults to 100. The maximum allowed value for this field is 500. */\n maxResults?: number, \n/** Page token to retrieve a specific page of results in the list. */\n pageToken?: string, \n/** Required. Returns history records after the specified `startHistoryId`. The supplied `startHistoryId` should be obtained from the `historyId` of a message, thread, or previous `list` response. History IDs increase chronologically but are not contiguous with random gaps in between valid IDs. Supplying an invalid or out of date `startHistoryId` typically returns an `HTTP 404` error code. A `historyId` is typically valid for at least a week, but in some rare circumstances may be valid for only a few hours. If you receive an `HTTP 404` error response, your application should perform a full sync. If you receive no `nextPageToken` in the response, there are no updates to retrieve and you can store the returned `historyId` for a future request. */\n startHistoryId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.historyTypes": {
        "rendered": "\n/** History types to be returned by the function */\n historyTypes?: (\"messageAdded\" | \"messageDeleted\" | \"labelAdded\" | \"labelRemoved\")[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.historyTypes.__no_name": {
        "rendered": "\"messageAdded\" | \"messageDeleted\" | \"labelAdded\" | \"labelRemoved\"",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.labelId": {
        "rendered": "\n/** Only return messages with a label matching the ID. */\n labelId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** Maximum number of history records to return. This field defaults to 100. The maximum allowed value for this field is 500. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** Page token to retrieve a specific page of results in the list. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startHistoryId": {
        "rendered": "\n/** Required. Returns history records after the specified `startHistoryId`. The supplied `startHistoryId` should be obtained from the `historyId` of a message, thread, or previous `list` response. History IDs increase chronologically but are not contiguous with random gaps in between valid IDs. Supplying an invalid or out of date `startHistoryId` typically returns an `HTTP 404` error code. A `historyId` is typically valid for at least a week, but in some rare circumstances may be valid for only a few hours. If you receive an `HTTP 404` error response, your application should perform a full sync. If you receive no `nextPageToken` in the response, there are no updates to retrieve and you can store the returned `historyId` for a future request. */\n startHistoryId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The user's email address. The special value `me` can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "get__/gmail/v1/users/{userId}/labels": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The user's email address. The special value `me` can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "post__/gmail/v1/users/{userId}/labels": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The user's email address. The special value `me` can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "delete__/gmail/v1/users/{userId}/labels/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The user's email address. The special value `me` can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".id": {
        "rendered": "\n/** The ID of the label to delete. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "get__/gmail/v1/users/{userId}/labels/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The user's email address. The special value `me` can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".id": {
        "rendered": "\n/** The ID of the label to retrieve. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "patch__/gmail/v1/users/{userId}/labels/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The user's email address. The special value `me` can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".id": {
        "rendered": "\n/** The ID of the label to update. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "put__/gmail/v1/users/{userId}/labels/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The user's email address. The special value `me` can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".id": {
        "rendered": "\n/** The ID of the label to update. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "get__/gmail/v1/users/{userId}/messages": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, \n/** Include messages from `SPAM` and `TRASH` in the results. */\n includeSpamTrash?: boolean, \n/** Only return messages with labels that match all of the specified label IDs. Messages in a thread might have labels that other messages in the same thread don't have. To learn more, see [Manage labels on messages and threads](https://developers.google.com/gmail/api/guides/labels#manage_labels_on_messages_threads). */\n labelIds?: (string)[], \n/** Maximum number of messages to return. This field defaults to 100. The maximum allowed value for this field is 500. */\n maxResults?: number, \n/** Page token to retrieve a specific page of results in the list. */\n pageToken?: string, \n/** Only return messages matching the specified query. Supports the same query format as the Gmail search box. For example, `\"from:someuser@example.com rfc822msgid: is:unread\"`. Parameter cannot be used when accessing the api using the gmail.metadata scope. */\n q?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.includeSpamTrash": {
        "rendered": "\n/** Include messages from `SPAM` and `TRASH` in the results. */\n includeSpamTrash?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.labelIds": {
        "rendered": "\n/** Only return messages with labels that match all of the specified label IDs. Messages in a thread might have labels that other messages in the same thread don't have. To learn more, see [Manage labels on messages and threads](https://developers.google.com/gmail/api/guides/labels#manage_labels_on_messages_threads). */\n labelIds?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.labelIds.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** Maximum number of messages to return. This field defaults to 100. The maximum allowed value for this field is 500. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** Page token to retrieve a specific page of results in the list. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.q": {
        "rendered": "\n/** Only return messages matching the specified query. Supports the same query format as the Gmail search box. For example, `\"from:someuser@example.com rfc822msgid: is:unread\"`. Parameter cannot be used when accessing the api using the gmail.metadata scope. */\n q?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The user's email address. The special value `me` can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "post__/gmail/v1/users/{userId}/messages": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, \n/** Mark the email as permanently deleted (not TRASH) and only visible in Google Vault to a Vault administrator. Only used for Google Workspace accounts. */\n deleted?: boolean, \n/** Source for Gmail's internal date of the message. */\n internalDateSource?: \"receivedTime\" | \"dateHeader\", },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.deleted": {
        "rendered": "\n/** Mark the email as permanently deleted (not TRASH) and only visible in Google Vault to a Vault administrator. Only used for Google Workspace accounts. */\n deleted?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.internalDateSource": {
        "rendered": "\n/** Source for Gmail's internal date of the message. */\n internalDateSource?: \"receivedTime\" | \"dateHeader\",",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The user's email address. The special value `me` can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "post__/gmail/v1/users/{userId}/messages/batchDelete": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The user's email address. The special value `me` can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "post__/gmail/v1/users/{userId}/messages/batchModify": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The user's email address. The special value `me` can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "post__/gmail/v1/users/{userId}/messages/import": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, \n/** Mark the email as permanently deleted (not TRASH) and only visible in Google Vault to a Vault administrator. Only used for Google Workspace accounts. */\n deleted?: boolean, \n/** Source for Gmail's internal date of the message. */\n internalDateSource?: \"receivedTime\" | \"dateHeader\", \n/** Ignore the Gmail spam classifier decision and never mark this email as SPAM in the mailbox. */\n neverMarkSpam?: boolean, \n/** Process calendar invites in the email and add any extracted meetings to the Google Calendar for this user. */\n processForCalendar?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.deleted": {
        "rendered": "\n/** Mark the email as permanently deleted (not TRASH) and only visible in Google Vault to a Vault administrator. Only used for Google Workspace accounts. */\n deleted?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.internalDateSource": {
        "rendered": "\n/** Source for Gmail's internal date of the message. */\n internalDateSource?: \"receivedTime\" | \"dateHeader\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.neverMarkSpam": {
        "rendered": "\n/** Ignore the Gmail spam classifier decision and never mark this email as SPAM in the mailbox. */\n neverMarkSpam?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.processForCalendar": {
        "rendered": "\n/** Process calendar invites in the email and add any extracted meetings to the Google Calendar for this user. */\n processForCalendar?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The user's email address. The special value `me` can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "post__/gmail/v1/users/{userId}/messages/send": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The user's email address. The special value `me` can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "delete__/gmail/v1/users/{userId}/messages/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The user's email address. The special value `me` can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".id": {
        "rendered": "\n/** The ID of the message to delete. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "get__/gmail/v1/users/{userId}/messages/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, \n/** The format to return the message in. */\n format?: \"minimal\" | \"full\" | \"raw\" | \"metadata\", \n/** When given and format is `METADATA`, only include headers specified. */\n metadataHeaders?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.format": {
        "rendered": "\n/** The format to return the message in. */\n format?: \"minimal\" | \"full\" | \"raw\" | \"metadata\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.metadataHeaders": {
        "rendered": "\n/** When given and format is `METADATA`, only include headers specified. */\n metadataHeaders?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.metadataHeaders.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The user's email address. The special value `me` can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".id": {
        "rendered": "\n/** The ID of the message to retrieve. This ID is usually retrieved using `messages.list`. The ID is also contained in the result when a message is inserted (`messages.insert`) or imported (`messages.import`). */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "post__/gmail/v1/users/{userId}/messages/{id}/modify": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The user's email address. The special value `me` can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".id": {
        "rendered": "\n/** The ID of the message to modify. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "post__/gmail/v1/users/{userId}/messages/{id}/trash": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The user's email address. The special value `me` can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".id": {
        "rendered": "\n/** The ID of the message to Trash. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "post__/gmail/v1/users/{userId}/messages/{id}/untrash": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The user's email address. The special value `me` can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".id": {
        "rendered": "\n/** The ID of the message to remove from Trash. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "get__/gmail/v1/users/{userId}/messages/{messageId}/attachments/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The user's email address. The special value `me` can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".messageId": {
        "rendered": "\n/** The ID of the message containing the attachment. */\n messageId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".id": {
        "rendered": "\n/** The ID of the attachment. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "get__/gmail/v1/users/{userId}/profile": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The user's email address. The special value `me` can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "get__/gmail/v1/users/{userId}/settings/autoForwarding": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** User's email address. The special value \"me\" can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "put__/gmail/v1/users/{userId}/settings/autoForwarding": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** User's email address. The special value \"me\" can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "get__/gmail/v1/users/{userId}/settings/cse/identities": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, \n/** The number of identities to return. If not provided, the page size will default to 20 entries. */\n pageSize?: number, \n/** Pagination token indicating which page of identities to return. If the token is not supplied, then the API will return the first page of results. */\n pageToken?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageSize": {
        "rendered": "\n/** The number of identities to return. If not provided, the page size will default to 20 entries. */\n pageSize?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** Pagination token indicating which page of identities to return. If the token is not supplied, then the API will return the first page of results. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The requester's primary email address. To indicate the authenticated user, you can use the special value `me`. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "post__/gmail/v1/users/{userId}/settings/cse/identities": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The requester's primary email address. To indicate the authenticated user, you can use the special value `me`. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "delete__/gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The requester's primary email address. To indicate the authenticated user, you can use the special value `me`. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".cseEmailAddress": {
        "rendered": "\n/** The primary email address associated with the client-side encryption identity configuration that's removed. */\n cseEmailAddress: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "get__/gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The requester's primary email address. To indicate the authenticated user, you can use the special value `me`. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".cseEmailAddress": {
        "rendered": "\n/** The primary email address associated with the client-side encryption identity configuration that's retrieved. */\n cseEmailAddress: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "patch__/gmail/v1/users/{userId}/settings/cse/identities/{emailAddress}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The requester's primary email address. To indicate the authenticated user, you can use the special value `me`. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".emailAddress": {
        "rendered": "\n/** The email address of the client-side encryption identity to update. */\n emailAddress: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "get__/gmail/v1/users/{userId}/settings/cse/keypairs": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, \n/** The number of key pairs to return. If not provided, the page size will default to 20 entries. */\n pageSize?: number, \n/** Pagination token indicating which page of key pairs to return. If the token is not supplied, then the API will return the first page of results. */\n pageToken?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageSize": {
        "rendered": "\n/** The number of key pairs to return. If not provided, the page size will default to 20 entries. */\n pageSize?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** Pagination token indicating which page of key pairs to return. If the token is not supplied, then the API will return the first page of results. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The requester's primary email address. To indicate the authenticated user, you can use the special value `me`. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "post__/gmail/v1/users/{userId}/settings/cse/keypairs": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The requester's primary email address. To indicate the authenticated user, you can use the special value `me`. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "get__/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The requester's primary email address. To indicate the authenticated user, you can use the special value `me`. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".keyPairId": {
        "rendered": "\n/** The identifier of the key pair to retrieve. */\n keyPairId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "post__/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:disable": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The requester's primary email address. To indicate the authenticated user, you can use the special value `me`. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".keyPairId": {
        "rendered": "\n/** The identifier of the key pair to turn off. */\n keyPairId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".disable": {
        "rendered": " disable: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "post__/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:enable": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The requester's primary email address. To indicate the authenticated user, you can use the special value `me`. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".keyPairId": {
        "rendered": "\n/** The identifier of the key pair to turn on. */\n keyPairId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".enable": {
        "rendered": " enable: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "post__/gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:obliterate": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The requester's primary email address. To indicate the authenticated user, you can use the special value `me`. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".keyPairId": {
        "rendered": "\n/** The identifier of the key pair to obliterate. */\n keyPairId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".obliterate": {
        "rendered": " obliterate: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "get__/gmail/v1/users/{userId}/settings/delegates": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** User's email address. The special value \"me\" can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "post__/gmail/v1/users/{userId}/settings/delegates": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** User's email address. The special value \"me\" can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "delete__/gmail/v1/users/{userId}/settings/delegates/{delegateEmail}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** User's email address. The special value \"me\" can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".delegateEmail": {
        "rendered": "\n/** The email address of the user to be removed as a delegate. */\n delegateEmail: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "get__/gmail/v1/users/{userId}/settings/delegates/{delegateEmail}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** User's email address. The special value \"me\" can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".delegateEmail": {
        "rendered": "\n/** The email address of the user whose delegate relationship is to be retrieved. */\n delegateEmail: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "get__/gmail/v1/users/{userId}/settings/filters": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** User's email address. The special value \"me\" can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "post__/gmail/v1/users/{userId}/settings/filters": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** User's email address. The special value \"me\" can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "delete__/gmail/v1/users/{userId}/settings/filters/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** User's email address. The special value \"me\" can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".id": {
        "rendered": "\n/** The ID of the filter to be deleted. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "get__/gmail/v1/users/{userId}/settings/filters/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** User's email address. The special value \"me\" can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".id": {
        "rendered": "\n/** The ID of the filter to be fetched. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "get__/gmail/v1/users/{userId}/settings/forwardingAddresses": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** User's email address. The special value \"me\" can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "post__/gmail/v1/users/{userId}/settings/forwardingAddresses": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** User's email address. The special value \"me\" can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "delete__/gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** User's email address. The special value \"me\" can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".forwardingEmail": {
        "rendered": "\n/** The forwarding address to be deleted. */\n forwardingEmail: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "get__/gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** User's email address. The special value \"me\" can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".forwardingEmail": {
        "rendered": "\n/** The forwarding address to be retrieved. */\n forwardingEmail: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "get__/gmail/v1/users/{userId}/settings/imap": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** User's email address. The special value \"me\" can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "put__/gmail/v1/users/{userId}/settings/imap": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** User's email address. The special value \"me\" can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "get__/gmail/v1/users/{userId}/settings/language": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** User's email address. The special value \"me\" can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "put__/gmail/v1/users/{userId}/settings/language": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** User's email address. The special value \"me\" can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "get__/gmail/v1/users/{userId}/settings/pop": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** User's email address. The special value \"me\" can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "put__/gmail/v1/users/{userId}/settings/pop": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** User's email address. The special value \"me\" can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "get__/gmail/v1/users/{userId}/settings/sendAs": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** User's email address. The special value \"me\" can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "post__/gmail/v1/users/{userId}/settings/sendAs": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** User's email address. The special value \"me\" can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "delete__/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** User's email address. The special value \"me\" can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".sendAsEmail": {
        "rendered": "\n/** The send-as alias to be deleted. */\n sendAsEmail: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "get__/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** User's email address. The special value \"me\" can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".sendAsEmail": {
        "rendered": "\n/** The send-as alias to be retrieved. */\n sendAsEmail: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "patch__/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** User's email address. The special value \"me\" can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".sendAsEmail": {
        "rendered": "\n/** The send-as alias to be updated. */\n sendAsEmail: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "put__/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** User's email address. The special value \"me\" can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".sendAsEmail": {
        "rendered": "\n/** The send-as alias to be updated. */\n sendAsEmail: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "get__/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The user's email address. The special value `me` can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".sendAsEmail": {
        "rendered": "\n/** The email address that appears in the \"From:\" header for mail sent using this alias. */\n sendAsEmail: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "post__/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The user's email address. The special value `me` can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".sendAsEmail": {
        "rendered": "\n/** The email address that appears in the \"From:\" header for mail sent using this alias. */\n sendAsEmail: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "delete__/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The user's email address. The special value `me` can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".sendAsEmail": {
        "rendered": "\n/** The email address that appears in the \"From:\" header for mail sent using this alias. */\n sendAsEmail: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".id": {
        "rendered": "\n/** The immutable ID for the SmimeInfo. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "get__/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The user's email address. The special value `me` can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".sendAsEmail": {
        "rendered": "\n/** The email address that appears in the \"From:\" header for mail sent using this alias. */\n sendAsEmail: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".id": {
        "rendered": "\n/** The immutable ID for the SmimeInfo. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "post__/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The user's email address. The special value `me` can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".sendAsEmail": {
        "rendered": "\n/** The email address that appears in the \"From:\" header for mail sent using this alias. */\n sendAsEmail: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".id": {
        "rendered": "\n/** The immutable ID for the SmimeInfo. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "post__/gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/verify": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** User's email address. The special value \"me\" can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".sendAsEmail": {
        "rendered": "\n/** The send-as alias to be verified. */\n sendAsEmail: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "get__/gmail/v1/users/{userId}/settings/vacation": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** User's email address. The special value \"me\" can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "put__/gmail/v1/users/{userId}/settings/vacation": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** User's email address. The special value \"me\" can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "post__/gmail/v1/users/{userId}/stop": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The user's email address. The special value `me` can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "get__/gmail/v1/users/{userId}/threads": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, \n/** Include threads from `SPAM` and `TRASH` in the results. */\n includeSpamTrash?: boolean, \n/** Only return threads with labels that match all of the specified label IDs. */\n labelIds?: (string)[], \n/** Maximum number of threads to return. This field defaults to 100. The maximum allowed value for this field is 500. */\n maxResults?: number, \n/** Page token to retrieve a specific page of results in the list. */\n pageToken?: string, \n/** Only return threads matching the specified query. Supports the same query format as the Gmail search box. For example, `\"from:someuser@example.com rfc822msgid: is:unread\"`. Parameter cannot be used when accessing the api using the gmail.metadata scope. */\n q?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.includeSpamTrash": {
        "rendered": "\n/** Include threads from `SPAM` and `TRASH` in the results. */\n includeSpamTrash?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.labelIds": {
        "rendered": "\n/** Only return threads with labels that match all of the specified label IDs. */\n labelIds?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.labelIds.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** Maximum number of threads to return. This field defaults to 100. The maximum allowed value for this field is 500. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** Page token to retrieve a specific page of results in the list. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.q": {
        "rendered": "\n/** Only return threads matching the specified query. Supports the same query format as the Gmail search box. For example, `\"from:someuser@example.com rfc822msgid: is:unread\"`. Parameter cannot be used when accessing the api using the gmail.metadata scope. */\n q?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The user's email address. The special value `me` can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "delete__/gmail/v1/users/{userId}/threads/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The user's email address. The special value `me` can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".id": {
        "rendered": "\n/** ID of the Thread to delete. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "get__/gmail/v1/users/{userId}/threads/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, \n/** The format to return the messages in. */\n format?: \"full\" | \"metadata\" | \"minimal\", \n/** When given and format is METADATA, only include headers specified. */\n metadataHeaders?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.format": {
        "rendered": "\n/** The format to return the messages in. */\n format?: \"full\" | \"metadata\" | \"minimal\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.metadataHeaders": {
        "rendered": "\n/** When given and format is METADATA, only include headers specified. */\n metadataHeaders?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.metadataHeaders.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The user's email address. The special value `me` can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".id": {
        "rendered": "\n/** The ID of the thread to retrieve. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "post__/gmail/v1/users/{userId}/threads/{id}/modify": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The user's email address. The special value `me` can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".id": {
        "rendered": "\n/** The ID of the thread to modify. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "post__/gmail/v1/users/{userId}/threads/{id}/trash": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The user's email address. The special value `me` can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".id": {
        "rendered": "\n/** The ID of the thread to Trash. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "post__/gmail/v1/users/{userId}/threads/{id}/untrash": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The user's email address. The special value `me` can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".id": {
        "rendered": "\n/** The ID of the thread to remove from Trash. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  },
  "post__/gmail/v1/users/{userId}/watch": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** V1 error format. */\n xgafv?: \"1\" | \"2\", \n/** OAuth access token. */\n access_token?: string, \n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\", \n/** JSONP */\n callback?: string, \n/** Selector specifying which fields to include in a partial response. */\n fields?: string, \n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string, \n/** OAuth 2.0 token for the current user. */\n oauth_token?: string, \n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean, \n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string, \n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string, \n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.xgafv": {
        "rendered": "\n/** V1 error format. */\n xgafv?: \"1\" | \"2\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.access_token": {
        "rendered": "\n/** OAuth access token. */\n access_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alt": {
        "rendered": "\n/** Data format for response. */\n alt?: \"json\" | \"media\" | \"proto\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.callback": {
        "rendered": "\n/** JSONP */\n callback?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Selector specifying which fields to include in a partial response. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oauth_token": {
        "rendered": "\n/** OAuth 2.0 token for the current user. */\n oauth_token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.prettyPrint": {
        "rendered": "\n/** Returns response with indentations and line breaks. */\n prettyPrint?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.quotaUser": {
        "rendered": "\n/** Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. */\n quotaUser?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.upload_protocol": {
        "rendered": "\n/** Upload protocol for media (e.g. \"raw\", \"multipart\"). */\n upload_protocol?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uploadType": {
        "rendered": "\n/** Legacy upload protocol for media (e.g. \"media\", \"multipart\"). */\n uploadType?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The user's email address. The special value `me` can be used to indicate the authenticated user. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {}
  }
}
