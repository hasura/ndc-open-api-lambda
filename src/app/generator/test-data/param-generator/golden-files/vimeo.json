{
  "get__/": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Return an OpenAPI specification. */\n openapi?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.openapi": {
        "rendered": "\n/** Return an OpenAPI specification. */\n openapi?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "Endpoint",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/categories": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The way to sort the results. */\n sort?: \"last_video_featured_time\" | \"name\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"last_video_featured_time\" | \"name\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Category)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/categories/{category}": {
    "query": {},
    "body": {},
    "path": {
      ".category": {
        "rendered": "\n/** The name of the category. */\n category: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Category",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/categories/{category}/channels": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The search query to use to filter the results. */\n query?: string, \n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\" | \"followers\" | \"videos\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query to use to filter the results. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\" | \"followers\" | \"videos\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".category": {
        "rendered": "\n/** The name of the category. */\n category: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Channel)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/categories/{category}/groups": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The search query to use to filter the results. */\n query?: string, \n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\" | \"members\" | \"videos\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query to use to filter the results. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\" | \"members\" | \"videos\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".category": {
        "rendered": "\n/** The name of the category. */\n category: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Group)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/categories/{category}/videos": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The attribute by which to filter the results.\n\nOption descriptions:\n * `conditional_featured` - Featured (promoted) videos\n */\n filter?: \"conditional_featured\" | \"embeddable\", \n/** Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`. */\n filter_embeddable?: boolean, \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The search query to use to filter the results. */\n query?: string, \n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"comments\" | \"date\" | \"duration\" | \"featured\" | \"likes\" | \"plays\" | \"relevant\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter": {
        "rendered": "\n/** The attribute by which to filter the results.\n\nOption descriptions:\n * `conditional_featured` - Featured (promoted) videos\n */\n filter?: \"conditional_featured\" | \"embeddable\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter_embeddable": {
        "rendered": "\n/** Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`. */\n filter_embeddable?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query to use to filter the results. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"comments\" | \"date\" | \"duration\" | \"featured\" | \"likes\" | \"plays\" | \"relevant\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".category": {
        "rendered": "\n/** The name of the category. */\n category: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Video)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/categories/{category}/videos/{video_id}": {
    "query": {},
    "body": {},
    "path": {
      ".category": {
        "rendered": "\n/** The name of the category. */\n category: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Video",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/channels": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The attribute by which to filter the results. */\n filter?: \"featured\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The search query to use to filter the results. */\n query?: string, \n/** The way to sort the results.\n\nOption descriptions:\n * `relevant` - Relevant sorting is available only for search queries.\n */\n sort?: \"alphabetical\" | \"date\" | \"followers\" | \"relevant\" | \"videos\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter": {
        "rendered": "\n/** The attribute by which to filter the results. */\n filter?: \"featured\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query to use to filter the results. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results.\n\nOption descriptions:\n * `relevant` - Relevant sorting is available only for search queries.\n */\n sort?: \"alphabetical\" | \"date\" | \"followers\" | \"relevant\" | \"videos\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Channel)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/channels": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * The description of the channel.\n   * @example \"We really love videos, and these are the videos we really, really love.\"\n   */\n    description?: string,\n  /**\n   * The link to access the channel. You can use a custom name in the URL in place of a numeric channel ID, as in `/channels/{url_custom}`.\n   * @example \"staffpicks\"\n   */\n    link?: string,\n  /**\n   * The name of the channel.\n   * @example \"Vimeo Staff Picks\"\n   */\n    name: string,\n  /** The privacy level of the channel. */\n    privacy: \"anybody\" | \"moderators\" | \"user\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "Channel",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/channels/{channel_id}": {
    "query": {},
    "body": {},
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/channels/{channel_id}": {
    "query": {},
    "body": {},
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Channel",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/channels/{channel_id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /**\n   * The description of the channel.\n   * @example \"We really love videos, and these are the videos we really, really love.\"\n   */\n    description?: string,\n  /**\n   * The link to access the channel. You can use a custom name in the URL in place of a numeric channel ID, as in `/channels/{url_custom}`. Submitting `\"\"` for this field removes the link alias.\n   * @example \"staffpicks\"\n   */\n    link?: string,\n  /**\n   * The name of the channel.\n   * @example \"Vimeo Staff Picks\"\n   */\n    name?: string,\n  /** The privacy level of the channel. */\n    privacy?: \"anybody\" | \"moderators\" | \"users\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Channel",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/channels/{channel_id}/categories": {
    "query": {},
    "body": {},
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Category)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/channels/{channel_id}/categories": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The array of category URIs to add. */\n    channels: (string)[],\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/channels/{channel_id}/categories/{category}": {
    "query": {},
    "body": {},
    "path": {
      ".category": {
        "rendered": "\n/** The name of the category. */\n category: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/channels/{channel_id}/categories/{category}": {
    "query": {},
    "body": {},
    "path": {
      ".category": {
        "rendered": "\n/** The name of the category. */\n category: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/channels/{channel_id}/moderators": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * The URI of a user to remove as a moderator.\n   * @example \"/users/152184\"\n   */\n    user_uri: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "User",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/channels/{channel_id}/moderators": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The search query to use to filter the results. */\n query?: string, \n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query to use to filter the results. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(User)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/channels/{channel_id}/moderators": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * The URI of the user to add as a moderator.\n   * @example \"/users/152184\"\n   */\n    user_uri: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(User)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/channels/{channel_id}/moderators": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * The URI of a user to add as a moderator.\n   * @example \"/users/152184\"\n   */\n    user_uri: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/channels/{channel_id}/moderators/{user_id}": {
    "query": {},
    "body": {},
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/channels/{channel_id}/moderators/{user_id}": {
    "query": {},
    "body": {},
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "User",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/channels/{channel_id}/moderators/{user_id}": {
    "query": {},
    "body": {},
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/channels/{channel_id}/privacy/users": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(User)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/channels/{channel_id}/privacy/users": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The array of either the user URIs or the user IDs to permit to view the private channel. */\n    users: (string)[],\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(User)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/channels/{channel_id}/privacy/users/{user_id}": {
    "query": {},
    "body": {},
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/channels/{channel_id}/privacy/users/{user_id}": {
    "query": {},
    "body": {},
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/channels/{channel_id}/tags": {
    "query": {},
    "body": {},
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Tag)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/channels/{channel_id}/tags": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** An array of tags to assign. */\n    tag: (string)[],\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Tag)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/channels/{channel_id}/tags/{word}": {
    "query": {},
    "body": {},
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".word": {
        "rendered": "\n/** The word to use as the tag. */\n word: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/channels/{channel_id}/tags/{word}": {
    "query": {},
    "body": {},
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".word": {
        "rendered": "\n/** The word to use as the tag. */\n word: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/channels/{channel_id}/tags/{word}": {
    "query": {},
    "body": {},
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".word": {
        "rendered": "\n/** The word to use as the tag. */\n word: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/channels/{channel_id}/users": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The attribute by which to filter the results. */\n filter: \"moderators\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The search query to use to filter the results. */\n query?: string, \n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter": {
        "rendered": "\n/** The attribute by which to filter the results. */\n filter: \"moderators\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query to use to filter the results. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(User)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/channels/{channel_id}/videos": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * The URI of a video to remove.\n   * @example \"/videos/258684937\"\n   */\n    video_uri: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Video",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/channels/{channel_id}/videos": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The page that contains the video URI. */\n containing_uri?: string, \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The attribute by which to filter the results. */\n filter?: \"embeddable\", \n/** Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`. */\n filter_embeddable?: boolean, \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The search query to use to filter the results. */\n query?: string, \n/** The way to sort the results. */\n sort?: \"added\" | \"alphabetical\" | \"comments\" | \"date\" | \"default\" | \"duration\" | \"likes\" | \"manual\" | \"modified_time\" | \"plays\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.containing_uri": {
        "rendered": "\n/** The page that contains the video URI. */\n containing_uri?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter": {
        "rendered": "\n/** The attribute by which to filter the results. */\n filter?: \"embeddable\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.filter_embeddable": {
        "rendered": "\n/** Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`. */\n filter_embeddable?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query to use to filter the results. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"added\" | \"alphabetical\" | \"comments\" | \"date\" | \"default\" | \"duration\" | \"likes\" | \"manual\" | \"modified_time\" | \"plays\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Video)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/channels/{channel_id}/videos": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * The URI of a video to add.\n   * @example \"/videos/258684937\"\n   */\n    video_uri: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/channels/{channel_id}/videos/{video_id}": {
    "query": {},
    "body": {},
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/channels/{channel_id}/videos/{video_id}": {
    "query": {},
    "body": {},
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Video",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/channels/{channel_id}/videos/{video_id}": {
    "query": {},
    "body": {},
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/channels/{channel_id}/videos/{video_id}/comments": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Comment)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/channels/{channel_id}/videos/{video_id}/comments": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * The text of the comment.\n   * @example \"I love this!\"\n   */\n    text: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Comment",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/channels/{channel_id}/videos/{video_id}/credits": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The search query to use to filter the results. */\n query?: string, \n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query to use to filter the results. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Credit)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/channels/{channel_id}/videos/{video_id}/credits": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * The email address of the credited person.\n   * @example \"user@example.com\"\n   */\n    email: string,\n  /**\n   * The name of the credited person.\n   * @example \"Sam Doe\"\n   */\n    name: string,\n  /**\n   * The role of the credited person.\n   * @example \"Producer\"\n   */\n    role: string,\n  /**\n   * The URI of the Vimeo user who should be given credit in this video.\n   * @example \"/users/152184\"\n   */\n    user_uri: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Credit",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/channels/{channel_id}/videos/{video_id}/likes": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(User)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/channels/{channel_id}/videos/{video_id}/pictures": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Picture)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/channels/{channel_id}/videos/{video_id}/pictures": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /**\n   * Whether the image created by the `time` field should be the default thumbnail for the video.\n   * @example \"true\"\n   */\n    active?: boolean,\n  /**\n   * Creates an image of the video from the given time offset.\n   * @example 300\n   */\n    time?: number,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Picture",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/channels/{channel_id}/videos/{video_id}/privacy/users": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(User)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/channels/{channel_id}/videos/{video_id}/privacy/users": {
    "query": {},
    "body": {},
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(User)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/channels/{channel_id}/videos/{video_id}/texttracks": {
    "query": {},
    "body": {},
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(TextTrack)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/channels/{channel_id}/videos/{video_id}/texttracks": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * Active text tracks appear in the player and are visible to other users. Only one text track per language can be active.\n   * @example \"true\"\n   */\n    active?: boolean,\n  /**\n   * The language of the text track. For a complete list of valid languages, use the [/languages?filter=texttracks](https://developer.vimeo.com/api/endpoints/videos#GET/languages) endpoint.\n   * @example \"en-US\"\n   */\n    language: string,\n  /**\n   * The name of the text track.\n   * @example \"Commentary\"\n   */\n    name: string,\n  /** The type of the text track. */\n    type: \"captions\" | \"chapters\" | \"descriptions\" | \"metadata\" | \"subtitles\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TextTrack",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/contentratings": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(ContentRating)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/creativecommons": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(CreativeCommons)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/groups": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The attribute by which to filter the results. */\n filter?: \"featured\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The search query to use to filter the results. */\n query?: string, \n/** The way to sort the results.\n\nOption descriptions:\n * `relevant` - Relevant sorting is available only for search queries.\n */\n sort?: \"alphabetical\" | \"date\" | \"followers\" | \"relevant\" | \"videos\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter": {
        "rendered": "\n/** The attribute by which to filter the results. */\n filter?: \"featured\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query to use to filter the results. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results.\n\nOption descriptions:\n * `relevant` - Relevant sorting is available only for search queries.\n */\n sort?: \"alphabetical\" | \"date\" | \"followers\" | \"relevant\" | \"videos\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Group)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/groups": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * The description of the new group.\n   * @example \"Want to participate in our weekly Challenges? Join the Group to receive messages and new Challenges!\"\n   */\n    description?: string,\n  /**\n   * The name of the new group.\n   * @example \"Vimeo Weekend Challenge\"\n   */\n    name: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "Group",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/groups/{group_id}": {
    "query": {},
    "body": {},
    "path": {
      ".groupId": {
        "rendered": "\n/** The ID of the group. */\n groupId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/groups/{group_id}": {
    "query": {},
    "body": {},
    "path": {
      ".groupId": {
        "rendered": "\n/** The ID of the group. */\n groupId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Group",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/groups/{group_id}/users": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The attribute by which to filter the results. */\n filter?: \"moderators\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The search query to use to filter the results. */\n query?: string, \n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter": {
        "rendered": "\n/** The attribute by which to filter the results. */\n filter?: \"moderators\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query to use to filter the results. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".groupId": {
        "rendered": "\n/** The ID of the group. */\n groupId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(User)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/groups/{group_id}/videos": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The attribute by which to filter the results. */\n filter?: \"embeddable\", \n/** Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`. */\n filter_embeddable?: boolean, \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The search query to use to filter the results. */\n query?: string, \n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"comments\" | \"date\" | \"duration\" | \"likes\" | \"plays\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter": {
        "rendered": "\n/** The attribute by which to filter the results. */\n filter?: \"embeddable\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.filter_embeddable": {
        "rendered": "\n/** Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`. */\n filter_embeddable?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query to use to filter the results. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"comments\" | \"date\" | \"duration\" | \"likes\" | \"plays\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".groupId": {
        "rendered": "\n/** The ID of the group. */\n groupId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Video)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/groups/{group_id}/videos/{video_id}": {
    "query": {},
    "body": {},
    "path": {
      ".groupId": {
        "rendered": "\n/** The ID of the group. */\n groupId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/groups/{group_id}/videos/{video_id}": {
    "query": {},
    "body": {},
    "path": {
      ".groupId": {
        "rendered": "\n/** The ID of the group. */\n groupId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Video",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/groups/{group_id}/videos/{video_id}": {
    "query": {},
    "body": {},
    "path": {
      ".groupId": {
        "rendered": "\n/** The ID of the group. */\n groupId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Video",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/languages": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The attribute by which to filter the results.\n\nOption descriptions:\n * `texttracks` - Only return text track supported languages\n */\n filter?: \"texttracks\", },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.filter": {
        "rendered": "\n/** The attribute by which to filter the results.\n\nOption descriptions:\n * `texttracks` - Only return text track supported languages\n */\n filter?: \"texttracks\",",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Language)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/me": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "User",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/me": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /**\n   * The user's bio.\n   * @example \"This is where you will find videos and news updates from the staff\"\n   */\n    bio?: string,\n  /** A list of values describing the content in this video. Find the full list in the [/contentratings](https://developer.vimeo.com/api/endpoints/videos#GET/contentratings) endpoint. You must provide a comma-separated list if you are using a query string or an array if you are using JSON. */\n    content_filter?: (string)[],\n  /**\n   * The user's custom Vimeo URL slug.\n   * @example \"staff\"\n   */\n    link?: string,\n  /**\n   * The user's location.\n   * @example \"New York City\"\n   */\n    location?: string,\n  /**\n   * The user's display name.\n   * @example \"Vimeo Staff\"\n   */\n    name?: string,\n  /**\n   * The default password for all future videos that this user uploads. To use this field, the `videos.privacy.view` field must be `password`.\n   * @example \"hunter1\"\n   */\n    password?: string,\n    videos?: {\n    privacy?: {\n  /**\n   * Whether a user can add the video to an album, channel, or group. This value becomes the default add setting for all future videos uploaded by the user.\n   * @example \"true\"\n   */\n    add?: boolean,\n  /** Who can comment on the video. This value becomes the default comment setting for all future videos that this user uploads. */\n    comments?: \"anybody\" | \"contacts\" | \"nobody\",\n  /**\n   * Whether a user can download the video. This value becomes the default download setting for all future videos that this user uploads.\n   * @example \"true\"\n   */\n    download?: boolean,\n  /** The privacy for embed videos. The `whitelist` value enables you to define all valid embed domains. See our [documentation](https://developer.vimeo.com/api/endpoints/videos#/{video_id}/privacy/domains) for adding and removing domains. */\n    embed?: \"private\" | \"public\" | \"whitelist\",\n  /** Who can view the video. This value becomes the default view setting for all future videos that this user uploads. */\n    view?: \"anybody\" | \"contacts\" | \"disable\" | \"nobody\" | \"password\" | \"unlisted\" | \"users\",\n\n},\n\n},\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "User",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/me/albums": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The search query to use to filter the results. */\n query?: string, \n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\" | \"duration\" | \"videos\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query to use to filter the results. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\" | \"duration\" | \"videos\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Album)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/me/albums": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * The hexadecimal code for the color of the player buttons.\n   * @example \"ff66ee\"\n   */\n    brand_color?: string,\n  /**\n   * The description of the album.\n   * @example \"Vimeo holiday videos!\"\n   */\n    description?: string,\n  /**\n   * Whether to hide Vimeo navigation when displaying the album.\n   * @example \"true\"\n   */\n    hide_nav?: boolean,\n  /** The type of layout for presenting the album. */\n    layout?: \"grid\" | \"player\",\n  /**\n   * The name of the album.\n   * @example \"Vimeo Holiday Videos!\"\n   */\n    name: string,\n  /**\n   * The album's password. Required only if **privacy** is `password`.\n   * @example \"hunter1\"\n   */\n    password?: string,\n  /** The privacy level of the album. */\n    privacy?: \"anybody\" | \"embed_only\" | \"password\",\n  /**\n   * Whether album videos should use the review mode URL.\n   * @example \"true\"\n   */\n    review_mode?: boolean,\n  /** The default sort order of the album's videos. */\n    sort?: \"added_first\" | \"added_last\" | \"alphabetical\" | \"arranged\" | \"comments\" | \"likes\" | \"newest\" | \"oldest\" | \"plays\",\n  /** The color theme of the album. */\n    theme?: \"dark\" | \"standard\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "Album",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/me/albums/{album_id}": {
    "query": {},
    "body": {},
    "path": {
      ".albumId": {
        "rendered": "\n/** The ID of the album. */\n albumId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/me/albums/{album_id}": {
    "query": {},
    "body": {},
    "path": {
      ".albumId": {
        "rendered": "\n/** The ID of the album. */\n albumId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Album",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/me/albums/{album_id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /**\n   * The hexadecimal code for the color of the player buttons.\n   * @example \"ff66ee\"\n   */\n    brand_color?: string,\n  /**\n   * The description of the album.\n   * @example \"Vimeo holiday videos!\"\n   */\n    description?: string,\n  /**\n   * The custom domain a user has selected for their album.\n   * @example \"mycustomdomain.com\"\n   */\n    domain?: string | null,\n  /**\n   * Whether to hide Vimeo navigation when displaying the album.\n   * @example \"true\"\n   */\n    hide_nav?: boolean,\n  /** The type of layout for presenting the album. */\n    layout?: \"grid\" | \"player\",\n  /**\n   * The name of the album.\n   * @example \"Vimeo Holiday Videos!\"\n   */\n    name?: string,\n  /**\n   * The album's password. Required only if **privacy** is `password`.\n   * @example \"hunter1\"\n   */\n    password?: string,\n  /** The privacy level of the album. */\n    privacy?: \"anybody\" | \"embed_only\" | \"password\",\n  /**\n   * Whether album videos should use the review mode URL.\n   * @example \"true\"\n   */\n    review_mode?: boolean,\n  /** The default sort order of the album's videos. */\n    sort?: \"added_first\" | \"added_last\" | \"alphabetical\" | \"arranged\" | \"comments\" | \"likes\" | \"newest\" | \"oldest\" | \"plays\",\n  /** The color theme of the album. */\n    theme?: \"dark\" | \"standard\",\n  /**\n   * The custom Vimeo URL a user has selected for their album.\n   * @example \"my-custom-url\"\n   */\n    url?: string | null,\n  /**\n   * Whether the user has opted in to use a custom domain for their album.\n   * @example \"true\"\n   */\n    use_custom_domain?: boolean,\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".albumId": {
        "rendered": "\n/** The ID of the album. */\n albumId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Album",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/me/albums/{album_id}/videos": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The page containing the video URI. */\n containing_uri?: string, \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The attribute by which to filter the results. */\n filter?: \"embeddable\", \n/** Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`. */\n filter_embeddable?: boolean, \n/** The page number of the results to show. */\n page?: number, \n/** The password of the album. */\n password?: string, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The search query to use to filter the results. */\n query?: string, \n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"comments\" | \"date\" | \"default\" | \"duration\" | \"likes\" | \"manual\" | \"modified_time\" | \"plays\", \n/** Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video's name. */\n weak_search?: boolean, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.containing_uri": {
        "rendered": "\n/** The page containing the video URI. */\n containing_uri?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter": {
        "rendered": "\n/** The attribute by which to filter the results. */\n filter?: \"embeddable\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.filter_embeddable": {
        "rendered": "\n/** Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`. */\n filter_embeddable?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.password": {
        "rendered": "\n/** The password of the album. */\n password?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query to use to filter the results. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"comments\" | \"date\" | \"default\" | \"duration\" | \"likes\" | \"manual\" | \"modified_time\" | \"plays\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.weak_search": {
        "rendered": "\n/** Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video's name. */\n weak_search?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".albumId": {
        "rendered": "\n/** The ID of the album. */\n albumId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Video)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/me/albums/{album_id}/videos": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * A comma-separated list of video URIs.\n   * @example \"/videos/258684937,/videos/273576296\"\n   */\n    videos: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".albumId": {
        "rendered": "\n/** The ID of the album. */\n albumId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/me/albums/{album_id}/videos/{video_id}": {
    "query": {},
    "body": {},
    "path": {
      ".albumId": {
        "rendered": "\n/** The ID of the album. */\n albumId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/me/albums/{album_id}/videos/{video_id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The password of the album. */\n password?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.password": {
        "rendered": "\n/** The password of the album. */\n password?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".albumId": {
        "rendered": "\n/** The ID of the album. */\n albumId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Video",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/me/albums/{album_id}/videos/{video_id}": {
    "query": {},
    "body": {},
    "path": {
      ".albumId": {
        "rendered": "\n/** The ID of the album. */\n albumId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/me/albums/{album_id}/videos/{video_id}/set_album_thumbnail": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /**\n   * The video frame time in seconds to use as the album thumbnail.\n   * @example 300\n   */\n    time_code?: number,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".albumId": {
        "rendered": "\n/** The ID of the album. */\n albumId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Album",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/me/appearances": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The attribute by which to filter the results. */\n filter?: \"embeddable\", \n/** Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`. */\n filter_embeddable?: boolean, \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The search query to use to filter the results. */\n query?: string, \n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"comments\" | \"date\" | \"duration\" | \"likes\" | \"plays\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter": {
        "rendered": "\n/** The attribute by which to filter the results. */\n filter?: \"embeddable\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.filter_embeddable": {
        "rendered": "\n/** Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`. */\n filter_embeddable?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query to use to filter the results. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"comments\" | \"date\" | \"duration\" | \"likes\" | \"plays\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Video)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/me/categories": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\" | \"name\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\" | \"name\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Category)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/me/categories/{category}": {
    "query": {},
    "body": {},
    "path": {
      ".category": {
        "rendered": "\n/** The name of the category. */\n category: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/me/categories/{category}": {
    "query": {},
    "body": {},
    "path": {
      ".category": {
        "rendered": "\n/** The name of the category. */\n category: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/me/categories/{category}": {
    "query": {},
    "body": {},
    "path": {
      ".category": {
        "rendered": "\n/** The name of the category. */\n category: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/me/channels": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The attribute by which to filter the results. */\n filter?: \"moderated\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The search query to use to filter the results. */\n query?: string, \n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\" | \"followers\" | \"videos\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter": {
        "rendered": "\n/** The attribute by which to filter the results. */\n filter?: \"moderated\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query to use to filter the results. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\" | \"followers\" | \"videos\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Channel)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/me/channels/{channel_id}": {
    "query": {},
    "body": {},
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/me/channels/{channel_id}": {
    "query": {},
    "body": {},
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/me/channels/{channel_id}": {
    "query": {},
    "body": {},
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/me/customlogos": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Picture)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/me/customlogos": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "Picture",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/me/customlogos/{logo_id}": {
    "query": {},
    "body": {},
    "path": {
      ".logoId": {
        "rendered": "\n/** The ID of the custom logo. */\n logoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Picture",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/me/feed": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Necessary for proper pagination. You shouldn't provide this value yourself, and instead use the pagination links in the feed response. Please see our [pagination documentation](https://developer.vimeo.com/api/common-formats#using-the-pagination-parameter) for more information. */\n offset?: string, \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The feed type. */\n type?: \"appears\" | \"category_featured\" | \"channel\" | \"facebook_feed\" | \"following\" | \"group\" | \"likes\" | \"ondemand_publish\" | \"share\" | \"tagged_with\" | \"twitter_timeline\" | \"uploads\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.offset": {
        "rendered": "\n/** Necessary for proper pagination. You shouldn't provide this value yourself, and instead use the pagination links in the feed response. Please see our [pagination documentation](https://developer.vimeo.com/api/common-formats#using-the-pagination-parameter) for more information. */\n offset?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.type": {
        "rendered": "\n/** The feed type. */\n type?: \"appears\" | \"category_featured\" | \"channel\" | \"facebook_feed\" | \"following\" | \"group\" | \"likes\" | \"ondemand_publish\" | \"share\" | \"tagged_with\" | \"twitter_timeline\" | \"uploads\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Activity31)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/me/followers": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The search query to use to filter the results. */\n query?: string, \n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query to use to filter the results. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(User)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/me/following": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The attribute by which to filter the results. */\n filter?: \"online\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The search query to use to filter the results. */\n query?: string, \n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter": {
        "rendered": "\n/** The attribute by which to filter the results. */\n filter?: \"online\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query to use to filter the results. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(User)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/me/following": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** An array of user URIs for the list of users to follow. */\n    users: (string)[],\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/me/following/{follow_user_id}": {
    "query": {},
    "body": {},
    "path": {
      ".followUserId": {
        "rendered": "\n/** The ID of the following user. */\n followUserId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/me/following/{follow_user_id}": {
    "query": {},
    "body": {},
    "path": {
      ".followUserId": {
        "rendered": "\n/** The ID of the following user. */\n followUserId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/me/following/{follow_user_id}": {
    "query": {},
    "body": {},
    "path": {
      ".followUserId": {
        "rendered": "\n/** The ID of the following user. */\n followUserId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/me/groups": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The attribute by which to filter the results. */\n filter?: \"moderated\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The search query to use to filter the results. */\n query?: string, \n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\" | \"members\" | \"videos\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter": {
        "rendered": "\n/** The attribute by which to filter the results. */\n filter?: \"moderated\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query to use to filter the results. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\" | \"members\" | \"videos\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Group)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/me/groups/{group_id}": {
    "query": {},
    "body": {},
    "path": {
      ".groupId": {
        "rendered": "\n/** The ID of the group. */\n groupId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/me/groups/{group_id}": {
    "query": {},
    "body": {},
    "path": {
      ".groupId": {
        "rendered": "\n/** The ID of the group. */\n groupId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/me/groups/{group_id}": {
    "query": {},
    "body": {},
    "path": {
      ".groupId": {
        "rendered": "\n/** The ID of the group. */\n groupId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/me/likes": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The attribute by which to filter the results. */\n filter?: \"embeddable\", \n/** Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`. */\n filter_embeddable?: boolean, \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The search query to use to filter the results. */\n query?: string, \n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"comments\" | \"date\" | \"duration\" | \"likes\" | \"plays\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter": {
        "rendered": "\n/** The attribute by which to filter the results. */\n filter?: \"embeddable\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.filter_embeddable": {
        "rendered": "\n/** Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`. */\n filter_embeddable?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query to use to filter the results. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"comments\" | \"date\" | \"duration\" | \"likes\" | \"plays\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Video)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/me/likes/{video_id}": {
    "query": {},
    "body": {},
    "path": {
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/me/likes/{video_id}": {
    "query": {},
    "body": {},
    "path": {
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/me/likes/{video_id}": {
    "query": {},
    "body": {},
    "path": {
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/me/ondemand/pages": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The type of On Demand pages to return. */\n filter?: \"film\" | \"series\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The way to sort the results. */\n sort?: \"added\" | \"alphabetical\" | \"date\" | \"modified_time\" | \"name\" | \"publish.time\" | \"rating\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter": {
        "rendered": "\n/** The type of On Demand pages to return. */\n filter?: \"film\" | \"series\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"added\" | \"alphabetical\" | \"date\" | \"modified_time\" | \"name\" | \"publish.time\" | \"rating\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(OnDemandPage)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/me/ondemand/pages": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * An array of accepted currencies.\n   * \n   * Option descriptions:\n   *  * `AUD` - Australian Dollar\n   *  * `CAD` - Canadian Dollar\n   *  * `CHF` - Swiss Franc\n   *  * `DKK` - Danish Krone\n   *  * `EUR` - Euro\n   *  * `GBP` - British Pound\n   *  * `JPY` - Japanese Yen\n   *  * `KRW` - South Korean Won\n   *  * `NOK` - Norwegian Krone\n   *  * `PLN` - Polish Zloty\n   *  * `SEK` - Swedish Krona\n   *  * `USD` - US Dollar\n   */\n    accepted_currencies?: \"AUD\" | \"CAD\" | \"CHF\" | \"DKK\" | \"EUR\" | \"GBP\" | \"JPY\" | \"KRW\" | \"NOK\" | \"PLN\" | \"SEK\" | \"USD\",\n    buy?: {\n  /**\n   * Whether the Buy action is active. *Required if `rent.active` is false.\n   * @example \"true\"\n   */\n    active?: boolean,\n  /**\n   * Whether people who buy the video can download it. To use this field, `type` must be `film`.\n   * @example \"true\"\n   */\n    download?: boolean,\n    price?: {\n  /**\n   * The purchase price of this video in AUD.\n   * @example 2.99\n   */\n    AUD?: number,\n  /**\n   * The purchase price of this video in CAD.\n   * @example 2.99\n   */\n    CAD?: number,\n  /**\n   * The purchase price of this video in CHF.\n   * @example 2.99\n   */\n    CHF?: number,\n  /**\n   * The purchase price of this video in DKK.\n   * @example 2.99\n   */\n    DKK?: number,\n  /**\n   * The purchase price of this video in EUR.\n   * @example 2.99\n   */\n    EUR?: number,\n  /**\n   * The purchase price of this video in GBP.\n   * @example 2.99\n   */\n    GBP?: number,\n  /**\n   * The purchase price of this video in JPY.\n   * @example 2.99\n   */\n    JPY?: number,\n  /**\n   * The purchase price of this video in KRW.\n   * @example 2.99\n   */\n    KRW?: number,\n  /**\n   * The purchase price of this video in NOK.\n   * @example 2.99\n   */\n    NOK?: number,\n  /**\n   * The purchase price of this video in PLN.\n   * @example 2.99\n   */\n    PLN?: number,\n  /**\n   * The purchase price of this video in SEK.\n   * @example 2.99\n   */\n    SEK?: number,\n  /**\n   * The purchase price of this video in USD when `type` is `film`, or the purchase price of the entire collection in USD when `type` is `series`.\n   * @example 2.99\n   */\n    USD?: number,\n\n},\n\n},\n  /** One or more ratings, either as a comma-separated list or as a JSON array depending on the request format. */\n    content_rating: \"drugs\" | \"language\" | \"nudity\" | \"safe\" | \"unrated\" | \"violence\",\n  /**\n   * The description of the On Demand page.\n   * @example \"DARBY FOREVER follows the fantasies of Darby, a shopgirl at \"Bobbins & Notions\".\"\n   */\n    description: string,\n  /**\n   * The custom domain of the On Demand page.\n   * @example \"https://example.com\"\n   */\n    domain_link?: string,\n    episodes?: {\n    buy?: {\n  /**\n   * Whether episodes can be bought.\n   * @example \"true\"\n   */\n    active?: boolean,\n  /**\n   * Whether people who buy the episode can download it. To use this field, `type` must be `series`.\n   * @example \"true\"\n   */\n    download?: boolean,\n    price?: {\n  /**\n   * The purchase price per episode. *Required if `episodes.buy.active` is true.\n   * @example 1.99\n   */\n    USD?: number,\n\n},\n\n},\n    rent?: {\n  /**\n   * Whether episodes can be rented\n   * @example \"true\"\n   */\n    active?: boolean,\n  /** The period in which this episode can be rented for. */\n    period?: \"1 week\" | \"1 year\" | \"24 hour\" | \"3 month\" | \"30 day\" | \"48 hour\" | \"6 month\" | \"72 hour\",\n    price?: {\n  /**\n   * The default price to rent an episode. This field is applicable only when `type` is `series`. *Required if `episodes.rent.active` is true.\n   * @example 0.99\n   */\n    USD?: number,\n\n},\n\n},\n\n},\n  /**\n   * The custom string to use in this On Demand page's Vimeo URL.\n   * @example \"darbyforever\"\n   */\n    link?: string,\n  /**\n   * The name of the On Demand page.\n   * @example \"Darby Forever\"\n   */\n    name: string,\n    rent?: {\n  /**\n   * Whether the video can be rented. *Required if `buy.active` is false.\n   * @example \"true\"\n   */\n    active?: boolean,\n  /** The period in which this can be rented for. */\n    period?: \"1 week\" | \"1 year\" | \"24 hour\" | \"3 month\" | \"30 day\" | \"48 hour\" | \"6 month\" | \"72 hour\",\n    price?: {\n  /**\n   * The rental price of this video in AUD.\n   * @example 0.99\n   */\n    AUD?: number,\n  /**\n   * The rental price of this video in CAD.\n   * @example 0.99\n   */\n    CAD?: number,\n  /**\n   * The rental price of this video in CHF.\n   * @example 0.99\n   */\n    CHF?: number,\n  /**\n   * The rental price of this video in DKK.\n   * @example 0.99\n   */\n    DKK?: number,\n  /**\n   * The rental price of this video in EUR.\n   * @example 0.99\n   */\n    EUR?: number,\n  /**\n   * The rental price of this video in GBP.\n   * @example 0.99\n   */\n    GBP?: number,\n  /**\n   * The rental price of this video in JPY.\n   * @example 0.99\n   */\n    JPY?: number,\n  /**\n   * The rental price of this video in KRW.\n   * @example 0.99\n   */\n    KRW?: number,\n  /**\n   * The rental price of this video in NOK.\n   * @example 0.99\n   */\n    NOK?: number,\n  /**\n   * The rental price of this video in PLN.\n   * @example 0.99\n   */\n    PLN?: number,\n  /**\n   * The rental price of this video in SEK.\n   * @example 0.99\n   */\n    SEK?: number,\n  /**\n   * The rental price of this video in USD when `type` is `film`, or the rental price of the entire collection in USD when `type` is `series`.\n   * @example 0.99\n   */\n    USD?: number,\n\n},\n\n},\n    subscription?: {\n    monthly?: {\n  /**\n   * Whether monthly subscription is active. *Required if `rent.active` and `buy.active` are false.\n   * @example \"true\"\n   */\n    active?: boolean,\n    price?: {\n  /**\n   * The monthly subscription price in USD. *Required if `subscription.active` is true.\n   * @example 9.99\n   */\n    USD?: number,\n\n},\n\n},\n\n},\n  /** The type of On Demand page. */\n    type: \"film\" | \"series\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "OnDemandPage",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/me/ondemand/purchases": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The type of On Demand videos to show.\n\nOption descriptions:\n * `important` - Will show all pages which are about to expire.\n */\n filter?: \"all\" | \"expiring_soon\" | \"film\" | \"important\" | \"purchased\" | \"rented\" | \"series\" | \"subscription\" | \"unwatched\" | \"watched\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The way to sort the results. */\n sort?: \"added\" | \"alphabetical\" | \"date\" | \"name\" | \"purchase_time\" | \"rating\" | \"release_date\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter": {
        "rendered": "\n/** The type of On Demand videos to show.\n\nOption descriptions:\n * `important` - Will show all pages which are about to expire.\n */\n filter?: \"all\" | \"expiring_soon\" | \"film\" | \"important\" | \"purchased\" | \"rented\" | \"series\" | \"subscription\" | \"unwatched\" | \"watched\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"added\" | \"alphabetical\" | \"date\" | \"name\" | \"purchase_time\" | \"rating\" | \"release_date\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(OnDemandPage)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/me/ondemand/purchases/{ondemand_id}": {
    "query": {},
    "body": {},
    "path": {
      ".ondemandId": {
        "rendered": "\n/** The ID of the On Demand. */\n ondemandId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OnDemandPage",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/me/pictures": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Picture)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/me/pictures": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "Picture",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/me/pictures/{portraitset_id}": {
    "query": {},
    "body": {},
    "path": {
      ".portraitsetId": {
        "rendered": "\n/** The ID of the picture. */\n portraitsetId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/me/pictures/{portraitset_id}": {
    "query": {},
    "body": {},
    "path": {
      ".portraitsetId": {
        "rendered": "\n/** The ID of the picture. */\n portraitsetId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Picture",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/me/pictures/{portraitset_id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /**\n   * Whether the picture is the user's active portrait.\n   * @example \"true\"\n   */\n    active?: boolean,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".portraitsetId": {
        "rendered": "\n/** The ID of the picture. */\n portraitsetId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Picture",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/me/portfolios": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The search query to use to filter the results. */\n query?: string, \n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query to use to filter the results. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Portfolio)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/me/portfolios/{portfolio_id}": {
    "query": {},
    "body": {},
    "path": {
      ".portfolioId": {
        "rendered": "\n/** The ID of the portfolio. */\n portfolioId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Portfolio",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/me/portfolios/{portfolio_id}/videos": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The page that contains the video URI. */\n containing_uri?: string, \n/** The attribute by which to filter the results. */\n filter?: \"embeddable\", \n/** Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`. */\n filter_embeddable?: boolean, \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The way to sort the results.\n\nOption descriptions:\n * `default` - This will sort to the default sort set on the portfolio.\n */\n sort?: \"alphabetical\" | \"comments\" | \"date\" | \"default\" | \"likes\" | \"manual\" | \"plays\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.containing_uri": {
        "rendered": "\n/** The page that contains the video URI. */\n containing_uri?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.filter": {
        "rendered": "\n/** The attribute by which to filter the results. */\n filter?: \"embeddable\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.filter_embeddable": {
        "rendered": "\n/** Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`. */\n filter_embeddable?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results.\n\nOption descriptions:\n * `default` - This will sort to the default sort set on the portfolio.\n */\n sort?: \"alphabetical\" | \"comments\" | \"date\" | \"default\" | \"likes\" | \"manual\" | \"plays\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".portfolioId": {
        "rendered": "\n/** The ID of the portfolio. */\n portfolioId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Video)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/me/portfolios/{portfolio_id}/videos/{video_id}": {
    "query": {},
    "body": {},
    "path": {
      ".portfolioId": {
        "rendered": "\n/** The ID of the portfolio. */\n portfolioId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/me/portfolios/{portfolio_id}/videos/{video_id}": {
    "query": {},
    "body": {},
    "path": {
      ".portfolioId": {
        "rendered": "\n/** The ID of the portfolio. */\n portfolioId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Video",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/me/portfolios/{portfolio_id}/videos/{video_id}": {
    "query": {},
    "body": {},
    "path": {
      ".portfolioId": {
        "rendered": "\n/** The ID of the portfolio. */\n portfolioId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/me/presets": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Presets)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/me/presets/{preset_id}": {
    "query": {},
    "body": {},
    "path": {
      ".presetId": {
        "rendered": "\n/** The ID of the preset. */\n presetId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Presets",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/me/presets/{preset_id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /** Disable the outro. */\n    outro?: \"nothing\",\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".presetId": {
        "rendered": "\n/** The ID of the preset. */\n presetId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Presets",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/me/presets/{preset_id}/videos": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".presetId": {
        "rendered": "\n/** The ID of the preset. */\n presetId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Video)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/me/projects": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The way to sort the results. */\n sort?: \"date\" | \"default\" | \"modified_time\" | \"name\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"date\" | \"default\" | \"modified_time\" | \"name\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Project)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/me/projects": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * The name of the project.\n   * @example \"Rough cuts\"\n   */\n    name: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "Project",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/me/projects/{project_id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Whether to delete all the videos in the project along with the project itself. */\n should_delete_clips?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.should_delete_clips": {
        "rendered": "\n/** Whether to delete all the videos in the project along with the project itself. */\n should_delete_clips?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".projectId": {
        "rendered": "\n/** The ID of the project. */\n projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/me/projects/{project_id}": {
    "query": {},
    "body": {},
    "path": {
      ".projectId": {
        "rendered": "\n/** The ID of the project. */\n projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Project",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/me/projects/{project_id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * The name of the project.\n   * @example \"Rough cuts\"\n   */\n    name: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".projectId": {
        "rendered": "\n/** The ID of the project. */\n projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Project",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/me/projects/{project_id}/videos": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Whether to delete the videos when removing them from the project. */\n should_delete_clips?: boolean, \n/** A comma-separated list of the video URIs to remove. */\n uris: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.should_delete_clips": {
        "rendered": "\n/** Whether to delete the videos when removing them from the project. */\n should_delete_clips?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uris": {
        "rendered": "\n/** A comma-separated list of the video URIs to remove. */\n uris: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".projectId": {
        "rendered": "\n/** The ID of the project. */\n projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/me/projects/{project_id}/videos": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\" | \"default\" | \"duration\" | \"last_user_action_event_date\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\" | \"default\" | \"duration\" | \"last_user_action_event_date\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".projectId": {
        "rendered": "\n/** The ID of the project. */\n projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Video)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/me/projects/{project_id}/videos": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A comma-separated list of video URIs to add. */\n uris: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uris": {
        "rendered": "\n/** A comma-separated list of video URIs to add. */\n uris: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".projectId": {
        "rendered": "\n/** The ID of the project. */\n projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/me/projects/{project_id}/videos/{video_id}": {
    "query": {},
    "body": {},
    "path": {
      ".projectId": {
        "rendered": "\n/** The ID of the project. */\n projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/me/projects/{project_id}/videos/{video_id}": {
    "query": {},
    "body": {},
    "path": {
      ".projectId": {
        "rendered": "\n/** The ID of the project. */\n projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/me/videos": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The page that contains the video URI. Only available when not paired with `query`. */\n containing_uri?: string, \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The attribute by which to filter the results. */\n filter?: \"app_only\" | \"embeddable\" | \"featured\" | \"playable\", \n/** Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`. */\n filter_embeddable?: boolean, \n/** Whether to filter by all playable videos or by all videos that are not  playable. */\n filter_playable?: boolean, \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The search query to use to filter the results. */\n query?: string, \n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"comments\" | \"date\" | \"default\" | \"duration\" | \"last_user_action_event_date\" | \"likes\" | \"modified_time\" | \"plays\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.containing_uri": {
        "rendered": "\n/** The page that contains the video URI. Only available when not paired with `query`. */\n containing_uri?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter": {
        "rendered": "\n/** The attribute by which to filter the results. */\n filter?: \"app_only\" | \"embeddable\" | \"featured\" | \"playable\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter_embeddable": {
        "rendered": "\n/** Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`. */\n filter_embeddable?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.filter_playable": {
        "rendered": "\n/** Whether to filter by all playable videos or by all videos that are not  playable. */\n filter_playable?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query to use to filter the results. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"comments\" | \"date\" | \"default\" | \"duration\" | \"last_user_action_event_date\" | \"likes\" | \"modified_time\" | \"plays\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Video)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/me/videos": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** A list of values describing the content in this video. Find the full list in the [/contentratings](https://developer.vimeo.com/api/endpoints/videos#GET/contentratings) endpoint. */\n    content_rating?: (string)[],\n  /**\n   * The description of the video.\n   * @example \"A celebration of 10 years of Staff Picks.\"\n   */\n    description?: string,\n    embed?: {\n    buttons?: {\n  /**\n   * Show or hide the Embed button.\n   * @example \"true\"\n   */\n    embed?: boolean,\n  /**\n   * Show or hide the Fullscreen button.\n   * @example \"true\"\n   */\n    fullscreen?: boolean,\n  /**\n   * Show or hide the HD button.\n   * @example \"true\"\n   */\n    hd?: boolean,\n  /**\n   * Show or hide the Like button.\n   * @example \"true\"\n   */\n    like?: boolean,\n  /**\n   * Show or hide the Scaling button (shown only in Fullscreen mode).\n   * @example \"true\"\n   */\n    scaling?: boolean,\n  /**\n   * Show or hide the Share button.\n   * @example \"true\"\n   */\n    share?: boolean,\n  /**\n   * Show or hide the Watch Later button.\n   * @example \"true\"\n   */\n    watchlater?: boolean,\n\n},\n  /**\n   * The main color of the embed player.\n   * @example \"#1ab7ea\"\n   */\n    color?: string,\n    logos?: {\n    custom?: {\n  /**\n   * Show or hide your custom logo.\n   * @example \"true\"\n   */\n    active?: boolean,\n  /**\n   * The URL that loads when the user clicks your custom logo.\n   * @example \"https://example.com\"\n   */\n    link?: string,\n  /**\n   * Whether always to show the custom logo or to hide it after time with the rest of the UI.\n   * @example \"true\"\n   */\n    sticky?: boolean,\n\n},\n  /**\n   * Show or hide the Vimeo logo.\n   * @example \"true\"\n   */\n    vimeo?: boolean,\n\n},\n  /**\n   * Show or hide the playbar.\n   * @example \"true\"\n   */\n    playbar?: boolean,\n    title?: {\n  /** Show or hide the video title, or enable the user to determine whether the video title appears. */\n    name?: \"hide\" | \"show\" | \"user\",\n  /** Show or hide the owner information, or enable the user to determine whether the owner information appears. */\n    owner?: \"hide\" | \"show\" | \"user\",\n  /** Show or hide the owner portrait, or enable the user to determine whether the owner portrait appears. */\n    portrait?: \"hide\" | \"show\" | \"user\",\n\n},\n  /**\n   * Show or hide the volume selector.\n   * @example \"true\"\n   */\n    volume?: boolean,\n\n},\n  /** The Creative Commons license. */\n    license?: \"by\" | \"by-nc\" | \"by-nc-nd\" | \"by-nc-sa\" | \"by-nd\" | \"by-sa\" | \"cc0\",\n  /**\n   * The video's default language. For a full list of valid languages, use the [/languages?filter=texttracks](https://developer.vimeo.com/api/endpoints/videos#GET/languages) endpoint.\n   * @example \"en_US\"\n   */\n    locale?: string,\n  /**\n   * The title of the video.\n   * @example \"Celebrating 10 Years of Staff Picks\"\n   */\n    name?: string,\n  /**\n   * The password. When you set `privacy.view` to `password`, you must provide the password as an additional parameter.\n   * @example \"hunter1\"\n   */\n    password?: string,\n    privacy?: {\n  /**\n   * Whether a user can add the video to an album, channel, or group.\n   * @example \"true\"\n   */\n    add?: boolean,\n  /** The privacy level required to comment on the video. */\n    comments?: \"anybody\" | \"contacts\" | \"nobody\",\n  /**\n   * Whether a user can download the video. Not available to users with a Basic membership\n   * @example \"true\"\n   */\n    download?: boolean,\n  /** The video's embed settings. The `whitelist` value enables you to define all valid embed domains. See our [documentation](https://developer.vimeo.com/api/endpoints/videos#/{video_id}/privacy/domains) for details on adding and removing domains. */\n    embed?: \"private\" | \"public\" | \"whitelist\",\n  /** The video's privacy setting. When privacy is `users`, `application/json` is the only valid content type. Basic users can't set privacy to `unlisted`. */\n    view?: \"anybody\" | \"contacts\" | \"disable\" | \"nobody\" | \"password\" | \"unlisted\" | \"users\",\n\n},\n    ratings?: {\n    mpaa?: {\n  /**\n   * The reason for the video's MPAA rating.\n   * \n   * Option descriptions:\n   *  * `at` - Adult themes\n   *  * `bn` - Brief nudity\n   *  * `n` - Nudity\n   *  * `sl` - Strong language\n   *  * `ss` - Sexual situations\n   *  * `v` - Violence\n   */\n    reason?: \"at\" | \"bn\" | \"n\" | \"sl\" | \"ss\" | \"v\",\n\n},\n    tv?: {\n  /**\n   * The reason for the video's TV rating.\n   * \n   * Option descriptions:\n   *  * `d` - Suggestive dialogue\n   *  * `fv` - Fantasy violence\n   *  * `l` - Language\n   *  * `ss` - Sexual situations\n   *  * `v` - Violence\n   */\n    reason?: \"d\" | \"fv\" | \"l\" | \"ss\" | \"v\",\n\n},\n\n},\n    review_page?: {\n  /**\n   * Enable or disable video review.\n   * @example \"true\"\n   */\n    active?: boolean,\n\n},\n    spatial?: {\n  /** The 360 director timeline. */\n    director_timeline?: ({\n  /**\n   * The timeline pitch. This value must be between -90 and 90.\n   * @example 70\n   */\n    pitch: number,\n  /** The timeline roll. */\n    roll?: number,\n  /**\n   * The 360 director timeline time code.\n   * @example 5\n   */\n    time_code: number,\n  /**\n   * The timeline yaw. This value must be between 0 and 360.\n   * @example 125\n   */\n    yaw: number,\n\n})[],\n  /**\n   * The 360 field of view: default 50, minimum 30, maximum 90.\n   * @example 50\n   */\n    field_of_view?: number,\n  /** The 360 spatial projection. */\n    projection?: \"cubical\" | \"cylindrical\" | \"dome\" | \"equirectangular\" | \"pyramid\",\n  /** The 360 spatial stereo format. */\n    stereo_format?: \"left-right\" | \"mono\" | \"top-bottom\",\n\n},\n    upload: {\n  /** The upload approach. */\n    approach: \"post\" | \"pull\" | \"streaming\" | \"tus\",\n  /**\n   * The public URL at which the video is hosted. The URL must be valid for at least 24 hours. Use this parameter when `approach` is `pull`.\n   * @example \"https://example.com/video.mp4\"\n   */\n    link?: string,\n  /**\n   * The app's redirect URL. Use this parameter when `approach` is `post`.\n   * @example \"https://example.com\"\n   */\n    redirect_url?: string,\n  /**\n   * The size in bytes of the video to upload.\n   * @example \"13623861\"\n   */\n    size?: string,\n\n},\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "Video",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/me/videos/{video_id}": {
    "query": {},
    "body": {},
    "path": {
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Video",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/me/watched/videos": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/me/watched/videos": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Video)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/me/watched/videos/{video_id}": {
    "query": {},
    "body": {},
    "path": {
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/me/watchlater": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The attribute by which to filter the results. */\n filter?: \"embeddable\", \n/** Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`. */\n filter_embeddable?: boolean, \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The search query to use to filter the results. */\n query?: string, \n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"comments\" | \"date\" | \"duration\" | \"likes\" | \"plays\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter": {
        "rendered": "\n/** The attribute by which to filter the results. */\n filter?: \"embeddable\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.filter_embeddable": {
        "rendered": "\n/** Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`. */\n filter_embeddable?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query to use to filter the results. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"comments\" | \"date\" | \"duration\" | \"likes\" | \"plays\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Video)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/me/watchlater/{video_id}": {
    "query": {},
    "body": {},
    "path": {
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/me/watchlater/{video_id}": {
    "query": {},
    "body": {},
    "path": {
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Video",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/me/watchlater/{video_id}": {
    "query": {},
    "body": {},
    "path": {
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/oauth/access_token": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * The authorization code received from the authorization server.\n   * @example \"1234abcd\"\n   */\n    code: string,\n  /** The grant type. Must be set to `authorization_code`. */\n    grant_type: \"authorization_code\",\n  /**\n   * The redirect URI. Must match the URI from `/oauth/authorize`.\n   * @example \"https://example.com\"\n   */\n    redirect_uri: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "Auth",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/oauth/authorize/client": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The grant type. Must be set to `client_credentials`. */\n    grant_type: \"client_credentials\",\n  /**\n   * A space-separated list of the authentication [scopes](https://developer.vimeo.com/api/authentication#supported-scopes) that you want to access. The default is `public`.\n   * @example \"public\"\n   */\n    scope: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "Auth",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/oauth/authorize/vimeo_oauth1": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The grant type. Must be set to `vimeo_oauth1`. */\n    grant_type: \"vimeo_oauth1\",\n  /**\n   * The OAuth 1 token.\n   * @example \"58037c0078d5f54e15e638cc0dd882a570b13c50\"\n   */\n    token: string,\n  /**\n   * The OAuth 1 token secret.\n   * @example \"NTgwMzdjMDA3OGQ1ZjU0ZTE1ZTYzOGNjMGRkODgyYTU3MGIxM2M1MA==\"\n   */\n    token_secret: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "Auth",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/oauth/verify": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "Auth",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/ondemand/genres": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(OnDemandGenre)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/ondemand/genres/{genre_id}": {
    "query": {},
    "body": {},
    "path": {
      ".genreId": {
        "rendered": "\n/** The ID of the genre. */\n genreId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OnDemandGenre",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/ondemand/genres/{genre_id}/pages": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The attribute by which to filter the results. */\n filter?: \"country\" | \"my_region\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The search query to use to filter the results. */\n query?: string, \n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\" | \"name\" | \"publish.time\" | \"videos\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter": {
        "rendered": "\n/** The attribute by which to filter the results. */\n filter?: \"country\" | \"my_region\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query to use to filter the results. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\" | \"name\" | \"publish.time\" | \"videos\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".genreId": {
        "rendered": "\n/** The ID of the genre. */\n genreId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(OnDemandPage)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/ondemand/genres/{genre_id}/pages/{ondemand_id}": {
    "query": {},
    "body": {},
    "path": {
      ".genreId": {
        "rendered": "\n/** The ID of the genre. */\n genreId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".ondemandId": {
        "rendered": "\n/** The ID of the On Demand. */\n ondemandId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OnDemandPage",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/ondemand/pages/{ondemand_id}": {
    "query": {},
    "body": {},
    "path": {
      ".ondemandId": {
        "rendered": "\n/** The ID of the On Demand. */\n ondemandId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/ondemand/pages/{ondemand_id}": {
    "query": {},
    "body": {},
    "path": {
      ".ondemandId": {
        "rendered": "\n/** The ID of the On Demand. */\n ondemandId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OnDemandPage",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/ondemand/pages/{ondemand_id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /**\n   * The custom string to use in this On Demand page's Vimeo URL.\n   * @example \"darbyforever\"\n   */\n    link?: string,\n    preorder?: {\n  /**\n   * If set to true, you will enable pre-orders on the On Demand page.\n   * @example \"true\"\n   */\n    active?: boolean,\n  /**\n   * The time that the On Demand page will be published. *Required if `preorder.active` is `true`.\n   * @example \"2017-05-16T15:05:43+00:00\"\n   */\n    publish_time?: string,\n\n},\n    publish?: {\n  /**\n   * Whether to publish the On Demand page.\n   * @example \"true\"\n   */\n    active?: boolean,\n\n},\n  /**\n   * Whether to publish the On Demand page automatically after all videos are finished transcoding.\n   * @example \"true\"\n   */\n    publish_when_ready?: boolean,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".ondemandId": {
        "rendered": "\n/** The ID of the On Demand. */\n ondemandId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OnDemandPage",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/ondemand/pages/{ondemand_id}/backgrounds": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".ondemandId": {
        "rendered": "\n/** The ID of the On Demand. */\n ondemandId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Picture)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/ondemand/pages/{ondemand_id}/backgrounds": {
    "query": {},
    "body": {},
    "path": {
      ".ondemandId": {
        "rendered": "\n/** The ID of the On Demand. */\n ondemandId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Picture",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/ondemand/pages/{ondemand_id}/backgrounds/{background_id}": {
    "query": {},
    "body": {},
    "path": {
      ".backgroundId": {
        "rendered": "\n/** The ID of the background. */\n backgroundId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".ondemandId": {
        "rendered": "\n/** The ID of the On Demand. */\n ondemandId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Picture",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/ondemand/pages/{ondemand_id}/backgrounds/{background_id}": {
    "query": {},
    "body": {},
    "path": {
      ".backgroundId": {
        "rendered": "\n/** The ID of the background. */\n backgroundId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".ondemandId": {
        "rendered": "\n/** The ID of the On Demand. */\n ondemandId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Picture",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/ondemand/pages/{ondemand_id}/backgrounds/{background_id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /**\n   * Whether to make this background the active background.\n   * @example \"true\"\n   */\n    active?: boolean,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".backgroundId": {
        "rendered": "\n/** The ID of the background. */\n backgroundId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".ondemandId": {
        "rendered": "\n/** The ID of the On Demand. */\n ondemandId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Picture",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/ondemand/pages/{ondemand_id}/genres": {
    "query": {},
    "body": {},
    "path": {
      ".ondemandId": {
        "rendered": "\n/** The ID of the On Demand. */\n ondemandId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(OnDemandGenre)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/ondemand/pages/{ondemand_id}/genres/{genre_id}": {
    "query": {},
    "body": {},
    "path": {
      ".genreId": {
        "rendered": "\n/** The ID of the genre. */\n genreId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".ondemandId": {
        "rendered": "\n/** The ID of the On Demand. */\n ondemandId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/ondemand/pages/{ondemand_id}/genres/{genre_id}": {
    "query": {},
    "body": {},
    "path": {
      ".genreId": {
        "rendered": "\n/** The ID of the genre. */\n genreId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".ondemandId": {
        "rendered": "\n/** The ID of the On Demand. */\n ondemandId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OnDemandGenre",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/ondemand/pages/{ondemand_id}/genres/{genre_id}": {
    "query": {},
    "body": {},
    "path": {
      ".genreId": {
        "rendered": "\n/** The ID of the genre. */\n genreId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".ondemandId": {
        "rendered": "\n/** The ID of the On Demand. */\n ondemandId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OnDemandGenre",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/ondemand/pages/{ondemand_id}/likes": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The attribute by which to filter the results. */\n filter?: \"extra\" | \"main\" | \"trailer\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter": {
        "rendered": "\n/** The attribute by which to filter the results. */\n filter?: \"extra\" | \"main\" | \"trailer\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".ondemandId": {
        "rendered": "\n/** The ID of the On Demand page. */\n ondemandId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(User)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/ondemand/pages/{ondemand_id}/pictures": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".ondemandId": {
        "rendered": "\n/** The ID of the On Demand. */\n ondemandId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Picture)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/ondemand/pages/{ondemand_id}/pictures": {
    "query": {},
    "body": {},
    "path": {
      ".ondemandId": {
        "rendered": "\n/** The ID of the On Demand. */\n ondemandId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Picture",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/ondemand/pages/{ondemand_id}/pictures/{poster_id}": {
    "query": {},
    "body": {},
    "path": {
      ".ondemandId": {
        "rendered": "\n/** The ID of the On Demand. */\n ondemandId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".posterId": {
        "rendered": "\n/** The ID of the picture. */\n posterId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Picture",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/ondemand/pages/{ondemand_id}/pictures/{poster_id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /**\n   * Whether to make this picture the active picture.\n   * @example \"true\"\n   */\n    active?: boolean,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".ondemandId": {
        "rendered": "\n/** The ID of the On Demand. */\n ondemandId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".posterId": {
        "rendered": "\n/** The ID of the picture. */\n posterId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Picture",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/ondemand/pages/{ondemand_id}/promotions": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The filter to apply to the results. */\n filter: \"batch\" | \"default\" | \"single\" | \"vip\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter": {
        "rendered": "\n/** The filter to apply to the results. */\n filter: \"batch\" | \"default\" | \"single\" | \"vip\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".ondemandId": {
        "rendered": "\n/** The ID of the On Demand. */\n ondemandId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OnDemandPromotion",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/ondemand/pages/{ondemand_id}/promotions": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * The promotion access type, which is a purchase option that isn't available on the container. VIP promotions always make the content free of charge. If you use this type, you must further define the promotion with the `download` or `stream_period` fields.\n   * \n   * Option descriptions:\n   *  * `default` - Promotions grant discount on the existing purchase options for an On Demand Container.\n   *  * `vip` - Promotions can be used to grant free access to VOD content before it is released, or to offer a purchase option that isn't available on the container. \"vip\" promotions will always make the content free, and must be further defined with the `download` or `stream_period` fields.\n   */\n    access_type?: \"default\" | \"vip\",\n  /**\n   * The promotion code. This field is ignored for batch promotions.\n   * @example \"sxsw2018\"\n   */\n    code?: string,\n  /**\n   * The type of discount offered by the promo code. When `access_type` is `vip`, the value of this field must be `free`.\n   * \n   * Option descriptions:\n   *  * `free` - Reduces the price to zero.\n   *  * `percent` - Reduces the price by an amount defined in the \"percent_off\" field.\n   */\n    discount_type?: \"free\" | \"percent\",\n  /**\n   * Whether the promotion grants download access to VOD content. This is necessary only when not previously defined in the On Demand container or when `access_type` is `vip` or `product_type` is `buy`.\n   * @example \"true\"\n   */\n    download: boolean,\n  /**\n   * The end of the promotion period. If you don't specify a value, the promotion will never expire.\n   * @example \"1526089920\"\n   */\n    end_time?: string,\n  /**\n   * The description of a batch promotion. This field is ignored for single promotions.\n   * @example \"sxsw\"\n   */\n    label?: string,\n  /**\n   * The percentage of the discount by using this promo code. This field is applicable only when `discount_type` is `percent`.\n   * @example 50\n   */\n    percent_off?: number,\n  /** The type of transaction to which the promotion applies. When `access_type` is `default`, the default value is `any`, but the default value is `rent` when `access_type` is `vip`. Also, when `access_type` is `vip`, the only valid product types are `buy` and `rent`. */\n    product_type?: \"any\" | \"buy\" | \"buy_episode\" | \"rent\" | \"rent_episode\" | \"subscribe\",\n  /**\n   * The start of the promotion period. If you don't specify a value, the start time defaults to the time that the promotion was created.\n   * @example \"1526089920\"\n   */\n    start_time?: string,\n  /** The amount of time that a user has access to the VOD content upon redeeming a promo code. This field is necessary only when not defined in the On Demand container or when creating promotions when `access_type` is `vip` or `product_type` is `rent`. */\n    stream_period: \"1_week\" | \"1_year\" | \"24_hour\" | \"30_day\" | \"3_month\" | \"48_hour\" | \"6_month\" | \"72_hour\",\n  /**\n   * The number of promotions to generate when `type` is `batch`, or the number of uses of the promotion when `type` is `single`.\n   * @example 9\n   */\n    total: number,\n  /**\n   * The type of promotion. When `access_type` is `vip`, the value for this field must be `batch`.\n   * \n   * Option descriptions:\n   *  * `batch` - Generates many random promo codes with one use each.\n   *  * `single` - Generates one promo code that can be used many times.\n   */\n    type: \"batch\" | \"single\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".ondemandId": {
        "rendered": "\n/** The ID of the On Demand. */\n ondemandId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OnDemandPromotion",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/ondemand/pages/{ondemand_id}/promotions/{promotion_id}": {
    "query": {},
    "body": {},
    "path": {
      ".ondemandId": {
        "rendered": "\n/** The ID of the On Demand. */\n ondemandId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".promotionId": {
        "rendered": "\n/** The ID of the promotion. */\n promotionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/ondemand/pages/{ondemand_id}/promotions/{promotion_id}": {
    "query": {},
    "body": {},
    "path": {
      ".ondemandId": {
        "rendered": "\n/** The ID of the On Demand. */\n ondemandId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".promotionId": {
        "rendered": "\n/** The ID of the promotion. */\n promotionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OnDemandPromotion",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/ondemand/pages/{ondemand_id}/promotions/{promotion_id}/codes": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".ondemandId": {
        "rendered": "\n/** The ID of the On Demand. */\n ondemandId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".promotionId": {
        "rendered": "\n/** The ID of the promotion. */\n promotionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OnDemandPromotionCode",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/ondemand/pages/{ondemand_id}/regions": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /** An array of country codes. */\n    countries?: (string)[],\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".ondemandId": {
        "rendered": "\n/** The ID of the On Demand. */\n ondemandId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(OnDemandRegion)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/ondemand/pages/{ondemand_id}/regions": {
    "query": {},
    "body": {},
    "path": {
      ".ondemandId": {
        "rendered": "\n/** The ID of the On Demand. */\n ondemandId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(OnDemandRegion)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/ondemand/pages/{ondemand_id}/regions": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** An array of country codes. */\n    countries: (string)[],\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".ondemandId": {
        "rendered": "\n/** The ID of the On Demand. */\n ondemandId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OnDemandRegion",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/ondemand/pages/{ondemand_id}/regions/{country}": {
    "query": {},
    "body": {},
    "path": {
      ".country": {
        "rendered": "\n/** The country code. */\n country: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".ondemandId": {
        "rendered": "\n/** The ID of the On Demand. */\n ondemandId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/ondemand/pages/{ondemand_id}/regions/{country}": {
    "query": {},
    "body": {},
    "path": {
      ".country": {
        "rendered": "\n/** The country code. */\n country: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".ondemandId": {
        "rendered": "\n/** The ID of the On Demand. */\n ondemandId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OnDemandRegion",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/ondemand/pages/{ondemand_id}/regions/{country}": {
    "query": {},
    "body": {},
    "path": {
      ".country": {
        "rendered": "\n/** The country code. */\n country: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".ondemandId": {
        "rendered": "\n/** The ID of the On Demand. */\n ondemandId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OnDemandRegion",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/ondemand/pages/{ondemand_id}/seasons": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The attribute by which to filter the results. */\n filter?: \"viewable\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The way to sort the results. */\n sort?: \"date\" | \"manual\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter": {
        "rendered": "\n/** The attribute by which to filter the results. */\n filter?: \"viewable\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"date\" | \"manual\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".ondemandId": {
        "rendered": "\n/** The ID of the On Demand. */\n ondemandId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(OnDemandSeason)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/ondemand/pages/{ondemand_id}/seasons/{season_id}": {
    "query": {},
    "body": {},
    "path": {
      ".ondemandId": {
        "rendered": "\n/** The ID of the On Demand. */\n ondemandId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".seasonId": {
        "rendered": "\n/** The ID of the season. */\n seasonId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OnDemandSeason",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/ondemand/pages/{ondemand_id}/seasons/{season_id}/videos": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The attribute by which to filter the results. */\n filter?: \"viewable\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The way to sort the results. */\n sort?: \"date\" | \"default\" | \"manual\" | \"name\" | \"purchase_time\" | \"release_date\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter": {
        "rendered": "\n/** The attribute by which to filter the results. */\n filter?: \"viewable\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"date\" | \"default\" | \"manual\" | \"name\" | \"purchase_time\" | \"release_date\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".ondemandId": {
        "rendered": "\n/** The ID of the On Demand. */\n ondemandId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".seasonId": {
        "rendered": "\n/** The ID of the season. */\n seasonId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Video)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/ondemand/pages/{ondemand_id}/videos": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The attribute by which to filter the results. */\n filter?: \"all\" | \"buy\" | \"expiring_soon\" | \"extra\" | \"main\" | \"main.viewable\" | \"rent\" | \"trailer\" | \"unwatched\" | \"viewable\" | \"watched\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The way to sort the results. */\n sort?: \"date\" | \"default\" | \"episode\" | \"manual\" | \"name\" | \"purchase_time\" | \"release_date\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter": {
        "rendered": "\n/** The attribute by which to filter the results. */\n filter?: \"all\" | \"buy\" | \"expiring_soon\" | \"extra\" | \"main\" | \"main.viewable\" | \"rent\" | \"trailer\" | \"unwatched\" | \"viewable\" | \"watched\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"date\" | \"default\" | \"episode\" | \"manual\" | \"name\" | \"purchase_time\" | \"release_date\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".ondemandId": {
        "rendered": "\n/** The ID of the On Demand. */\n ondemandId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Video)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/ondemand/pages/{ondemand_id}/videos/{video_id}": {
    "query": {},
    "body": {},
    "path": {
      ".ondemandId": {
        "rendered": "\n/** The ID of the On Demand. */\n ondemandId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/ondemand/pages/{ondemand_id}/videos/{video_id}": {
    "query": {},
    "body": {},
    "path": {
      ".ondemandId": {
        "rendered": "\n/** The ID of the On Demand. */\n ondemandId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Video",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/ondemand/pages/{ondemand_id}/videos/{video_id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n    buy?: {\n    price?: {\n  /**\n   * The purchase price of this video in AUD.\n   * @example 1.99\n   */\n    AUD?: number,\n  /**\n   * The purchase price of this video in CAD.\n   * @example 1.99\n   */\n    CAD?: number,\n  /**\n   * The purchase price of this video in CHF.\n   * @example 1.99\n   */\n    CHF?: number,\n  /**\n   * The purchase price of this video in DKK.\n   * @example 1.99\n   */\n    DKK?: number,\n  /**\n   * The purchase price of this video in EUR.\n   * @example 1.99\n   */\n    EUR?: number,\n  /**\n   * The purchase price of this video in GBP.\n   * @example 1.99\n   */\n    GBP?: number,\n  /**\n   * The purchase price of this video in JPY.\n   * @example 1.99\n   */\n    JPY?: number,\n  /**\n   * The purchase price of this video in KRW.\n   * @example 1.99\n   */\n    KRW?: number,\n  /**\n   * The purchase price of this video in NOK.\n   * @example 1.99\n   */\n    NOK?: number,\n  /**\n   * The purchase price of this video in PLN.\n   * @example 1.99\n   */\n    PLN?: number,\n  /**\n   * The purchase price of this video in SEK.\n   * @example 1.99\n   */\n    SEK?: number,\n  /**\n   * The purchase price of this video in USD. *Required if `buy.active` is true.\n   * @example 1.99\n   */\n    USD?: number,\n\n},\n\n},\n  /**\n   * The position of this video in the On Demand collection.\n   * @example 10\n   */\n    position?: number,\n  /**\n   * The video release year.\n   * @example 2018\n   */\n    release_year?: number,\n    rent?: {\n    price?: {\n  /**\n   * The rental price of this video in AUD.\n   * @example 0.99\n   */\n    AUD?: number,\n  /**\n   * The rental price of this video in CAD.\n   * @example 0.99\n   */\n    CAD?: number,\n  /**\n   * The rental price of this video in CHF.\n   * @example 0.99\n   */\n    CHF?: number,\n  /**\n   * The rental price of this video in DKK.\n   * @example 0.99\n   */\n    DKK?: number,\n  /**\n   * The rental price of this video in EUR.\n   * @example 0.99\n   */\n    EUR?: number,\n  /**\n   * The rental price of this video in GBP.\n   * @example 0.99\n   */\n    GBP?: number,\n  /**\n   * The rental price of this video in JPY.\n   * @example 0.99\n   */\n    JPY?: number,\n  /**\n   * The rental price of this video in KRW.\n   * @example 0.99\n   */\n    KRW?: number,\n  /**\n   * The rental price of this video in NOK.\n   * @example 0.99\n   */\n    NOK?: number,\n  /**\n   * The rental price of this video in PLN.\n   * @example 0.99\n   */\n    PLN?: number,\n  /**\n   * The rental price of this video in SEK.\n   * @example 0.99\n   */\n    SEK?: number,\n  /**\n   * The rental price of this video in USD. *Required if `rent.active` is true.\n   * @example 0.99\n   */\n    USD?: number,\n\n},\n\n},\n  /** The type of video that you are adding to the On Demand page. */\n    type: \"extra\" | \"main\" | \"trailer\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".ondemandId": {
        "rendered": "\n/** The ID of the On Demand. */\n ondemandId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OnDemandVideo",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/ondemand/regions": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(OnDemandRegion)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/ondemand/regions/{country}": {
    "query": {},
    "body": {},
    "path": {
      ".country": {
        "rendered": "\n/** The country code. */\n country: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OnDemandRegion",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/tags/{word}": {
    "query": {},
    "body": {},
    "path": {
      ".word": {
        "rendered": "\n/** The tag to return. */\n word: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Tag",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/tags/{word}/videos": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The way to sort the results. */\n sort?: \"created_time\" | \"duration\" | \"name\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"created_time\" | \"duration\" | \"name\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".word": {
        "rendered": "\n/** The tag word. */\n word: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Video)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/tokens": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "Auth",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The search query to use to filter the results. */\n query?: string, \n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\" | \"followers\" | \"relevant\" | \"videos\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query to use to filter the results. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\" | \"followers\" | \"relevant\" | \"videos\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(User)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{user_id}": {
    "query": {},
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "User",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/users/{user_id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /**\n   * The user's bio.\n   * @example \"This is where you will find videos and news updates from the staff\"\n   */\n    bio?: string,\n  /** A list of values describing the content in this video. Find the full list in the [/contentratings](https://developer.vimeo.com/api/endpoints/videos#GET/contentratings) endpoint. You must provide a comma-separated list if you are using a query string or an array if you are using JSON. */\n    content_filter?: (string)[],\n  /**\n   * The user's custom Vimeo URL slug.\n   * @example \"staff\"\n   */\n    link?: string,\n  /**\n   * The user's location.\n   * @example \"New York City\"\n   */\n    location?: string,\n  /**\n   * The user's display name.\n   * @example \"Vimeo Staff\"\n   */\n    name?: string,\n  /**\n   * The default password for all future videos that this user uploads. To use this field, the `videos.privacy.view` field must be `password`.\n   * @example \"hunter1\"\n   */\n    password?: string,\n    videos?: {\n    privacy?: {\n  /**\n   * Whether a user can add the video to an album, channel, or group. This value becomes the default add setting for all future videos uploaded by the user.\n   * @example \"true\"\n   */\n    add?: boolean,\n  /** Who can comment on the video. This value becomes the default comment setting for all future videos that this user uploads. */\n    comments?: \"anybody\" | \"contacts\" | \"nobody\",\n  /**\n   * Whether a user can download the video. This value becomes the default download setting for all future videos that this user uploads.\n   * @example \"true\"\n   */\n    download?: boolean,\n  /** The privacy for embed videos. The `whitelist` value enables you to define all valid embed domains. See our [documentation](https://developer.vimeo.com/api/endpoints/videos#/{video_id}/privacy/domains) for adding and removing domains. */\n    embed?: \"private\" | \"public\" | \"whitelist\",\n  /** Who can view the video. This value becomes the default view setting for all future videos that this user uploads. */\n    view?: \"anybody\" | \"contacts\" | \"disable\" | \"nobody\" | \"password\" | \"unlisted\" | \"users\",\n\n},\n\n},\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "User",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{user_id}/albums": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The search query to use to filter the results. */\n query?: string, \n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\" | \"duration\" | \"videos\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query to use to filter the results. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\" | \"duration\" | \"videos\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Album)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/users/{user_id}/albums": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * The hexadecimal code for the color of the player buttons.\n   * @example \"ff66ee\"\n   */\n    brand_color?: string,\n  /**\n   * The description of the album.\n   * @example \"Vimeo holiday videos!\"\n   */\n    description?: string,\n  /**\n   * Whether to hide Vimeo navigation when displaying the album.\n   * @example \"true\"\n   */\n    hide_nav?: boolean,\n  /** The type of layout for presenting the album. */\n    layout?: \"grid\" | \"player\",\n  /**\n   * The name of the album.\n   * @example \"Vimeo Holiday Videos!\"\n   */\n    name: string,\n  /**\n   * The album's password. Required only if **privacy** is `password`.\n   * @example \"hunter1\"\n   */\n    password?: string,\n  /** The privacy level of the album. */\n    privacy?: \"anybody\" | \"embed_only\" | \"password\",\n  /**\n   * Whether album videos should use the review mode URL.\n   * @example \"true\"\n   */\n    review_mode?: boolean,\n  /** The default sort order of the album's videos. */\n    sort?: \"added_first\" | \"added_last\" | \"alphabetical\" | \"arranged\" | \"comments\" | \"likes\" | \"newest\" | \"oldest\" | \"plays\",\n  /** The color theme of the album. */\n    theme?: \"dark\" | \"standard\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Album",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/users/{user_id}/albums/{album_id}": {
    "query": {},
    "body": {},
    "path": {
      ".albumId": {
        "rendered": "\n/** The ID of the album. */\n albumId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{user_id}/albums/{album_id}": {
    "query": {},
    "body": {},
    "path": {
      ".albumId": {
        "rendered": "\n/** The ID of the album. */\n albumId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Album",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/users/{user_id}/albums/{album_id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /**\n   * The hexadecimal code for the color of the player buttons.\n   * @example \"ff66ee\"\n   */\n    brand_color?: string,\n  /**\n   * The description of the album.\n   * @example \"Vimeo holiday videos!\"\n   */\n    description?: string,\n  /**\n   * The custom domain a user has selected for their album.\n   * @example \"mycustomdomain.com\"\n   */\n    domain?: string | null,\n  /**\n   * Whether to hide Vimeo navigation when displaying the album.\n   * @example \"true\"\n   */\n    hide_nav?: boolean,\n  /** The type of layout for presenting the album. */\n    layout?: \"grid\" | \"player\",\n  /**\n   * The name of the album.\n   * @example \"Vimeo Holiday Videos!\"\n   */\n    name?: string,\n  /**\n   * The album's password. Required only if **privacy** is `password`.\n   * @example \"hunter1\"\n   */\n    password?: string,\n  /** The privacy level of the album. */\n    privacy?: \"anybody\" | \"embed_only\" | \"password\",\n  /**\n   * Whether album videos should use the review mode URL.\n   * @example \"true\"\n   */\n    review_mode?: boolean,\n  /** The default sort order of the album's videos. */\n    sort?: \"added_first\" | \"added_last\" | \"alphabetical\" | \"arranged\" | \"comments\" | \"likes\" | \"newest\" | \"oldest\" | \"plays\",\n  /** The color theme of the album. */\n    theme?: \"dark\" | \"standard\",\n  /**\n   * The custom Vimeo URL a user has selected for their album.\n   * @example \"my-custom-url\"\n   */\n    url?: string | null,\n  /**\n   * Whether the user has opted in to use a custom domain for their album.\n   * @example \"true\"\n   */\n    use_custom_domain?: boolean,\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".albumId": {
        "rendered": "\n/** The ID of the album. */\n albumId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Album",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{user_id}/albums/{album_id}/custom_thumbnails": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".albumId": {
        "rendered": "\n/** The ID of the album. */\n albumId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Picture)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/users/{user_id}/albums/{album_id}/custom_thumbnails": {
    "query": {},
    "body": {},
    "path": {
      ".albumId": {
        "rendered": "\n/** The ID of the album. */\n albumId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Picture",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/users/{user_id}/albums/{album_id}/custom_thumbnails/{thumbnail_id}": {
    "query": {},
    "body": {},
    "path": {
      ".albumId": {
        "rendered": "\n/** The ID of the album. */\n albumId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".thumbnailId": {
        "rendered": "\n/** The ID of the custom thumbnail. */\n thumbnailId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{user_id}/albums/{album_id}/custom_thumbnails/{thumbnail_id}": {
    "query": {},
    "body": {},
    "path": {
      ".albumId": {
        "rendered": "\n/** The ID of the album. */\n albumId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".thumbnailId": {
        "rendered": "\n/** The ID of the custom thumbnail. */\n thumbnailId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Picture",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/users/{user_id}/albums/{album_id}/custom_thumbnails/{thumbnail_id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /**\n   * Whether to make this the active album thumbnail.\n   * @example \"true\"\n   */\n    active?: boolean,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".albumId": {
        "rendered": "\n/** The ID of the album. */\n albumId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".thumbnailId": {
        "rendered": "\n/** The ID of the custom thumbnail. */\n thumbnailId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Picture",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{user_id}/albums/{album_id}/logos": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".albumId": {
        "rendered": "\n/** The ID of the album. */\n albumId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Picture)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/users/{user_id}/albums/{album_id}/logos": {
    "query": {},
    "body": {},
    "path": {
      ".albumId": {
        "rendered": "\n/** The ID of the album. */\n albumId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Picture",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/users/{user_id}/albums/{album_id}/logos/{logo_id}": {
    "query": {},
    "body": {},
    "path": {
      ".albumId": {
        "rendered": "\n/** The ID of the album. */\n albumId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".logoId": {
        "rendered": "\n/** The ID of the custom logo. */\n logoId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{user_id}/albums/{album_id}/logos/{logo_id}": {
    "query": {},
    "body": {},
    "path": {
      ".albumId": {
        "rendered": "\n/** The ID of the album. */\n albumId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".logoId": {
        "rendered": "\n/** The ID of the custom logo. */\n logoId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Picture",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/users/{user_id}/albums/{album_id}/logos/{logo_id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /**\n   * Whether to make this the active album logo.\n   * @example \"true\"\n   */\n    active?: boolean,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".albumId": {
        "rendered": "\n/** The ID of the album. */\n albumId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".logoId": {
        "rendered": "\n/** The ID of the custom logo. */\n logoId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Picture",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{user_id}/albums/{album_id}/videos": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The page containing the video URI. */\n containing_uri?: string, \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The attribute by which to filter the results. */\n filter?: \"embeddable\", \n/** Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`. */\n filter_embeddable?: boolean, \n/** The page number of the results to show. */\n page?: number, \n/** The password of the album. */\n password?: string, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The search query to use to filter the results. */\n query?: string, \n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"comments\" | \"date\" | \"default\" | \"duration\" | \"likes\" | \"manual\" | \"modified_time\" | \"plays\", \n/** Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video's name. */\n weak_search?: boolean, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.containing_uri": {
        "rendered": "\n/** The page containing the video URI. */\n containing_uri?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter": {
        "rendered": "\n/** The attribute by which to filter the results. */\n filter?: \"embeddable\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.filter_embeddable": {
        "rendered": "\n/** Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`. */\n filter_embeddable?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.password": {
        "rendered": "\n/** The password of the album. */\n password?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query to use to filter the results. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"comments\" | \"date\" | \"default\" | \"duration\" | \"likes\" | \"manual\" | \"modified_time\" | \"plays\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.weak_search": {
        "rendered": "\n/** Whether to include private videos in the search. Please note that a separate search service provides this functionality. The service performs a partial text search on the video's name. */\n weak_search?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".albumId": {
        "rendered": "\n/** The ID of the album. */\n albumId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Video)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/users/{user_id}/albums/{album_id}/videos": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * A comma-separated list of video URIs.\n   * @example \"/videos/258684937,/videos/273576296\"\n   */\n    videos: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".albumId": {
        "rendered": "\n/** The ID of the album. */\n albumId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/users/{user_id}/albums/{album_id}/videos/{video_id}": {
    "query": {},
    "body": {},
    "path": {
      ".albumId": {
        "rendered": "\n/** The ID of the album. */\n albumId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{user_id}/albums/{album_id}/videos/{video_id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The password of the album. */\n password?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.password": {
        "rendered": "\n/** The password of the album. */\n password?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".albumId": {
        "rendered": "\n/** The ID of the album. */\n albumId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Video",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/users/{user_id}/albums/{album_id}/videos/{video_id}": {
    "query": {},
    "body": {},
    "path": {
      ".albumId": {
        "rendered": "\n/** The ID of the album. */\n albumId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/users/{user_id}/albums/{album_id}/videos/{video_id}/set_album_thumbnail": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /**\n   * The video frame time in seconds to use as the album thumbnail.\n   * @example 300\n   */\n    time_code?: number,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".albumId": {
        "rendered": "\n/** The ID of the album. */\n albumId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Album",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{user_id}/appearances": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The attribute by which to filter the results. */\n filter?: \"embeddable\", \n/** Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`. */\n filter_embeddable?: boolean, \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The search query to use to filter the results. */\n query?: string, \n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"comments\" | \"date\" | \"duration\" | \"likes\" | \"plays\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter": {
        "rendered": "\n/** The attribute by which to filter the results. */\n filter?: \"embeddable\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.filter_embeddable": {
        "rendered": "\n/** Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`. */\n filter_embeddable?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query to use to filter the results. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"comments\" | \"date\" | \"duration\" | \"likes\" | \"plays\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Video)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{user_id}/categories": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\" | \"name\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\" | \"name\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Category)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/users/{user_id}/categories/{category}": {
    "query": {},
    "body": {},
    "path": {
      ".category": {
        "rendered": "\n/** The name of the category. */\n category: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{user_id}/categories/{category}": {
    "query": {},
    "body": {},
    "path": {
      ".category": {
        "rendered": "\n/** The name of the category. */\n category: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/users/{user_id}/categories/{category}": {
    "query": {},
    "body": {},
    "path": {
      ".category": {
        "rendered": "\n/** The name of the category. */\n category: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{user_id}/channels": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The attribute by which to filter the results. */\n filter?: \"moderated\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The search query to use to filter the results. */\n query?: string, \n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\" | \"followers\" | \"videos\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter": {
        "rendered": "\n/** The attribute by which to filter the results. */\n filter?: \"moderated\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query to use to filter the results. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\" | \"followers\" | \"videos\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Channel)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/users/{user_id}/channels/{channel_id}": {
    "query": {},
    "body": {},
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{user_id}/channels/{channel_id}": {
    "query": {},
    "body": {},
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/users/{user_id}/channels/{channel_id}": {
    "query": {},
    "body": {},
    "path": {
      ".channelId": {
        "rendered": "\n/** The ID of the channel. */\n channelId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{user_id}/customlogos": {
    "query": {},
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Picture)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/users/{user_id}/customlogos": {
    "query": {},
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Picture",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{user_id}/customlogos/{logo_id}": {
    "query": {},
    "body": {},
    "path": {
      ".logoId": {
        "rendered": "\n/** The ID of the custom logo. */\n logoId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Picture",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{user_id}/feed": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Necessary for proper pagination. You shouldn't provide this value yourself, and instead use the pagination links in the feed response. Please see our [pagination documentation](https://developer.vimeo.com/api/common-formats#using-the-pagination-parameter) for more information. */\n offset?: string, \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The feed type. */\n type?: \"appears\" | \"category_featured\" | \"channel\" | \"facebook_feed\" | \"following\" | \"group\" | \"likes\" | \"ondemand_publish\" | \"share\" | \"tagged_with\" | \"twitter_timeline\" | \"uploads\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.offset": {
        "rendered": "\n/** Necessary for proper pagination. You shouldn't provide this value yourself, and instead use the pagination links in the feed response. Please see our [pagination documentation](https://developer.vimeo.com/api/common-formats#using-the-pagination-parameter) for more information. */\n offset?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.type": {
        "rendered": "\n/** The feed type. */\n type?: \"appears\" | \"category_featured\" | \"channel\" | \"facebook_feed\" | \"following\" | \"group\" | \"likes\" | \"ondemand_publish\" | \"share\" | \"tagged_with\" | \"twitter_timeline\" | \"uploads\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Activity31)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{user_id}/followers": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The search query to use to filter the results. */\n query?: string, \n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query to use to filter the results. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(User)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{user_id}/following": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The attribute by which to filter the results. */\n filter?: \"online\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The search query to use to filter the results. */\n query?: string, \n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter": {
        "rendered": "\n/** The attribute by which to filter the results. */\n filter?: \"online\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query to use to filter the results. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(User)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/users/{user_id}/following": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** An array of user URIs for the list of users to follow. */\n    users: (string)[],\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/users/{user_id}/following/{follow_user_id}": {
    "query": {},
    "body": {},
    "path": {
      ".followUserId": {
        "rendered": "\n/** The ID of the following user. */\n followUserId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{user_id}/following/{follow_user_id}": {
    "query": {},
    "body": {},
    "path": {
      ".followUserId": {
        "rendered": "\n/** The ID of the following user. */\n followUserId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/users/{user_id}/following/{follow_user_id}": {
    "query": {},
    "body": {},
    "path": {
      ".followUserId": {
        "rendered": "\n/** The ID of the following user. */\n followUserId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{user_id}/groups": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The attribute by which to filter the results. */\n filter?: \"moderated\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The search query to use to filter the results. */\n query?: string, \n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\" | \"members\" | \"videos\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter": {
        "rendered": "\n/** The attribute by which to filter the results. */\n filter?: \"moderated\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query to use to filter the results. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\" | \"members\" | \"videos\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Group)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/users/{user_id}/groups/{group_id}": {
    "query": {},
    "body": {},
    "path": {
      ".groupId": {
        "rendered": "\n/** The ID of the group. */\n groupId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{user_id}/groups/{group_id}": {
    "query": {},
    "body": {},
    "path": {
      ".groupId": {
        "rendered": "\n/** The ID of the group. */\n groupId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/users/{user_id}/groups/{group_id}": {
    "query": {},
    "body": {},
    "path": {
      ".groupId": {
        "rendered": "\n/** The ID of the group. */\n groupId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{user_id}/likes": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The attribute by which to filter the results. */\n filter?: \"embeddable\", \n/** Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`. */\n filter_embeddable?: boolean, \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The search query to use to filter the results. */\n query?: string, \n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"comments\" | \"date\" | \"duration\" | \"likes\" | \"plays\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter": {
        "rendered": "\n/** The attribute by which to filter the results. */\n filter?: \"embeddable\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.filter_embeddable": {
        "rendered": "\n/** Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`. */\n filter_embeddable?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query to use to filter the results. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"comments\" | \"date\" | \"duration\" | \"likes\" | \"plays\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Video)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/users/{user_id}/likes/{video_id}": {
    "query": {},
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{user_id}/likes/{video_id}": {
    "query": {},
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/users/{user_id}/likes/{video_id}": {
    "query": {},
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{user_id}/ondemand/pages": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The type of On Demand pages to return. */\n filter?: \"film\" | \"series\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The way to sort the results. */\n sort?: \"added\" | \"alphabetical\" | \"date\" | \"modified_time\" | \"name\" | \"publish.time\" | \"rating\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter": {
        "rendered": "\n/** The type of On Demand pages to return. */\n filter?: \"film\" | \"series\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"added\" | \"alphabetical\" | \"date\" | \"modified_time\" | \"name\" | \"publish.time\" | \"rating\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(OnDemandPage)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/users/{user_id}/ondemand/pages": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * An array of accepted currencies.\n   * \n   * Option descriptions:\n   *  * `AUD` - Australian Dollar\n   *  * `CAD` - Canadian Dollar\n   *  * `CHF` - Swiss Franc\n   *  * `DKK` - Danish Krone\n   *  * `EUR` - Euro\n   *  * `GBP` - British Pound\n   *  * `JPY` - Japanese Yen\n   *  * `KRW` - South Korean Won\n   *  * `NOK` - Norwegian Krone\n   *  * `PLN` - Polish Zloty\n   *  * `SEK` - Swedish Krona\n   *  * `USD` - US Dollar\n   */\n    accepted_currencies?: \"AUD\" | \"CAD\" | \"CHF\" | \"DKK\" | \"EUR\" | \"GBP\" | \"JPY\" | \"KRW\" | \"NOK\" | \"PLN\" | \"SEK\" | \"USD\",\n    buy?: {\n  /**\n   * Whether the Buy action is active. *Required if `rent.active` is false.\n   * @example \"true\"\n   */\n    active?: boolean,\n  /**\n   * Whether people who buy the video can download it. To use this field, `type` must be `film`.\n   * @example \"true\"\n   */\n    download?: boolean,\n    price?: {\n  /**\n   * The purchase price of this video in AUD.\n   * @example 2.99\n   */\n    AUD?: number,\n  /**\n   * The purchase price of this video in CAD.\n   * @example 2.99\n   */\n    CAD?: number,\n  /**\n   * The purchase price of this video in CHF.\n   * @example 2.99\n   */\n    CHF?: number,\n  /**\n   * The purchase price of this video in DKK.\n   * @example 2.99\n   */\n    DKK?: number,\n  /**\n   * The purchase price of this video in EUR.\n   * @example 2.99\n   */\n    EUR?: number,\n  /**\n   * The purchase price of this video in GBP.\n   * @example 2.99\n   */\n    GBP?: number,\n  /**\n   * The purchase price of this video in JPY.\n   * @example 2.99\n   */\n    JPY?: number,\n  /**\n   * The purchase price of this video in KRW.\n   * @example 2.99\n   */\n    KRW?: number,\n  /**\n   * The purchase price of this video in NOK.\n   * @example 2.99\n   */\n    NOK?: number,\n  /**\n   * The purchase price of this video in PLN.\n   * @example 2.99\n   */\n    PLN?: number,\n  /**\n   * The purchase price of this video in SEK.\n   * @example 2.99\n   */\n    SEK?: number,\n  /**\n   * The purchase price of this video in USD when `type` is `film`, or the purchase price of the entire collection in USD when `type` is `series`.\n   * @example 2.99\n   */\n    USD?: number,\n\n},\n\n},\n  /** One or more ratings, either as a comma-separated list or as a JSON array depending on the request format. */\n    content_rating: \"drugs\" | \"language\" | \"nudity\" | \"safe\" | \"unrated\" | \"violence\",\n  /**\n   * The description of the On Demand page.\n   * @example \"DARBY FOREVER follows the fantasies of Darby, a shopgirl at \"Bobbins & Notions\".\"\n   */\n    description: string,\n  /**\n   * The custom domain of the On Demand page.\n   * @example \"https://example.com\"\n   */\n    domain_link?: string,\n    episodes?: {\n    buy?: {\n  /**\n   * Whether episodes can be bought.\n   * @example \"true\"\n   */\n    active?: boolean,\n  /**\n   * Whether people who buy the episode can download it. To use this field, `type` must be `series`.\n   * @example \"true\"\n   */\n    download?: boolean,\n    price?: {\n  /**\n   * The purchase price per episode. *Required if `episodes.buy.active` is true.\n   * @example 1.99\n   */\n    USD?: number,\n\n},\n\n},\n    rent?: {\n  /**\n   * Whether episodes can be rented\n   * @example \"true\"\n   */\n    active?: boolean,\n  /** The period in which this episode can be rented for. */\n    period?: \"1 week\" | \"1 year\" | \"24 hour\" | \"3 month\" | \"30 day\" | \"48 hour\" | \"6 month\" | \"72 hour\",\n    price?: {\n  /**\n   * The default price to rent an episode. This field is applicable only when `type` is `series`. *Required if `episodes.rent.active` is true.\n   * @example 0.99\n   */\n    USD?: number,\n\n},\n\n},\n\n},\n  /**\n   * The custom string to use in this On Demand page's Vimeo URL.\n   * @example \"darbyforever\"\n   */\n    link?: string,\n  /**\n   * The name of the On Demand page.\n   * @example \"Darby Forever\"\n   */\n    name: string,\n    rent?: {\n  /**\n   * Whether the video can be rented. *Required if `buy.active` is false.\n   * @example \"true\"\n   */\n    active?: boolean,\n  /** The period in which this can be rented for. */\n    period?: \"1 week\" | \"1 year\" | \"24 hour\" | \"3 month\" | \"30 day\" | \"48 hour\" | \"6 month\" | \"72 hour\",\n    price?: {\n  /**\n   * The rental price of this video in AUD.\n   * @example 0.99\n   */\n    AUD?: number,\n  /**\n   * The rental price of this video in CAD.\n   * @example 0.99\n   */\n    CAD?: number,\n  /**\n   * The rental price of this video in CHF.\n   * @example 0.99\n   */\n    CHF?: number,\n  /**\n   * The rental price of this video in DKK.\n   * @example 0.99\n   */\n    DKK?: number,\n  /**\n   * The rental price of this video in EUR.\n   * @example 0.99\n   */\n    EUR?: number,\n  /**\n   * The rental price of this video in GBP.\n   * @example 0.99\n   */\n    GBP?: number,\n  /**\n   * The rental price of this video in JPY.\n   * @example 0.99\n   */\n    JPY?: number,\n  /**\n   * The rental price of this video in KRW.\n   * @example 0.99\n   */\n    KRW?: number,\n  /**\n   * The rental price of this video in NOK.\n   * @example 0.99\n   */\n    NOK?: number,\n  /**\n   * The rental price of this video in PLN.\n   * @example 0.99\n   */\n    PLN?: number,\n  /**\n   * The rental price of this video in SEK.\n   * @example 0.99\n   */\n    SEK?: number,\n  /**\n   * The rental price of this video in USD when `type` is `film`, or the rental price of the entire collection in USD when `type` is `series`.\n   * @example 0.99\n   */\n    USD?: number,\n\n},\n\n},\n    subscription?: {\n    monthly?: {\n  /**\n   * Whether monthly subscription is active. *Required if `rent.active` and `buy.active` are false.\n   * @example \"true\"\n   */\n    active?: boolean,\n    price?: {\n  /**\n   * The monthly subscription price in USD. *Required if `subscription.active` is true.\n   * @example 9.99\n   */\n    USD?: number,\n\n},\n\n},\n\n},\n  /** The type of On Demand page. */\n    type: \"film\" | \"series\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OnDemandPage",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{user_id}/ondemand/purchases": {
    "query": {},
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OnDemandPage",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{user_id}/pictures": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Picture)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/users/{user_id}/pictures": {
    "query": {},
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Picture",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/users/{user_id}/pictures/{portraitset_id}": {
    "query": {},
    "body": {},
    "path": {
      ".portraitsetId": {
        "rendered": "\n/** The ID of the picture. */\n portraitsetId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{user_id}/pictures/{portraitset_id}": {
    "query": {},
    "body": {},
    "path": {
      ".portraitsetId": {
        "rendered": "\n/** The ID of the picture. */\n portraitsetId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Picture",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/users/{user_id}/pictures/{portraitset_id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /**\n   * Whether the picture is the user's active portrait.\n   * @example \"true\"\n   */\n    active?: boolean,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".portraitsetId": {
        "rendered": "\n/** The ID of the picture. */\n portraitsetId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Picture",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{user_id}/portfolios": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The search query to use to filter the results. */\n query?: string, \n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query to use to filter the results. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Portfolio)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{user_id}/portfolios/{portfolio_id}": {
    "query": {},
    "body": {},
    "path": {
      ".portfolioId": {
        "rendered": "\n/** The ID of the portfolio. */\n portfolioId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Portfolio",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{user_id}/portfolios/{portfolio_id}/videos": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The page that contains the video URI. */\n containing_uri?: string, \n/** The attribute by which to filter the results. */\n filter?: \"embeddable\", \n/** Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`. */\n filter_embeddable?: boolean, \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The way to sort the results.\n\nOption descriptions:\n * `default` - This will sort to the default sort set on the portfolio.\n */\n sort?: \"alphabetical\" | \"comments\" | \"date\" | \"default\" | \"likes\" | \"manual\" | \"plays\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.containing_uri": {
        "rendered": "\n/** The page that contains the video URI. */\n containing_uri?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.filter": {
        "rendered": "\n/** The attribute by which to filter the results. */\n filter?: \"embeddable\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.filter_embeddable": {
        "rendered": "\n/** Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`. */\n filter_embeddable?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results.\n\nOption descriptions:\n * `default` - This will sort to the default sort set on the portfolio.\n */\n sort?: \"alphabetical\" | \"comments\" | \"date\" | \"default\" | \"likes\" | \"manual\" | \"plays\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".portfolioId": {
        "rendered": "\n/** The ID of the portfolio. */\n portfolioId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Video)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/users/{user_id}/portfolios/{portfolio_id}/videos/{video_id}": {
    "query": {},
    "body": {},
    "path": {
      ".portfolioId": {
        "rendered": "\n/** The ID of the portfolio. */\n portfolioId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{user_id}/portfolios/{portfolio_id}/videos/{video_id}": {
    "query": {},
    "body": {},
    "path": {
      ".portfolioId": {
        "rendered": "\n/** The ID of the portfolio. */\n portfolioId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Video",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/users/{user_id}/portfolios/{portfolio_id}/videos/{video_id}": {
    "query": {},
    "body": {},
    "path": {
      ".portfolioId": {
        "rendered": "\n/** The ID of the portfolio. */\n portfolioId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{user_id}/presets": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Presets)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{user_id}/presets/{preset_id}": {
    "query": {},
    "body": {},
    "path": {
      ".presetId": {
        "rendered": "\n/** The ID of the preset. */\n presetId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Presets",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/users/{user_id}/presets/{preset_id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /** Disable the outro. */\n    outro?: \"nothing\",\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".presetId": {
        "rendered": "\n/** The ID of the preset. */\n presetId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Presets",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{user_id}/presets/{preset_id}/videos": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".presetId": {
        "rendered": "\n/** The ID of the preset. */\n presetId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Video)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{user_id}/projects": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The way to sort the results. */\n sort?: \"date\" | \"default\" | \"modified_time\" | \"name\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"date\" | \"default\" | \"modified_time\" | \"name\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Project)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/users/{user_id}/projects": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * The name of the project.\n   * @example \"Rough cuts\"\n   */\n    name: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Project",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/users/{user_id}/projects/{project_id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Whether to delete all the videos in the project along with the project itself. */\n should_delete_clips?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.should_delete_clips": {
        "rendered": "\n/** Whether to delete all the videos in the project along with the project itself. */\n should_delete_clips?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".projectId": {
        "rendered": "\n/** The ID of the project. */\n projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{user_id}/projects/{project_id}": {
    "query": {},
    "body": {},
    "path": {
      ".projectId": {
        "rendered": "\n/** The ID of the project. */\n projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Project",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/users/{user_id}/projects/{project_id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * The name of the project.\n   * @example \"Rough cuts\"\n   */\n    name: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".projectId": {
        "rendered": "\n/** The ID of the project. */\n projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Project",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/users/{user_id}/projects/{project_id}/videos": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Whether to delete the videos when removing them from the project. */\n should_delete_clips?: boolean, \n/** A comma-separated list of the video URIs to remove. */\n uris: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.should_delete_clips": {
        "rendered": "\n/** Whether to delete the videos when removing them from the project. */\n should_delete_clips?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uris": {
        "rendered": "\n/** A comma-separated list of the video URIs to remove. */\n uris: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".projectId": {
        "rendered": "\n/** The ID of the project. */\n projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{user_id}/projects/{project_id}/videos": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\" | \"default\" | \"duration\" | \"last_user_action_event_date\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\" | \"default\" | \"duration\" | \"last_user_action_event_date\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".projectId": {
        "rendered": "\n/** The ID of the project. */\n projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Video)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/users/{user_id}/projects/{project_id}/videos": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A comma-separated list of video URIs to add. */\n uris: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uris": {
        "rendered": "\n/** A comma-separated list of video URIs to add. */\n uris: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".projectId": {
        "rendered": "\n/** The ID of the project. */\n projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/users/{user_id}/projects/{project_id}/videos/{video_id}": {
    "query": {},
    "body": {},
    "path": {
      ".projectId": {
        "rendered": "\n/** The ID of the project. */\n projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/users/{user_id}/projects/{project_id}/videos/{video_id}": {
    "query": {},
    "body": {},
    "path": {
      ".projectId": {
        "rendered": "\n/** The ID of the project. */\n projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/users/{user_id}/uploads/{upload}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The crypto signature of the completed upload. */\n signature: string, \n/** The ID of the uploaded file. */\n video_file_id: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.signature": {
        "rendered": "\n/** The crypto signature of the completed upload. */\n signature: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.video_file_id": {
        "rendered": "\n/** The ID of the uploaded file. */\n video_file_id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".upload": {
        "rendered": "\n/** The ID of the upload attempt. */\n upload: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{user_id}/uploads/{upload}": {
    "query": {},
    "body": {},
    "path": {
      ".upload": {
        "rendered": "\n/** The ID of the upload attempt. */\n upload: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "UploadAttempt",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{user_id}/videos": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The page that contains the video URI. Only available when not paired with `query`. */\n containing_uri?: string, \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The attribute by which to filter the results. */\n filter?: \"app_only\" | \"embeddable\" | \"featured\" | \"playable\", \n/** Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`. */\n filter_embeddable?: boolean, \n/** Whether to filter by all playable videos or by all videos that are not  playable. */\n filter_playable?: boolean, \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The search query to use to filter the results. */\n query?: string, \n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"comments\" | \"date\" | \"default\" | \"duration\" | \"last_user_action_event_date\" | \"likes\" | \"modified_time\" | \"plays\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.containing_uri": {
        "rendered": "\n/** The page that contains the video URI. Only available when not paired with `query`. */\n containing_uri?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter": {
        "rendered": "\n/** The attribute by which to filter the results. */\n filter?: \"app_only\" | \"embeddable\" | \"featured\" | \"playable\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter_embeddable": {
        "rendered": "\n/** Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`. */\n filter_embeddable?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.filter_playable": {
        "rendered": "\n/** Whether to filter by all playable videos or by all videos that are not  playable. */\n filter_playable?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query to use to filter the results. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"comments\" | \"date\" | \"default\" | \"duration\" | \"last_user_action_event_date\" | \"likes\" | \"modified_time\" | \"plays\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Video)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/users/{user_id}/videos": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** A list of values describing the content in this video. Find the full list in the [/contentratings](https://developer.vimeo.com/api/endpoints/videos#GET/contentratings) endpoint. */\n    content_rating?: (string)[],\n  /**\n   * The description of the video.\n   * @example \"A celebration of 10 years of Staff Picks.\"\n   */\n    description?: string,\n    embed?: {\n    buttons?: {\n  /**\n   * Show or hide the Embed button.\n   * @example \"true\"\n   */\n    embed?: boolean,\n  /**\n   * Show or hide the Fullscreen button.\n   * @example \"true\"\n   */\n    fullscreen?: boolean,\n  /**\n   * Show or hide the HD button.\n   * @example \"true\"\n   */\n    hd?: boolean,\n  /**\n   * Show or hide the Like button.\n   * @example \"true\"\n   */\n    like?: boolean,\n  /**\n   * Show or hide the Scaling button (shown only in Fullscreen mode).\n   * @example \"true\"\n   */\n    scaling?: boolean,\n  /**\n   * Show or hide the Share button.\n   * @example \"true\"\n   */\n    share?: boolean,\n  /**\n   * Show or hide the Watch Later button.\n   * @example \"true\"\n   */\n    watchlater?: boolean,\n\n},\n  /**\n   * The main color of the embed player.\n   * @example \"#1ab7ea\"\n   */\n    color?: string,\n    logos?: {\n    custom?: {\n  /**\n   * Show or hide your custom logo.\n   * @example \"true\"\n   */\n    active?: boolean,\n  /**\n   * The URL that loads when the user clicks your custom logo.\n   * @example \"https://example.com\"\n   */\n    link?: string,\n  /**\n   * Whether always to show the custom logo or to hide it after time with the rest of the UI.\n   * @example \"true\"\n   */\n    sticky?: boolean,\n\n},\n  /**\n   * Show or hide the Vimeo logo.\n   * @example \"true\"\n   */\n    vimeo?: boolean,\n\n},\n  /**\n   * Show or hide the playbar.\n   * @example \"true\"\n   */\n    playbar?: boolean,\n    title?: {\n  /** Show or hide the video title, or enable the user to determine whether the video title appears. */\n    name?: \"hide\" | \"show\" | \"user\",\n  /** Show or hide the owner information, or enable the user to determine whether the owner information appears. */\n    owner?: \"hide\" | \"show\" | \"user\",\n  /** Show or hide the owner portrait, or enable the user to determine whether the owner portrait appears. */\n    portrait?: \"hide\" | \"show\" | \"user\",\n\n},\n  /**\n   * Show or hide the volume selector.\n   * @example \"true\"\n   */\n    volume?: boolean,\n\n},\n  /** The Creative Commons license. */\n    license?: \"by\" | \"by-nc\" | \"by-nc-nd\" | \"by-nc-sa\" | \"by-nd\" | \"by-sa\" | \"cc0\",\n  /**\n   * The video's default language. For a full list of valid languages, use the [/languages?filter=texttracks](https://developer.vimeo.com/api/endpoints/videos#GET/languages) endpoint.\n   * @example \"en_US\"\n   */\n    locale?: string,\n  /**\n   * The title of the video.\n   * @example \"Celebrating 10 Years of Staff Picks\"\n   */\n    name?: string,\n  /**\n   * The password. When you set `privacy.view` to `password`, you must provide the password as an additional parameter.\n   * @example \"hunter1\"\n   */\n    password?: string,\n    privacy?: {\n  /**\n   * Whether a user can add the video to an album, channel, or group.\n   * @example \"true\"\n   */\n    add?: boolean,\n  /** The privacy level required to comment on the video. */\n    comments?: \"anybody\" | \"contacts\" | \"nobody\",\n  /**\n   * Whether a user can download the video. Not available to users with a Basic membership\n   * @example \"true\"\n   */\n    download?: boolean,\n  /** The video's embed settings. The `whitelist` value enables you to define all valid embed domains. See our [documentation](https://developer.vimeo.com/api/endpoints/videos#/{video_id}/privacy/domains) for details on adding and removing domains. */\n    embed?: \"private\" | \"public\" | \"whitelist\",\n  /** The video's privacy setting. When privacy is `users`, `application/json` is the only valid content type. Basic users can't set privacy to `unlisted`. */\n    view?: \"anybody\" | \"contacts\" | \"disable\" | \"nobody\" | \"password\" | \"unlisted\" | \"users\",\n\n},\n    ratings?: {\n    mpaa?: {\n  /**\n   * The reason for the video's MPAA rating.\n   * \n   * Option descriptions:\n   *  * `at` - Adult themes\n   *  * `bn` - Brief nudity\n   *  * `n` - Nudity\n   *  * `sl` - Strong language\n   *  * `ss` - Sexual situations\n   *  * `v` - Violence\n   */\n    reason?: \"at\" | \"bn\" | \"n\" | \"sl\" | \"ss\" | \"v\",\n\n},\n    tv?: {\n  /**\n   * The reason for the video's TV rating.\n   * \n   * Option descriptions:\n   *  * `d` - Suggestive dialogue\n   *  * `fv` - Fantasy violence\n   *  * `l` - Language\n   *  * `ss` - Sexual situations\n   *  * `v` - Violence\n   */\n    reason?: \"d\" | \"fv\" | \"l\" | \"ss\" | \"v\",\n\n},\n\n},\n    review_page?: {\n  /**\n   * Enable or disable video review.\n   * @example \"true\"\n   */\n    active?: boolean,\n\n},\n    spatial?: {\n  /** The 360 director timeline. */\n    director_timeline?: ({\n  /**\n   * The timeline pitch. This value must be between -90 and 90.\n   * @example 70\n   */\n    pitch: number,\n  /** The timeline roll. */\n    roll?: number,\n  /**\n   * The 360 director timeline time code.\n   * @example 5\n   */\n    time_code: number,\n  /**\n   * The timeline yaw. This value must be between 0 and 360.\n   * @example 125\n   */\n    yaw: number,\n\n})[],\n  /**\n   * The 360 field of view: default 50, minimum 30, maximum 90.\n   * @example 50\n   */\n    field_of_view?: number,\n  /** The 360 spatial projection. */\n    projection?: \"cubical\" | \"cylindrical\" | \"dome\" | \"equirectangular\" | \"pyramid\",\n  /** The 360 spatial stereo format. */\n    stereo_format?: \"left-right\" | \"mono\" | \"top-bottom\",\n\n},\n    upload: {\n  /** The upload approach. */\n    approach: \"post\" | \"pull\" | \"streaming\" | \"tus\",\n  /**\n   * The public URL at which the video is hosted. The URL must be valid for at least 24 hours. Use this parameter when `approach` is `pull`.\n   * @example \"https://example.com/video.mp4\"\n   */\n    link?: string,\n  /**\n   * The app's redirect URL. Use this parameter when `approach` is `post`.\n   * @example \"https://example.com\"\n   */\n    redirect_url?: string,\n  /**\n   * The size in bytes of the video to upload.\n   * @example \"13623861\"\n   */\n    size?: string,\n\n},\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Video",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{user_id}/videos/{video_id}": {
    "query": {},
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Video",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{user_id}/watchlater": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The attribute by which to filter the results. */\n filter?: \"embeddable\", \n/** Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`. */\n filter_embeddable?: boolean, \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The search query to use to filter the results. */\n query?: string, \n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"comments\" | \"date\" | \"duration\" | \"likes\" | \"plays\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter": {
        "rendered": "\n/** The attribute by which to filter the results. */\n filter?: \"embeddable\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.filter_embeddable": {
        "rendered": "\n/** Whether to filter the results by embeddable videos (`true`) or non-embeddable videos (`false`). Required only if **filter** is `embeddable`. */\n filter_embeddable?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query to use to filter the results. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"comments\" | \"date\" | \"duration\" | \"likes\" | \"plays\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Video)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/users/{user_id}/watchlater/{video_id}": {
    "query": {},
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{user_id}/watchlater/{video_id}": {
    "query": {},
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Video",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/users/{user_id}/watchlater/{video_id}": {
    "query": {},
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/videos": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The attribute by which to filter the results. `CC` and related filters target videos with the corresponding Creative Commons licenses. For more information, see our [Creative Commons](https://vimeo.com/creativecommons) page. */\n filter?: \"CC\" | \"CC-BY\" | \"CC-BY-NC\" | \"CC-BY-NC-ND\" | \"CC-BY-NC-SA\" | \"CC-BY-ND\" | \"CC-BY-SA\" | \"CC0\" | \"categories\" | \"duration\" | \"in-progress\" | \"minimum_likes\" | \"trending\" | \"upload_date\", \n/** A comma-separated list of video URLs to find. */\n links?: string, \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** Search query. */\n query: string, \n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"comments\" | \"date\" | \"duration\" | \"likes\" | \"plays\" | \"relevant\", \n/** The comma-separated list of videos to find. */\n uris?: string, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter": {
        "rendered": "\n/** The attribute by which to filter the results. `CC` and related filters target videos with the corresponding Creative Commons licenses. For more information, see our [Creative Commons](https://vimeo.com/creativecommons) page. */\n filter?: \"CC\" | \"CC-BY\" | \"CC-BY-NC\" | \"CC-BY-NC-ND\" | \"CC-BY-NC-SA\" | \"CC-BY-ND\" | \"CC-BY-SA\" | \"CC0\" | \"categories\" | \"duration\" | \"in-progress\" | \"minimum_likes\" | \"trending\" | \"upload_date\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.links": {
        "rendered": "\n/** A comma-separated list of video URLs to find. */\n links?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** Search query. */\n query: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"comments\" | \"date\" | \"duration\" | \"likes\" | \"plays\" | \"relevant\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.uris": {
        "rendered": "\n/** The comma-separated list of videos to find. */\n uris?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Video)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/videos/{video_id}": {
    "query": {},
    "body": {},
    "path": {
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/videos/{video_id}": {
    "query": {},
    "body": {},
    "path": {
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Video",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/videos/{video_id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** A list of values describing the content in this video. You can find the full list in the [`/contentratings`](https://developer.vimeo.com/api/endpoints/videos#GET/contentratings) endpoint. */\n    content_rating?: (string)[],\n  /**\n   * The new description of the video.\n   * @example \"A celebration of 10 years of Staff Picks.\"\n   */\n    description?: string,\n    embed?: {\n    buttons?: {\n  /**\n   * Show or hide the Embed button.\n   * @example \"true\"\n   */\n    embed?: boolean,\n  /**\n   * Show or hide the Fullscreen button.\n   * @example \"true\"\n   */\n    fullscreen?: boolean,\n  /**\n   * Show or hide the HD button.\n   * @example \"true\"\n   */\n    hd?: boolean,\n  /**\n   * Show or hide the Like button.\n   * @example \"true\"\n   */\n    like?: boolean,\n  /**\n   * Show or hide the Scaling button (shown only in Fullscreen mode).\n   * @example \"true\"\n   */\n    scaling?: boolean,\n  /**\n   * Show or hide the Share button.\n   * @example \"true\"\n   */\n    share?: boolean,\n  /**\n   * Show or hide the Watch Later button.\n   * @example \"true\"\n   */\n    watchlater?: boolean,\n\n},\n  /**\n   * The main color of the embed player.\n   * @example \"#1ab7ea\"\n   */\n    color?: string,\n    logos?: {\n    custom?: {\n  /**\n   * Show or hide your custom logo.\n   * @example \"true\"\n   */\n    active?: boolean,\n  /**\n   * The URL that loads when the user clicks your custom logo.\n   * @example \"https://example.com\"\n   */\n    link?: string,\n  /**\n   * Whether always to show the custom logo or to hide it after time with the rest of the UI.\n   * @example \"true\"\n   */\n    sticky?: boolean,\n\n},\n  /**\n   * Show or hide the Vimeo logo.\n   * @example \"true\"\n   */\n    vimeo?: boolean,\n\n},\n  /**\n   * Show or hide the playbar.\n   * @example \"true\"\n   */\n    playbar?: boolean,\n    title?: {\n  /** Show or hide the video title, or enable the user to determine whether the video title appears. */\n    name?: \"hide\" | \"show\" | \"user\",\n  /** Show or hide the owner information, or enable the user to determine whether the owner information appears. */\n    owner?: \"hide\" | \"show\" | \"user\",\n  /** Show or hide the owner portrait, or enable the user to determine whether the owner portrait appears. */\n    portrait?: \"hide\" | \"show\" | \"user\",\n\n},\n  /**\n   * Show or hide the volume selector.\n   * @example \"true\"\n   */\n    volume?: boolean,\n\n},\n  /** The Creative Commons license. */\n    license?: \"by\" | \"by-nc\" | \"by-nc-nd\" | \"by-nc-sa\" | \"by-nd\" | \"by-sa\" | \"cc0\",\n  /**\n   * The video's default language. For a full list of valid languages, use the [/languages?filter=texttracks](https://developer.vimeo.com/api/endpoints/videos#GET/languages) endpoint.\n   * @example \"en-US\"\n   */\n    locale?: string,\n  /**\n   * The new title for the video.\n   * @example \"Celebrating 10 Years of Staff Picks\"\n   */\n    name?: string,\n  /**\n   * The password. When you set `privacy.view` to `password`, you must provide the password as an additional parameter.\n   * @example \"hunter1\"\n   */\n    password?: string,\n    privacy?: {\n  /**\n   * Whether a user can add the video to an album, channel, or group.\n   * @example \"true\"\n   */\n    add?: boolean,\n  /** The privacy level required to comment on the video. */\n    comments?: \"anybody\" | \"contacts\" | \"nobody\",\n  /**\n   * Whether a user can download the video. Not available to users with a Basic membership.\n   * @example \"true\"\n   */\n    download?: boolean,\n  /** The video's new embed settings. The `whitelist` value enables you to define all valid embed domains. See our [documentation](https://developer.vimeo.com/api/endpoints/videos#/{video_id}/privacy/domains) for details on adding and removing domains. */\n    embed?: \"private\" | \"public\" | \"whitelist\",\n  /** The video's new privacy setting. When privacy is `users`, `application/json` is the only valid content type. Basic users can't set privacy to `unlisted`. */\n    view?: \"anybody\" | \"contacts\" | \"disable\" | \"nobody\" | \"password\" | \"unlisted\" | \"users\",\n\n},\n    ratings?: {\n    mpaa?: {\n  /**\n   * The reason for the video's MPAA rating.\n   * \n   * Option descriptions:\n   *  * `at` - Adult themes\n   *  * `bn` - Brief nudity\n   *  * `n` - Nudity\n   *  * `sl` - Strong language\n   *  * `ss` - Sexual situations\n   *  * `v` - Violence\n   */\n    reason?: \"at\" | \"bn\" | \"n\" | \"sl\" | \"ss\" | \"v\",\n\n},\n    tv?: {\n  /**\n   * The reason for the video's TV rating.\n   * \n   * Option descriptions:\n   *  * `d` - Suggestive dialogue\n   *  * `fv` - Fantasy violence\n   *  * `l` - Language\n   *  * `ss` - Sexual situations\n   *  * `v` - Violence\n   */\n    reason?: \"d\" | \"fv\" | \"l\" | \"ss\" | \"v\",\n\n},\n\n},\n    review_page?: {\n  /**\n   * Enable or disable video review.\n   * @example \"true\"\n   */\n    active?: boolean,\n\n},\n    spatial?: {\n  /** The 360 director timeline. */\n    director_timeline?: ({\n  /**\n   * The timeline pitch. This value must be between -90 and 90.\n   * @example 70\n   */\n    pitch: number,\n  /** The timeline roll. */\n    roll?: number,\n  /**\n   * The 360 director timeline time code.\n   * @example 5\n   */\n    time_code: number,\n  /**\n   * The timeline yaw. This value must be between 0 and 360.\n   * @example 125\n   */\n    yaw: number,\n\n})[],\n  /**\n   * The 360 field of view: default 50, minimum 30, maximum 90.\n   * @example 50\n   */\n    field_of_view?: number,\n  /** The 360 spatial projection. */\n    projection?: \"cubical\" | \"cylindrical\" | \"dome\" | \"equirectangular\" | \"pyramid\",\n  /** The 360 spatial stereo format. */\n    stereo_format?: \"left-right\" | \"mono\" | \"top-bottom\",\n\n},\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Video",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/videos/{video_id}/available_channels": {
    "query": {},
    "body": {},
    "path": {
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Channel)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/videos/{video_id}/categories": {
    "query": {},
    "body": {},
    "path": {
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Category)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/videos/{video_id}/categories": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The array of the names of the categories that you're suggesting. */\n    category: (string)[],\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Category",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/videos/{video_id}/comments": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Comment)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/videos/{video_id}/comments": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * The text of the comment.\n   * @example \"I love this!\"\n   */\n    text: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Comment",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/videos/{video_id}/comments/{comment_id}": {
    "query": {},
    "body": {},
    "path": {
      ".commentId": {
        "rendered": "\n/** The ID of the comment. */\n commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/videos/{video_id}/comments/{comment_id}": {
    "query": {},
    "body": {},
    "path": {
      ".commentId": {
        "rendered": "\n/** The ID of the comment. */\n commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Comment",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/videos/{video_id}/comments/{comment_id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * The next text of the comment.\n   * @example \"I love this!\"\n   */\n    text: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".commentId": {
        "rendered": "\n/** The ID of the comment. */\n commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Comment",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/videos/{video_id}/comments/{comment_id}/replies": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".commentId": {
        "rendered": "\n/** The ID of the comment. */\n commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Comment)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/videos/{video_id}/comments/{comment_id}/replies": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * The reply to the comment.\n   * @example \"I love this!\"\n   */\n    text: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".commentId": {
        "rendered": "\n/** The ID of the comment. */\n commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Comment",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/videos/{video_id}/credits": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The search query to use to filter the results. */\n query?: string, \n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query to use to filter the results. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Credit)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/videos/{video_id}/credits": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * The email address of the credited person.\n   * @example \"user@example.com\"\n   */\n    email: string,\n  /**\n   * The name of the credited person.\n   * @example \"Sam Doe\"\n   */\n    name: string,\n  /**\n   * The role of the credited person.\n   * @example \"Producer\"\n   */\n    role: string,\n  /**\n   * The URI of the Vimeo user who should be given credit in this video.\n   * @example \"/users/152184\"\n   */\n    user_uri: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Credit",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/videos/{video_id}/credits/{credit_id}": {
    "query": {},
    "body": {},
    "path": {
      ".creditId": {
        "rendered": "\n/** The ID of the credit. */\n creditId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/videos/{video_id}/credits/{credit_id}": {
    "query": {},
    "body": {},
    "path": {
      ".creditId": {
        "rendered": "\n/** The ID of the credit. */\n creditId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Credit",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/videos/{video_id}/credits/{credit_id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /**\n   * The name of the person being credited.\n   * @example \"Sam Doe\"\n   */\n    name?: string,\n  /**\n   * The role of the person being credited.\n   * @example \"Producer\"\n   */\n    role?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".creditId": {
        "rendered": "\n/** The ID of the credit. */\n creditId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Credit",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/videos/{video_id}/likes": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, \n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The sort direction of the results. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The way to sort the results. */\n sort?: \"alphabetical\" | \"date\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(User)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/videos/{video_id}/pictures": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Picture)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/videos/{video_id}/pictures": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /**\n   * Whether the image created by the `time` field should be the default thumbnail for the video.\n   * @example \"true\"\n   */\n    active?: boolean,\n  /**\n   * Creates an image of the video from the given time offset.\n   * @example 300\n   */\n    time?: number,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Picture",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/videos/{video_id}/pictures/{picture_id}": {
    "query": {},
    "body": {},
    "path": {
      ".pictureId": {
        "rendered": "\n/** The ID of the picture. */\n pictureId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/videos/{video_id}/pictures/{picture_id}": {
    "query": {},
    "body": {},
    "path": {
      ".pictureId": {
        "rendered": "\n/** The ID of the picture. */\n pictureId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Picture",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/videos/{video_id}/pictures/{picture_id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /**\n   * Whether this thumbnail is the default.\n   * @example \"true\"\n   */\n    active?: boolean,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".pictureId": {
        "rendered": "\n/** The ID of the picture. */\n pictureId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Picture",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/videos/{video_id}/presets/{preset_id}": {
    "query": {},
    "body": {},
    "path": {
      ".presetId": {
        "rendered": "\n/** The ID of the preset. */\n presetId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/videos/{video_id}/presets/{preset_id}": {
    "query": {},
    "body": {},
    "path": {
      ".presetId": {
        "rendered": "\n/** The ID of the preset. */\n presetId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/videos/{video_id}/presets/{preset_id}": {
    "query": {},
    "body": {},
    "path": {
      ".presetId": {
        "rendered": "\n/** The ID of the preset. */\n presetId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/videos/{video_id}/privacy/domains": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Domain)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/videos/{video_id}/privacy/domains/{domain}": {
    "query": {},
    "body": {},
    "path": {
      ".domain": {
        "rendered": "\n/** The domain name. */\n domain: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/videos/{video_id}/privacy/domains/{domain}": {
    "query": {},
    "body": {},
    "path": {
      ".domain": {
        "rendered": "\n/** The domain name. */\n domain: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/videos/{video_id}/privacy/users": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(User)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/videos/{video_id}/privacy/users": {
    "query": {},
    "body": {},
    "path": {
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(User)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/videos/{video_id}/privacy/users/{user_id}": {
    "query": {},
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/videos/{video_id}/privacy/users/{user_id}": {
    "query": {},
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The ID of the user. */\n userId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "User",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/videos/{video_id}/tags": {
    "query": {},
    "body": {},
    "path": {
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Tag)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/videos/{video_id}/tags": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * The name of the tag to apply. See our documentation on [batch requests](https://developer.vimeo.com/api/common-formats#batch-requests) for more information.\n   * @example \"awesome\"\n   */\n    name: string,\n  /**\n   * The page number of the results to show.\n   * @example 1\n   */\n    page?: number,\n  /**\n   * The number of items to show on each page of results, up to a maximum of 100.\n   * @example 10\n   */\n    per_page?: number,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Tag)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/videos/{video_id}/tags/{word}": {
    "query": {},
    "body": {},
    "path": {
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".word": {
        "rendered": "\n/** The tag word. */\n word: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/videos/{video_id}/tags/{word}": {
    "query": {},
    "body": {},
    "path": {
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".word": {
        "rendered": "\n/** The tag word. */\n word: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Tag",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/videos/{video_id}/tags/{word}": {
    "query": {},
    "body": {},
    "path": {
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".word": {
        "rendered": "\n/** The tag word. */\n word: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Tag",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/videos/{video_id}/texttracks": {
    "query": {},
    "body": {},
    "path": {
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(TextTrack)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/videos/{video_id}/texttracks": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * Active text tracks appear in the player and are visible to other users. Only one text track per language can be active.\n   * @example \"true\"\n   */\n    active?: boolean,\n  /**\n   * The language of the text track. For a complete list of valid languages, use the [/languages?filter=texttracks](https://developer.vimeo.com/api/endpoints/videos#GET/languages) endpoint.\n   * @example \"en-US\"\n   */\n    language: string,\n  /**\n   * The name of the text track.\n   * @example \"Commentary\"\n   */\n    name: string,\n  /** The type of the text track. */\n    type: \"captions\" | \"chapters\" | \"descriptions\" | \"metadata\" | \"subtitles\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TextTrack",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/videos/{video_id}/texttracks/{texttrack_id}": {
    "query": {},
    "body": {},
    "path": {
      ".texttrackId": {
        "rendered": "\n/** The ID of the text track. */\n texttrackId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/videos/{video_id}/texttracks/{texttrack_id}": {
    "query": {},
    "body": {},
    "path": {
      ".texttrackId": {
        "rendered": "\n/** The ID of the text track. */\n texttrackId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TextTrack",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/videos/{video_id}/texttracks/{texttrack_id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /**\n   * Whether the text track is active, meaning that it appears in the player. Only one text track per language, and type, can be active.\n   * @example \"true\"\n   */\n    active?: boolean,\n  /**\n   * The language of the text track. For a full list of valid languages, use the [/languages?filter=texttracks](https://developer.vimeo.com/api/endpoints/videos#GET/languages) endpoint.\n   * @example \"en-US\"\n   */\n    language?: string,\n  /**\n   * The name of the text track.\n   * @example \"Commentary\"\n   */\n    name?: string,\n  /** The text track type. */\n    type?: \"captions\" | \"chapters\" | \"descriptions\" | \"metadata\" | \"subtitles\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".texttrackId": {
        "rendered": "\n/** The ID of the text track. */\n texttrackId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TextTrack",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/videos/{video_id}/timelinethumbnails": {
    "query": {},
    "body": {},
    "path": {
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Picture",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/videos/{video_id}/timelinethumbnails/{thumbnail_id}": {
    "query": {},
    "body": {},
    "path": {
      ".thumbnailId": {
        "rendered": "\n/** The ID of the picture. */\n thumbnailId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Picture",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/videos/{video_id}/versions": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * The name of the version\n   * @example \"untitled.mp4\"\n   */\n    file_name: string,\n    upload: {\n  /** Upload approach */\n    approach: \"post\" | \"pull\" | \"streaming\" | \"tus\",\n  /**\n   * If your upload approach is pull, Vimeo will download the video hosted at this public URL. This URL must be valid for at least 24 hours.\n   * @example \"https://example.com\"\n   */\n    link?: string,\n  /**\n   * The app's redirect URL. Use this parameter when `approach` is `post`.\n   * @example \"https://example.com\"\n   */\n    redirect_url?: string,\n  /**\n   * Upload size\n   * @example \"13623861\"\n   */\n    size?: string,\n\n},\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "VideoVersions",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/videos/{video_id}/videos": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The attribute by which to filter the results. */\n filter?: \"related\", \n/** The page number of the results to show. */\n page?: number, \n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.filter": {
        "rendered": "\n/** The attribute by which to filter the results. */\n filter?: \"related\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page number of the results to show. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of items to show on each page of results, up to a maximum of 100. */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".videoId": {
        "rendered": "\n/** The ID of the video. */\n videoId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Video)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  }
}
