{
  "get__/crm/activities": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean, \n/** Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. */\n cursor?: string, \n/** Number of results to return. Minimum 1, Maximum 200, Default 20 */\n limit?: number, \n/** Apply filters */\n filter?: ActivitiesFilter, \n/** The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields \"name\", \"email\" and \"addresses.city\". If any other fields are available, they will be excluded. */\n fields?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.raw": {
        "rendered": "\n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cursor": {
        "rendered": "\n/** Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. */\n cursor?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** Number of results to return. Minimum 1, Maximum 200, Default 20 */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.filter": {
        "rendered": "\n/** Apply filters */\n filter?: ActivitiesFilter,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields \"name\", \"email\" and \"addresses.city\". If any other fields are available, they will be excluded. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "GetActivitiesResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/crm/activities": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.raw": {
        "rendered": "\n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "CreateActivityResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/crm/activities/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.raw": {
        "rendered": "\n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** ID of the record you are acting upon. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "DeleteActivityResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/crm/activities/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean, \n/** The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields \"name\", \"email\" and \"addresses.city\". If any other fields are available, they will be excluded. */\n fields?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.raw": {
        "rendered": "\n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields \"name\", \"email\" and \"addresses.city\". If any other fields are available, they will be excluded. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": " id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GetActivityResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/crm/activities/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.raw": {
        "rendered": "\n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": " id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "UpdateActivityResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/crm/companies": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean, \n/** Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. */\n cursor?: string, \n/** Number of results to return. Minimum 1, Maximum 200, Default 20 */\n limit?: number, \n/** Apply filters */\n filter?: CompaniesFilter, \n/** Apply sorting */\n sort?: CompaniesSort, \n/** The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields \"name\", \"email\" and \"addresses.city\". If any other fields are available, they will be excluded. */\n fields?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.raw": {
        "rendered": "\n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cursor": {
        "rendered": "\n/** Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. */\n cursor?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** Number of results to return. Minimum 1, Maximum 200, Default 20 */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.filter": {
        "rendered": "\n/** Apply filters */\n filter?: CompaniesFilter,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** Apply sorting */\n sort?: CompaniesSort,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields \"name\", \"email\" and \"addresses.city\". If any other fields are available, they will be excluded. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "GetCompaniesResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/crm/companies": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.raw": {
        "rendered": "\n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "CreateCompanyResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/crm/companies/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.raw": {
        "rendered": "\n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": " id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "DeleteCompanyResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/crm/companies/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean, \n/** The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields \"name\", \"email\" and \"addresses.city\". If any other fields are available, they will be excluded. */\n fields?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.raw": {
        "rendered": "\n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields \"name\", \"email\" and \"addresses.city\". If any other fields are available, they will be excluded. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": " id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GetCompanyResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/crm/companies/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.raw": {
        "rendered": "\n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": " id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "UpdateCompanyResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/crm/contacts": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean, \n/** Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. */\n cursor?: string, \n/** Number of results to return. Minimum 1, Maximum 200, Default 20 */\n limit?: number, \n/** Apply filters */\n filter?: ContactsFilter, \n/** Apply sorting */\n sort?: ContactsSort, \n/** The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields \"name\", \"email\" and \"addresses.city\". If any other fields are available, they will be excluded. */\n fields?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.raw": {
        "rendered": "\n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cursor": {
        "rendered": "\n/** Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. */\n cursor?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** Number of results to return. Minimum 1, Maximum 200, Default 20 */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.filter": {
        "rendered": "\n/** Apply filters */\n filter?: ContactsFilter,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** Apply sorting */\n sort?: ContactsSort,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields \"name\", \"email\" and \"addresses.city\". If any other fields are available, they will be excluded. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "GetContactsResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/crm/contacts": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.raw": {
        "rendered": "\n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "CreateContactResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/crm/contacts/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.raw": {
        "rendered": "\n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": " id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "DeleteContactResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/crm/contacts/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean, \n/** The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields \"name\", \"email\" and \"addresses.city\". If any other fields are available, they will be excluded. */\n fields?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.raw": {
        "rendered": "\n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields \"name\", \"email\" and \"addresses.city\". If any other fields are available, they will be excluded. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": " id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GetContactResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/crm/contacts/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.raw": {
        "rendered": "\n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": " id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "UpdateContactResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/crm/leads": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean, \n/** Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. */\n cursor?: string, \n/** Number of results to return. Minimum 1, Maximum 200, Default 20 */\n limit?: number, \n/** Apply filters */\n filter?: LeadsFilter, \n/** Apply sorting */\n sort?: LeadsSort, \n/** The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields \"name\", \"email\" and \"addresses.city\". If any other fields are available, they will be excluded. */\n fields?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.raw": {
        "rendered": "\n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cursor": {
        "rendered": "\n/** Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. */\n cursor?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** Number of results to return. Minimum 1, Maximum 200, Default 20 */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.filter": {
        "rendered": "\n/** Apply filters */\n filter?: LeadsFilter,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** Apply sorting */\n sort?: LeadsSort,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields \"name\", \"email\" and \"addresses.city\". If any other fields are available, they will be excluded. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "GetLeadsResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/crm/leads": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.raw": {
        "rendered": "\n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "CreateLeadResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/crm/leads/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.raw": {
        "rendered": "\n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": " id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "DeleteLeadResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/crm/leads/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean, \n/** The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields \"name\", \"email\" and \"addresses.city\". If any other fields are available, they will be excluded. */\n fields?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.raw": {
        "rendered": "\n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields \"name\", \"email\" and \"addresses.city\". If any other fields are available, they will be excluded. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": " id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GetLeadResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/crm/leads/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.raw": {
        "rendered": "\n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": " id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "UpdateLeadResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/crm/notes": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean, \n/** Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. */\n cursor?: string, \n/** Number of results to return. Minimum 1, Maximum 200, Default 20 */\n limit?: number, \n/** The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields \"name\", \"email\" and \"addresses.city\". If any other fields are available, they will be excluded. */\n fields?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.raw": {
        "rendered": "\n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cursor": {
        "rendered": "\n/** Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. */\n cursor?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** Number of results to return. Minimum 1, Maximum 200, Default 20 */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields \"name\", \"email\" and \"addresses.city\". If any other fields are available, they will be excluded. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "GetNotesResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/crm/notes": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.raw": {
        "rendered": "\n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "CreateNoteResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/crm/notes/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.raw": {
        "rendered": "\n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": " id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "DeleteNoteResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/crm/notes/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean, \n/** The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields \"name\", \"email\" and \"addresses.city\". If any other fields are available, they will be excluded. */\n fields?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.raw": {
        "rendered": "\n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields \"name\", \"email\" and \"addresses.city\". If any other fields are available, they will be excluded. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": " id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GetNoteResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/crm/notes/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.raw": {
        "rendered": "\n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": " id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "UpdateNoteResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/crm/opportunities": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean, \n/** Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. */\n cursor?: string, \n/** Number of results to return. Minimum 1, Maximum 200, Default 20 */\n limit?: number, \n/** Apply filters */\n filter?: OpportunitiesFilter, \n/** Apply sorting */\n sort?: OpportunitiesSort, \n/** The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields \"name\", \"email\" and \"addresses.city\". If any other fields are available, they will be excluded. */\n fields?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.raw": {
        "rendered": "\n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cursor": {
        "rendered": "\n/** Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. */\n cursor?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** Number of results to return. Minimum 1, Maximum 200, Default 20 */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.filter": {
        "rendered": "\n/** Apply filters */\n filter?: OpportunitiesFilter,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** Apply sorting */\n sort?: OpportunitiesSort,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields \"name\", \"email\" and \"addresses.city\". If any other fields are available, they will be excluded. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "GetOpportunitiesResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/crm/opportunities": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.raw": {
        "rendered": "\n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "CreateOpportunityResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/crm/opportunities/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.raw": {
        "rendered": "\n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": " id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "DeleteOpportunityResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/crm/opportunities/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean, \n/** The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields \"name\", \"email\" and \"addresses.city\". If any other fields are available, they will be excluded. */\n fields?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.raw": {
        "rendered": "\n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields \"name\", \"email\" and \"addresses.city\". If any other fields are available, they will be excluded. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": " id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GetOpportunityResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/crm/opportunities/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.raw": {
        "rendered": "\n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": " id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "UpdateOpportunityResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/crm/pipelines": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean, \n/** Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. */\n cursor?: string, \n/** Number of results to return. Minimum 1, Maximum 200, Default 20 */\n limit?: number, \n/** The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields \"name\", \"email\" and \"addresses.city\". If any other fields are available, they will be excluded. */\n fields?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.raw": {
        "rendered": "\n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cursor": {
        "rendered": "\n/** Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. */\n cursor?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** Number of results to return. Minimum 1, Maximum 200, Default 20 */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields \"name\", \"email\" and \"addresses.city\". If any other fields are available, they will be excluded. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "GetPipelinesResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/crm/pipelines": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.raw": {
        "rendered": "\n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "CreatePipelineResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/crm/pipelines/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.raw": {
        "rendered": "\n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": " id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "DeletePipelineResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/crm/pipelines/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean, \n/** The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields \"name\", \"email\" and \"addresses.city\". If any other fields are available, they will be excluded. */\n fields?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.raw": {
        "rendered": "\n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields \"name\", \"email\" and \"addresses.city\". If any other fields are available, they will be excluded. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": " id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GetPipelineResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/crm/pipelines/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.raw": {
        "rendered": "\n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": " id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "UpdatePipelineResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/crm/users": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean, \n/** Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. */\n cursor?: string, \n/** Number of results to return. Minimum 1, Maximum 200, Default 20 */\n limit?: number, \n/** The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields \"name\", \"email\" and \"addresses.city\". If any other fields are available, they will be excluded. */\n fields?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.raw": {
        "rendered": "\n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cursor": {
        "rendered": "\n/** Cursor to start from. You can find cursors for next/previous pages in the meta.cursors property of the response. */\n cursor?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** Number of results to return. Minimum 1, Maximum 200, Default 20 */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields \"name\", \"email\" and \"addresses.city\". If any other fields are available, they will be excluded. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "GetUsersResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/crm/users": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.raw": {
        "rendered": "\n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "CreateUserResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/crm/users/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.raw": {
        "rendered": "\n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": " id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "DeleteUserResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/crm/users/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean, \n/** The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields \"name\", \"email\" and \"addresses.city\". If any other fields are available, they will be excluded. */\n fields?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.raw": {
        "rendered": "\n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields \"name\", \"email\" and \"addresses.city\". If any other fields are available, they will be excluded. */\n fields?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": " id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GetUserResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/crm/users/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.raw": {
        "rendered": "\n/** Include raw response. Mostly used for debugging purposes */\n raw?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": " id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "UpdateUserResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  }
}
