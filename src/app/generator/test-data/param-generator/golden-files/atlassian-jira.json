{
  "get__/rest/api/3/announcementBanner": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "AnnouncementBannerConfiguration",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "put__/rest/api/3/announcementBanner": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: AnnouncementBannerConfigurationUpdate,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/app/field/value": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Whether to generate a changelog for this update. */\n generateChangelog?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.generateChangelog": {
        "rendered": "\n/** Whether to generate a changelog for this update. */\n generateChangelog?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: MultipleCustomFieldValuesUpdateDetails,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/app/field/{fieldIdOrKey}/context/configuration": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The list of configuration IDs. To include multiple configurations, separate IDs with an ampersand: `id=10000&id=10001`. Can't be provided with `fieldContextId`, `issueId`, `projectKeyOrId`, or `issueTypeId`. */\n id?: (number)[], \n/** The list of field context IDs. To include multiple field contexts, separate IDs with an ampersand: `fieldContextId=10000&fieldContextId=10001`. Can't be provided with `id`, `issueId`, `projectKeyOrId`, or `issueTypeId`. */\n fieldContextId?: (number)[], \n/** The ID of the issue to filter results by. If the issue doesn't exist, an empty list is returned. Can't be provided with `projectKeyOrId`, or `issueTypeId`. */\n issueId?: number, \n/** The ID or key of the project to filter results by. Must be provided with `issueTypeId`. Can't be provided with `issueId`. */\n projectKeyOrId?: string, \n/** The ID of the issue type to filter results by. Must be provided with `projectKeyOrId`. Can't be provided with `issueId`. */\n issueTypeId?: string, \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.id": {
        "rendered": "\n/** The list of configuration IDs. To include multiple configurations, separate IDs with an ampersand: `id=10000&id=10001`. Can't be provided with `fieldContextId`, `issueId`, `projectKeyOrId`, or `issueTypeId`. */\n id?: (number)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.id.__no_name": {
        "rendered": "number",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fieldContextId": {
        "rendered": "\n/** The list of field context IDs. To include multiple field contexts, separate IDs with an ampersand: `fieldContextId=10000&fieldContextId=10001`. Can't be provided with `id`, `issueId`, `projectKeyOrId`, or `issueTypeId`. */\n fieldContextId?: (number)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fieldContextId.__no_name": {
        "rendered": "number",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.issueId": {
        "rendered": "\n/** The ID of the issue to filter results by. If the issue doesn't exist, an empty list is returned. Can't be provided with `projectKeyOrId`, or `issueTypeId`. */\n issueId?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectKeyOrId": {
        "rendered": "\n/** The ID or key of the project to filter results by. Must be provided with `issueTypeId`. Can't be provided with `issueId`. */\n projectKeyOrId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.issueTypeId": {
        "rendered": "\n/** The ID of the issue type to filter results by. Must be provided with `projectKeyOrId`. Can't be provided with `issueId`. */\n issueTypeId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".fieldIdOrKey": {
        "rendered": "\n/** The ID or key of the custom field, for example `customfield_10000`. */\n fieldIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PageBeanContextualConfiguration",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "put__/rest/api/3/app/field/{fieldIdOrKey}/context/configuration": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: CustomFieldConfigurations,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".fieldIdOrKey": {
        "rendered": "\n/** The ID or key of the custom field, for example `customfield_10000`. */\n fieldIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/app/field/{fieldIdOrKey}/value": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Whether to generate a changelog for this update. */\n generateChangelog?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.generateChangelog": {
        "rendered": "\n/** Whether to generate a changelog for this update. */\n generateChangelog?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: CustomFieldValueUpdateDetails,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".fieldIdOrKey": {
        "rendered": "\n/** The ID or key of the custom field. For example, `customfield_10010`. */\n fieldIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/application-properties": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The key of the application property. */\n key?: string, \n/** The permission level of all items being returned in the list. */\n permissionLevel?: string, \n/** When a `key` isn't provided, this filters the list of results by the application property `key` using a regular expression. For example, using `jira.lf.*` will return all application properties with keys that start with *jira.lf.*. */\n keyFilter?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** The key of the application property. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.permissionLevel": {
        "rendered": "\n/** The permission level of all items being returned in the list. */\n permissionLevel?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.keyFilter": {
        "rendered": "\n/** When a `key` isn't provided, this filters the list of results by the application property `key` using a regular expression. For example, using `jira.lf.*` will return all application properties with keys that start with *jira.lf.*. */\n keyFilter?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(ApplicationProperty)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "ApplicationProperty",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/application-properties/advanced-settings": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(ApplicationProperty)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "ApplicationProperty",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/application-properties/{id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: SimpleApplicationPropertyBean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".id": {
        "rendered": "\n/** The key of the application property to update. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ApplicationProperty",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/applicationrole": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(ApplicationRole)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "ApplicationRole",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/applicationrole/{key}": {
    "query": {},
    "body": {},
    "path": {
      ".key": {
        "rendered": "\n/** The key of the application role. Use the [Get all application roles](#api-rest-api-3-applicationrole-get) operation to get the key for each application role. */\n key: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ApplicationRole",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/attachment/content/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Whether a redirect is provided for the attachment download. Clients that do not automatically follow redirects can set this to `false` to avoid making multiple requests to download the attachment. */\n redirect?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.redirect": {
        "rendered": "\n/** Whether a redirect is provided for the attachment download. Clients that do not automatically follow redirects can set this to `false` to avoid making multiple requests to download the attachment. */\n redirect?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the attachment. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/attachment/meta": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "AttachmentSettings",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/attachment/thumbnail/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Whether a redirect is provided for the attachment download. Clients that do not automatically follow redirects can set this to `false` to avoid making multiple requests to download the attachment. */\n redirect?: boolean, \n/** Whether a default thumbnail is returned when the requested thumbnail is not found. */\n fallbackToDefault?: boolean, \n/** The maximum width to scale the thumbnail to. */\n width?: number, \n/** The maximum height to scale the thumbnail to. */\n height?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.redirect": {
        "rendered": "\n/** Whether a redirect is provided for the attachment download. Clients that do not automatically follow redirects can set this to `false` to avoid making multiple requests to download the attachment. */\n redirect?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fallbackToDefault": {
        "rendered": "\n/** Whether a default thumbnail is returned when the requested thumbnail is not found. */\n fallbackToDefault?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.width": {
        "rendered": "\n/** The maximum width to scale the thumbnail to. */\n width?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.height": {
        "rendered": "\n/** The maximum height to scale the thumbnail to. */\n height?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the attachment. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "delete__/rest/api/3/attachment/{id}": {
    "query": {},
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the attachment. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/attachment/{id}": {
    "query": {},
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the attachment. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "AttachmentMetadata",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/attachment/{id}/expand/human": {
    "query": {},
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the attachment. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "AttachmentArchiveMetadataReadable",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/attachment/{id}/expand/raw": {
    "query": {},
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the attachment. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "AttachmentArchiveImpl",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/auditing/record": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of records to skip before returning the first result. */\n offset?: number, \n/** The maximum number of results to return. */\n limit?: number, \n/** The strings to match with audit field content, space separated. */\n filter?: string, \n/** The date and time on or after which returned audit records must have been created. If `to` is provided `from` must be before `to` or no audit records are returned. */\n from?: string, \n/** The date and time on or before which returned audit results must have been created. If `from` is provided `to` must be after `from` or no audit records are returned. */\n to?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.offset": {
        "rendered": "\n/** The number of records to skip before returning the first result. */\n offset?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** The maximum number of results to return. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.filter": {
        "rendered": "\n/** The strings to match with audit field content, space separated. */\n filter?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.from": {
        "rendered": "\n/** The date and time on or after which returned audit records must have been created. If `to` is provided `from` must be before `to` or no audit records are returned. */\n from?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.to": {
        "rendered": "\n/** The date and time on or before which returned audit results must have been created. If `from` is provided `to` must be after `from` or no audit records are returned. */\n to?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "AuditRecords",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/avatar/{type}/system": {
    "query": {},
    "body": {},
    "path": {
      ".type": {
        "rendered": "\n/** The avatar type. */\n type: \"issuetype\" | \"project\" | \"user\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "SystemAvatars",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/comment/list": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `renderedBody` Returns the comment body rendered in HTML.\n *  `properties` Returns the comment's properties. */\n expand?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `renderedBody` Returns the comment body rendered in HTML.\n *  `properties` Returns the comment's properties. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: IssueCommentListRequestBean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PageBeanComment",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/comment/{commentId}/properties": {
    "query": {},
    "body": {},
    "path": {
      ".commentId": {
        "rendered": "\n/** The ID of the comment. */\n commentId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PropertyKeys",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/comment/{commentId}/properties/{propertyKey}": {
    "query": {},
    "body": {},
    "path": {
      ".commentId": {
        "rendered": "\n/** The ID of the comment. */\n commentId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".propertyKey": {
        "rendered": "\n/** The key of the property. */\n propertyKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/comment/{commentId}/properties/{propertyKey}": {
    "query": {},
    "body": {},
    "path": {
      ".commentId": {
        "rendered": "\n/** The ID of the comment. */\n commentId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".propertyKey": {
        "rendered": "\n/** The key of the property. */\n propertyKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EntityProperty",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "put__/rest/api/3/comment/{commentId}/properties/{propertyKey}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: any,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".commentId": {
        "rendered": "\n/** The ID of the comment. */\n commentId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".propertyKey": {
        "rendered": "\n/** The key of the property. The maximum length is 255 characters. */\n propertyKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/component": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: ProjectComponent,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "ProjectComponent",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "delete__/rest/api/3/component/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The ID of the component to replace the deleted component. If this value is null no replacement is made. */\n moveIssuesTo?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.moveIssuesTo": {
        "rendered": "\n/** The ID of the component to replace the deleted component. If this value is null no replacement is made. */\n moveIssuesTo?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the component. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/component/{id}": {
    "query": {},
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the component. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProjectComponent",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "put__/rest/api/3/component/{id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: ProjectComponent,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the component. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProjectComponent",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/component/{id}/relatedIssueCounts": {
    "query": {},
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the component. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ComponentIssuesCount",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/configuration": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "Configuration",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/configuration/timetracking": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "TimeTrackingProvider",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/configuration/timetracking": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: TimeTrackingProvider,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/configuration/timetracking/list": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(TimeTrackingProvider)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "TimeTrackingProvider",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/configuration/timetracking/options": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "TimeTrackingConfiguration",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "put__/rest/api/3/configuration/timetracking/options": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: TimeTrackingConfiguration,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "TimeTrackingConfiguration",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/customFieldOption/{id}": {
    "query": {},
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the custom field option. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CustomFieldOption",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/dashboard": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The filter applied to the list of dashboards. Valid values are:\n\n *  `favourite` Returns dashboards the user has marked as favorite.\n *  `my` Returns dashboards owned by the user. */\n filter?: \"my\" | \"favourite\", \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter": {
        "rendered": "\n/** The filter applied to the list of dashboards. Valid values are:\n\n *  `favourite` Returns dashboards the user has marked as favorite.\n *  `my` Returns dashboards owned by the user. */\n filter?: \"my\" | \"favourite\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PageOfDashboards",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/dashboard": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: DashboardDetails,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "Dashboard",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/dashboard/gadgets": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "AvailableDashboardGadgetsResponse",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/dashboard/search": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** String used to perform a case-insensitive partial match with `name`. */\n dashboardName?: string, \n/** User account ID used to return dashboards with the matching `owner.accountId`. This parameter cannot be used with the `owner` parameter. */\n accountId?: string, \n/** This parameter is deprecated because of privacy changes. Use `accountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. User name used to return dashboards with the matching `owner.name`. This parameter cannot be used with the `accountId` parameter. */\n owner?: string, \n/** As a group's name can change, use of `groupId` is recommended. Group name used to return dashboards that are shared with a group that matches `sharePermissions.group.name`. This parameter cannot be used with the `groupId` parameter. */\n groupname?: string, \n/** Group ID used to return dashboards that are shared with a group that matches `sharePermissions.group.groupId`. This parameter cannot be used with the `groupname` parameter. */\n groupId?: string, \n/** Project ID used to returns dashboards that are shared with a project that matches `sharePermissions.project.id`. */\n projectId?: number, \n/** [Order](#ordering) the results by a field:\n\n *  `description` Sorts by dashboard description. Note that this sort works independently of whether the expand to display the description field is in use.\n *  `favourite_count` Sorts by dashboard popularity.\n *  `id` Sorts by dashboard ID.\n *  `is_favourite` Sorts by whether the dashboard is marked as a favorite.\n *  `name` Sorts by dashboard name.\n *  `owner` Sorts by dashboard owner name. */\n orderBy?: \"description\" | \"-description\" | \"+description\" | \"favorite_count\" | \"-favorite_count\" | \"+favorite_count\" | \"id\" | \"-id\" | \"+id\" | \"is_favorite\" | \"-is_favorite\" | \"+is_favorite\" | \"name\" | \"-name\" | \"+name\" | \"owner\" | \"-owner\" | \"+owner\", \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, \n/** The status to filter by. It may be active, archived or deleted. */\n status?: \"active\" | \"archived\" | \"deleted\", \n/** Use [expand](#expansion) to include additional information about dashboard in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `description` Returns the description of the dashboard.\n *  `owner` Returns the owner of the dashboard.\n *  `viewUrl` Returns the URL that is used to view the dashboard.\n *  `favourite` Returns `isFavourite`, an indicator of whether the user has set the dashboard as a favorite.\n *  `favouritedCount` Returns `popularity`, a count of how many users have set this dashboard as a favorite.\n *  `sharePermissions` Returns details of the share permissions defined for the dashboard.\n *  `editPermissions` Returns details of the edit permissions defined for the dashboard.\n *  `isWritable` Returns whether the current user has permission to edit the dashboard. */\n expand?: string, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.dashboardName": {
        "rendered": "\n/** String used to perform a case-insensitive partial match with `name`. */\n dashboardName?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.accountId": {
        "rendered": "\n/** User account ID used to return dashboards with the matching `owner.accountId`. This parameter cannot be used with the `owner` parameter. */\n accountId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.owner": {
        "rendered": "\n/** This parameter is deprecated because of privacy changes. Use `accountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. User name used to return dashboards with the matching `owner.name`. This parameter cannot be used with the `accountId` parameter. */\n owner?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.groupname": {
        "rendered": "\n/** As a group's name can change, use of `groupId` is recommended. Group name used to return dashboards that are shared with a group that matches `sharePermissions.group.name`. This parameter cannot be used with the `groupId` parameter. */\n groupname?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.groupId": {
        "rendered": "\n/** Group ID used to return dashboards that are shared with a group that matches `sharePermissions.group.groupId`. This parameter cannot be used with the `groupname` parameter. */\n groupId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID used to returns dashboards that are shared with a project that matches `sharePermissions.project.id`. */\n projectId?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.orderBy": {
        "rendered": "\n/** [Order](#ordering) the results by a field:\n\n *  `description` Sorts by dashboard description. Note that this sort works independently of whether the expand to display the description field is in use.\n *  `favourite_count` Sorts by dashboard popularity.\n *  `id` Sorts by dashboard ID.\n *  `is_favourite` Sorts by whether the dashboard is marked as a favorite.\n *  `name` Sorts by dashboard name.\n *  `owner` Sorts by dashboard owner name. */\n orderBy?: \"description\" | \"-description\" | \"+description\" | \"favorite_count\" | \"-favorite_count\" | \"+favorite_count\" | \"id\" | \"-id\" | \"+id\" | \"is_favorite\" | \"-is_favorite\" | \"+is_favorite\" | \"name\" | \"-name\" | \"+name\" | \"owner\" | \"-owner\" | \"+owner\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.status": {
        "rendered": "\n/** The status to filter by. It may be active, archived or deleted. */\n status?: \"active\" | \"archived\" | \"deleted\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information about dashboard in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `description` Returns the description of the dashboard.\n *  `owner` Returns the owner of the dashboard.\n *  `viewUrl` Returns the URL that is used to view the dashboard.\n *  `favourite` Returns `isFavourite`, an indicator of whether the user has set the dashboard as a favorite.\n *  `favouritedCount` Returns `popularity`, a count of how many users have set this dashboard as a favorite.\n *  `sharePermissions` Returns details of the share permissions defined for the dashboard.\n *  `editPermissions` Returns details of the edit permissions defined for the dashboard.\n *  `isWritable` Returns whether the current user has permission to edit the dashboard. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PageBeanDashboard",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/dashboard/{dashboardId}/gadget": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The list of gadgets module keys. To include multiple module keys, separate module keys with ampersand: `moduleKey=key:one&moduleKey=key:two`. */\n moduleKey?: (string)[], \n/** The list of gadgets URIs. To include multiple URIs, separate URIs with ampersand: `uri=/rest/example/uri/1&uri=/rest/example/uri/2`. */\n uri?: (string)[], \n/** The list of gadgets IDs. To include multiple IDs, separate IDs with ampersand: `gadgetId=10000&gadgetId=10001`. */\n gadgetId?: (number)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.moduleKey": {
        "rendered": "\n/** The list of gadgets module keys. To include multiple module keys, separate module keys with ampersand: `moduleKey=key:one&moduleKey=key:two`. */\n moduleKey?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.moduleKey.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uri": {
        "rendered": "\n/** The list of gadgets URIs. To include multiple URIs, separate URIs with ampersand: `uri=/rest/example/uri/1&uri=/rest/example/uri/2`. */\n uri?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.uri.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.gadgetId": {
        "rendered": "\n/** The list of gadgets IDs. To include multiple IDs, separate IDs with ampersand: `gadgetId=10000&gadgetId=10001`. */\n gadgetId?: (number)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.gadgetId.__no_name": {
        "rendered": "number",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".dashboardId": {
        "rendered": "\n/** The ID of the dashboard. */\n dashboardId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "DashboardGadgetResponse",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/dashboard/{dashboardId}/gadget": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: DashboardGadgetSettings,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".dashboardId": {
        "rendered": "\n/** The ID of the dashboard. */\n dashboardId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "DashboardGadget",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "delete__/rest/api/3/dashboard/{dashboardId}/gadget/{gadgetId}": {
    "query": {},
    "body": {},
    "path": {
      ".dashboardId": {
        "rendered": "\n/** The ID of the dashboard. */\n dashboardId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".gadgetId": {
        "rendered": "\n/** The ID of the gadget. */\n gadgetId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/dashboard/{dashboardId}/gadget/{gadgetId}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: DashboardGadgetUpdateRequest,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".dashboardId": {
        "rendered": "\n/** The ID of the dashboard. */\n dashboardId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".gadgetId": {
        "rendered": "\n/** The ID of the gadget. */\n gadgetId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties": {
    "query": {},
    "body": {},
    "path": {
      ".dashboardId": {
        "rendered": "\n/** The ID of the dashboard. */\n dashboardId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".itemId": {
        "rendered": "\n/** The ID of the dashboard item. */\n itemId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PropertyKeys",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}": {
    "query": {},
    "body": {},
    "path": {
      ".dashboardId": {
        "rendered": "\n/** The ID of the dashboard. */\n dashboardId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".itemId": {
        "rendered": "\n/** The ID of the dashboard item. */\n itemId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".propertyKey": {
        "rendered": "\n/** The key of the dashboard item property. */\n propertyKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}": {
    "query": {},
    "body": {},
    "path": {
      ".dashboardId": {
        "rendered": "\n/** The ID of the dashboard. */\n dashboardId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".itemId": {
        "rendered": "\n/** The ID of the dashboard item. */\n itemId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".propertyKey": {
        "rendered": "\n/** The key of the dashboard item property. */\n propertyKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EntityProperty",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "put__/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: any,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".dashboardId": {
        "rendered": "\n/** The ID of the dashboard. */\n dashboardId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".itemId": {
        "rendered": "\n/** The ID of the dashboard item. */\n itemId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".propertyKey": {
        "rendered": "\n/** The key of the dashboard item property. The maximum length is 255 characters. For dashboard items with a spec URI and no complete module key, if the provided propertyKey is equal to \"config\", the request body's JSON must be an object with all keys and values as strings. */\n propertyKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/dashboard/{id}": {
    "query": {},
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the dashboard. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/dashboard/{id}": {
    "query": {},
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the dashboard. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Dashboard",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "put__/rest/api/3/dashboard/{id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: DashboardDetails,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the dashboard to update. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Dashboard",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/dashboard/{id}/copy": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: DashboardDetails,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".id": {
        "rendered": " id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Dashboard",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/events": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(IssueEvent)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "IssueEvent",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/expression/analyse": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The check to perform:\n\n *  `syntax` Each expression's syntax is checked to ensure the expression can be parsed. Also, syntactic limits are validated. For example, the expression's length.\n *  `type` EXPERIMENTAL. Each expression is type checked and the final type of the expression inferred. Any type errors that would result in the expression failure at runtime are reported. For example, accessing properties that don't exist or passing the wrong number of arguments to functions. Also performs the syntax check.\n *  `complexity` EXPERIMENTAL. Determines the formulae for how many [expensive operations](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#expensive-operations) each expression may execute. */\n check?: \"syntax\" | \"type\" | \"complexity\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.check": {
        "rendered": "\n/** The check to perform:\n\n *  `syntax` Each expression's syntax is checked to ensure the expression can be parsed. Also, syntactic limits are validated. For example, the expression's length.\n *  `type` EXPERIMENTAL. Each expression is type checked and the final type of the expression inferred. Any type errors that would result in the expression failure at runtime are reported. For example, accessing properties that don't exist or passing the wrong number of arguments to functions. Also performs the syntax check.\n *  `complexity` EXPERIMENTAL. Determines the formulae for how many [expensive operations](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#expensive-operations) each expression may execute. */\n check?: \"syntax\" | \"type\" | \"complexity\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: JiraExpressionForAnalysis,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "JiraExpressionsAnalysis",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/expression/eval": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Use [expand](#expansion) to include additional information in the response. This parameter accepts `meta.complexity` that returns information about the expression complexity. For example, the number of expensive operations used by the expression and how close the expression is to reaching the [complexity limit](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#restrictions). Useful when designing and debugging your expressions. */\n expand?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information in the response. This parameter accepts `meta.complexity` that returns information about the expression complexity. For example, the number of expensive operations used by the expression and how close the expression is to reaching the [complexity limit](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#restrictions). Useful when designing and debugging your expressions. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: JiraExpressionEvalRequestBean,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "JiraExpressionResult",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/field": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(FieldDetails)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "FieldDetails",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/field": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: CustomFieldDefinitionJsonBean,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "FieldDetails",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/field/search": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, \n/** The type of fields to search. */\n type?: (\"custom\" | \"system\")[], \n/** The IDs of the custom fields to return or, where `query` is specified, filter. */\n id?: (string)[], \n/** String used to perform a case-insensitive partial match with field names or descriptions. */\n query?: string, \n/** [Order](#ordering) the results by a field:\n\n *  `contextsCount` sorts by the number of contexts related to a field\n *  `lastUsed` sorts by the date when the value of the field last changed\n *  `name` sorts by the field name\n *  `screensCount` sorts by the number of screens related to a field */\n orderBy?: \"contextsCount\" | \"-contextsCount\" | \"+contextsCount\" | \"lastUsed\" | \"-lastUsed\" | \"+lastUsed\" | \"name\" | \"-name\" | \"+name\" | \"screensCount\" | \"-screensCount\" | \"+screensCount\" | \"projectsCount\" | \"-projectsCount\" | \"+projectsCount\", \n/** Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `key` returns the key for each field\n *  `lastUsed` returns the date when the value of the field last changed\n *  `screensCount` returns the number of screens related to a field\n *  `contextsCount` returns the number of contexts related to a field\n *  `isLocked` returns information about whether the field is [locked](https://confluence.atlassian.com/x/ZSN7Og)\n *  `searcherKey` returns the searcher key for each custom field */\n expand?: string, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.type": {
        "rendered": "\n/** The type of fields to search. */\n type?: (\"custom\" | \"system\")[],",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.type.__no_name": {
        "rendered": "\"custom\" | \"system\"",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.id": {
        "rendered": "\n/** The IDs of the custom fields to return or, where `query` is specified, filter. */\n id?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.id.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** String used to perform a case-insensitive partial match with field names or descriptions. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.orderBy": {
        "rendered": "\n/** [Order](#ordering) the results by a field:\n\n *  `contextsCount` sorts by the number of contexts related to a field\n *  `lastUsed` sorts by the date when the value of the field last changed\n *  `name` sorts by the field name\n *  `screensCount` sorts by the number of screens related to a field */\n orderBy?: \"contextsCount\" | \"-contextsCount\" | \"+contextsCount\" | \"lastUsed\" | \"-lastUsed\" | \"+lastUsed\" | \"name\" | \"-name\" | \"+name\" | \"screensCount\" | \"-screensCount\" | \"+screensCount\" | \"projectsCount\" | \"-projectsCount\" | \"+projectsCount\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `key` returns the key for each field\n *  `lastUsed` returns the date when the value of the field last changed\n *  `screensCount` returns the number of screens related to a field\n *  `contextsCount` returns the number of contexts related to a field\n *  `isLocked` returns information about whether the field is [locked](https://confluence.atlassian.com/x/ZSN7Og)\n *  `searcherKey` returns the searcher key for each custom field */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PageBeanField",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/field/search/trashed": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number,  id?: (string)[], \n/** String used to perform a case-insensitive partial match with field names or descriptions. */\n query?: string,  expand?: \"name\" | \"-name\" | \"+name\" | \"trashDate\" | \"-trashDate\" | \"+trashDate\" | \"plannedDeletionDate\" | \"-plannedDeletionDate\" | \"+plannedDeletionDate\" | \"projectsCount\" | \"-projectsCount\" | \"+projectsCount\", \n/** [Order](#ordering) the results by a field:\n\n *  `name` sorts by the field name\n *  `trashDate` sorts by the date the field was moved to the trash\n *  `plannedDeletionDate` sorts by the planned deletion date */\n orderBy?: string, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.id": {
        "rendered": " id?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.id.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** String used to perform a case-insensitive partial match with field names or descriptions. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": " expand?: \"name\" | \"-name\" | \"+name\" | \"trashDate\" | \"-trashDate\" | \"+trashDate\" | \"plannedDeletionDate\" | \"-plannedDeletionDate\" | \"+plannedDeletionDate\" | \"projectsCount\" | \"-projectsCount\" | \"+projectsCount\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.orderBy": {
        "rendered": "\n/** [Order](#ordering) the results by a field:\n\n *  `name` sorts by the field name\n *  `trashDate` sorts by the date the field was moved to the trash\n *  `plannedDeletionDate` sorts by the planned deletion date */\n orderBy?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PageBeanField",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "put__/rest/api/3/field/{fieldId}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: UpdateCustomFieldDetails,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".fieldId": {
        "rendered": "\n/** The ID of the custom field. */\n fieldId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/field/{fieldId}/context": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Whether to return contexts that apply to all issue types. */\n isAnyIssueType?: boolean, \n/** Whether to return contexts that apply to all projects. */\n isGlobalContext?: boolean, \n/** The list of context IDs. To include multiple contexts, separate IDs with ampersand: `contextId=10000&contextId=10001`. */\n contextId?: (number)[], \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.isAnyIssueType": {
        "rendered": "\n/** Whether to return contexts that apply to all issue types. */\n isAnyIssueType?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.isGlobalContext": {
        "rendered": "\n/** Whether to return contexts that apply to all projects. */\n isGlobalContext?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.contextId": {
        "rendered": "\n/** The list of context IDs. To include multiple contexts, separate IDs with ampersand: `contextId=10000&contextId=10001`. */\n contextId?: (number)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.contextId.__no_name": {
        "rendered": "number",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".fieldId": {
        "rendered": "\n/** The ID of the custom field. */\n fieldId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PageBeanCustomFieldContext",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/field/{fieldId}/context": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: CreateCustomFieldContext,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".fieldId": {
        "rendered": "\n/** The ID of the custom field. */\n fieldId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CreateCustomFieldContext",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/field/{fieldId}/context/defaultValue": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The IDs of the contexts. */\n contextId?: (number)[], \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.contextId": {
        "rendered": "\n/** The IDs of the contexts. */\n contextId?: (number)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.contextId.__no_name": {
        "rendered": "number",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".fieldId": {
        "rendered": "\n/** The ID of the custom field, for example `customfield\\_10000`. */\n fieldId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PageBeanCustomFieldContextDefaultValue",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/field/{fieldId}/context/defaultValue": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: CustomFieldContextDefaultValueUpdate,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".fieldId": {
        "rendered": "\n/** The ID of the custom field. */\n fieldId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/field/{fieldId}/context/issuetypemapping": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The ID of the context. To include multiple contexts, provide an ampersand-separated list. For example, `contextId=10001&contextId=10002`. */\n contextId?: (number)[], \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.contextId": {
        "rendered": "\n/** The ID of the context. To include multiple contexts, provide an ampersand-separated list. For example, `contextId=10001&contextId=10002`. */\n contextId?: (number)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.contextId.__no_name": {
        "rendered": "number",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".fieldId": {
        "rendered": "\n/** The ID of the custom field. */\n fieldId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PageBeanIssueTypeToContextMapping",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/field/{fieldId}/context/mapping": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: ProjectIssueTypeMappings,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".fieldId": {
        "rendered": "\n/** The ID of the custom field. */\n fieldId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PageBeanContextForProjectAndIssueType",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/field/{fieldId}/context/projectmapping": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The list of context IDs. To include multiple context, separate IDs with ampersand: `contextId=10000&contextId=10001`. */\n contextId?: (number)[], \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.contextId": {
        "rendered": "\n/** The list of context IDs. To include multiple context, separate IDs with ampersand: `contextId=10000&contextId=10001`. */\n contextId?: (number)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.contextId.__no_name": {
        "rendered": "number",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".fieldId": {
        "rendered": "\n/** The ID of the custom field, for example `customfield\\_10000`. */\n fieldId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PageBeanCustomFieldContextProjectMapping",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/field/{fieldId}/context/{contextId}": {
    "query": {},
    "body": {},
    "path": {
      ".fieldId": {
        "rendered": "\n/** The ID of the custom field. */\n fieldId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".contextId": {
        "rendered": "\n/** The ID of the context. */\n contextId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/field/{fieldId}/context/{contextId}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: CustomFieldContextUpdateDetails,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".fieldId": {
        "rendered": "\n/** The ID of the custom field. */\n fieldId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".contextId": {
        "rendered": "\n/** The ID of the context. */\n contextId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/field/{fieldId}/context/{contextId}/issuetype": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: IssueTypeIds,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".fieldId": {
        "rendered": "\n/** The ID of the custom field. */\n fieldId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".contextId": {
        "rendered": "\n/** The ID of the context. */\n contextId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/field/{fieldId}/context/{contextId}/issuetype/remove": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: IssueTypeIds,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".fieldId": {
        "rendered": "\n/** The ID of the custom field. */\n fieldId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".contextId": {
        "rendered": "\n/** The ID of the context. */\n contextId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/field/{fieldId}/context/{contextId}/option": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The ID of the option. */\n optionId?: number, \n/** Whether only options are returned. */\n onlyOptions?: boolean, \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.optionId": {
        "rendered": "\n/** The ID of the option. */\n optionId?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.onlyOptions": {
        "rendered": "\n/** Whether only options are returned. */\n onlyOptions?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".fieldId": {
        "rendered": "\n/** The ID of the custom field. */\n fieldId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".contextId": {
        "rendered": "\n/** The ID of the context. */\n contextId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PageBeanCustomFieldContextOption",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/field/{fieldId}/context/{contextId}/option": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: BulkCustomFieldOptionCreateRequest,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".fieldId": {
        "rendered": "\n/** The ID of the custom field. */\n fieldId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".contextId": {
        "rendered": "\n/** The ID of the context. */\n contextId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CustomFieldCreatedContextOptionsList",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/field/{fieldId}/context/{contextId}/option": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: BulkCustomFieldOptionUpdateRequest,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".fieldId": {
        "rendered": "\n/** The ID of the custom field. */\n fieldId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".contextId": {
        "rendered": "\n/** The ID of the context. */\n contextId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CustomFieldUpdatedContextOptionsList",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/field/{fieldId}/context/{contextId}/option/move": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: OrderOfCustomFieldOptions,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".fieldId": {
        "rendered": "\n/** The ID of the custom field. */\n fieldId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".contextId": {
        "rendered": "\n/** The ID of the context. */\n contextId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/field/{fieldId}/context/{contextId}/option/{optionId}": {
    "query": {},
    "body": {},
    "path": {
      ".fieldId": {
        "rendered": "\n/** The ID of the custom field. */\n fieldId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".contextId": {
        "rendered": "\n/** The ID of the context from which an option should be deleted. */\n contextId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".optionId": {
        "rendered": "\n/** The ID of the option to delete. */\n optionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/field/{fieldId}/context/{contextId}/project": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: ProjectIds,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".fieldId": {
        "rendered": "\n/** The ID of the custom field. */\n fieldId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".contextId": {
        "rendered": "\n/** The ID of the context. */\n contextId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/field/{fieldId}/context/{contextId}/project/remove": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: ProjectIds,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".fieldId": {
        "rendered": "\n/** The ID of the custom field. */\n fieldId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".contextId": {
        "rendered": "\n/** The ID of the context. */\n contextId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/field/{fieldId}/contexts": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".fieldId": {
        "rendered": "\n/** The ID of the field to return contexts for. */\n fieldId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PageBeanContext",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/field/{fieldId}/screens": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, \n/** Use [expand](#expansion) to include additional information about screens in the response. This parameter accepts `tab` which returns details about the screen tabs the field is used in. */\n expand?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information about screens in the response. This parameter accepts `tab` which returns details about the screen tabs the field is used in. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".fieldId": {
        "rendered": "\n/** The ID of the field to return screens for. */\n fieldId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PageBeanScreenWithTab",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/field/{fieldKey}/option": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".fieldKey": {
        "rendered": "\n/** The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:\n\n *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.\n *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"` */\n fieldKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PageBeanIssueFieldOption",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/field/{fieldKey}/option": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: IssueFieldOptionCreateBean,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".fieldKey": {
        "rendered": "\n/** The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:\n\n *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.\n *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"` */\n fieldKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "IssueFieldOption",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/field/{fieldKey}/option/suggestions/edit": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, \n/** Filters the results to options that are only available in the specified project. */\n projectId?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Filters the results to options that are only available in the specified project. */\n projectId?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".fieldKey": {
        "rendered": "\n/** The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:\n\n *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.\n *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"` */\n fieldKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PageBeanIssueFieldOption",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/field/{fieldKey}/option/suggestions/search": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, \n/** Filters the results to options that are only available in the specified project. */\n projectId?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Filters the results to options that are only available in the specified project. */\n projectId?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".fieldKey": {
        "rendered": "\n/** The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:\n\n *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.\n *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"` */\n fieldKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PageBeanIssueFieldOption",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "delete__/rest/api/3/field/{fieldKey}/option/{optionId}": {
    "query": {},
    "body": {},
    "path": {
      ".fieldKey": {
        "rendered": "\n/** The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:\n\n *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.\n *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"` */\n fieldKey: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".optionId": {
        "rendered": "\n/** The ID of the option to be deleted. */\n optionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/field/{fieldKey}/option/{optionId}": {
    "query": {},
    "body": {},
    "path": {
      ".fieldKey": {
        "rendered": "\n/** The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:\n\n *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.\n *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"` */\n fieldKey: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".optionId": {
        "rendered": "\n/** The ID of the option to be returned. */\n optionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "IssueFieldOption",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "put__/rest/api/3/field/{fieldKey}/option/{optionId}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: IssueFieldOption,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".fieldKey": {
        "rendered": "\n/** The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:\n\n *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.\n *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"` */\n fieldKey: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".optionId": {
        "rendered": "\n/** The ID of the option to be updated. */\n optionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "IssueFieldOption",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "delete__/rest/api/3/field/{fieldKey}/option/{optionId}/issue": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The ID of the option that will replace the currently selected option. */\n replaceWith?: number, \n/** A JQL query that specifies the issues to be updated. For example, *project=10000*. */\n jql?: string, \n/** Whether screen security is overridden to enable hidden fields to be edited. Available to Connect and Forge app users with admin permission. */\n overrideScreenSecurity?: boolean, \n/** Whether screen security is overridden to enable uneditable fields to be edited. Available to Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). */\n overrideEditableFlag?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.replaceWith": {
        "rendered": "\n/** The ID of the option that will replace the currently selected option. */\n replaceWith?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.jql": {
        "rendered": "\n/** A JQL query that specifies the issues to be updated. For example, *project=10000*. */\n jql?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.overrideScreenSecurity": {
        "rendered": "\n/** Whether screen security is overridden to enable hidden fields to be edited. Available to Connect and Forge app users with admin permission. */\n overrideScreenSecurity?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.overrideEditableFlag": {
        "rendered": "\n/** Whether screen security is overridden to enable uneditable fields to be edited. Available to Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). */\n overrideEditableFlag?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".fieldKey": {
        "rendered": "\n/** The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:\n\n *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.\n *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"` */\n fieldKey: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".optionId": {
        "rendered": "\n/** The ID of the option to be deselected. */\n optionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/field/{id}": {
    "query": {},
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of a custom field. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/field/{id}/restore": {
    "query": {},
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of a custom field. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/field/{id}/trash": {
    "query": {},
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of a custom field. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/fieldconfiguration": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, \n/** The list of field configuration IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. */\n id?: (number)[], \n/** If *true* returns default field configurations only. */\n isDefault?: boolean, \n/** The query string used to match against field configuration names and descriptions. */\n query?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.id": {
        "rendered": "\n/** The list of field configuration IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. */\n id?: (number)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.id.__no_name": {
        "rendered": "number",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.isDefault": {
        "rendered": "\n/** If *true* returns default field configurations only. */\n isDefault?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The query string used to match against field configuration names and descriptions. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PageBeanFieldConfigurationDetails",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/fieldconfiguration": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: FieldConfigurationDetails,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "FieldConfiguration",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/fieldconfiguration/{id}": {
    "query": {},
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the field configuration. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/fieldconfiguration/{id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: FieldConfigurationDetails,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the field configuration. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/fieldconfiguration/{id}/fields": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the field configuration. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PageBeanFieldConfigurationItem",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/fieldconfiguration/{id}/fields": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: FieldConfigurationItemsDetails,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the field configuration. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/fieldconfigurationscheme": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, \n/** The list of field configuration scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. */\n id?: (number)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.id": {
        "rendered": "\n/** The list of field configuration scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. */\n id?: (number)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.id.__no_name": {
        "rendered": "number",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PageBeanFieldConfigurationScheme",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/fieldconfigurationscheme": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: UpdateFieldConfigurationSchemeDetails,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "FieldConfigurationScheme",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/fieldconfigurationscheme/mapping": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, \n/** The list of field configuration scheme IDs. To include multiple field configuration schemes separate IDs with ampersand: `fieldConfigurationSchemeId=10000&fieldConfigurationSchemeId=10001`. */\n fieldConfigurationSchemeId?: (number)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fieldConfigurationSchemeId": {
        "rendered": "\n/** The list of field configuration scheme IDs. To include multiple field configuration schemes separate IDs with ampersand: `fieldConfigurationSchemeId=10000&fieldConfigurationSchemeId=10001`. */\n fieldConfigurationSchemeId?: (number)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fieldConfigurationSchemeId.__no_name": {
        "rendered": "number",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PageBeanFieldConfigurationIssueTypeItem",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/fieldconfigurationscheme/project": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, \n/** The list of project IDs. To include multiple projects, separate IDs with ampersand: `projectId=10000&projectId=10001`. */\n projectId: (number)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** The list of project IDs. To include multiple projects, separate IDs with ampersand: `projectId=10000&projectId=10001`. */\n projectId: (number)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId.__no_name": {
        "rendered": "number",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PageBeanFieldConfigurationSchemeProjects",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/fieldconfigurationscheme/project": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: FieldConfigurationSchemeProjectAssociation,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/fieldconfigurationscheme/{id}": {
    "query": {},
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the field configuration scheme. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/fieldconfigurationscheme/{id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: UpdateFieldConfigurationSchemeDetails,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the field configuration scheme. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/fieldconfigurationscheme/{id}/mapping": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: AssociateFieldConfigurationsWithIssueTypesRequest,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the field configuration scheme. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/fieldconfigurationscheme/{id}/mapping/delete": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: IssueTypeIdsToRemove,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the field configuration scheme. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/filter": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`. */\n expand?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Filter)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "Filter",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/filter": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`. */\n expand?: string, \n/** EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be created. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). */\n overrideSharePermissions?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.overrideSharePermissions": {
        "rendered": "\n/** EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be created. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). */\n overrideSharePermissions?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: Filter,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "Filter",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/filter/defaultShareScope": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "DefaultShareScope",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "put__/rest/api/3/filter/defaultShareScope": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: DefaultShareScope,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "DefaultShareScope",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/filter/favourite": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`. */\n expand?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Filter)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "Filter",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/filter/my": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`. */\n expand?: string, \n/** Include the user's favorite filters in the response. */\n includeFavourites?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.includeFavourites": {
        "rendered": "\n/** Include the user's favorite filters in the response. */\n includeFavourites?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Filter)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "Filter",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/filter/search": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** String used to perform a case-insensitive partial match with `name`. */\n filterName?: string, \n/** User account ID used to return filters with the matching `owner.accountId`. This parameter cannot be used with `owner`. */\n accountId?: string, \n/** This parameter is deprecated because of privacy changes. Use `accountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. User name used to return filters with the matching `owner.name`. This parameter cannot be used with `accountId`. */\n owner?: string, \n/** As a group's name can change, use of `groupId` is recommended to identify a group. Group name used to returns filters that are shared with a group that matches `sharePermissions.group.groupname`. This parameter cannot be used with the `groupId` parameter. */\n groupname?: string, \n/** Group ID used to returns filters that are shared with a group that matches `sharePermissions.group.groupId`. This parameter cannot be used with the `groupname` parameter. */\n groupId?: string, \n/** Project ID used to returns filters that are shared with a project that matches `sharePermissions.project.id`. */\n projectId?: number, \n/** The list of filter IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. Do not exceed 200 filter IDs. */\n id?: (number)[], \n/** [Order](#ordering) the results by a field:\n\n *  `description` Sorts by filter description. Note that this sorting works independently of whether the expand to display the description field is in use.\n *  `favourite_count` Sorts by the count of how many users have this filter as a favorite.\n *  `is_favourite` Sorts by whether the filter is marked as a favorite.\n *  `id` Sorts by filter ID.\n *  `name` Sorts by filter name.\n *  `owner` Sorts by the ID of the filter owner.\n *  `is_shared` Sorts by whether the filter is shared. */\n orderBy?: \"description\" | \"-description\" | \"+description\" | \"favourite_count\" | \"-favourite_count\" | \"+favourite_count\" | \"id\" | \"-id\" | \"+id\" | \"is_favourite\" | \"-is_favourite\" | \"+is_favourite\" | \"name\" | \"-name\" | \"+name\" | \"owner\" | \"-owner\" | \"+owner\" | \"is_shared\" | \"-is_shared\" | \"+is_shared\", \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, \n/** Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `description` Returns the description of the filter.\n *  `favourite` Returns an indicator of whether the user has set the filter as a favorite.\n *  `favouritedCount` Returns a count of how many users have set this filter as a favorite.\n *  `jql` Returns the JQL query that the filter uses.\n *  `owner` Returns the owner of the filter.\n *  `searchUrl` Returns a URL to perform the filter's JQL query.\n *  `sharePermissions` Returns the share permissions defined for the filter.\n *  `editPermissions` Returns the edit permissions defined for the filter.\n *  `isWritable` Returns whether the current user has permission to edit the filter.\n *  `subscriptions` Returns the users that are subscribed to the filter.\n *  `viewUrl` Returns a URL to view the filter. */\n expand?: string, \n/** EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be returned. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). */\n overrideSharePermissions?: boolean, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filterName": {
        "rendered": "\n/** String used to perform a case-insensitive partial match with `name`. */\n filterName?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.accountId": {
        "rendered": "\n/** User account ID used to return filters with the matching `owner.accountId`. This parameter cannot be used with `owner`. */\n accountId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.owner": {
        "rendered": "\n/** This parameter is deprecated because of privacy changes. Use `accountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. User name used to return filters with the matching `owner.name`. This parameter cannot be used with `accountId`. */\n owner?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.groupname": {
        "rendered": "\n/** As a group's name can change, use of `groupId` is recommended to identify a group. Group name used to returns filters that are shared with a group that matches `sharePermissions.group.groupname`. This parameter cannot be used with the `groupId` parameter. */\n groupname?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.groupId": {
        "rendered": "\n/** Group ID used to returns filters that are shared with a group that matches `sharePermissions.group.groupId`. This parameter cannot be used with the `groupname` parameter. */\n groupId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID used to returns filters that are shared with a project that matches `sharePermissions.project.id`. */\n projectId?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.id": {
        "rendered": "\n/** The list of filter IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. Do not exceed 200 filter IDs. */\n id?: (number)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.id.__no_name": {
        "rendered": "number",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.orderBy": {
        "rendered": "\n/** [Order](#ordering) the results by a field:\n\n *  `description` Sorts by filter description. Note that this sorting works independently of whether the expand to display the description field is in use.\n *  `favourite_count` Sorts by the count of how many users have this filter as a favorite.\n *  `is_favourite` Sorts by whether the filter is marked as a favorite.\n *  `id` Sorts by filter ID.\n *  `name` Sorts by filter name.\n *  `owner` Sorts by the ID of the filter owner.\n *  `is_shared` Sorts by whether the filter is shared. */\n orderBy?: \"description\" | \"-description\" | \"+description\" | \"favourite_count\" | \"-favourite_count\" | \"+favourite_count\" | \"id\" | \"-id\" | \"+id\" | \"is_favourite\" | \"-is_favourite\" | \"+is_favourite\" | \"name\" | \"-name\" | \"+name\" | \"owner\" | \"-owner\" | \"+owner\" | \"is_shared\" | \"-is_shared\" | \"+is_shared\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `description` Returns the description of the filter.\n *  `favourite` Returns an indicator of whether the user has set the filter as a favorite.\n *  `favouritedCount` Returns a count of how many users have set this filter as a favorite.\n *  `jql` Returns the JQL query that the filter uses.\n *  `owner` Returns the owner of the filter.\n *  `searchUrl` Returns a URL to perform the filter's JQL query.\n *  `sharePermissions` Returns the share permissions defined for the filter.\n *  `editPermissions` Returns the edit permissions defined for the filter.\n *  `isWritable` Returns whether the current user has permission to edit the filter.\n *  `subscriptions` Returns the users that are subscribed to the filter.\n *  `viewUrl` Returns a URL to view the filter. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.overrideSharePermissions": {
        "rendered": "\n/** EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be returned. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). */\n overrideSharePermissions?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PageBeanFilterDetails",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "delete__/rest/api/3/filter/{id}": {
    "query": {},
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the filter to delete. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/filter/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`. */\n expand?: string, \n/** EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be returned. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). */\n overrideSharePermissions?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.overrideSharePermissions": {
        "rendered": "\n/** EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be returned. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). */\n overrideSharePermissions?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the filter to return. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Filter",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "put__/rest/api/3/filter/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`. */\n expand?: string, \n/** EXPERIMENTAL: Whether share permissions are overridden to enable the addition of any share permissions to filters. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). */\n overrideSharePermissions?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.overrideSharePermissions": {
        "rendered": "\n/** EXPERIMENTAL: Whether share permissions are overridden to enable the addition of any share permissions to filters. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). */\n overrideSharePermissions?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: Filter,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the filter to update. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Filter",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "delete__/rest/api/3/filter/{id}/columns": {
    "query": {},
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the filter. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/filter/{id}/columns": {
    "query": {},
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the filter. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(ColumnItem)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "ColumnItem",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/filter/{id}/columns": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the filter. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/filter/{id}/favourite": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`. */\n expand?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the filter. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Filter",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "put__/rest/api/3/filter/{id}/favourite": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`. */\n expand?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.\n *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the filter. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Filter",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "put__/rest/api/3/filter/{id}/owner": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: ChangeFilterOwner,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the filter to update. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/filter/{id}/permission": {
    "query": {},
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the filter. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(SharePermission)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "SharePermission",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/filter/{id}/permission": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: SharePermissionInputBean,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the filter. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(SharePermission)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "SharePermission",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "delete__/rest/api/3/filter/{id}/permission/{permissionId}": {
    "query": {},
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the filter. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".permissionId": {
        "rendered": "\n/** The ID of the share permission. */\n permissionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/filter/{id}/permission/{permissionId}": {
    "query": {},
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the filter. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".permissionId": {
        "rendered": "\n/** The ID of the share permission. */\n permissionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "SharePermission",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "delete__/rest/api/3/group": {
    "query": {
      ".query": {
        "rendered": " query: {  groupname?: string, \n/** The ID of the group. This parameter cannot be used with the `groupname` parameter. */\n groupId?: string, \n/** As a group's name can change, use of `swapGroupId` is recommended to identify a group.  \nThe group to transfer restrictions to. Only comments and worklogs are transferred. If restrictions are not transferred, comments and worklogs are inaccessible after the deletion. This parameter cannot be used with the `swapGroupId` parameter. */\n swapGroup?: string, \n/** The ID of the group to transfer restrictions to. Only comments and worklogs are transferred. If restrictions are not transferred, comments and worklogs are inaccessible after the deletion. This parameter cannot be used with the `swapGroup` parameter. */\n swapGroupId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.groupname": {
        "rendered": " groupname?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.groupId": {
        "rendered": "\n/** The ID of the group. This parameter cannot be used with the `groupname` parameter. */\n groupId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.swapGroup": {
        "rendered": "\n/** As a group's name can change, use of `swapGroupId` is recommended to identify a group.  \nThe group to transfer restrictions to. Only comments and worklogs are transferred. If restrictions are not transferred, comments and worklogs are inaccessible after the deletion. This parameter cannot be used with the `swapGroupId` parameter. */\n swapGroup?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.swapGroupId": {
        "rendered": "\n/** The ID of the group to transfer restrictions to. Only comments and worklogs are transferred. If restrictions are not transferred, comments and worklogs are inaccessible after the deletion. This parameter cannot be used with the `swapGroup` parameter. */\n swapGroupId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/group": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** As a group's name can change, use of `groupId` is recommended to identify a group.  \nThe name of the group. This parameter cannot be used with the `groupId` parameter. */\n groupname?: string, \n/** The ID of the group. This parameter cannot be used with the `groupName` parameter. */\n groupId?: string, \n/** List of fields to expand. */\n expand?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.groupname": {
        "rendered": "\n/** As a group's name can change, use of `groupId` is recommended to identify a group.  \nThe name of the group. This parameter cannot be used with the `groupId` parameter. */\n groupname?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.groupId": {
        "rendered": "\n/** The ID of the group. This parameter cannot be used with the `groupName` parameter. */\n groupId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** List of fields to expand. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "Group",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/group": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: AddGroupBean,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "Group",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/group/bulk": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, \n/** The ID of a group. To specify multiple IDs, pass multiple `groupId` parameters. For example, `groupId=5b10a2844c20165700ede21g&groupId=5b10ac8d82e05b22cc7d4ef5`. */\n groupId?: (string)[], \n/** The name of a group. To specify multiple names, pass multiple `groupName` parameters. For example, `groupName=administrators&groupName=jira-software-users`. */\n groupName?: (string)[], \n/** The access level of a group. Valid values: 'site-admin', 'admin', 'user'. */\n accessType?: string, \n/** The application key of the product user groups to search for. Valid values: 'jira-servicedesk', 'jira-software', 'jira-product-discovery', 'jira-core'. */\n applicationKey?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.groupId": {
        "rendered": "\n/** The ID of a group. To specify multiple IDs, pass multiple `groupId` parameters. For example, `groupId=5b10a2844c20165700ede21g&groupId=5b10ac8d82e05b22cc7d4ef5`. */\n groupId?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.groupId.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.groupName": {
        "rendered": "\n/** The name of a group. To specify multiple names, pass multiple `groupName` parameters. For example, `groupName=administrators&groupName=jira-software-users`. */\n groupName?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.groupName.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.accessType": {
        "rendered": "\n/** The access level of a group. Valid values: 'site-admin', 'admin', 'user'. */\n accessType?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.applicationKey": {
        "rendered": "\n/** The application key of the product user groups to search for. Valid values: 'jira-servicedesk', 'jira-software', 'jira-product-discovery', 'jira-core'. */\n applicationKey?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PageBeanGroupDetails",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/group/member": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** As a group's name can change, use of `groupId` is recommended to identify a group.  \nThe name of the group. This parameter cannot be used with the `groupId` parameter. */\n groupname?: string, \n/** The ID of the group. This parameter cannot be used with the `groupName` parameter. */\n groupId?: string, \n/** Include inactive users. */\n includeInactiveUsers?: boolean, \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.groupname": {
        "rendered": "\n/** As a group's name can change, use of `groupId` is recommended to identify a group.  \nThe name of the group. This parameter cannot be used with the `groupId` parameter. */\n groupname?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.groupId": {
        "rendered": "\n/** The ID of the group. This parameter cannot be used with the `groupName` parameter. */\n groupId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.includeInactiveUsers": {
        "rendered": "\n/** Include inactive users. */\n includeInactiveUsers?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PageBeanUserDetails",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/group/user": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** As a group's name can change, use of `groupId` is recommended to identify a group.  \nThe name of the group. This parameter cannot be used with the `groupId` parameter. */\n groupname?: string, \n/** The ID of the group. This parameter cannot be used with the `groupName` parameter. */\n groupId?: string, \n/** This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n username?: string, \n/** The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. */\n accountId: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.groupname": {
        "rendered": "\n/** As a group's name can change, use of `groupId` is recommended to identify a group.  \nThe name of the group. This parameter cannot be used with the `groupId` parameter. */\n groupname?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.groupId": {
        "rendered": "\n/** The ID of the group. This parameter cannot be used with the `groupName` parameter. */\n groupId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.username": {
        "rendered": "\n/** This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n username?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.accountId": {
        "rendered": "\n/** The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. */\n accountId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/group/user": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** As a group's name can change, use of `groupId` is recommended to identify a group.  \nThe name of the group. This parameter cannot be used with the `groupId` parameter. */\n groupname?: string, \n/** The ID of the group. This parameter cannot be used with the `groupName` parameter. */\n groupId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.groupname": {
        "rendered": "\n/** As a group's name can change, use of `groupId` is recommended to identify a group.  \nThe name of the group. This parameter cannot be used with the `groupId` parameter. */\n groupname?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.groupId": {
        "rendered": "\n/** The ID of the group. This parameter cannot be used with the `groupName` parameter. */\n groupId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: UpdateUserToGroupBean,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "Group",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/groups/picker": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** This parameter is deprecated, setting it does not affect the results. To find groups containing a particular user, use [Get user groups](#api-rest-api-3-user-groups-get). */\n accountId?: string, \n/** The string to find in group names. */\n query?: string, \n/** As a group's name can change, use of `excludeGroupIds` is recommended to identify a group.  \nA group to exclude from the result. To exclude multiple groups, provide an ampersand-separated list. For example, `exclude=group1&exclude=group2`. This parameter cannot be used with the `excludeGroupIds` parameter. */\n exclude?: (string)[], \n/** A group ID to exclude from the result. To exclude multiple groups, provide an ampersand-separated list. For example, `excludeId=group1-id&excludeId=group2-id`. This parameter cannot be used with the `excludeGroups` parameter. */\n excludeId?: (string)[], \n/** The maximum number of groups to return. The maximum number of groups that can be returned is limited by the system property `jira.ajax.autocomplete.limit`. */\n maxResults?: number, \n/** Whether the search for groups should be case insensitive. */\n caseInsensitive?: boolean, \n/** This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n userName?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.accountId": {
        "rendered": "\n/** This parameter is deprecated, setting it does not affect the results. To find groups containing a particular user, use [Get user groups](#api-rest-api-3-user-groups-get). */\n accountId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The string to find in group names. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.exclude": {
        "rendered": "\n/** As a group's name can change, use of `excludeGroupIds` is recommended to identify a group.  \nA group to exclude from the result. To exclude multiple groups, provide an ampersand-separated list. For example, `exclude=group1&exclude=group2`. This parameter cannot be used with the `excludeGroupIds` parameter. */\n exclude?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.exclude.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.excludeId": {
        "rendered": "\n/** A group ID to exclude from the result. To exclude multiple groups, provide an ampersand-separated list. For example, `excludeId=group1-id&excludeId=group2-id`. This parameter cannot be used with the `excludeGroups` parameter. */\n excludeId?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.excludeId.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of groups to return. The maximum number of groups that can be returned is limited by the system property `jira.ajax.autocomplete.limit`. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.caseInsensitive": {
        "rendered": "\n/** Whether the search for groups should be case insensitive. */\n caseInsensitive?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.userName": {
        "rendered": "\n/** This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n userName?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "FoundGroups",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/groupuserpicker": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The search string. */\n query: string, \n/** The maximum number of items to return in each list. */\n maxResults?: number, \n/** Whether the user avatar should be returned. If an invalid value is provided, the default value is used. */\n showAvatar?: boolean, \n/** The custom field ID of the field this request is for. */\n fieldId?: string, \n/** The ID of a project that returned users and groups must have permission to view. To include multiple projects, provide an ampersand-separated list. For example, `projectId=10000&projectId=10001`. This parameter is only used when `fieldId` is present. */\n projectId?: (string)[], \n/** The ID of an issue type that returned users and groups must have permission to view. To include multiple issue types, provide an ampersand-separated list. For example, `issueTypeId=10000&issueTypeId=10001`. Special values, such as `-1` (all standard issue types) and `-2` (all subtask issue types), are supported. This parameter is only used when `fieldId` is present. */\n issueTypeId?: (string)[], \n/** The size of the avatar to return. If an invalid value is provided, the default value is used. */\n avatarSize?: \"xsmall\" | \"xsmall@2x\" | \"xsmall@3x\" | \"small\" | \"small@2x\" | \"small@3x\" | \"medium\" | \"medium@2x\" | \"medium@3x\" | \"large\" | \"large@2x\" | \"large@3x\" | \"xlarge\" | \"xlarge@2x\" | \"xlarge@3x\" | \"xxlarge\" | \"xxlarge@2x\" | \"xxlarge@3x\" | \"xxxlarge\" | \"xxxlarge@2x\" | \"xxxlarge@3x\", \n/** Whether the search for groups should be case insensitive. */\n caseInsensitive?: boolean, \n/** Whether Connect app users and groups should be excluded from the search results. If an invalid value is provided, the default value is used. */\n excludeConnectAddons?: boolean, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.query": {
        "rendered": "\n/** The search string. */\n query: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return in each list. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.showAvatar": {
        "rendered": "\n/** Whether the user avatar should be returned. If an invalid value is provided, the default value is used. */\n showAvatar?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fieldId": {
        "rendered": "\n/** The custom field ID of the field this request is for. */\n fieldId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** The ID of a project that returned users and groups must have permission to view. To include multiple projects, provide an ampersand-separated list. For example, `projectId=10000&projectId=10001`. This parameter is only used when `fieldId` is present. */\n projectId?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.issueTypeId": {
        "rendered": "\n/** The ID of an issue type that returned users and groups must have permission to view. To include multiple issue types, provide an ampersand-separated list. For example, `issueTypeId=10000&issueTypeId=10001`. Special values, such as `-1` (all standard issue types) and `-2` (all subtask issue types), are supported. This parameter is only used when `fieldId` is present. */\n issueTypeId?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.issueTypeId.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.avatarSize": {
        "rendered": "\n/** The size of the avatar to return. If an invalid value is provided, the default value is used. */\n avatarSize?: \"xsmall\" | \"xsmall@2x\" | \"xsmall@3x\" | \"small\" | \"small@2x\" | \"small@3x\" | \"medium\" | \"medium@2x\" | \"medium@3x\" | \"large\" | \"large@2x\" | \"large@3x\" | \"xlarge\" | \"xlarge@2x\" | \"xlarge@3x\" | \"xxlarge\" | \"xxlarge@2x\" | \"xxlarge@3x\" | \"xxxlarge\" | \"xxxlarge@2x\" | \"xxxlarge@3x\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.caseInsensitive": {
        "rendered": "\n/** Whether the search for groups should be case insensitive. */\n caseInsensitive?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.excludeConnectAddons": {
        "rendered": "\n/** Whether Connect app users and groups should be excluded from the search results. If an invalid value is provided, the default value is used. */\n excludeConnectAddons?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "FoundUsersAndGroups",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/instance/license": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "License",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/issue": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Whether the project in which the issue is created is added to the user's **Recently viewed** project list, as shown under **Projects** in Jira. When provided, the issue type and request type are added to the user's history for a project. These values are then used to provide defaults on the issue create screen. */\n updateHistory?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.updateHistory": {
        "rendered": "\n/** Whether the project in which the issue is created is added to the user's **Recently viewed** project list, as shown under **Projects** in Jira. When provided, the issue type and request type are added to the user's history for a project. These values are then used to provide defaults on the issue create screen. */\n updateHistory?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: IssueUpdateDetails,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "CreatedIssue",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/issue/bulk": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: IssuesUpdateBean,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "CreatedIssues",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/issue/createmeta": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** List of project IDs. This parameter accepts a comma-separated list. Multiple project IDs can also be provided using an ampersand-separated list. For example, `projectIds=10000,10001&projectIds=10020,10021`. This parameter may be provided with `projectKeys`. */\n projectIds?: (string)[], \n/** List of project keys. This parameter accepts a comma-separated list. Multiple project keys can also be provided using an ampersand-separated list. For example, `projectKeys=proj1,proj2&projectKeys=proj3`. This parameter may be provided with `projectIds`. */\n projectKeys?: (string)[], \n/** List of issue type IDs. This parameter accepts a comma-separated list. Multiple issue type IDs can also be provided using an ampersand-separated list. For example, `issuetypeIds=10000,10001&issuetypeIds=10020,10021`. This parameter may be provided with `issuetypeNames`. */\n issuetypeIds?: (string)[], \n/** List of issue type names. This parameter accepts a comma-separated list. Multiple issue type names can also be provided using an ampersand-separated list. For example, `issuetypeNames=name1,name2&issuetypeNames=name3`. This parameter may be provided with `issuetypeIds`. */\n issuetypeNames?: (string)[], \n/** Use [expand](#expansion) to include additional information about issue metadata in the response. This parameter accepts `projects.issuetypes.fields`, which returns information about the fields in the issue creation screen for each issue type. Fields hidden from the screen are not returned. Use the information to populate the `fields` and `update` fields in [Create issue](#api-rest-api-3-issue-post) and [Create issues](#api-rest-api-3-issue-bulk-post). */\n expand?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectIds": {
        "rendered": "\n/** List of project IDs. This parameter accepts a comma-separated list. Multiple project IDs can also be provided using an ampersand-separated list. For example, `projectIds=10000,10001&projectIds=10020,10021`. This parameter may be provided with `projectKeys`. */\n projectIds?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectIds.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectKeys": {
        "rendered": "\n/** List of project keys. This parameter accepts a comma-separated list. Multiple project keys can also be provided using an ampersand-separated list. For example, `projectKeys=proj1,proj2&projectKeys=proj3`. This parameter may be provided with `projectIds`. */\n projectKeys?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectKeys.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.issuetypeIds": {
        "rendered": "\n/** List of issue type IDs. This parameter accepts a comma-separated list. Multiple issue type IDs can also be provided using an ampersand-separated list. For example, `issuetypeIds=10000,10001&issuetypeIds=10020,10021`. This parameter may be provided with `issuetypeNames`. */\n issuetypeIds?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.issuetypeIds.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.issuetypeNames": {
        "rendered": "\n/** List of issue type names. This parameter accepts a comma-separated list. Multiple issue type names can also be provided using an ampersand-separated list. For example, `issuetypeNames=name1,name2&issuetypeNames=name3`. This parameter may be provided with `issuetypeIds`. */\n issuetypeNames?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.issuetypeNames.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information about issue metadata in the response. This parameter accepts `projects.issuetypes.fields`, which returns information about the fields in the issue creation screen for each issue type. Fields hidden from the screen are not returned. Use the information to populate the `fields` and `update` fields in [Create issue](#api-rest-api-3-issue-post) and [Create issues](#api-rest-api-3-issue-bulk-post). */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "IssueCreateMetadata",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/issue/picker": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A string to match against text fields in the issue such as title, description, or comments. */\n query?: string, \n/** A JQL query defining a list of issues to search for the query term. Note that `username` and `userkey` cannot be used as search terms for this parameter, due to privacy reasons. Use `accountId` instead. */\n currentJQL?: string, \n/** The key of an issue to exclude from search results. For example, the issue the user is viewing when they perform this query. */\n currentIssueKey?: string, \n/** The ID of a project that suggested issues must belong to. */\n currentProjectId?: string, \n/** Indicate whether to include subtasks in the suggestions list. */\n showSubTasks?: boolean, \n/** When `currentIssueKey` is a subtask, whether to include the parent issue in the suggestions if it matches the query. */\n showSubTaskParent?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** A string to match against text fields in the issue such as title, description, or comments. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.currentJQL": {
        "rendered": "\n/** A JQL query defining a list of issues to search for the query term. Note that `username` and `userkey` cannot be used as search terms for this parameter, due to privacy reasons. Use `accountId` instead. */\n currentJQL?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.currentIssueKey": {
        "rendered": "\n/** The key of an issue to exclude from search results. For example, the issue the user is viewing when they perform this query. */\n currentIssueKey?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.currentProjectId": {
        "rendered": "\n/** The ID of a project that suggested issues must belong to. */\n currentProjectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.showSubTasks": {
        "rendered": "\n/** Indicate whether to include subtasks in the suggestions list. */\n showSubTasks?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.showSubTaskParent": {
        "rendered": "\n/** When `currentIssueKey` is a subtask, whether to include the parent issue in the suggestions if it matches the query. */\n showSubTaskParent?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "IssuePickerSuggestions",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/issue/properties": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: IssueEntityProperties,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/issue/properties/multi": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: MultiIssueEntityProperties,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/issue/properties/{propertyKey}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: IssueFilterForBulkPropertyDelete,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".propertyKey": {
        "rendered": "\n/** The key of the property. */\n propertyKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/issue/properties/{propertyKey}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: BulkIssuePropertyUpdateRequest,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".propertyKey": {
        "rendered": "\n/** The key of the property. The maximum length is 255 characters. */\n propertyKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/issue/watching": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: IssueList,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "BulkIssueIsWatching",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/issue/{issueIdOrKey}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Whether the issue's subtasks are deleted when the issue is deleted. */\n deleteSubtasks?: \"true\" | \"false\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.deleteSubtasks": {
        "rendered": "\n/** Whether the issue's subtasks are deleted when the issue is deleted. */\n deleteSubtasks?: \"true\" | \"false\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".issueIdOrKey": {
        "rendered": "\n/** The ID or key of the issue. */\n issueIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/issue/{issueIdOrKey}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A list of fields to return for the issue. This parameter accepts a comma-separated list. Use it to retrieve a subset of fields. Allowed values:\n\n *  `*all` Returns all fields.\n *  `*navigable` Returns navigable fields.\n *  Any issue field, prefixed with a minus to exclude.\n\nExamples:\n\n *  `summary,comment` Returns only the summary and comments fields.\n *  `-description` Returns all (default) fields except description.\n *  `*navigable,-comment` Returns all navigable fields except comment.\n\nThis parameter may be specified multiple times. For example, `fields=field1,field2& fields=field3`.\n\nNote: All fields are returned by default. This differs from [Search for issues using JQL (GET)](#api-rest-api-3-search-get) and [Search for issues using JQL (POST)](#api-rest-api-3-search-post) where the default is all navigable fields. */\n fields?: (string)[], \n/** Whether fields in `fields` are referenced by keys rather than IDs. This parameter is useful where fields have been added by a connect app and a field's key may differ from its ID. */\n fieldsByKeys?: boolean, \n/** Use [expand](#expansion) to include additional information about the issues in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `renderedFields` Returns field values rendered in HTML format.\n *  `names` Returns the display name of each field.\n *  `schema` Returns the schema describing a field type.\n *  `transitions` Returns all possible transitions for the issue.\n *  `editmeta` Returns information about how each field can be edited.\n *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.\n *  `versionedRepresentations` Returns a JSON array for each version of a field's value, with the highest number representing the most recent version. Note: When included in the request, the `fields` parameter is ignored. */\n expand?: string, \n/** A list of issue properties to return for the issue. This parameter accepts a comma-separated list. Allowed values:\n\n *  `*all` Returns all issue properties.\n *  Any issue property key, prefixed with a minus to exclude.\n\nExamples:\n\n *  `*all` Returns all properties.\n *  `*all,-prop1` Returns all properties except `prop1`.\n *  `prop1,prop2` Returns `prop1` and `prop2` properties.\n\nThis parameter may be specified multiple times. For example, `properties=prop1,prop2& properties=prop3`. */\n properties?: (string)[], \n/** Whether the project in which the issue is created is added to the user's **Recently viewed** project list, as shown under **Projects** in Jira. This also populates the [JQL issues search](#api-rest-api-3-search-get) `lastViewed` field. */\n updateHistory?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** A list of fields to return for the issue. This parameter accepts a comma-separated list. Use it to retrieve a subset of fields. Allowed values:\n\n *  `*all` Returns all fields.\n *  `*navigable` Returns navigable fields.\n *  Any issue field, prefixed with a minus to exclude.\n\nExamples:\n\n *  `summary,comment` Returns only the summary and comments fields.\n *  `-description` Returns all (default) fields except description.\n *  `*navigable,-comment` Returns all navigable fields except comment.\n\nThis parameter may be specified multiple times. For example, `fields=field1,field2& fields=field3`.\n\nNote: All fields are returned by default. This differs from [Search for issues using JQL (GET)](#api-rest-api-3-search-get) and [Search for issues using JQL (POST)](#api-rest-api-3-search-post) where the default is all navigable fields. */\n fields?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fieldsByKeys": {
        "rendered": "\n/** Whether fields in `fields` are referenced by keys rather than IDs. This parameter is useful where fields have been added by a connect app and a field's key may differ from its ID. */\n fieldsByKeys?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information about the issues in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `renderedFields` Returns field values rendered in HTML format.\n *  `names` Returns the display name of each field.\n *  `schema` Returns the schema describing a field type.\n *  `transitions` Returns all possible transitions for the issue.\n *  `editmeta` Returns information about how each field can be edited.\n *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.\n *  `versionedRepresentations` Returns a JSON array for each version of a field's value, with the highest number representing the most recent version. Note: When included in the request, the `fields` parameter is ignored. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.properties": {
        "rendered": "\n/** A list of issue properties to return for the issue. This parameter accepts a comma-separated list. Allowed values:\n\n *  `*all` Returns all issue properties.\n *  Any issue property key, prefixed with a minus to exclude.\n\nExamples:\n\n *  `*all` Returns all properties.\n *  `*all,-prop1` Returns all properties except `prop1`.\n *  `prop1,prop2` Returns `prop1` and `prop2` properties.\n\nThis parameter may be specified multiple times. For example, `properties=prop1,prop2& properties=prop3`. */\n properties?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.properties.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.updateHistory": {
        "rendered": "\n/** Whether the project in which the issue is created is added to the user's **Recently viewed** project list, as shown under **Projects** in Jira. This also populates the [JQL issues search](#api-rest-api-3-search-get) `lastViewed` field. */\n updateHistory?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".issueIdOrKey": {
        "rendered": "\n/** The ID or key of the issue. */\n issueIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "IssueBean",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "put__/rest/api/3/issue/{issueIdOrKey}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Whether a notification email about the issue update is sent to all watchers. To disable the notification, administer Jira or administer project permissions are required. If the user doesn't have the necessary permission the request is ignored. */\n notifyUsers?: boolean, \n/** Whether screen security is overridden to enable hidden fields to be edited. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). */\n overrideScreenSecurity?: boolean, \n/** Whether screen security is overridden to enable uneditable fields to be edited. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). */\n overrideEditableFlag?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.notifyUsers": {
        "rendered": "\n/** Whether a notification email about the issue update is sent to all watchers. To disable the notification, administer Jira or administer project permissions are required. If the user doesn't have the necessary permission the request is ignored. */\n notifyUsers?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.overrideScreenSecurity": {
        "rendered": "\n/** Whether screen security is overridden to enable hidden fields to be edited. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). */\n overrideScreenSecurity?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.overrideEditableFlag": {
        "rendered": "\n/** Whether screen security is overridden to enable uneditable fields to be edited. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). */\n overrideEditableFlag?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: IssueUpdateDetails,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".issueIdOrKey": {
        "rendered": "\n/** The ID or key of the issue. */\n issueIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/issue/{issueIdOrKey}/assignee": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: User,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".issueIdOrKey": {
        "rendered": "\n/** The ID or key of the issue to be assigned. */\n issueIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/issue/{issueIdOrKey}/attachments": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: File,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".issueIdOrKey": {
        "rendered": "\n/** The ID or key of the issue that attachments are added to. */\n issueIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Attachment)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "Attachment",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/issue/{issueIdOrKey}/changelog": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".issueIdOrKey": {
        "rendered": "\n/** The ID or key of the issue. */\n issueIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PageBeanChangelog",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/issue/{issueIdOrKey}/changelog/list": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: IssueChangelogIds,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".issueIdOrKey": {
        "rendered": "\n/** The ID or key of the issue. */\n issueIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PageOfChangelogs",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/issue/{issueIdOrKey}/comment": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, \n/** [Order](#ordering) the results by a field. Accepts *created* to sort comments by their created date. */\n orderBy?: \"created\" | \"-created\" | \"+created\", \n/** Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML. */\n expand?: string, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.orderBy": {
        "rendered": "\n/** [Order](#ordering) the results by a field. Accepts *created* to sort comments by their created date. */\n orderBy?: \"created\" | \"-created\" | \"+created\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".issueIdOrKey": {
        "rendered": "\n/** The ID or key of the issue. */\n issueIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PageOfComments",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/issue/{issueIdOrKey}/comment": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML. */\n expand?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: Comment,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".issueIdOrKey": {
        "rendered": "\n/** The ID or key of the issue. */\n issueIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Comment",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "delete__/rest/api/3/issue/{issueIdOrKey}/comment/{id}": {
    "query": {},
    "body": {},
    "path": {
      ".issueIdOrKey": {
        "rendered": "\n/** The ID or key of the issue. */\n issueIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".id": {
        "rendered": "\n/** The ID of the comment. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/issue/{issueIdOrKey}/comment/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML. */\n expand?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".issueIdOrKey": {
        "rendered": "\n/** The ID or key of the issue. */\n issueIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".id": {
        "rendered": "\n/** The ID of the comment. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Comment",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "put__/rest/api/3/issue/{issueIdOrKey}/comment/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Whether users are notified when a comment is updated. */\n notifyUsers?: boolean, \n/** Whether screen security is overridden to enable uneditable fields to be edited. Available to Connect app users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). */\n overrideEditableFlag?: boolean, \n/** Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML. */\n expand?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.notifyUsers": {
        "rendered": "\n/** Whether users are notified when a comment is updated. */\n notifyUsers?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.overrideEditableFlag": {
        "rendered": "\n/** Whether screen security is overridden to enable uneditable fields to be edited. Available to Connect app users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). */\n overrideEditableFlag?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: Comment,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".issueIdOrKey": {
        "rendered": "\n/** The ID or key of the issue. */\n issueIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".id": {
        "rendered": "\n/** The ID of the comment. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Comment",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/issue/{issueIdOrKey}/editmeta": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Whether hidden fields are returned. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). */\n overrideScreenSecurity?: boolean, \n/** Whether non-editable fields are returned. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). */\n overrideEditableFlag?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.overrideScreenSecurity": {
        "rendered": "\n/** Whether hidden fields are returned. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). */\n overrideScreenSecurity?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.overrideEditableFlag": {
        "rendered": "\n/** Whether non-editable fields are returned. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). */\n overrideEditableFlag?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".issueIdOrKey": {
        "rendered": "\n/** The ID or key of the issue. */\n issueIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "IssueUpdateMetadata",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/issue/{issueIdOrKey}/notify": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: Notification,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".issueIdOrKey": {
        "rendered": "\n/** ID or key of the issue that the notification is sent for. */\n issueIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/issue/{issueIdOrKey}/properties": {
    "query": {},
    "body": {},
    "path": {
      ".issueIdOrKey": {
        "rendered": "\n/** The key or ID of the issue. */\n issueIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PropertyKeys",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}": {
    "query": {},
    "body": {},
    "path": {
      ".issueIdOrKey": {
        "rendered": "\n/** The key or ID of the issue. */\n issueIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".propertyKey": {
        "rendered": "\n/** The key of the property. */\n propertyKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}": {
    "query": {},
    "body": {},
    "path": {
      ".issueIdOrKey": {
        "rendered": "\n/** The key or ID of the issue. */\n issueIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".propertyKey": {
        "rendered": "\n/** The key of the property. */\n propertyKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EntityProperty",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "put__/rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: any,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".issueIdOrKey": {
        "rendered": "\n/** The ID or key of the issue. */\n issueIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".propertyKey": {
        "rendered": "\n/** The key of the issue property. The maximum length is 255 characters. */\n propertyKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/issue/{issueIdOrKey}/remotelink": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The global ID of a remote issue link. */\n globalId: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.globalId": {
        "rendered": "\n/** The global ID of a remote issue link. */\n globalId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".issueIdOrKey": {
        "rendered": "\n/** The ID or key of the issue. */\n issueIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/issue/{issueIdOrKey}/remotelink": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The global ID of the remote issue link. */\n globalId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.globalId": {
        "rendered": "\n/** The global ID of the remote issue link. */\n globalId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".issueIdOrKey": {
        "rendered": "\n/** The ID or key of the issue. */\n issueIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "RemoteIssueLink",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/issue/{issueIdOrKey}/remotelink": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: RemoteIssueLinkRequest,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".issueIdOrKey": {
        "rendered": "\n/** The ID or key of the issue. */\n issueIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "RemoteIssueLinkIdentifies",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}": {
    "query": {},
    "body": {},
    "path": {
      ".issueIdOrKey": {
        "rendered": "\n/** The ID or key of the issue. */\n issueIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".linkId": {
        "rendered": "\n/** The ID of a remote issue link. */\n linkId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}": {
    "query": {},
    "body": {},
    "path": {
      ".issueIdOrKey": {
        "rendered": "\n/** The ID or key of the issue. */\n issueIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".linkId": {
        "rendered": "\n/** The ID of the remote issue link. */\n linkId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "RemoteIssueLink",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "put__/rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: RemoteIssueLinkRequest,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".issueIdOrKey": {
        "rendered": "\n/** The ID or key of the issue. */\n issueIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".linkId": {
        "rendered": "\n/** The ID of the remote issue link. */\n linkId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/issue/{issueIdOrKey}/transitions": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Use [expand](#expansion) to include additional information about transitions in the response. This parameter accepts `transitions.fields`, which returns information about the fields in the transition screen for each transition. Fields hidden from the screen are not returned. Use this information to populate the `fields` and `update` fields in [Transition issue](#api-rest-api-3-issue-issueIdOrKey-transitions-post). */\n expand?: string, \n/** The ID of the transition. */\n transitionId?: string, \n/** Whether transitions with the condition *Hide From User Condition* are included in the response. */\n skipRemoteOnlyCondition?: boolean, \n/** Whether details of transitions that fail a condition are included in the response */\n includeUnavailableTransitions?: boolean, \n/** Whether the transitions are sorted by ops-bar sequence value first then category order (Todo, In Progress, Done) or only by ops-bar sequence value. */\n sortByOpsBarAndStatus?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information about transitions in the response. This parameter accepts `transitions.fields`, which returns information about the fields in the transition screen for each transition. Fields hidden from the screen are not returned. Use this information to populate the `fields` and `update` fields in [Transition issue](#api-rest-api-3-issue-issueIdOrKey-transitions-post). */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.transitionId": {
        "rendered": "\n/** The ID of the transition. */\n transitionId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.skipRemoteOnlyCondition": {
        "rendered": "\n/** Whether transitions with the condition *Hide From User Condition* are included in the response. */\n skipRemoteOnlyCondition?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.includeUnavailableTransitions": {
        "rendered": "\n/** Whether details of transitions that fail a condition are included in the response */\n includeUnavailableTransitions?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sortByOpsBarAndStatus": {
        "rendered": "\n/** Whether the transitions are sorted by ops-bar sequence value first then category order (Todo, In Progress, Done) or only by ops-bar sequence value. */\n sortByOpsBarAndStatus?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".issueIdOrKey": {
        "rendered": "\n/** The ID or key of the issue. */\n issueIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Transitions",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/issue/{issueIdOrKey}/transitions": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: IssueUpdateDetails,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".issueIdOrKey": {
        "rendered": "\n/** The ID or key of the issue. */\n issueIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/issue/{issueIdOrKey}/votes": {
    "query": {},
    "body": {},
    "path": {
      ".issueIdOrKey": {
        "rendered": "\n/** The ID or key of the issue. */\n issueIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/issue/{issueIdOrKey}/votes": {
    "query": {},
    "body": {},
    "path": {
      ".issueIdOrKey": {
        "rendered": "\n/** The ID or key of the issue. */\n issueIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Votes",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/issue/{issueIdOrKey}/votes": {
    "query": {},
    "body": {},
    "path": {
      ".issueIdOrKey": {
        "rendered": "\n/** The ID or key of the issue. */\n issueIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/issue/{issueIdOrKey}/watchers": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n username?: string, \n/** The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required. */\n accountId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.username": {
        "rendered": "\n/** This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n username?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.accountId": {
        "rendered": "\n/** The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required. */\n accountId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".issueIdOrKey": {
        "rendered": "\n/** The ID or key of the issue. */\n issueIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/issue/{issueIdOrKey}/watchers": {
    "query": {},
    "body": {},
    "path": {
      ".issueIdOrKey": {
        "rendered": "\n/** The ID or key of the issue. */\n issueIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Watchers",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/issue/{issueIdOrKey}/watchers": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".issueIdOrKey": {
        "rendered": "\n/** The ID or key of the issue. */\n issueIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/issue/{issueIdOrKey}/worklog": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, \n/** The worklog start date and time, as a UNIX timestamp in milliseconds, after which worklogs are returned. */\n startedAfter?: number, \n/** The worklog start date and time, as a UNIX timestamp in milliseconds, before which worklogs are returned. */\n startedBefore?: number, \n/** Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts`properties`, which returns worklog properties. */\n expand?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startedAfter": {
        "rendered": "\n/** The worklog start date and time, as a UNIX timestamp in milliseconds, after which worklogs are returned. */\n startedAfter?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startedBefore": {
        "rendered": "\n/** The worklog start date and time, as a UNIX timestamp in milliseconds, before which worklogs are returned. */\n startedBefore?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts`properties`, which returns worklog properties. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".issueIdOrKey": {
        "rendered": "\n/** The ID or key of the issue. */\n issueIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PageOfWorklogs",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/issue/{issueIdOrKey}/worklog": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Whether users watching the issue are notified by email. */\n notifyUsers?: boolean, \n/** Defines how to update the issue's time estimate, the options are:\n\n *  `new` Sets the estimate to a specific value, defined in `newEstimate`.\n *  `leave` Leaves the estimate unchanged.\n *  `manual` Reduces the estimate by amount specified in `reduceBy`.\n *  `auto` Reduces the estimate by the value of `timeSpent` in the worklog. */\n adjustEstimate?: \"new\" | \"leave\" | \"manual\" | \"auto\", \n/** The value to set as the issue's remaining time estimate, as days (\\#d), hours (\\#h), or minutes (\\#m or \\#). For example, *2d*. Required when `adjustEstimate` is `new`. */\n newEstimate?: string, \n/** The amount to reduce the issue's remaining estimate by, as days (\\#d), hours (\\#h), or minutes (\\#m). For example, *2d*. Required when `adjustEstimate` is `manual`. */\n reduceBy?: string, \n/** Use [expand](#expansion) to include additional information about work logs in the response. This parameter accepts `properties`, which returns worklog properties. */\n expand?: string, \n/** Whether the worklog entry should be added to the issue even if the issue is not editable, because jira.issue.editable set to false or missing. For example, the issue is closed. Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) can use this flag. */\n overrideEditableFlag?: boolean, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.notifyUsers": {
        "rendered": "\n/** Whether users watching the issue are notified by email. */\n notifyUsers?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.adjustEstimate": {
        "rendered": "\n/** Defines how to update the issue's time estimate, the options are:\n\n *  `new` Sets the estimate to a specific value, defined in `newEstimate`.\n *  `leave` Leaves the estimate unchanged.\n *  `manual` Reduces the estimate by amount specified in `reduceBy`.\n *  `auto` Reduces the estimate by the value of `timeSpent` in the worklog. */\n adjustEstimate?: \"new\" | \"leave\" | \"manual\" | \"auto\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.newEstimate": {
        "rendered": "\n/** The value to set as the issue's remaining time estimate, as days (\\#d), hours (\\#h), or minutes (\\#m or \\#). For example, *2d*. Required when `adjustEstimate` is `new`. */\n newEstimate?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.reduceBy": {
        "rendered": "\n/** The amount to reduce the issue's remaining estimate by, as days (\\#d), hours (\\#h), or minutes (\\#m). For example, *2d*. Required when `adjustEstimate` is `manual`. */\n reduceBy?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information about work logs in the response. This parameter accepts `properties`, which returns worklog properties. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.overrideEditableFlag": {
        "rendered": "\n/** Whether the worklog entry should be added to the issue even if the issue is not editable, because jira.issue.editable set to false or missing. For example, the issue is closed. Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) can use this flag. */\n overrideEditableFlag?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: Worklog,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".issueIdOrKey": {
        "rendered": "\n/** The ID or key the issue. */\n issueIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Worklog",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "delete__/rest/api/3/issue/{issueIdOrKey}/worklog/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Whether users watching the issue are notified by email. */\n notifyUsers?: boolean, \n/** Defines how to update the issue's time estimate, the options are:\n\n *  `new` Sets the estimate to a specific value, defined in `newEstimate`.\n *  `leave` Leaves the estimate unchanged.\n *  `manual` Increases the estimate by amount specified in `increaseBy`.\n *  `auto` Reduces the estimate by the value of `timeSpent` in the worklog. */\n adjustEstimate?: \"new\" | \"leave\" | \"manual\" | \"auto\", \n/** The value to set as the issue's remaining time estimate, as days (\\#d), hours (\\#h), or minutes (\\#m or \\#). For example, *2d*. Required when `adjustEstimate` is `new`. */\n newEstimate?: string, \n/** The amount to increase the issue's remaining estimate by, as days (\\#d), hours (\\#h), or minutes (\\#m or \\#). For example, *2d*. Required when `adjustEstimate` is `manual`. */\n increaseBy?: string, \n/** Whether the work log entry should be added to the issue even if the issue is not editable, because jira.issue.editable set to false or missing. For example, the issue is closed. Connect and Forge app users with admin permission can use this flag. */\n overrideEditableFlag?: boolean, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.notifyUsers": {
        "rendered": "\n/** Whether users watching the issue are notified by email. */\n notifyUsers?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.adjustEstimate": {
        "rendered": "\n/** Defines how to update the issue's time estimate, the options are:\n\n *  `new` Sets the estimate to a specific value, defined in `newEstimate`.\n *  `leave` Leaves the estimate unchanged.\n *  `manual` Increases the estimate by amount specified in `increaseBy`.\n *  `auto` Reduces the estimate by the value of `timeSpent` in the worklog. */\n adjustEstimate?: \"new\" | \"leave\" | \"manual\" | \"auto\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.newEstimate": {
        "rendered": "\n/** The value to set as the issue's remaining time estimate, as days (\\#d), hours (\\#h), or minutes (\\#m or \\#). For example, *2d*. Required when `adjustEstimate` is `new`. */\n newEstimate?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.increaseBy": {
        "rendered": "\n/** The amount to increase the issue's remaining estimate by, as days (\\#d), hours (\\#h), or minutes (\\#m or \\#). For example, *2d*. Required when `adjustEstimate` is `manual`. */\n increaseBy?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.overrideEditableFlag": {
        "rendered": "\n/** Whether the work log entry should be added to the issue even if the issue is not editable, because jira.issue.editable set to false or missing. For example, the issue is closed. Connect and Forge app users with admin permission can use this flag. */\n overrideEditableFlag?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".issueIdOrKey": {
        "rendered": "\n/** The ID or key of the issue. */\n issueIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".id": {
        "rendered": "\n/** The ID of the worklog. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/issue/{issueIdOrKey}/worklog/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Use [expand](#expansion) to include additional information about work logs in the response. This parameter accepts\n\n`properties`, which returns worklog properties. */\n expand?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information about work logs in the response. This parameter accepts\n\n`properties`, which returns worklog properties. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".issueIdOrKey": {
        "rendered": "\n/** The ID or key of the issue. */\n issueIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".id": {
        "rendered": "\n/** The ID of the worklog. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Worklog",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "put__/rest/api/3/issue/{issueIdOrKey}/worklog/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Whether users watching the issue are notified by email. */\n notifyUsers?: boolean, \n/** Defines how to update the issue's time estimate, the options are:\n\n *  `new` Sets the estimate to a specific value, defined in `newEstimate`.\n *  `leave` Leaves the estimate unchanged.\n *  `auto` Updates the estimate by the difference between the original and updated value of `timeSpent` or `timeSpentSeconds`. */\n adjustEstimate?: \"new\" | \"leave\" | \"manual\" | \"auto\", \n/** The value to set as the issue's remaining time estimate, as days (\\#d), hours (\\#h), or minutes (\\#m or \\#). For example, *2d*. Required when `adjustEstimate` is `new`. */\n newEstimate?: string, \n/** Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts `properties`, which returns worklog properties. */\n expand?: string, \n/** Whether the worklog should be added to the issue even if the issue is not editable. For example, because the issue is closed. Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) can use this flag. */\n overrideEditableFlag?: boolean, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.notifyUsers": {
        "rendered": "\n/** Whether users watching the issue are notified by email. */\n notifyUsers?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.adjustEstimate": {
        "rendered": "\n/** Defines how to update the issue's time estimate, the options are:\n\n *  `new` Sets the estimate to a specific value, defined in `newEstimate`.\n *  `leave` Leaves the estimate unchanged.\n *  `auto` Updates the estimate by the difference between the original and updated value of `timeSpent` or `timeSpentSeconds`. */\n adjustEstimate?: \"new\" | \"leave\" | \"manual\" | \"auto\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.newEstimate": {
        "rendered": "\n/** The value to set as the issue's remaining time estimate, as days (\\#d), hours (\\#h), or minutes (\\#m or \\#). For example, *2d*. Required when `adjustEstimate` is `new`. */\n newEstimate?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts `properties`, which returns worklog properties. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.overrideEditableFlag": {
        "rendered": "\n/** Whether the worklog should be added to the issue even if the issue is not editable. For example, because the issue is closed. Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) can use this flag. */\n overrideEditableFlag?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: Worklog,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".issueIdOrKey": {
        "rendered": "\n/** The ID or key the issue. */\n issueIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".id": {
        "rendered": "\n/** The ID of the worklog. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Worklog",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties": {
    "query": {},
    "body": {},
    "path": {
      ".issueIdOrKey": {
        "rendered": "\n/** The ID or key of the issue. */\n issueIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".worklogId": {
        "rendered": "\n/** The ID of the worklog. */\n worklogId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PropertyKeys",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}": {
    "query": {},
    "body": {},
    "path": {
      ".issueIdOrKey": {
        "rendered": "\n/** The ID or key of the issue. */\n issueIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".worklogId": {
        "rendered": "\n/** The ID of the worklog. */\n worklogId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".propertyKey": {
        "rendered": "\n/** The key of the property. */\n propertyKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}": {
    "query": {},
    "body": {},
    "path": {
      ".issueIdOrKey": {
        "rendered": "\n/** The ID or key of the issue. */\n issueIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".worklogId": {
        "rendered": "\n/** The ID of the worklog. */\n worklogId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".propertyKey": {
        "rendered": "\n/** The key of the property. */\n propertyKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EntityProperty",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "put__/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: any,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".issueIdOrKey": {
        "rendered": "\n/** The ID or key of the issue. */\n issueIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".worklogId": {
        "rendered": "\n/** The ID of the worklog. */\n worklogId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".propertyKey": {
        "rendered": "\n/** The key of the issue property. The maximum length is 255 characters. */\n propertyKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/issueLink": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: LinkIssueRequestJsonBean,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/issueLink/{linkId}": {
    "query": {},
    "body": {},
    "path": {
      ".linkId": {
        "rendered": "\n/** The ID of the issue link. */\n linkId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/issueLink/{linkId}": {
    "query": {},
    "body": {},
    "path": {
      ".linkId": {
        "rendered": "\n/** The ID of the issue link. */\n linkId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "IssueLink",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/issueLinkType": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "IssueLinkTypes",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/issueLinkType": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: IssueLinkType,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "IssueLinkType",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/issueLinkType/{issueLinkTypeId}": {
    "query": {},
    "body": {},
    "path": {
      ".issueLinkTypeId": {
        "rendered": "\n/** The ID of the issue link type. */\n issueLinkTypeId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/issueLinkType/{issueLinkTypeId}": {
    "query": {},
    "body": {},
    "path": {
      ".issueLinkTypeId": {
        "rendered": "\n/** The ID of the issue link type. */\n issueLinkTypeId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "IssueLinkType",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/issueLinkType/{issueLinkTypeId}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: IssueLinkType,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".issueLinkTypeId": {
        "rendered": "\n/** The ID of the issue link type. */\n issueLinkTypeId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "IssueLinkType",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/issuesecurityschemes": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "SecuritySchemes",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/issuesecurityschemes/{id}": {
    "query": {},
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the issue security scheme. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) operation to get a list of issue security scheme IDs. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "SecurityScheme",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/issuesecurityschemes/{issueSecuritySchemeId}/members": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, \n/** The list of issue security level IDs. To include multiple issue security levels separate IDs with ampersand: `issueSecurityLevelId=10000&issueSecurityLevelId=10001`. */\n issueSecurityLevelId?: (number)[], \n/** Use expand to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `all` Returns all expandable information.\n *  `field` Returns information about the custom field granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `user` Returns information about the user who is granted the permission. */\n expand?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.issueSecurityLevelId": {
        "rendered": "\n/** The list of issue security level IDs. To include multiple issue security levels separate IDs with ampersand: `issueSecurityLevelId=10000&issueSecurityLevelId=10001`. */\n issueSecurityLevelId?: (number)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.issueSecurityLevelId.__no_name": {
        "rendered": "number",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use expand to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `all` Returns all expandable information.\n *  `field` Returns information about the custom field granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `user` Returns information about the user who is granted the permission. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".issueSecuritySchemeId": {
        "rendered": "\n/** The ID of the issue security scheme. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) operation to get a list of issue security scheme IDs. */\n issueSecuritySchemeId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PageBeanIssueSecurityLevelMember",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/issuetype": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(IssueTypeDetails)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "IssueTypeDetails",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/issuetype": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: IssueTypeCreateBean,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "IssueTypeDetails",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/issuetype/project": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The ID of the project. */\n projectId: number, \n/** The level of the issue type to filter by. Use:\n\n *  `-1` for Subtask.\n *  `0` for Base.\n *  `1` for Epic. */\n level?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** The ID of the project. */\n projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.level": {
        "rendered": "\n/** The level of the issue type to filter by. Use:\n\n *  `-1` for Subtask.\n *  `0` for Base.\n *  `1` for Epic. */\n level?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(IssueTypeDetails)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "IssueTypeDetails",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "delete__/rest/api/3/issuetype/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The ID of the replacement issue type. */\n alternativeIssueTypeId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alternativeIssueTypeId": {
        "rendered": "\n/** The ID of the replacement issue type. */\n alternativeIssueTypeId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the issue type. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/issuetype/{id}": {
    "query": {},
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the issue type. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "IssueTypeDetails",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "put__/rest/api/3/issuetype/{id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: IssueTypeUpdateBean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the issue type. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "IssueTypeDetails",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/issuetype/{id}/alternatives": {
    "query": {},
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the issue type. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(IssueTypeDetails)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "IssueTypeDetails",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/issuetype/{id}/avatar2": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The X coordinate of the top-left corner of the crop region. */\n x?: number, \n/** The Y coordinate of the top-left corner of the crop region. */\n y?: number, \n/** The length of each side of the crop region. */\n size: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.x": {
        "rendered": "\n/** The X coordinate of the top-left corner of the crop region. */\n x?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.y": {
        "rendered": "\n/** The Y coordinate of the top-left corner of the crop region. */\n y?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.size": {
        "rendered": "\n/** The length of each side of the crop region. */\n size: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: any,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the issue type. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Avatar",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/issuetype/{issueTypeId}/properties": {
    "query": {},
    "body": {},
    "path": {
      ".issueTypeId": {
        "rendered": "\n/** The ID of the issue type. */\n issueTypeId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PropertyKeys",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}": {
    "query": {},
    "body": {},
    "path": {
      ".issueTypeId": {
        "rendered": "\n/** The ID of the issue type. */\n issueTypeId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".propertyKey": {
        "rendered": "\n/** The key of the property. Use [Get issue type property keys](#api-rest-api-3-issuetype-issueTypeId-properties-get) to get a list of all issue type property keys. */\n propertyKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}": {
    "query": {},
    "body": {},
    "path": {
      ".issueTypeId": {
        "rendered": "\n/** The ID of the issue type. */\n issueTypeId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".propertyKey": {
        "rendered": "\n/** The key of the property. Use [Get issue type property keys](#api-rest-api-3-issuetype-issueTypeId-properties-get) to get a list of all issue type property keys. */\n propertyKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EntityProperty",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "put__/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: any,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".issueTypeId": {
        "rendered": "\n/** The ID of the issue type. */\n issueTypeId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".propertyKey": {
        "rendered": "\n/** The key of the issue type property. The maximum length is 255 characters. */\n propertyKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/issuetypescheme": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, \n/** The list of issue type schemes IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. */\n id?: (number)[], \n/** [Order](#ordering) the results by a field:\n\n *  `name` Sorts by issue type scheme name.\n *  `id` Sorts by issue type scheme ID. */\n orderBy?: \"name\" | \"-name\" | \"+name\" | \"id\" | \"-id\" | \"+id\", \n/** Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `projects` For each issue type schemes, returns information about the projects the issue type scheme is assigned to.\n *  `issueTypes` For each issue type schemes, returns information about the issueTypes the issue type scheme have. */\n expand?: string, \n/** String used to perform a case-insensitive partial match with issue type scheme name. */\n queryString?: string, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.id": {
        "rendered": "\n/** The list of issue type schemes IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. */\n id?: (number)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.id.__no_name": {
        "rendered": "number",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.orderBy": {
        "rendered": "\n/** [Order](#ordering) the results by a field:\n\n *  `name` Sorts by issue type scheme name.\n *  `id` Sorts by issue type scheme ID. */\n orderBy?: \"name\" | \"-name\" | \"+name\" | \"id\" | \"-id\" | \"+id\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `projects` For each issue type schemes, returns information about the projects the issue type scheme is assigned to.\n *  `issueTypes` For each issue type schemes, returns information about the issueTypes the issue type scheme have. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.queryString": {
        "rendered": "\n/** String used to perform a case-insensitive partial match with issue type scheme name. */\n queryString?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PageBeanIssueTypeScheme",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/issuetypescheme": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: IssueTypeSchemeDetails,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "IssueTypeSchemeID",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/issuetypescheme/mapping": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, \n/** The list of issue type scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `issueTypeSchemeId=10000&issueTypeSchemeId=10001`. */\n issueTypeSchemeId?: (number)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.issueTypeSchemeId": {
        "rendered": "\n/** The list of issue type scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `issueTypeSchemeId=10000&issueTypeSchemeId=10001`. */\n issueTypeSchemeId?: (number)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.issueTypeSchemeId.__no_name": {
        "rendered": "number",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PageBeanIssueTypeSchemeMapping",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/issuetypescheme/project": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, \n/** The list of project IDs. To include multiple project IDs, provide an ampersand-separated list. For example, `projectId=10000&projectId=10001`. */\n projectId: (number)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** The list of project IDs. To include multiple project IDs, provide an ampersand-separated list. For example, `projectId=10000&projectId=10001`. */\n projectId: (number)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId.__no_name": {
        "rendered": "number",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PageBeanIssueTypeSchemeProjects",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/issuetypescheme/project": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: IssueTypeSchemeProjectAssociation,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/issuetypescheme/{issueTypeSchemeId}": {
    "query": {},
    "body": {},
    "path": {
      ".issueTypeSchemeId": {
        "rendered": "\n/** The ID of the issue type scheme. */\n issueTypeSchemeId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/issuetypescheme/{issueTypeSchemeId}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: IssueTypeSchemeUpdateDetails,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".issueTypeSchemeId": {
        "rendered": "\n/** The ID of the issue type scheme. */\n issueTypeSchemeId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: IssueTypeIds,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".issueTypeSchemeId": {
        "rendered": "\n/** The ID of the issue type scheme. */\n issueTypeSchemeId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype/move": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: OrderOfIssueTypes,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".issueTypeSchemeId": {
        "rendered": "\n/** The ID of the issue type scheme. */\n issueTypeSchemeId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype/{issueTypeId}": {
    "query": {},
    "body": {},
    "path": {
      ".issueTypeSchemeId": {
        "rendered": "\n/** The ID of the issue type scheme. */\n issueTypeSchemeId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueTypeId": {
        "rendered": "\n/** The ID of the issue type. */\n issueTypeId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/issuetypescreenscheme": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, \n/** The list of issue type screen scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. */\n id?: (number)[], \n/** String used to perform a case-insensitive partial match with issue type screen scheme name. */\n queryString?: string, \n/** [Order](#ordering) the results by a field:\n\n *  `name` Sorts by issue type screen scheme name.\n *  `id` Sorts by issue type screen scheme ID. */\n orderBy?: \"name\" | \"-name\" | \"+name\" | \"id\" | \"-id\" | \"+id\", \n/** Use [expand](#expansion) to include additional information in the response. This parameter accepts `projects` that, for each issue type screen schemes, returns information about the projects the issue type screen scheme is assigned to. */\n expand?: string, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.id": {
        "rendered": "\n/** The list of issue type screen scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. */\n id?: (number)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.id.__no_name": {
        "rendered": "number",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.queryString": {
        "rendered": "\n/** String used to perform a case-insensitive partial match with issue type screen scheme name. */\n queryString?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.orderBy": {
        "rendered": "\n/** [Order](#ordering) the results by a field:\n\n *  `name` Sorts by issue type screen scheme name.\n *  `id` Sorts by issue type screen scheme ID. */\n orderBy?: \"name\" | \"-name\" | \"+name\" | \"id\" | \"-id\" | \"+id\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information in the response. This parameter accepts `projects` that, for each issue type screen schemes, returns information about the projects the issue type screen scheme is assigned to. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PageBeanIssueTypeScreenScheme",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/issuetypescreenscheme": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: IssueTypeScreenSchemeDetails,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "IssueTypeScreenSchemeId",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/issuetypescreenscheme/mapping": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, \n/** The list of issue type screen scheme IDs. To include multiple issue type screen schemes, separate IDs with ampersand: `issueTypeScreenSchemeId=10000&issueTypeScreenSchemeId=10001`. */\n issueTypeScreenSchemeId?: (number)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.issueTypeScreenSchemeId": {
        "rendered": "\n/** The list of issue type screen scheme IDs. To include multiple issue type screen schemes, separate IDs with ampersand: `issueTypeScreenSchemeId=10000&issueTypeScreenSchemeId=10001`. */\n issueTypeScreenSchemeId?: (number)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.issueTypeScreenSchemeId.__no_name": {
        "rendered": "number",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PageBeanIssueTypeScreenSchemeItem",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/issuetypescreenscheme/project": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, \n/** The list of project IDs. To include multiple projects, separate IDs with ampersand: `projectId=10000&projectId=10001`. */\n projectId: (number)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** The list of project IDs. To include multiple projects, separate IDs with ampersand: `projectId=10000&projectId=10001`. */\n projectId: (number)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId.__no_name": {
        "rendered": "number",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PageBeanIssueTypeScreenSchemesProjects",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/issuetypescreenscheme/project": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: IssueTypeScreenSchemeProjectAssociation,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}": {
    "query": {},
    "body": {},
    "path": {
      ".issueTypeScreenSchemeId": {
        "rendered": "\n/** The ID of the issue type screen scheme. */\n issueTypeScreenSchemeId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: IssueTypeScreenSchemeUpdateDetails,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".issueTypeScreenSchemeId": {
        "rendered": "\n/** The ID of the issue type screen scheme. */\n issueTypeScreenSchemeId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: IssueTypeScreenSchemeMappingDetails,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".issueTypeScreenSchemeId": {
        "rendered": "\n/** The ID of the issue type screen scheme. */\n issueTypeScreenSchemeId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping/default": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: UpdateDefaultScreenScheme,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".issueTypeScreenSchemeId": {
        "rendered": "\n/** The ID of the issue type screen scheme. */\n issueTypeScreenSchemeId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping/remove": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: IssueTypeIds,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".issueTypeScreenSchemeId": {
        "rendered": "\n/** The ID of the issue type screen scheme. */\n issueTypeScreenSchemeId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/project": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number,  query?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": " query?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".issueTypeScreenSchemeId": {
        "rendered": "\n/** The ID of the issue type screen scheme. */\n issueTypeScreenSchemeId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PageBeanProjectDetails",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/jql/autocompletedata": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "JQLReferenceData",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/jql/autocompletedata": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: SearchAutoCompleteFilter,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "JQLReferenceData",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/jql/autocompletedata/suggestions": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The name of the field. */\n fieldName?: string, \n/** The partial field item name entered by the user. */\n fieldValue?: string, \n/** The name of the [ CHANGED operator predicate](https://confluence.atlassian.com/x/hQORLQ#Advancedsearching-operatorsreference-CHANGEDCHANGED) for which the suggestions are generated. The valid predicate operators are *by*, *from*, and *to*. */\n predicateName?: string, \n/** The partial predicate item name entered by the user. */\n predicateValue?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fieldName": {
        "rendered": "\n/** The name of the field. */\n fieldName?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fieldValue": {
        "rendered": "\n/** The partial field item name entered by the user. */\n fieldValue?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.predicateName": {
        "rendered": "\n/** The name of the [ CHANGED operator predicate](https://confluence.atlassian.com/x/hQORLQ#Advancedsearching-operatorsreference-CHANGEDCHANGED) for which the suggestions are generated. The valid predicate operators are *by*, *from*, and *to*. */\n predicateName?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.predicateValue": {
        "rendered": "\n/** The partial predicate item name entered by the user. */\n predicateValue?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "AutoCompleteSuggestions",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/jql/function/computation": {
    "query": {
      ".query": {
        "rendered": " query: {  functionKey?: (string)[],  startAt?: number,  maxResults?: number,  orderBy?: string,  filter?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.functionKey": {
        "rendered": " functionKey?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.functionKey.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": " startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": " maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.orderBy": {
        "rendered": " orderBy?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.filter": {
        "rendered": " filter?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PageBeanJqlFunctionPrecomputationBean",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/jql/function/computation": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: JqlFunctionPrecomputationUpdateRequestBean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/jql/match": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: IssuesAndJQLQueries,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "IssueMatches",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/jql/parse": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** How to validate the JQL query and treat the validation results. Validation options include:\n\n *  `strict` Returns all errors. If validation fails, the query structure is not returned.\n *  `warn` Returns all errors. If validation fails but the JQL query is correctly formed, the query structure is returned.\n *  `none` No validation is performed. If JQL query is correctly formed, the query structure is returned. */\n validation?: \"strict\" | \"warn\" | \"none\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.validation": {
        "rendered": "\n/** How to validate the JQL query and treat the validation results. Validation options include:\n\n *  `strict` Returns all errors. If validation fails, the query structure is not returned.\n *  `warn` Returns all errors. If validation fails but the JQL query is correctly formed, the query structure is returned.\n *  `none` No validation is performed. If JQL query is correctly formed, the query structure is returned. */\n validation?: \"strict\" | \"warn\" | \"none\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: JqlQueriesToParse,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "ParsedJqlQueries",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/jql/pdcleaner": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: JQLPersonalDataMigrationRequest,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "ConvertedJQLQueries",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/jql/sanitize": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: JqlQueriesToSanitize,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "SanitizedJqlQueries",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/label": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PageBeanString",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/license/approximateLicenseCount": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "LicenseMetric",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/license/approximateLicenseCount/product/{applicationKey}": {
    "query": {},
    "body": {},
    "path": {
      ".applicationKey": {
        "rendered": " applicationKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "LicenseMetric",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/mypermissions": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The key of project. Ignored if `projectId` is provided. */\n projectKey?: string, \n/** The ID of project. */\n projectId?: string, \n/** The key of the issue. Ignored if `issueId` is provided. */\n issueKey?: string, \n/** The ID of the issue. */\n issueId?: string, \n/** A list of permission keys. (Required) This parameter accepts a comma-separated list. To get the list of available permissions, use [Get all permissions](#api-rest-api-3-permissions-get). */\n permissions?: string,  projectUuid?: string,  projectConfigurationUuid?: string, \n/** The ID of the comment. */\n commentId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectKey": {
        "rendered": "\n/** The key of project. Ignored if `projectId` is provided. */\n projectKey?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** The ID of project. */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.issueKey": {
        "rendered": "\n/** The key of the issue. Ignored if `issueId` is provided. */\n issueKey?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.issueId": {
        "rendered": "\n/** The ID of the issue. */\n issueId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.permissions": {
        "rendered": "\n/** A list of permission keys. (Required) This parameter accepts a comma-separated list. To get the list of available permissions, use [Get all permissions](#api-rest-api-3-permissions-get). */\n permissions?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectUuid": {
        "rendered": " projectUuid?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectConfigurationUuid": {
        "rendered": " projectConfigurationUuid?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.commentId": {
        "rendered": "\n/** The ID of the comment. */\n commentId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "Permissions",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/mypreferences": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The key of the preference. */\n key: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** The key of the preference. */\n key: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/mypreferences": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The key of the preference. */\n key: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** The key of the preference. */\n key: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/mypreferences": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The key of the preference. The maximum length is 255 characters. */\n key: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** The key of the preference. The maximum length is 255 characters. */\n key: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/mypreferences/locale": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/mypreferences/locale": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "Locale",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/mypreferences/locale": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: Locale,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/myself": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Use [expand](#expansion) to include additional information about user in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `groups` Returns all groups, including nested groups, the user belongs to.\n *  `applicationRoles` Returns the application roles the user is assigned to. */\n expand?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information about user in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `groups` Returns all groups, including nested groups, the user belongs to.\n *  `applicationRoles` Returns the application roles the user is assigned to. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "User",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/notificationscheme": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: string, \n/** The maximum number of items to return per page. */\n maxResults?: string, \n/** The list of notification schemes IDs to be filtered by */\n id?: (string)[], \n/** The list of projects IDs to be filtered by */\n projectId?: (string)[], \n/** When set to true, returns only the default notification scheme. If you provide project IDs not associated with the default, returns an empty page. The default value is false. */\n onlyDefault?: boolean, \n/** Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `all` Returns all expandable information\n *  `field` Returns information about any custom fields assigned to receive an event\n *  `group` Returns information about any groups assigned to receive an event\n *  `notificationSchemeEvents` Returns a list of event associations. This list is returned for all expandable information\n *  `projectRole` Returns information about any project roles assigned to receive an event\n *  `user` Returns information about any users assigned to receive an event */\n expand?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.id": {
        "rendered": "\n/** The list of notification schemes IDs to be filtered by */\n id?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.id.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** The list of projects IDs to be filtered by */\n projectId?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.onlyDefault": {
        "rendered": "\n/** When set to true, returns only the default notification scheme. If you provide project IDs not associated with the default, returns an empty page. The default value is false. */\n onlyDefault?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `all` Returns all expandable information\n *  `field` Returns information about any custom fields assigned to receive an event\n *  `group` Returns information about any groups assigned to receive an event\n *  `notificationSchemeEvents` Returns a list of event associations. This list is returned for all expandable information\n *  `projectRole` Returns information about any project roles assigned to receive an event\n *  `user` Returns information about any users assigned to receive an event */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PageBeanNotificationScheme",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/notificationscheme": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: CreateNotificationSchemeDetails,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "NotificationSchemeId",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/notificationscheme/project": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: string, \n/** The maximum number of items to return per page. */\n maxResults?: string, \n/** The list of notifications scheme IDs to be filtered out */\n notificationSchemeId?: (string)[], \n/** The list of project IDs to be filtered out */\n projectId?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.notificationSchemeId": {
        "rendered": "\n/** The list of notifications scheme IDs to be filtered out */\n notificationSchemeId?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.notificationSchemeId.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** The list of project IDs to be filtered out */\n projectId?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PageBeanNotificationSchemeAndProjectMappingJsonBean",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/notificationscheme/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `all` Returns all expandable information\n *  `field` Returns information about any custom fields assigned to receive an event\n *  `group` Returns information about any groups assigned to receive an event\n *  `notificationSchemeEvents` Returns a list of event associations. This list is returned for all expandable information\n *  `projectRole` Returns information about any project roles assigned to receive an event\n *  `user` Returns information about any users assigned to receive an event */\n expand?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `all` Returns all expandable information\n *  `field` Returns information about any custom fields assigned to receive an event\n *  `group` Returns information about any groups assigned to receive an event\n *  `notificationSchemeEvents` Returns a list of event associations. This list is returned for all expandable information\n *  `projectRole` Returns information about any project roles assigned to receive an event\n *  `user` Returns information about any users assigned to receive an event */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the notification scheme. Use [Get notification schemes paginated](#api-rest-api-3-notificationscheme-get) to get a list of notification scheme IDs. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "NotificationScheme",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "put__/rest/api/3/notificationscheme/{id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: UpdateNotificationSchemeDetails,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the notification scheme. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/notificationscheme/{id}/notification": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: AddNotificationsDetails,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the notification scheme. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/notificationscheme/{notificationSchemeId}": {
    "query": {},
    "body": {},
    "path": {
      ".notificationSchemeId": {
        "rendered": "\n/** The ID of the notification scheme. */\n notificationSchemeId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/notificationscheme/{notificationSchemeId}/notification/{notificationId}": {
    "query": {},
    "body": {},
    "path": {
      ".notificationSchemeId": {
        "rendered": "\n/** The ID of the notification scheme. */\n notificationSchemeId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".notificationId": {
        "rendered": "\n/** The ID of the notification. */\n notificationId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/permissions": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "Permissions",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/permissions/check": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: BulkPermissionsRequestBean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "BulkPermissionGrants",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/permissions/project": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: PermissionsKeysBean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PermittedProjects",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/permissionscheme": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:\n\n *  `all` Returns all expandable information.\n *  `field` Returns information about the custom field granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `user` Returns information about the user who is granted the permission. */\n expand?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:\n\n *  `all` Returns all expandable information.\n *  `field` Returns information about the custom field granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `user` Returns information about the user who is granted the permission. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PermissionSchemes",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/permissionscheme": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:\n\n *  `all` Returns all expandable information.\n *  `field` Returns information about the custom field granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `user` Returns information about the user who is granted the permission. */\n expand?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:\n\n *  `all` Returns all expandable information.\n *  `field` Returns information about the custom field granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `user` Returns information about the user who is granted the permission. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: PermissionScheme,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PermissionScheme",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "delete__/rest/api/3/permissionscheme/{schemeId}": {
    "query": {},
    "body": {},
    "path": {
      ".schemeId": {
        "rendered": "\n/** The ID of the permission scheme being deleted. */\n schemeId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/permissionscheme/{schemeId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:\n\n *  `all` Returns all expandable information.\n *  `field` Returns information about the custom field granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `user` Returns information about the user who is granted the permission. */\n expand?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:\n\n *  `all` Returns all expandable information.\n *  `field` Returns information about the custom field granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `user` Returns information about the user who is granted the permission. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".schemeId": {
        "rendered": "\n/** The ID of the permission scheme to return. */\n schemeId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PermissionScheme",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "put__/rest/api/3/permissionscheme/{schemeId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:\n\n *  `all` Returns all expandable information.\n *  `field` Returns information about the custom field granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `user` Returns information about the user who is granted the permission. */\n expand?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:\n\n *  `all` Returns all expandable information.\n *  `field` Returns information about the custom field granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `user` Returns information about the user who is granted the permission. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: PermissionScheme,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".schemeId": {
        "rendered": "\n/** The ID of the permission scheme to update. */\n schemeId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PermissionScheme",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/permissionscheme/{schemeId}/permission": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:\n\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `user` Returns information about the user who is granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `field` Returns information about the custom field granted the permission.\n *  `all` Returns all expandable information. */\n expand?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:\n\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `user` Returns information about the user who is granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `field` Returns information about the custom field granted the permission.\n *  `all` Returns all expandable information. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".schemeId": {
        "rendered": "\n/** The ID of the permission scheme. */\n schemeId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PermissionGrants",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/permissionscheme/{schemeId}/permission": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:\n\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `user` Returns information about the user who is granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `field` Returns information about the custom field granted the permission.\n *  `all` Returns all expandable information. */\n expand?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:\n\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `user` Returns information about the user who is granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `field` Returns information about the custom field granted the permission.\n *  `all` Returns all expandable information. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: PermissionGrant,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".schemeId": {
        "rendered": "\n/** The ID of the permission scheme in which to create a new permission grant. */\n schemeId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PermissionGrant",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/permissionscheme/{schemeId}/permission/{permissionId}": {
    "query": {},
    "body": {},
    "path": {
      ".schemeId": {
        "rendered": "\n/** The ID of the permission scheme to delete the permission grant from. */\n schemeId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".permissionId": {
        "rendered": "\n/** The ID of the permission grant to delete. */\n permissionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/permissionscheme/{schemeId}/permission/{permissionId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:\n\n *  `all` Returns all expandable information.\n *  `field` Returns information about the custom field granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `user` Returns information about the user who is granted the permission. */\n expand?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:\n\n *  `all` Returns all expandable information.\n *  `field` Returns information about the custom field granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `user` Returns information about the user who is granted the permission. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".schemeId": {
        "rendered": "\n/** The ID of the permission scheme. */\n schemeId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".permissionId": {
        "rendered": "\n/** The ID of the permission grant. */\n permissionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PermissionGrant",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/priority": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Priority)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "Priority",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/priority": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: CreatePriorityDetails,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PriorityId",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "put__/rest/api/3/priority/default": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: SetDefaultPriorityRequest,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/priority/move": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: ReorderIssuePriorities,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/priority/search": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: string, \n/** The maximum number of items to return per page. */\n maxResults?: string, \n/** The list of priority IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=2&id=3`. */\n id?: (string)[], \n/** Whether only the default priority is returned. */\n onlyDefault?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.id": {
        "rendered": "\n/** The list of priority IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=2&id=3`. */\n id?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.id.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.onlyDefault": {
        "rendered": "\n/** Whether only the default priority is returned. */\n onlyDefault?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PageBeanPriority",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "delete__/rest/api/3/priority/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The ID of the issue priority that will replace the currently selected resolution. */\n replaceWith: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.replaceWith": {
        "rendered": "\n/** The ID of the issue priority that will replace the currently selected resolution. */\n replaceWith: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the issue priority. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/priority/{id}": {
    "query": {},
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the issue priority. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Priority",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "put__/rest/api/3/priority/{id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: UpdatePriorityDetails,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the issue priority. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/project": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:\n\n *  `description` Returns the project description.\n *  `issueTypes` Returns all issue types associated with the project.\n *  `lead` Returns information about the project lead.\n *  `projectKeys` Returns all project keys associated with the project. */\n expand?: string, \n/** Returns the user's most recently accessed projects. You may specify the number of results to return up to a maximum of 20. If access is anonymous, then the recently accessed projects are based on the current HTTP session. */\n recent?: number, \n/** A list of project properties to return for the project. This parameter accepts a comma-separated list. */\n properties?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:\n\n *  `description` Returns the project description.\n *  `issueTypes` Returns all issue types associated with the project.\n *  `lead` Returns information about the project lead.\n *  `projectKeys` Returns all project keys associated with the project. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.recent": {
        "rendered": "\n/** Returns the user's most recently accessed projects. You may specify the number of results to return up to a maximum of 20. If access is anonymous, then the recently accessed projects are based on the current HTTP session. */\n recent?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.properties": {
        "rendered": "\n/** A list of project properties to return for the project. This parameter accepts a comma-separated list. */\n properties?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.properties.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Project)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "Project",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/project": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: CreateProjectDetails,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "ProjectIdentifiers",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/project/recent": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:\n\n *  `description` Returns the project description.\n *  `projectKeys` Returns all project keys associated with a project.\n *  `lead` Returns information about the project lead.\n *  `issueTypes` Returns all issue types associated with the project.\n *  `url` Returns the URL associated with the project.\n *  `permissions` Returns the permissions associated with the project.\n *  `insight` EXPERIMENTAL. Returns the insight details of total issue count and last issue update time for the project.\n *  `*` Returns the project with all available expand options. */\n expand?: string, \n/** EXPERIMENTAL. A list of project properties to return for the project. This parameter accepts a comma-separated list. Invalid property names are ignored. */\n properties?: (StringList)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:\n\n *  `description` Returns the project description.\n *  `projectKeys` Returns all project keys associated with a project.\n *  `lead` Returns information about the project lead.\n *  `issueTypes` Returns all issue types associated with the project.\n *  `url` Returns the URL associated with the project.\n *  `permissions` Returns the permissions associated with the project.\n *  `insight` EXPERIMENTAL. Returns the insight details of total issue count and last issue update time for the project.\n *  `*` Returns the project with all available expand options. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.properties": {
        "rendered": "\n/** EXPERIMENTAL. A list of project properties to return for the project. This parameter accepts a comma-separated list. Invalid property names are ignored. */\n properties?: (StringList)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.properties.__no_name": {
        "rendered": "StringList",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Project)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "Project",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/project/search": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, \n/** [Order](#ordering) the results by a field.\n\n *  `category` Sorts by project category. A complete list of category IDs is found using [Get all project categories](#api-rest-api-3-projectCategory-get).\n *  `issueCount` Sorts by the total number of issues in each project.\n *  `key` Sorts by project key.\n *  `lastIssueUpdatedTime` Sorts by the last issue update time.\n *  `name` Sorts by project name.\n *  `owner` Sorts by project lead.\n *  `archivedDate` EXPERIMENTAL. Sorts by project archived date.\n *  `deletedDate` EXPERIMENTAL. Sorts by project deleted date. */\n orderBy?: \"category\" | \"-category\" | \"+category\" | \"key\" | \"-key\" | \"+key\" | \"name\" | \"-name\" | \"+name\" | \"owner\" | \"-owner\" | \"+owner\" | \"issueCount\" | \"-issueCount\" | \"+issueCount\" | \"lastIssueUpdatedDate\" | \"-lastIssueUpdatedDate\" | \"+lastIssueUpdatedDate\" | \"archivedDate\" | \"+archivedDate\" | \"-archivedDate\" | \"deletedDate\" | \"+deletedDate\" | \"-deletedDate\", \n/** The project IDs to filter the results by. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. Up to 50 project IDs can be provided. */\n id?: (number)[], \n/** The project keys to filter the results by. To include multiple keys, provide an ampersand-separated list. For example, `keys=PA&keys=PB`. Up to 50 project keys can be provided. */\n keys?: (string)[], \n/** Filter the results using a literal string. Projects with a matching `key` or `name` are returned (case insensitive). */\n query?: string, \n/** Orders results by the [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes). This parameter accepts a comma-separated list. Valid values are `business`, `service_desk`, and `software`. */\n typeKey?: string, \n/** The ID of the project's category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-3-projectCategory-get) operation. */\n categoryId?: number, \n/** Filter results by projects for which the user can:\n\n *  `view` the project, meaning that they have one of the following permissions:\n    \n     *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n     *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n     *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).\n *  `browse` the project, meaning that they have the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n *  `edit` the project, meaning that they have one of the following permissions:\n    \n     *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n     *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). */\n action?: \"view\" | \"browse\" | \"edit\", \n/** Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:\n\n *  `description` Returns the project description.\n *  `projectKeys` Returns all project keys associated with a project.\n *  `lead` Returns information about the project lead.\n *  `issueTypes` Returns all issue types associated with the project.\n *  `url` Returns the URL associated with the project.\n *  `insight` EXPERIMENTAL. Returns the insight details of total issue count and last issue update time for the project. */\n expand?: string, \n/** EXPERIMENTAL. Filter results by project status:\n\n *  `live` Search live projects.\n *  `archived` Search archived projects.\n *  `deleted` Search deleted projects, those in the recycle bin. */\n status?: (\"live\" | \"archived\" | \"deleted\")[], \n/** EXPERIMENTAL. A list of project properties to return for the project. This parameter accepts a comma-separated list. */\n properties?: (StringList)[], \n/** EXPERIMENTAL. A query string used to search properties. The query string cannot be specified using a JSON object. For example, to search for the value of `nested` from `{\"something\":{\"nested\":1,\"other\":2}}` use `[thepropertykey].something.nested=1`. Note that the propertyQuery key is enclosed in square brackets to enable searching where the propertyQuery key includes dot (.) or equals (=) characters. Note that `thepropertykey` is only returned when included in `properties`. */\n propertyQuery?: string, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.orderBy": {
        "rendered": "\n/** [Order](#ordering) the results by a field.\n\n *  `category` Sorts by project category. A complete list of category IDs is found using [Get all project categories](#api-rest-api-3-projectCategory-get).\n *  `issueCount` Sorts by the total number of issues in each project.\n *  `key` Sorts by project key.\n *  `lastIssueUpdatedTime` Sorts by the last issue update time.\n *  `name` Sorts by project name.\n *  `owner` Sorts by project lead.\n *  `archivedDate` EXPERIMENTAL. Sorts by project archived date.\n *  `deletedDate` EXPERIMENTAL. Sorts by project deleted date. */\n orderBy?: \"category\" | \"-category\" | \"+category\" | \"key\" | \"-key\" | \"+key\" | \"name\" | \"-name\" | \"+name\" | \"owner\" | \"-owner\" | \"+owner\" | \"issueCount\" | \"-issueCount\" | \"+issueCount\" | \"lastIssueUpdatedDate\" | \"-lastIssueUpdatedDate\" | \"+lastIssueUpdatedDate\" | \"archivedDate\" | \"+archivedDate\" | \"-archivedDate\" | \"deletedDate\" | \"+deletedDate\" | \"-deletedDate\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.id": {
        "rendered": "\n/** The project IDs to filter the results by. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. Up to 50 project IDs can be provided. */\n id?: (number)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.id.__no_name": {
        "rendered": "number",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.keys": {
        "rendered": "\n/** The project keys to filter the results by. To include multiple keys, provide an ampersand-separated list. For example, `keys=PA&keys=PB`. Up to 50 project keys can be provided. */\n keys?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.keys.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** Filter the results using a literal string. Projects with a matching `key` or `name` are returned (case insensitive). */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.typeKey": {
        "rendered": "\n/** Orders results by the [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes). This parameter accepts a comma-separated list. Valid values are `business`, `service_desk`, and `software`. */\n typeKey?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.categoryId": {
        "rendered": "\n/** The ID of the project's category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-3-projectCategory-get) operation. */\n categoryId?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.action": {
        "rendered": "\n/** Filter results by projects for which the user can:\n\n *  `view` the project, meaning that they have one of the following permissions:\n    \n     *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n     *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n     *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).\n *  `browse` the project, meaning that they have the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n *  `edit` the project, meaning that they have one of the following permissions:\n    \n     *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.\n     *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). */\n action?: \"view\" | \"browse\" | \"edit\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:\n\n *  `description` Returns the project description.\n *  `projectKeys` Returns all project keys associated with a project.\n *  `lead` Returns information about the project lead.\n *  `issueTypes` Returns all issue types associated with the project.\n *  `url` Returns the URL associated with the project.\n *  `insight` EXPERIMENTAL. Returns the insight details of total issue count and last issue update time for the project. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.status": {
        "rendered": "\n/** EXPERIMENTAL. Filter results by project status:\n\n *  `live` Search live projects.\n *  `archived` Search archived projects.\n *  `deleted` Search deleted projects, those in the recycle bin. */\n status?: (\"live\" | \"archived\" | \"deleted\")[],",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.status.__no_name": {
        "rendered": "\"live\" | \"archived\" | \"deleted\"",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.properties": {
        "rendered": "\n/** EXPERIMENTAL. A list of project properties to return for the project. This parameter accepts a comma-separated list. */\n properties?: (StringList)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.properties.__no_name": {
        "rendered": "StringList",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.propertyQuery": {
        "rendered": "\n/** EXPERIMENTAL. A query string used to search properties. The query string cannot be specified using a JSON object. For example, to search for the value of `nested` from `{\"something\":{\"nested\":1,\"other\":2}}` use `[thepropertykey].something.nested=1`. Note that the propertyQuery key is enclosed in square brackets to enable searching where the propertyQuery key includes dot (.) or equals (=) characters. Note that `thepropertykey` is only returned when included in `properties`. */\n propertyQuery?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PageBeanProject",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/project/type": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(ProjectType)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "ProjectType",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/project/type/accessible": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(ProjectType)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "ProjectType",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/project/type/{projectTypeKey}": {
    "query": {},
    "body": {},
    "path": {
      ".projectTypeKey": {
        "rendered": "\n/** The key of the project type. */\n projectTypeKey: \"software\" | \"service_desk\" | \"business\" | \"product_discovery\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProjectType",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/project/type/{projectTypeKey}/accessible": {
    "query": {},
    "body": {},
    "path": {
      ".projectTypeKey": {
        "rendered": "\n/** The key of the project type. */\n projectTypeKey: \"software\" | \"service_desk\" | \"business\" | \"product_discovery\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProjectType",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/project/{projectIdOrKey}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Whether this project is placed in the Jira recycle bin where it will be available for restoration. */\n enableUndo?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.enableUndo": {
        "rendered": "\n/** Whether this project is placed in the Jira recycle bin where it will be available for restoration. */\n enableUndo?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".projectIdOrKey": {
        "rendered": "\n/** The project ID or project key (case sensitive). */\n projectIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/project/{projectIdOrKey}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that the project description, issue types, and project lead are included in all responses by default. Expand options include:\n\n *  `description` The project description.\n *  `issueTypes` The issue types associated with the project.\n *  `lead` The project lead.\n *  `projectKeys` All project keys associated with the project.\n *  `issueTypeHierarchy` The project issue type hierarchy. */\n expand?: string, \n/** A list of project properties to return for the project. This parameter accepts a comma-separated list. */\n properties?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that the project description, issue types, and project lead are included in all responses by default. Expand options include:\n\n *  `description` The project description.\n *  `issueTypes` The issue types associated with the project.\n *  `lead` The project lead.\n *  `projectKeys` All project keys associated with the project.\n *  `issueTypeHierarchy` The project issue type hierarchy. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.properties": {
        "rendered": "\n/** A list of project properties to return for the project. This parameter accepts a comma-separated list. */\n properties?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.properties.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".projectIdOrKey": {
        "rendered": "\n/** The project ID or project key (case sensitive). */\n projectIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Project",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "put__/rest/api/3/project/{projectIdOrKey}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that the project description, issue types, and project lead are included in all responses by default. Expand options include:\n\n *  `description` The project description.\n *  `issueTypes` The issue types associated with the project.\n *  `lead` The project lead.\n *  `projectKeys` All project keys associated with the project. */\n expand?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that the project description, issue types, and project lead are included in all responses by default. Expand options include:\n\n *  `description` The project description.\n *  `issueTypes` The issue types associated with the project.\n *  `lead` The project lead.\n *  `projectKeys` All project keys associated with the project. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: UpdateProjectDetails,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".projectIdOrKey": {
        "rendered": "\n/** The project ID or project key (case sensitive). */\n projectIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Project",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/project/{projectIdOrKey}/archive": {
    "query": {},
    "body": {},
    "path": {
      ".projectIdOrKey": {
        "rendered": "\n/** The project ID or project key (case sensitive). */\n projectIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/project/{projectIdOrKey}/avatar": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: Avatar,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".projectIdOrKey": {
        "rendered": "\n/** The ID or (case-sensitive) key of the project. */\n projectIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/project/{projectIdOrKey}/avatar/{id}": {
    "query": {},
    "body": {},
    "path": {
      ".projectIdOrKey": {
        "rendered": "\n/** The project ID or (case-sensitive) key. */\n projectIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".id": {
        "rendered": "\n/** The ID of the avatar. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/project/{projectIdOrKey}/avatar2": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The X coordinate of the top-left corner of the crop region. */\n x?: number, \n/** The Y coordinate of the top-left corner of the crop region. */\n y?: number, \n/** The length of each side of the crop region. */\n size?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.x": {
        "rendered": "\n/** The X coordinate of the top-left corner of the crop region. */\n x?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.y": {
        "rendered": "\n/** The Y coordinate of the top-left corner of the crop region. */\n y?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.size": {
        "rendered": "\n/** The length of each side of the crop region. */\n size?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: any,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".projectIdOrKey": {
        "rendered": "\n/** The ID or (case-sensitive) key of the project. */\n projectIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Avatar",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/project/{projectIdOrKey}/avatars": {
    "query": {},
    "body": {},
    "path": {
      ".projectIdOrKey": {
        "rendered": "\n/** The ID or (case-sensitive) key of the project. */\n projectIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProjectAvatars",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/project/{projectIdOrKey}/component": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, \n/** [Order](#ordering) the results by a field:\n\n *  `description` Sorts by the component description.\n *  `issueCount` Sorts by the count of issues associated with the component.\n *  `lead` Sorts by the user key of the component's project lead.\n *  `name` Sorts by component name. */\n orderBy?: \"description\" | \"-description\" | \"+description\" | \"issueCount\" | \"-issueCount\" | \"+issueCount\" | \"lead\" | \"-lead\" | \"+lead\" | \"name\" | \"-name\" | \"+name\", \n/** Filter the results using a literal string. Components with a matching `name` or `description` are returned (case insensitive). */\n query?: string, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.orderBy": {
        "rendered": "\n/** [Order](#ordering) the results by a field:\n\n *  `description` Sorts by the component description.\n *  `issueCount` Sorts by the count of issues associated with the component.\n *  `lead` Sorts by the user key of the component's project lead.\n *  `name` Sorts by component name. */\n orderBy?: \"description\" | \"-description\" | \"+description\" | \"issueCount\" | \"-issueCount\" | \"+issueCount\" | \"lead\" | \"-lead\" | \"+lead\" | \"name\" | \"-name\" | \"+name\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.query": {
        "rendered": "\n/** Filter the results using a literal string. Components with a matching `name` or `description` are returned (case insensitive). */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".projectIdOrKey": {
        "rendered": "\n/** The project ID or project key (case sensitive). */\n projectIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PageBeanComponentWithIssueCount",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/project/{projectIdOrKey}/components": {
    "query": {},
    "body": {},
    "path": {
      ".projectIdOrKey": {
        "rendered": "\n/** The project ID or project key (case sensitive). */\n projectIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(ProjectComponent)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "ProjectComponent",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/project/{projectIdOrKey}/delete": {
    "query": {},
    "body": {},
    "path": {
      ".projectIdOrKey": {
        "rendered": "\n/** The project ID or project key (case sensitive). */\n projectIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/project/{projectIdOrKey}/features": {
    "query": {},
    "body": {},
    "path": {
      ".projectIdOrKey": {
        "rendered": "\n/** The ID or (case-sensitive) key of the project. */\n projectIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ContainerForProjectFeatures",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "put__/rest/api/3/project/{projectIdOrKey}/features/{featureKey}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: ProjectFeatureState,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".projectIdOrKey": {
        "rendered": "\n/** The ID or (case-sensitive) key of the project. */\n projectIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".featureKey": {
        "rendered": "\n/** The key of the feature. */\n featureKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ContainerForProjectFeatures",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/project/{projectIdOrKey}/properties": {
    "query": {},
    "body": {},
    "path": {
      ".projectIdOrKey": {
        "rendered": "\n/** The project ID or project key (case sensitive). */\n projectIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PropertyKeys",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/project/{projectIdOrKey}/properties/{propertyKey}": {
    "query": {},
    "body": {},
    "path": {
      ".projectIdOrKey": {
        "rendered": "\n/** The project ID or project key (case sensitive). */\n projectIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".propertyKey": {
        "rendered": "\n/** The project property key. Use [Get project property keys](#api-rest-api-3-project-projectIdOrKey-properties-get) to get a list of all project property keys. */\n propertyKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/project/{projectIdOrKey}/properties/{propertyKey}": {
    "query": {},
    "body": {},
    "path": {
      ".projectIdOrKey": {
        "rendered": "\n/** The project ID or project key (case sensitive). */\n projectIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".propertyKey": {
        "rendered": "\n/** The project property key. Use [Get project property keys](#api-rest-api-3-project-projectIdOrKey-properties-get) to get a list of all project property keys. */\n propertyKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EntityProperty",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "put__/rest/api/3/project/{projectIdOrKey}/properties/{propertyKey}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: any,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".projectIdOrKey": {
        "rendered": "\n/** The project ID or project key (case sensitive). */\n projectIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".propertyKey": {
        "rendered": "\n/** The key of the project property. The maximum length is 255 characters. */\n propertyKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/project/{projectIdOrKey}/restore": {
    "query": {},
    "body": {},
    "path": {
      ".projectIdOrKey": {
        "rendered": "\n/** The project ID or project key (case sensitive). */\n projectIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Project",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/project/{projectIdOrKey}/role": {
    "query": {},
    "body": {},
    "path": {
      ".projectIdOrKey": {
        "rendered": "\n/** The project ID or project key (case sensitive). */\n projectIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "delete__/rest/api/3/project/{projectIdOrKey}/role/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The user account ID of the user to remove from the project role. */\n user?: string, \n/** The name of the group to remove from the project role. This parameter cannot be used with the `groupId` parameter. As a group's name can change, use of `groupId` is recommended. */\n group?: string, \n/** The ID of the group to remove from the project role. This parameter cannot be used with the `group` parameter. */\n groupId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.user": {
        "rendered": "\n/** The user account ID of the user to remove from the project role. */\n user?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.group": {
        "rendered": "\n/** The name of the group to remove from the project role. This parameter cannot be used with the `groupId` parameter. As a group's name can change, use of `groupId` is recommended. */\n group?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.groupId": {
        "rendered": "\n/** The ID of the group to remove from the project role. This parameter cannot be used with the `group` parameter. */\n groupId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".projectIdOrKey": {
        "rendered": "\n/** The project ID or project key (case sensitive). */\n projectIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".id": {
        "rendered": "\n/** The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/project/{projectIdOrKey}/role/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Exclude inactive users. */\n excludeInactiveUsers?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.excludeInactiveUsers": {
        "rendered": "\n/** Exclude inactive users. */\n excludeInactiveUsers?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".projectIdOrKey": {
        "rendered": "\n/** The project ID or project key (case sensitive). */\n projectIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".id": {
        "rendered": "\n/** The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProjectRole",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/project/{projectIdOrKey}/role/{id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: ActorsMap,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".projectIdOrKey": {
        "rendered": "\n/** The project ID or project key (case sensitive). */\n projectIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".id": {
        "rendered": "\n/** The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProjectRole",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "put__/rest/api/3/project/{projectIdOrKey}/role/{id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: ProjectRoleActorsUpdateBean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".projectIdOrKey": {
        "rendered": "\n/** The project ID or project key (case sensitive). */\n projectIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".id": {
        "rendered": "\n/** The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProjectRole",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/project/{projectIdOrKey}/roledetails": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Whether the roles should be filtered to include only those the user is assigned to. */\n currentMember?: boolean,  excludeConnectAddons?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.currentMember": {
        "rendered": "\n/** Whether the roles should be filtered to include only those the user is assigned to. */\n currentMember?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.excludeConnectAddons": {
        "rendered": " excludeConnectAddons?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".projectIdOrKey": {
        "rendered": "\n/** The project ID or project key (case sensitive). */\n projectIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(ProjectRoleDetails)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "ProjectRoleDetails",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/project/{projectIdOrKey}/statuses": {
    "query": {},
    "body": {},
    "path": {
      ".projectIdOrKey": {
        "rendered": "\n/** The project ID or project key (case sensitive). */\n projectIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(IssueTypeWithStatus)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "IssueTypeWithStatus",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "put__/rest/api/3/project/{projectIdOrKey}/type/{newProjectTypeKey}": {
    "query": {},
    "body": {},
    "path": {
      ".projectIdOrKey": {
        "rendered": "\n/** The project ID or project key (case sensitive). */\n projectIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".newProjectTypeKey": {
        "rendered": "\n/** The key of the new project type. */\n newProjectTypeKey: \"software\" | \"service_desk\" | \"business\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Project",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/project/{projectIdOrKey}/version": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, \n/** [Order](#ordering) the results by a field:\n\n *  `description` Sorts by version description.\n *  `name` Sorts by version name.\n *  `releaseDate` Sorts by release date, starting with the oldest date. Versions with no release date are listed last.\n *  `sequence` Sorts by the order of appearance in the user interface.\n *  `startDate` Sorts by start date, starting with the oldest date. Versions with no start date are listed last. */\n orderBy?: \"description\" | \"-description\" | \"+description\" | \"name\" | \"-name\" | \"+name\" | \"releaseDate\" | \"-releaseDate\" | \"+releaseDate\" | \"sequence\" | \"-sequence\" | \"+sequence\" | \"startDate\" | \"-startDate\" | \"+startDate\", \n/** Filter the results using a literal string. Versions with matching `name` or `description` are returned (case insensitive). */\n query?: string, \n/** A list of status values used to filter the results by version status. This parameter accepts a comma-separated list. The status values are `released`, `unreleased`, and `archived`. */\n status?: string, \n/** Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `issuesstatus` Returns the number of issues in each status category for each version.\n *  `operations` Returns actions that can be performed on the specified version. */\n expand?: string, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.orderBy": {
        "rendered": "\n/** [Order](#ordering) the results by a field:\n\n *  `description` Sorts by version description.\n *  `name` Sorts by version name.\n *  `releaseDate` Sorts by release date, starting with the oldest date. Versions with no release date are listed last.\n *  `sequence` Sorts by the order of appearance in the user interface.\n *  `startDate` Sorts by start date, starting with the oldest date. Versions with no start date are listed last. */\n orderBy?: \"description\" | \"-description\" | \"+description\" | \"name\" | \"-name\" | \"+name\" | \"releaseDate\" | \"-releaseDate\" | \"+releaseDate\" | \"sequence\" | \"-sequence\" | \"+sequence\" | \"startDate\" | \"-startDate\" | \"+startDate\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.query": {
        "rendered": "\n/** Filter the results using a literal string. Versions with matching `name` or `description` are returned (case insensitive). */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.status": {
        "rendered": "\n/** A list of status values used to filter the results by version status. This parameter accepts a comma-separated list. The status values are `released`, `unreleased`, and `archived`. */\n status?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `issuesstatus` Returns the number of issues in each status category for each version.\n *  `operations` Returns actions that can be performed on the specified version. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".projectIdOrKey": {
        "rendered": "\n/** The project ID or project key (case sensitive). */\n projectIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PageBeanVersion",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/project/{projectIdOrKey}/versions": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Use [expand](#expansion) to include additional information in the response. This parameter accepts `operations`, which returns actions that can be performed on the version. */\n expand?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information in the response. This parameter accepts `operations`, which returns actions that can be performed on the version. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".projectIdOrKey": {
        "rendered": "\n/** The project ID or project key (case sensitive). */\n projectIdOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Version)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "Version",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/project/{projectId}/email": {
    "query": {},
    "body": {},
    "path": {
      ".projectId": {
        "rendered": "\n/** The project ID. */\n projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProjectEmailAddress",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/project/{projectId}/email": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: ProjectEmailAddress,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".projectId": {
        "rendered": "\n/** The project ID. */\n projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/project/{projectId}/hierarchy": {
    "query": {},
    "body": {},
    "path": {
      ".projectId": {
        "rendered": "\n/** The ID of the project. */\n projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProjectIssueTypeHierarchy",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/project/{projectKeyOrId}/issuesecuritylevelscheme": {
    "query": {},
    "body": {},
    "path": {
      ".projectKeyOrId": {
        "rendered": "\n/** The project ID or project key (case sensitive). */\n projectKeyOrId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "SecurityScheme",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/project/{projectKeyOrId}/notificationscheme": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `all` Returns all expandable information\n *  `field` Returns information about any custom fields assigned to receive an event\n *  `group` Returns information about any groups assigned to receive an event\n *  `notificationSchemeEvents` Returns a list of event associations. This list is returned for all expandable information\n *  `projectRole` Returns information about any project roles assigned to receive an event\n *  `user` Returns information about any users assigned to receive an event */\n expand?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `all` Returns all expandable information\n *  `field` Returns information about any custom fields assigned to receive an event\n *  `group` Returns information about any groups assigned to receive an event\n *  `notificationSchemeEvents` Returns a list of event associations. This list is returned for all expandable information\n *  `projectRole` Returns information about any project roles assigned to receive an event\n *  `user` Returns information about any users assigned to receive an event */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".projectKeyOrId": {
        "rendered": "\n/** The project ID or project key (case sensitive). */\n projectKeyOrId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "NotificationScheme",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/project/{projectKeyOrId}/permissionscheme": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:\n\n *  `all` Returns all expandable information.\n *  `field` Returns information about the custom field granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `user` Returns information about the user who is granted the permission. */\n expand?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:\n\n *  `all` Returns all expandable information.\n *  `field` Returns information about the custom field granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `user` Returns information about the user who is granted the permission. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".projectKeyOrId": {
        "rendered": "\n/** The project ID or project key (case sensitive). */\n projectKeyOrId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PermissionScheme",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "put__/rest/api/3/project/{projectKeyOrId}/permissionscheme": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:\n\n *  `all` Returns all expandable information.\n *  `field` Returns information about the custom field granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `user` Returns information about the user who is granted the permission. */\n expand?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:\n\n *  `all` Returns all expandable information.\n *  `field` Returns information about the custom field granted the permission.\n *  `group` Returns information about the group that is granted the permission.\n *  `permissions` Returns all permission grants for each permission scheme.\n *  `projectRole` Returns information about the project role granted the permission.\n *  `user` Returns information about the user who is granted the permission. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: IdBean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".projectKeyOrId": {
        "rendered": "\n/** The project ID or project key (case sensitive). */\n projectKeyOrId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PermissionScheme",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/project/{projectKeyOrId}/securitylevel": {
    "query": {},
    "body": {},
    "path": {
      ".projectKeyOrId": {
        "rendered": "\n/** The project ID or project key (case sensitive). */\n projectKeyOrId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProjectIssueSecurityLevels",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/projectCategory": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(ProjectCategory)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "ProjectCategory",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/projectCategory": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: ProjectCategory,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "ProjectCategory",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/projectCategory/{id}": {
    "query": {},
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** ID of the project category to delete. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/projectCategory/{id}": {
    "query": {},
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the project category. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProjectCategory",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/projectCategory/{id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: ProjectCategory,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".id": {
        "rendered": " id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "UpdatedProjectCategory",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/projectvalidate/key": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The project key. */\n key?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** The project key. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "ErrorCollection",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/projectvalidate/validProjectKey": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The project key. */\n key?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** The project key. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/projectvalidate/validProjectName": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The project name. */\n name: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.name": {
        "rendered": "\n/** The project name. */\n name: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/resolution": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Resolution)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "Resolution",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/resolution": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: CreateResolutionDetails,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "ResolutionId",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "put__/rest/api/3/resolution/default": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: SetDefaultResolutionRequest,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/resolution/move": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: ReorderIssueResolutionsRequest,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/resolution/search": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: string, \n/** The maximum number of items to return per page. */\n maxResults?: string, \n/** The list of resolutions IDs to be filtered out */\n id?: (string)[], \n/** When set to true, return default only, when IDs provided, if none of them is default, return empty page. Default value is false */\n onlyDefault?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.id": {
        "rendered": "\n/** The list of resolutions IDs to be filtered out */\n id?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.id.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.onlyDefault": {
        "rendered": "\n/** When set to true, return default only, when IDs provided, if none of them is default, return empty page. Default value is false */\n onlyDefault?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PageBeanResolutionJsonBean",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/resolution/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The ID of the issue resolution that will replace the currently selected resolution. */\n replaceWith: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.replaceWith": {
        "rendered": "\n/** The ID of the issue resolution that will replace the currently selected resolution. */\n replaceWith: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the issue resolution. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/resolution/{id}": {
    "query": {},
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the issue resolution value. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Resolution",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/resolution/{id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: UpdateResolutionDetails,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the issue resolution. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/role": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(ProjectRole)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "ProjectRole",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/role": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: CreateUpdateRoleRequestBean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "ProjectRole",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "delete__/rest/api/3/role/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The ID of the project role that will replace the one being deleted. */\n swap?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.swap": {
        "rendered": "\n/** The ID of the project role that will replace the one being deleted. */\n swap?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the project role to delete. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/role/{id}": {
    "query": {},
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProjectRole",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/role/{id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: CreateUpdateRoleRequestBean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProjectRole",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "put__/rest/api/3/role/{id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: CreateUpdateRoleRequestBean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProjectRole",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "delete__/rest/api/3/role/{id}/actors": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The user account ID of the user to remove as a default actor. */\n user?: string, \n/** The group ID of the group to be removed as a default actor. This parameter cannot be used with the `group` parameter. */\n groupId?: string, \n/** The group name of the group to be removed as a default actor.This parameter cannot be used with the `groupId` parameter. As a group's name can change, use of `groupId` is recommended. */\n group?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.user": {
        "rendered": "\n/** The user account ID of the user to remove as a default actor. */\n user?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.groupId": {
        "rendered": "\n/** The group ID of the group to be removed as a default actor. This parameter cannot be used with the `group` parameter. */\n groupId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.group": {
        "rendered": "\n/** The group name of the group to be removed as a default actor.This parameter cannot be used with the `groupId` parameter. As a group's name can change, use of `groupId` is recommended. */\n group?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProjectRole",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/role/{id}/actors": {
    "query": {},
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProjectRole",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/role/{id}/actors": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: ActorInputBean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProjectRole",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/screens": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, \n/** The list of screen IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. */\n id?: (number)[], \n/** String used to perform a case-insensitive partial match with screen name. */\n queryString?: string, \n/** The scope filter string. To filter by multiple scope, provide an ampersand-separated list. For example, `scope=GLOBAL&scope=PROJECT`. */\n scope?: (\"GLOBAL\" | \"TEMPLATE\" | \"PROJECT\")[], \n/** [Order](#ordering) the results by a field:\n\n *  `id` Sorts by screen ID.\n *  `name` Sorts by screen name. */\n orderBy?: \"name\" | \"-name\" | \"+name\" | \"id\" | \"-id\" | \"+id\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.id": {
        "rendered": "\n/** The list of screen IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. */\n id?: (number)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.id.__no_name": {
        "rendered": "number",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.queryString": {
        "rendered": "\n/** String used to perform a case-insensitive partial match with screen name. */\n queryString?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.scope": {
        "rendered": "\n/** The scope filter string. To filter by multiple scope, provide an ampersand-separated list. For example, `scope=GLOBAL&scope=PROJECT`. */\n scope?: (\"GLOBAL\" | \"TEMPLATE\" | \"PROJECT\")[],",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.scope.__no_name": {
        "rendered": "\"GLOBAL\" | \"TEMPLATE\" | \"PROJECT\"",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.orderBy": {
        "rendered": "\n/** [Order](#ordering) the results by a field:\n\n *  `id` Sorts by screen ID.\n *  `name` Sorts by screen name. */\n orderBy?: \"name\" | \"-name\" | \"+name\" | \"id\" | \"-id\" | \"+id\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PageBeanScreen",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/screens": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: ScreenDetails,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "Screen",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/screens/addToDefault/{fieldId}": {
    "query": {},
    "body": {},
    "path": {
      ".fieldId": {
        "rendered": "\n/** The ID of the field. */\n fieldId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/screens/{screenId}": {
    "query": {},
    "body": {},
    "path": {
      ".screenId": {
        "rendered": "\n/** The ID of the screen. */\n screenId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/screens/{screenId}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: UpdateScreenDetails,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".screenId": {
        "rendered": "\n/** The ID of the screen. */\n screenId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Screen",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/screens/{screenId}/availableFields": {
    "query": {},
    "body": {},
    "path": {
      ".screenId": {
        "rendered": "\n/** The ID of the screen. */\n screenId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(ScreenableField)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "ScreenableField",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/screens/{screenId}/tabs": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The key of the project. */\n projectKey?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectKey": {
        "rendered": "\n/** The key of the project. */\n projectKey?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".screenId": {
        "rendered": "\n/** The ID of the screen. */\n screenId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(ScreenableTab)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "ScreenableTab",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/screens/{screenId}/tabs": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: ScreenableTab,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".screenId": {
        "rendered": "\n/** The ID of the screen. */\n screenId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ScreenableTab",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/screens/{screenId}/tabs/{tabId}": {
    "query": {},
    "body": {},
    "path": {
      ".screenId": {
        "rendered": "\n/** The ID of the screen. */\n screenId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".tabId": {
        "rendered": "\n/** The ID of the screen tab. */\n tabId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/screens/{screenId}/tabs/{tabId}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: ScreenableTab,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".screenId": {
        "rendered": "\n/** The ID of the screen. */\n screenId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".tabId": {
        "rendered": "\n/** The ID of the screen tab. */\n tabId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ScreenableTab",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/screens/{screenId}/tabs/{tabId}/fields": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The key of the project. */\n projectKey?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectKey": {
        "rendered": "\n/** The key of the project. */\n projectKey?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".screenId": {
        "rendered": "\n/** The ID of the screen. */\n screenId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".tabId": {
        "rendered": "\n/** The ID of the screen tab. */\n tabId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(ScreenableField)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "ScreenableField",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/screens/{screenId}/tabs/{tabId}/fields": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: AddFieldBean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".screenId": {
        "rendered": "\n/** The ID of the screen. */\n screenId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".tabId": {
        "rendered": "\n/** The ID of the screen tab. */\n tabId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ScreenableField",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/screens/{screenId}/tabs/{tabId}/fields/{id}": {
    "query": {},
    "body": {},
    "path": {
      ".screenId": {
        "rendered": "\n/** The ID of the screen. */\n screenId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".tabId": {
        "rendered": "\n/** The ID of the screen tab. */\n tabId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".id": {
        "rendered": "\n/** The ID of the field. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/screens/{screenId}/tabs/{tabId}/fields/{id}/move": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: MoveFieldBean,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".screenId": {
        "rendered": "\n/** The ID of the screen. */\n screenId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".tabId": {
        "rendered": "\n/** The ID of the screen tab. */\n tabId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".id": {
        "rendered": "\n/** The ID of the field. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/screens/{screenId}/tabs/{tabId}/move/{pos}": {
    "query": {},
    "body": {},
    "path": {
      ".screenId": {
        "rendered": "\n/** The ID of the screen. */\n screenId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".tabId": {
        "rendered": "\n/** The ID of the screen tab. */\n tabId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pos": {
        "rendered": "\n/** The position of tab. The base index is 0. */\n pos: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/screenscheme": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, \n/** The list of screen scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. */\n id?: (number)[], \n/** Use [expand](#expansion) include additional information in the response. This parameter accepts `issueTypeScreenSchemes` that, for each screen schemes, returns information about the issue type screen scheme the screen scheme is assigned to. */\n expand?: string, \n/** String used to perform a case-insensitive partial match with screen scheme name. */\n queryString?: string, \n/** [Order](#ordering) the results by a field:\n\n *  `id` Sorts by screen scheme ID.\n *  `name` Sorts by screen scheme name. */\n orderBy?: \"name\" | \"-name\" | \"+name\" | \"id\" | \"-id\" | \"+id\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.id": {
        "rendered": "\n/** The list of screen scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`. */\n id?: (number)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.id.__no_name": {
        "rendered": "number",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) include additional information in the response. This parameter accepts `issueTypeScreenSchemes` that, for each screen schemes, returns information about the issue type screen scheme the screen scheme is assigned to. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.queryString": {
        "rendered": "\n/** String used to perform a case-insensitive partial match with screen scheme name. */\n queryString?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.orderBy": {
        "rendered": "\n/** [Order](#ordering) the results by a field:\n\n *  `id` Sorts by screen scheme ID.\n *  `name` Sorts by screen scheme name. */\n orderBy?: \"name\" | \"-name\" | \"+name\" | \"id\" | \"-id\" | \"+id\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PageBeanScreenScheme",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/screenscheme": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: ScreenSchemeDetails,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "ScreenSchemeId",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/screenscheme/{screenSchemeId}": {
    "query": {},
    "body": {},
    "path": {
      ".screenSchemeId": {
        "rendered": "\n/** The ID of the screen scheme. */\n screenSchemeId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/screenscheme/{screenSchemeId}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: UpdateScreenSchemeDetails,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".screenSchemeId": {
        "rendered": "\n/** The ID of the screen scheme. */\n screenSchemeId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/search": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The [JQL](https://confluence.atlassian.com/x/egORLQ) that defines the search. Note:\n\n *  If no JQL expression is provided, all issues are returned.\n *  `username` and `userkey` cannot be used as search terms due to privacy reasons. Use `accountId` instead.\n *  If a user has hidden their email address in their user profile, partial matches of the email address will not find the user. An exact match is required. */\n jql?: string, \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. To manage page size, Jira may return fewer items per page where a large number of fields are requested. The greatest number of items returned per page is achieved when requesting `id` or `key` only. */\n maxResults?: number, \n/** Determines how to validate the JQL query and treat the validation results. Supported values are:\n\n *  `strict` Returns a 400 response code if any errors are found, along with a list of all errors (and warnings).\n *  `warn` Returns all errors as warnings.\n *  `none` No validation is performed.\n *  `true` *Deprecated* A legacy synonym for `strict`.\n *  `false` *Deprecated* A legacy synonym for `warn`.\n\nNote: If the JQL is not correctly formed a 400 response code is returned, regardless of the `validateQuery` value. */\n validateQuery?: \"strict\" | \"warn\" | \"none\" | \"true\" | \"false\", \n/** A list of fields to return for each issue, use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include:\n\n *  `*all` Returns all fields.\n *  `*navigable` Returns navigable fields.\n *  Any issue field, prefixed with a minus to exclude.\n\nExamples:\n\n *  `summary,comment` Returns only the summary and comments fields.\n *  `-description` Returns all navigable (default) fields except description.\n *  `*all,-comment` Returns all fields except comments.\n\nThis parameter may be specified multiple times. For example, `fields=field1,field2&fields=field3`.\n\nNote: All navigable fields are returned by default. This differs from [GET issue](#api-rest-api-3-issue-issueIdOrKey-get) where the default is all fields. */\n fields?: (string)[], \n/** Use [expand](#expansion) to include additional information about issues in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `renderedFields` Returns field values rendered in HTML format.\n *  `names` Returns the display name of each field.\n *  `schema` Returns the schema describing a field type.\n *  `transitions` Returns all possible transitions for the issue.\n *  `operations` Returns all possible operations for the issue.\n *  `editmeta` Returns information about how each field can be edited.\n *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.\n *  `versionedRepresentations` Instead of `fields`, returns `versionedRepresentations` a JSON array containing each version of a field's value, with the highest numbered item representing the most recent version. */\n expand?: string, \n/** A list of issue property keys for issue properties to include in the results. This parameter accepts a comma-separated list. Multiple properties can also be provided using an ampersand separated list. For example, `properties=prop1,prop2&properties=prop3`. A maximum of 5 issue property keys can be specified. */\n properties?: (string)[], \n/** Reference fields by their key (rather than ID). */\n fieldsByKeys?: boolean, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.jql": {
        "rendered": "\n/** The [JQL](https://confluence.atlassian.com/x/egORLQ) that defines the search. Note:\n\n *  If no JQL expression is provided, all issues are returned.\n *  `username` and `userkey` cannot be used as search terms due to privacy reasons. Use `accountId` instead.\n *  If a user has hidden their email address in their user profile, partial matches of the email address will not find the user. An exact match is required. */\n jql?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. To manage page size, Jira may return fewer items per page where a large number of fields are requested. The greatest number of items returned per page is achieved when requesting `id` or `key` only. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.validateQuery": {
        "rendered": "\n/** Determines how to validate the JQL query and treat the validation results. Supported values are:\n\n *  `strict` Returns a 400 response code if any errors are found, along with a list of all errors (and warnings).\n *  `warn` Returns all errors as warnings.\n *  `none` No validation is performed.\n *  `true` *Deprecated* A legacy synonym for `strict`.\n *  `false` *Deprecated* A legacy synonym for `warn`.\n\nNote: If the JQL is not correctly formed a 400 response code is returned, regardless of the `validateQuery` value. */\n validateQuery?: \"strict\" | \"warn\" | \"none\" | \"true\" | \"false\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.fields": {
        "rendered": "\n/** A list of fields to return for each issue, use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include:\n\n *  `*all` Returns all fields.\n *  `*navigable` Returns navigable fields.\n *  Any issue field, prefixed with a minus to exclude.\n\nExamples:\n\n *  `summary,comment` Returns only the summary and comments fields.\n *  `-description` Returns all navigable (default) fields except description.\n *  `*all,-comment` Returns all fields except comments.\n\nThis parameter may be specified multiple times. For example, `fields=field1,field2&fields=field3`.\n\nNote: All navigable fields are returned by default. This differs from [GET issue](#api-rest-api-3-issue-issueIdOrKey-get) where the default is all fields. */\n fields?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information about issues in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `renderedFields` Returns field values rendered in HTML format.\n *  `names` Returns the display name of each field.\n *  `schema` Returns the schema describing a field type.\n *  `transitions` Returns all possible transitions for the issue.\n *  `operations` Returns all possible operations for the issue.\n *  `editmeta` Returns information about how each field can be edited.\n *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.\n *  `versionedRepresentations` Instead of `fields`, returns `versionedRepresentations` a JSON array containing each version of a field's value, with the highest numbered item representing the most recent version. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.properties": {
        "rendered": "\n/** A list of issue property keys for issue properties to include in the results. This parameter accepts a comma-separated list. Multiple properties can also be provided using an ampersand separated list. For example, `properties=prop1,prop2&properties=prop3`. A maximum of 5 issue property keys can be specified. */\n properties?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.properties.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fieldsByKeys": {
        "rendered": "\n/** Reference fields by their key (rather than ID). */\n fieldsByKeys?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "SearchResults",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/search": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: SearchRequestBean,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "SearchResults",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/securitylevel/{id}": {
    "query": {},
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the issue security level. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "SecurityLevel",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/serverInfo": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "ServerInformation",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/settings/columns": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(ColumnItem)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "ColumnItem",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/settings/columns": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/status": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(StatusDetails)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "StatusDetails",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/status/{idOrName}": {
    "query": {},
    "body": {},
    "path": {
      ".idOrName": {
        "rendered": "\n/** The ID or name of the status. */\n idOrName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "StatusDetails",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/statuscategory": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(StatusCategory)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "StatusCategory",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/statuscategory/{idOrKey}": {
    "query": {},
    "body": {},
    "path": {
      ".idOrKey": {
        "rendered": "\n/** The ID or key of the status category. */\n idOrKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "StatusCategory",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "delete__/rest/api/3/statuses": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The list of status IDs. To include multiple IDs, provide an ampersand-separated list. For example, id=10000&id=10001.\n\nMin items `1`, Max items `50` */\n id?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.id": {
        "rendered": "\n/** The list of status IDs. To include multiple IDs, provide an ampersand-separated list. For example, id=10000&id=10001.\n\nMin items `1`, Max items `50` */\n id?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.id.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/statuses": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `usages` Returns the project and issue types that use the status in their workflow. */\n expand?: string, \n/** The list of status IDs. To include multiple IDs, provide an ampersand-separated list. For example, id=10000&id=10001.\n\nMin items `1`, Max items `50` */\n id?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `usages` Returns the project and issue types that use the status in their workflow. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.id": {
        "rendered": "\n/** The list of status IDs. To include multiple IDs, provide an ampersand-separated list. For example, id=10000&id=10001.\n\nMin items `1`, Max items `50` */\n id?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.id.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(JiraStatus)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "JiraStatus",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/statuses": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: StatusCreateRequest,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(JiraStatus)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "JiraStatus",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "put__/rest/api/3/statuses": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: StatusUpdateRequest,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/statuses/search": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `usages` Returns the project and issue types that use the status in their workflow. */\n expand?: string, \n/** The project the status is part of or null for global statuses. */\n projectId?: string, \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, \n/** Term to match status names against or null to search for all statuses in the search scope. */\n searchString?: string, \n/** Category of the status to filter by. The supported values are: `TODO`, `IN_PROGRESS`, and `DONE`. */\n statusCategory?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `usages` Returns the project and issue types that use the status in their workflow. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** The project the status is part of or null for global statuses. */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.searchString": {
        "rendered": "\n/** Term to match status names against or null to search for all statuses in the search scope. */\n searchString?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.statusCategory": {
        "rendered": "\n/** Category of the status to filter by. The supported values are: `TODO`, `IN_PROGRESS`, and `DONE`. */\n statusCategory?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PageOfStatuses",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/task/{taskId}": {
    "query": {},
    "body": {},
    "path": {
      ".taskId": {
        "rendered": "\n/** The ID of the task. */\n taskId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TaskProgressBeanObject",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/task/{taskId}/cancel": {
    "query": {},
    "body": {},
    "path": {
      ".taskId": {
        "rendered": "\n/** The ID of the task. */\n taskId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/uiModifications": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, \n/** Use expand to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `data` Returns UI modification data.\n *  `contexts` Returns UI modification contexts. */\n expand?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use expand to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `data` Returns UI modification data.\n *  `contexts` Returns UI modification contexts. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PageBeanUiModificationDetails",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/uiModifications": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: CreateUiModificationDetails,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "UiModificationIdentifiers",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/uiModifications/{uiModificationId}": {
    "query": {},
    "body": {},
    "path": {
      ".uiModificationId": {
        "rendered": "\n/** The ID of the UI modification. */\n uiModificationId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/uiModifications/{uiModificationId}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: UpdateUiModificationDetails,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".uiModificationId": {
        "rendered": "\n/** The ID of the UI modification. */\n uiModificationId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/universal_avatar/type/{type}/owner/{entityId}": {
    "query": {},
    "body": {},
    "path": {
      ".type": {
        "rendered": "\n/** The avatar type. */\n type: \"project\" | \"issuetype\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".entityId": {
        "rendered": "\n/** The ID of the item the avatar is associated with. */\n entityId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Avatars",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/universal_avatar/type/{type}/owner/{entityId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The X coordinate of the top-left corner of the crop region. */\n x?: number, \n/** The Y coordinate of the top-left corner of the crop region. */\n y?: number, \n/** The length of each side of the crop region. */\n size: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.x": {
        "rendered": "\n/** The X coordinate of the top-left corner of the crop region. */\n x?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.y": {
        "rendered": "\n/** The Y coordinate of the top-left corner of the crop region. */\n y?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.size": {
        "rendered": "\n/** The length of each side of the crop region. */\n size: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: any,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".type": {
        "rendered": "\n/** The avatar type. */\n type: \"project\" | \"issuetype\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".entityId": {
        "rendered": "\n/** The ID of the item the avatar is associated with. */\n entityId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Avatar",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "delete__/rest/api/3/universal_avatar/type/{type}/owner/{owningObjectId}/avatar/{id}": {
    "query": {},
    "body": {},
    "path": {
      ".type": {
        "rendered": "\n/** The avatar type. */\n type: \"project\" | \"issuetype\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".owningObjectId": {
        "rendered": "\n/** The ID of the item the avatar is associated with. */\n owningObjectId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".id": {
        "rendered": "\n/** The ID of the avatar. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/universal_avatar/view/type/{type}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The size of the avatar image. If not provided the default size is returned. */\n size?: \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\", \n/** The format to return the avatar image in. If not provided the original content format is returned. */\n format?: \"png\" | \"svg\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.size": {
        "rendered": "\n/** The size of the avatar image. If not provided the default size is returned. */\n size?: \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.format": {
        "rendered": "\n/** The format to return the avatar image in. If not provided the original content format is returned. */\n format?: \"png\" | \"svg\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".type": {
        "rendered": "\n/** The icon type of the avatar. */\n type: \"issuetype\" | \"project\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/universal_avatar/view/type/{type}/avatar/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The size of the avatar image. If not provided the default size is returned. */\n size?: \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\", \n/** The format to return the avatar image in. If not provided the original content format is returned. */\n format?: \"png\" | \"svg\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.size": {
        "rendered": "\n/** The size of the avatar image. If not provided the default size is returned. */\n size?: \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.format": {
        "rendered": "\n/** The format to return the avatar image in. If not provided the original content format is returned. */\n format?: \"png\" | \"svg\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".type": {
        "rendered": "\n/** The icon type of the avatar. */\n type: \"issuetype\" | \"project\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".id": {
        "rendered": "\n/** The ID of the avatar. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/universal_avatar/view/type/{type}/owner/{entityId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The size of the avatar image. If not provided the default size is returned. */\n size?: \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\", \n/** The format to return the avatar image in. If not provided the original content format is returned. */\n format?: \"png\" | \"svg\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.size": {
        "rendered": "\n/** The size of the avatar image. If not provided the default size is returned. */\n size?: \"xsmall\" | \"small\" | \"medium\" | \"large\" | \"xlarge\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.format": {
        "rendered": "\n/** The format to return the avatar image in. If not provided the original content format is returned. */\n format?: \"png\" | \"svg\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".type": {
        "rendered": "\n/** The icon type of the avatar. */\n type: \"issuetype\" | \"project\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".entityId": {
        "rendered": "\n/** The ID of the project or issue type the avatar belongs to. */\n entityId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "delete__/rest/api/3/user": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. */\n accountId: string, \n/** This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n username?: string, \n/** This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n key?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.accountId": {
        "rendered": "\n/** The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. */\n accountId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.username": {
        "rendered": "\n/** This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n username?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/user": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required. */\n accountId?: string, \n/** This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide) for details. */\n username?: string, \n/** This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide) for details. */\n key?: string, \n/** Use [expand](#expansion) to include additional information about users in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `groups` includes all groups and nested groups to which the user belongs.\n *  `applicationRoles` includes details of all the applications to which the user has access. */\n expand?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.accountId": {
        "rendered": "\n/** The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required. */\n accountId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.username": {
        "rendered": "\n/** This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide) for details. */\n username?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide) for details. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information about users in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `groups` includes all groups and nested groups to which the user belongs.\n *  `applicationRoles` includes details of all the applications to which the user has access. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "User",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/user": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: NewUserDetails,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "User",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/user/assignable/multiProjectSearch": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A query string that is matched against user attributes, such as `displayName` and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` is specified. */\n query?: string, \n/** This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n username?: string, \n/** A query string that is matched exactly against user `accountId`. Required, unless `query` is specified. */\n accountId?: string, \n/** A list of project keys (case sensitive). This parameter accepts a comma-separated list. */\n projectKeys: string, \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** A query string that is matched against user attributes, such as `displayName` and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` is specified. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.username": {
        "rendered": "\n/** This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n username?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.accountId": {
        "rendered": "\n/** A query string that is matched exactly against user `accountId`. Required, unless `query` is specified. */\n accountId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectKeys": {
        "rendered": "\n/** A list of project keys (case sensitive). This parameter accepts a comma-separated list. */\n projectKeys: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(User)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "User",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/user/assignable/search": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A query string that is matched against user attributes, such as `displayName`, and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `username` or `accountId` is specified. */\n query?: string, \n/** The sessionId of this request. SessionId is the same until the assignee is set. */\n sessionId?: string, \n/** This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n username?: string, \n/** A query string that is matched exactly against user `accountId`. Required, unless `query` is specified. */\n accountId?: string, \n/** The project ID or project key (case sensitive). Required, unless `issueKey` is specified. */\n project?: string, \n/** The key of the issue. Required, unless `project` is specified. */\n issueKey?: string, \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return. This operation may return less than the maximum number of items even if more are available. The operation fetches users up to the maximum and then, from the fetched users, returns only the users that can be assigned to the issue. */\n maxResults?: number, \n/** The ID of the transition. */\n actionDescriptorId?: number,  recommend?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** A query string that is matched against user attributes, such as `displayName`, and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `username` or `accountId` is specified. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sessionId": {
        "rendered": "\n/** The sessionId of this request. SessionId is the same until the assignee is set. */\n sessionId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.username": {
        "rendered": "\n/** This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n username?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.accountId": {
        "rendered": "\n/** A query string that is matched exactly against user `accountId`. Required, unless `query` is specified. */\n accountId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.project": {
        "rendered": "\n/** The project ID or project key (case sensitive). Required, unless `issueKey` is specified. */\n project?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.issueKey": {
        "rendered": "\n/** The key of the issue. Required, unless `project` is specified. */\n issueKey?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return. This operation may return less than the maximum number of items even if more are available. The operation fetches users up to the maximum and then, from the fetched users, returns only the users that can be assigned to the issue. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.actionDescriptorId": {
        "rendered": "\n/** The ID of the transition. */\n actionDescriptorId?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.recommend": {
        "rendered": " recommend?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(User)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "User",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/user/bulk": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, \n/** This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n username?: (string)[], \n/** This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n key?: (string)[], \n/** The account ID of a user. To specify multiple users, pass multiple `accountId` parameters. For example, `accountId=5b10a2844c20165700ede21g&accountId=5b10ac8d82e05b22cc7d4ef5`. */\n accountId: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.username": {
        "rendered": "\n/** This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n username?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.username.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n key?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.accountId": {
        "rendered": "\n/** The account ID of a user. To specify multiple users, pass multiple `accountId` parameters. For example, `accountId=5b10a2844c20165700ede21g&accountId=5b10ac8d82e05b22cc7d4ef5`. */\n accountId: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.accountId.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PageBeanUser",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/user/bulk/migration": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, \n/** Username of a user. To specify multiple users, pass multiple copies of this parameter. For example, `username=fred&username=barney`. Required if `key` isn't provided. Cannot be provided if `key` is present. */\n username?: (string)[], \n/** Key of a user. To specify multiple users, pass multiple copies of this parameter. For example, `key=fred&key=barney`. Required if `username` isn't provided. Cannot be provided if `username` is present. */\n key?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.username": {
        "rendered": "\n/** Username of a user. To specify multiple users, pass multiple copies of this parameter. For example, `username=fred&username=barney`. Required if `key` isn't provided. Cannot be provided if `key` is present. */\n username?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.username.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** Key of a user. To specify multiple users, pass multiple copies of this parameter. For example, `key=fred&key=barney`. Required if `username` isn't provided. Cannot be provided if `username` is present. */\n key?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(UserMigrationBean)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "UserMigrationBean",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/user/columns": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. */\n accountId?: string, \n/** This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n username?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.accountId": {
        "rendered": "\n/** The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. */\n accountId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.username": {
        "rendered": "\n/** This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n username?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/user/columns": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. */\n accountId?: string, \n/** This parameter is no longer available See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n username?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.accountId": {
        "rendered": "\n/** The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. */\n accountId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.username": {
        "rendered": "\n/** This parameter is no longer available See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n username?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(ColumnItem)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "ColumnItem",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/user/columns": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. */\n accountId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.accountId": {
        "rendered": "\n/** The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. */\n accountId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/user/email": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, `5b10ac8d82e05b22cc7d4ef5`. */\n accountId: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.accountId": {
        "rendered": "\n/** The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, `5b10ac8d82e05b22cc7d4ef5`. */\n accountId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "UnrestrictedUserEmail",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/user/email/bulk": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The account IDs of the users for which emails are required. An `accountId` is an identifier that uniquely identifies the user across all Atlassian products. For example, `5b10ac8d82e05b22cc7d4ef5`. Note, this should be treated as an opaque identifier (that is, do not assume any structure in the value). */\n accountId: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.accountId": {
        "rendered": "\n/** The account IDs of the users for which emails are required. An `accountId` is an identifier that uniquely identifies the user across all Atlassian products. For example, `5b10ac8d82e05b22cc7d4ef5`. Note, this should be treated as an opaque identifier (that is, do not assume any structure in the value). */\n accountId: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.accountId.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "UnrestrictedUserEmail",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/user/groups": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. */\n accountId: string, \n/** This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n username?: string, \n/** This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n key?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.accountId": {
        "rendered": "\n/** The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. */\n accountId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.username": {
        "rendered": "\n/** This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n username?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(GroupName)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "GroupName",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/user/permission/search": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A query string that is matched against user attributes, such as `displayName` and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` is specified. */\n query?: string, \n/** This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n username?: string, \n/** A query string that is matched exactly against user `accountId`. Required, unless `query` is specified. */\n accountId?: string, \n/** A comma separated list of permissions. Permissions can be specified as any:\n\n *  permission returned by [Get all permissions](#api-rest-api-3-permissions-get).\n *  custom project permission added by Connect apps.\n *  (deprecated) one of the following:\n    \n     *  ASSIGNABLE\\_USER\n     *  ASSIGN\\_ISSUE\n     *  ATTACHMENT\\_DELETE\\_ALL\n     *  ATTACHMENT\\_DELETE\\_OWN\n     *  BROWSE\n     *  CLOSE\\_ISSUE\n     *  COMMENT\\_DELETE\\_ALL\n     *  COMMENT\\_DELETE\\_OWN\n     *  COMMENT\\_EDIT\\_ALL\n     *  COMMENT\\_EDIT\\_OWN\n     *  COMMENT\\_ISSUE\n     *  CREATE\\_ATTACHMENT\n     *  CREATE\\_ISSUE\n     *  DELETE\\_ISSUE\n     *  EDIT\\_ISSUE\n     *  LINK\\_ISSUE\n     *  MANAGE\\_WATCHER\\_LIST\n     *  MODIFY\\_REPORTER\n     *  MOVE\\_ISSUE\n     *  PROJECT\\_ADMIN\n     *  RESOLVE\\_ISSUE\n     *  SCHEDULE\\_ISSUE\n     *  SET\\_ISSUE\\_SECURITY\n     *  TRANSITION\\_ISSUE\n     *  VIEW\\_VERSION\\_CONTROL\n     *  VIEW\\_VOTERS\\_AND\\_WATCHERS\n     *  VIEW\\_WORKFLOW\\_READONLY\n     *  WORKLOG\\_DELETE\\_ALL\n     *  WORKLOG\\_DELETE\\_OWN\n     *  WORKLOG\\_EDIT\\_ALL\n     *  WORKLOG\\_EDIT\\_OWN\n     *  WORK\\_ISSUE */\n permissions: string, \n/** The issue key for the issue. */\n issueKey?: string, \n/** The project key for the project (case sensitive). */\n projectKey?: string, \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** A query string that is matched against user attributes, such as `displayName` and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` is specified. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.username": {
        "rendered": "\n/** This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n username?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.accountId": {
        "rendered": "\n/** A query string that is matched exactly against user `accountId`. Required, unless `query` is specified. */\n accountId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.permissions": {
        "rendered": "\n/** A comma separated list of permissions. Permissions can be specified as any:\n\n *  permission returned by [Get all permissions](#api-rest-api-3-permissions-get).\n *  custom project permission added by Connect apps.\n *  (deprecated) one of the following:\n    \n     *  ASSIGNABLE\\_USER\n     *  ASSIGN\\_ISSUE\n     *  ATTACHMENT\\_DELETE\\_ALL\n     *  ATTACHMENT\\_DELETE\\_OWN\n     *  BROWSE\n     *  CLOSE\\_ISSUE\n     *  COMMENT\\_DELETE\\_ALL\n     *  COMMENT\\_DELETE\\_OWN\n     *  COMMENT\\_EDIT\\_ALL\n     *  COMMENT\\_EDIT\\_OWN\n     *  COMMENT\\_ISSUE\n     *  CREATE\\_ATTACHMENT\n     *  CREATE\\_ISSUE\n     *  DELETE\\_ISSUE\n     *  EDIT\\_ISSUE\n     *  LINK\\_ISSUE\n     *  MANAGE\\_WATCHER\\_LIST\n     *  MODIFY\\_REPORTER\n     *  MOVE\\_ISSUE\n     *  PROJECT\\_ADMIN\n     *  RESOLVE\\_ISSUE\n     *  SCHEDULE\\_ISSUE\n     *  SET\\_ISSUE\\_SECURITY\n     *  TRANSITION\\_ISSUE\n     *  VIEW\\_VERSION\\_CONTROL\n     *  VIEW\\_VOTERS\\_AND\\_WATCHERS\n     *  VIEW\\_WORKFLOW\\_READONLY\n     *  WORKLOG\\_DELETE\\_ALL\n     *  WORKLOG\\_DELETE\\_OWN\n     *  WORKLOG\\_EDIT\\_ALL\n     *  WORKLOG\\_EDIT\\_OWN\n     *  WORK\\_ISSUE */\n permissions: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.issueKey": {
        "rendered": "\n/** The issue key for the issue. */\n issueKey?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectKey": {
        "rendered": "\n/** The project key for the project (case sensitive). */\n projectKey?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(User)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "User",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/user/picker": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A query string that is matched against user attributes, such as `displayName`, and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. */\n query: string, \n/** The maximum number of items to return. The total number of matched users is returned in `total`. */\n maxResults?: number, \n/** Include the URI to the user's avatar. */\n showAvatar?: boolean, \n/** This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n exclude?: (string)[], \n/** A list of account IDs to exclude from the search results. This parameter accepts a comma-separated list. Multiple account IDs can also be provided using an ampersand-separated list. For example, `excludeAccountIds=5b10a2844c20165700ede21g,5b10a0effa615349cb016cd8&excludeAccountIds=5b10ac8d82e05b22cc7d4ef5`. Cannot be provided with `exclude`. */\n excludeAccountIds?: (string)[],  avatarSize?: string,  excludeConnectUsers?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** A query string that is matched against user attributes, such as `displayName`, and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. */\n query: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return. The total number of matched users is returned in `total`. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.showAvatar": {
        "rendered": "\n/** Include the URI to the user's avatar. */\n showAvatar?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.exclude": {
        "rendered": "\n/** This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n exclude?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.exclude.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.excludeAccountIds": {
        "rendered": "\n/** A list of account IDs to exclude from the search results. This parameter accepts a comma-separated list. Multiple account IDs can also be provided using an ampersand-separated list. For example, `excludeAccountIds=5b10a2844c20165700ede21g,5b10a0effa615349cb016cd8&excludeAccountIds=5b10ac8d82e05b22cc7d4ef5`. Cannot be provided with `exclude`. */\n excludeAccountIds?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.excludeAccountIds.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.avatarSize": {
        "rendered": " avatarSize?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.excludeConnectUsers": {
        "rendered": " excludeConnectUsers?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "FoundUsers",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/user/properties": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. */\n accountId?: string, \n/** This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n userKey?: string, \n/** This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n username?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.accountId": {
        "rendered": "\n/** The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. */\n accountId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.userKey": {
        "rendered": "\n/** This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n userKey?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.username": {
        "rendered": "\n/** This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n username?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PropertyKeys",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/user/properties/{propertyKey}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. */\n accountId?: string, \n/** This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n userKey?: string, \n/** This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n username?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.accountId": {
        "rendered": "\n/** The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. */\n accountId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.userKey": {
        "rendered": "\n/** This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n userKey?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.username": {
        "rendered": "\n/** This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n username?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".propertyKey": {
        "rendered": "\n/** The key of the user's property. */\n propertyKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/user/properties/{propertyKey}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. */\n accountId?: string, \n/** This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n userKey?: string, \n/** This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n username?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.accountId": {
        "rendered": "\n/** The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. */\n accountId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.userKey": {
        "rendered": "\n/** This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n userKey?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.username": {
        "rendered": "\n/** This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n username?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".propertyKey": {
        "rendered": "\n/** The key of the user's property. */\n propertyKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EntityProperty",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "put__/rest/api/3/user/properties/{propertyKey}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. */\n accountId?: string, \n/** This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n userKey?: string, \n/** This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n username?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.accountId": {
        "rendered": "\n/** The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. */\n accountId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.userKey": {
        "rendered": "\n/** This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n userKey?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.username": {
        "rendered": "\n/** This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n username?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: any,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".propertyKey": {
        "rendered": "\n/** The key of the user's property. The maximum length is 255 characters. */\n propertyKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/user/search": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A query string that is matched against user attributes ( `displayName`, and `emailAddress`) to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` or `property` is specified. */\n query?: string,  username?: string, \n/** A query string that is matched exactly against a user `accountId`. Required, unless `query` or `property` is specified. */\n accountId?: string, \n/** The index of the first item to return in a page of filtered results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, \n/** A query string used to search properties. Property keys are specified by path, so property keys containing dot (.) or equals (=) characters cannot be used. The query string cannot be specified using a JSON object. Example: To search for the value of `nested` from `{\"something\":{\"nested\":1,\"other\":2}}` use `thepropertykey.something.nested=1`. Required, unless `accountId` or `query` is specified. */\n property?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** A query string that is matched against user attributes ( `displayName`, and `emailAddress`) to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` or `property` is specified. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.username": {
        "rendered": " username?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.accountId": {
        "rendered": "\n/** A query string that is matched exactly against a user `accountId`. Required, unless `query` or `property` is specified. */\n accountId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of filtered results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.property": {
        "rendered": "\n/** A query string used to search properties. Property keys are specified by path, so property keys containing dot (.) or equals (=) characters cannot be used. The query string cannot be specified using a JSON object. Example: To search for the value of `nested` from `{\"something\":{\"nested\":1,\"other\":2}}` use `thepropertykey.something.nested=1`. Required, unless `accountId` or `query` is specified. */\n property?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(User)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "User",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/user/search/query": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The search query. */\n query: string, \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query. */\n query: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PageBeanUser",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/user/search/query/key": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The search query. */\n query: string, \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query. */\n query: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PageBeanUserKey",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/user/viewissue/search": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A query string that is matched against user attributes, such as `displayName` and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` is specified. */\n query?: string, \n/** This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n username?: string, \n/** A query string that is matched exactly against user `accountId`. Required, unless `query` is specified. */\n accountId?: string, \n/** The issue key for the issue. Required, unless `projectKey` is specified. */\n issueKey?: string, \n/** The project key for the project (case sensitive). Required, unless `issueKey` is specified. */\n projectKey?: string, \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** A query string that is matched against user attributes, such as `displayName` and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` is specified. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.username": {
        "rendered": "\n/** This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. */\n username?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.accountId": {
        "rendered": "\n/** A query string that is matched exactly against user `accountId`. Required, unless `query` is specified. */\n accountId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.issueKey": {
        "rendered": "\n/** The issue key for the issue. Required, unless `projectKey` is specified. */\n issueKey?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectKey": {
        "rendered": "\n/** The project key for the project (case sensitive). Required, unless `issueKey` is specified. */\n projectKey?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(User)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "User",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/users": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return. */\n startAt?: number, \n/** The maximum number of items to return. */\n maxResults?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return. */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(User)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "User",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/users/search": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return. */\n startAt?: number, \n/** The maximum number of items to return. */\n maxResults?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return. */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(User)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "User",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/version": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: Version,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "Version",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "delete__/rest/api/3/version/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The ID of the version to update `fixVersion` to when the field contains the deleted version. The replacement version must be in the same project as the version being deleted and cannot be the version being deleted. */\n moveFixIssuesTo?: string, \n/** The ID of the version to update `affectedVersion` to when the field contains the deleted version. The replacement version must be in the same project as the version being deleted and cannot be the version being deleted. */\n moveAffectedIssuesTo?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.moveFixIssuesTo": {
        "rendered": "\n/** The ID of the version to update `fixVersion` to when the field contains the deleted version. The replacement version must be in the same project as the version being deleted and cannot be the version being deleted. */\n moveFixIssuesTo?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.moveAffectedIssuesTo": {
        "rendered": "\n/** The ID of the version to update `affectedVersion` to when the field contains the deleted version. The replacement version must be in the same project as the version being deleted and cannot be the version being deleted. */\n moveAffectedIssuesTo?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the version. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/version/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Use [expand](#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `operations` Returns the list of operations available for this version.\n *  `issuesstatus` Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property represents the number of issues with a status other than *to do*, *in progress*, and *done*. */\n expand?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `operations` Returns the list of operations available for this version.\n *  `issuesstatus` Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property represents the number of issues with a status other than *to do*, *in progress*, and *done*. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the version. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Version",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "put__/rest/api/3/version/{id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: Version,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the version. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Version",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "put__/rest/api/3/version/{id}/mergeto/{moveIssuesTo}": {
    "query": {},
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the version to delete. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".moveIssuesTo": {
        "rendered": "\n/** The ID of the version to merge into. */\n moveIssuesTo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/version/{id}/move": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: VersionMoveBean,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the version to be moved. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Version",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/version/{id}/relatedIssueCounts": {
    "query": {},
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the version. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "VersionIssueCounts",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/api/3/version/{id}/removeAndSwap": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: DeleteAndReplaceVersionBean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the version. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/version/{id}/unresolvedIssueCount": {
    "query": {},
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the version. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "VersionUnresolvedIssuesCount",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/webhook": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: ContainerForWebhookIDs,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/webhook": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PageBeanWebhook",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/webhook": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: WebhookRegistrationDetails,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "ContainerForRegisteredWebhooks",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/webhook/failed": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The maximum number of webhooks to return per page. If obeying the maxResults directive would result in records with the same failure time being split across pages, the directive is ignored and all records with the same failure time included on the page. */\n maxResults?: number, \n/** The time after which any webhook failure must have occurred for the record to be returned, expressed as milliseconds since the UNIX epoch. */\n after?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of webhooks to return per page. If obeying the maxResults directive would result in records with the same failure time being split across pages, the directive is ignored and all records with the same failure time included on the page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.after": {
        "rendered": "\n/** The time after which any webhook failure must have occurred for the record to be returned, expressed as milliseconds since the UNIX epoch. */\n after?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "FailedWebhooks",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/webhook/refresh": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: ContainerForWebhookIDs,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "WebhooksExpirationDate",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/workflow": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The name of the workflow to be returned. Only one workflow can be specified. */\n workflowName?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.workflowName": {
        "rendered": "\n/** The name of the workflow to be returned. Only one workflow can be specified. */\n workflowName?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(DeprecatedWorkflow)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "DeprecatedWorkflow",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/workflow": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: CreateWorkflowDetails,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "WorkflowIDs",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/workflow/rule/config": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, \n/** The types of the transition rules to return. */\n types: (\"postfunction\" | \"condition\" | \"validator\")[], \n/** The transition rule class keys, as defined in the Connect app descriptor, of the transition rules to return. */\n keys?: (string)[], \n/** EXPERIMENTAL: The list of workflow names to filter by. */\n workflowNames?: (string)[], \n/** EXPERIMENTAL: The list of `tags` to filter by. */\n withTags?: (string)[], \n/** EXPERIMENTAL: Whether draft or published workflows are returned. If not provided, both workflow types are returned. */\n draft?: boolean, \n/** Use [expand](#expansion) to include additional information in the response. This parameter accepts `transition`, which, for each rule, returns information about the transition the rule is assigned to. */\n expand?: string, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.types": {
        "rendered": "\n/** The types of the transition rules to return. */\n types: (\"postfunction\" | \"condition\" | \"validator\")[],",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.types.__no_name": {
        "rendered": "\"postfunction\" | \"condition\" | \"validator\"",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.keys": {
        "rendered": "\n/** The transition rule class keys, as defined in the Connect app descriptor, of the transition rules to return. */\n keys?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.keys.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.workflowNames": {
        "rendered": "\n/** EXPERIMENTAL: The list of workflow names to filter by. */\n workflowNames?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.workflowNames.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.withTags": {
        "rendered": "\n/** EXPERIMENTAL: The list of `tags` to filter by. */\n withTags?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.withTags.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.draft": {
        "rendered": "\n/** EXPERIMENTAL: Whether draft or published workflows are returned. If not provided, both workflow types are returned. */\n draft?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information in the response. This parameter accepts `transition`, which, for each rule, returns information about the transition the rule is assigned to. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PageBeanWorkflowTransitionRules",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/workflow/rule/config": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: WorkflowTransitionRulesUpdate,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "WorkflowTransitionRulesUpdateErrors",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/workflow/rule/config/delete": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: WorkflowsWithTransitionRulesDetails,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "WorkflowTransitionRulesUpdateErrors",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/workflow/search": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, \n/** The name of a workflow to return. To include multiple workflows, provide an ampersand-separated list. For example, `workflowName=name1&workflowName=name2`. */\n workflowName?: (string)[], \n/** Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `transitions` For each workflow, returns information about the transitions inside the workflow.\n *  `transitions.rules` For each workflow transition, returns information about its rules. Transitions are included automatically if this expand is requested.\n *  `transitions.properties` For each workflow transition, returns information about its properties. Transitions are included automatically if this expand is requested.\n *  `statuses` For each workflow, returns information about the statuses inside the workflow.\n *  `statuses.properties` For each workflow status, returns information about its properties. Statuses are included automatically if this expand is requested.\n *  `default` For each workflow, returns information about whether this is the default workflow.\n *  `schemes` For each workflow, returns information about the workflow schemes the workflow is assigned to.\n *  `projects` For each workflow, returns information about the projects the workflow is assigned to, through workflow schemes.\n *  `hasDraftWorkflow` For each workflow, returns information about whether the workflow has a draft version.\n *  `operations` For each workflow, returns information about the actions that can be undertaken on the workflow. */\n expand?: string, \n/** String used to perform a case-insensitive partial match with workflow name. */\n queryString?: string, \n/** [Order](#ordering) the results by a field:\n\n *  `name` Sorts by workflow name.\n *  `created` Sorts by create time.\n *  `updated` Sorts by update time. */\n orderBy?: \"name\" | \"-name\" | \"+name\" | \"created\" | \"-created\" | \"+created\" | \"updated\" | \"+updated\" | \"-updated\", \n/** Filters active and inactive workflows. */\n isActive?: boolean, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.workflowName": {
        "rendered": "\n/** The name of a workflow to return. To include multiple workflows, provide an ampersand-separated list. For example, `workflowName=name1&workflowName=name2`. */\n workflowName?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.workflowName.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:\n\n *  `transitions` For each workflow, returns information about the transitions inside the workflow.\n *  `transitions.rules` For each workflow transition, returns information about its rules. Transitions are included automatically if this expand is requested.\n *  `transitions.properties` For each workflow transition, returns information about its properties. Transitions are included automatically if this expand is requested.\n *  `statuses` For each workflow, returns information about the statuses inside the workflow.\n *  `statuses.properties` For each workflow status, returns information about its properties. Statuses are included automatically if this expand is requested.\n *  `default` For each workflow, returns information about whether this is the default workflow.\n *  `schemes` For each workflow, returns information about the workflow schemes the workflow is assigned to.\n *  `projects` For each workflow, returns information about the projects the workflow is assigned to, through workflow schemes.\n *  `hasDraftWorkflow` For each workflow, returns information about whether the workflow has a draft version.\n *  `operations` For each workflow, returns information about the actions that can be undertaken on the workflow. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.queryString": {
        "rendered": "\n/** String used to perform a case-insensitive partial match with workflow name. */\n queryString?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.orderBy": {
        "rendered": "\n/** [Order](#ordering) the results by a field:\n\n *  `name` Sorts by workflow name.\n *  `created` Sorts by create time.\n *  `updated` Sorts by update time. */\n orderBy?: \"name\" | \"-name\" | \"+name\" | \"created\" | \"-created\" | \"+created\" | \"updated\" | \"+updated\" | \"-updated\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.isActive": {
        "rendered": "\n/** Filters active and inactive workflows. */\n isActive?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PageBeanWorkflow",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "delete__/rest/api/3/workflow/transitions/{transitionId}/properties": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The name of the transition property to delete, also known as the name of the property. */\n key: string, \n/** The name of the workflow that the transition belongs to. */\n workflowName: string, \n/** The workflow status. Set to `live` for inactive workflows or `draft` for draft workflows. Active workflows cannot be edited. */\n workflowMode?: \"live\" | \"draft\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.key": {
        "rendered": "\n/** The name of the transition property to delete, also known as the name of the property. */\n key: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.workflowName": {
        "rendered": "\n/** The name of the workflow that the transition belongs to. */\n workflowName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.workflowMode": {
        "rendered": "\n/** The workflow status. Set to `live` for inactive workflows or `draft` for draft workflows. Active workflows cannot be edited. */\n workflowMode?: \"live\" | \"draft\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".transitionId": {
        "rendered": "\n/** The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition. */\n transitionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/workflow/transitions/{transitionId}/properties": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Some properties with keys that have the *jira.* prefix are reserved, which means they are not editable. To include these properties in the results, set this parameter to *true*. */\n includeReservedKeys?: boolean, \n/** The key of the property being returned, also known as the name of the property. If this parameter is not specified, all properties on the transition are returned. */\n key?: string, \n/** The name of the workflow that the transition belongs to. */\n workflowName: string, \n/** The workflow status. Set to *live* for active and inactive workflows, or *draft* for draft workflows. */\n workflowMode?: \"live\" | \"draft\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.includeReservedKeys": {
        "rendered": "\n/** Some properties with keys that have the *jira.* prefix are reserved, which means they are not editable. To include these properties in the results, set this parameter to *true*. */\n includeReservedKeys?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** The key of the property being returned, also known as the name of the property. If this parameter is not specified, all properties on the transition are returned. */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.workflowName": {
        "rendered": "\n/** The name of the workflow that the transition belongs to. */\n workflowName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.workflowMode": {
        "rendered": "\n/** The workflow status. Set to *live* for active and inactive workflows, or *draft* for draft workflows. */\n workflowMode?: \"live\" | \"draft\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".transitionId": {
        "rendered": "\n/** The ID of the transition. To get the ID, view the workflow in text mode in the Jira administration console. The ID is shown next to the transition. */\n transitionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "WorkflowTransitionProperty",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/workflow/transitions/{transitionId}/properties": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The key of the property being added, also known as the name of the property. Set this to the same value as the `key` defined in the request body. */\n key: string, \n/** The name of the workflow that the transition belongs to. */\n workflowName: string, \n/** The workflow status. Set to *live* for inactive workflows or *draft* for draft workflows. Active workflows cannot be edited. */\n workflowMode?: \"live\" | \"draft\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.key": {
        "rendered": "\n/** The key of the property being added, also known as the name of the property. Set this to the same value as the `key` defined in the request body. */\n key: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.workflowName": {
        "rendered": "\n/** The name of the workflow that the transition belongs to. */\n workflowName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.workflowMode": {
        "rendered": "\n/** The workflow status. Set to *live* for inactive workflows or *draft* for draft workflows. Active workflows cannot be edited. */\n workflowMode?: \"live\" | \"draft\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: WorkflowTransitionProperty,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".transitionId": {
        "rendered": "\n/** The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition. */\n transitionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "WorkflowTransitionProperty",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "put__/rest/api/3/workflow/transitions/{transitionId}/properties": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The key of the property being updated, also known as the name of the property. Set this to the same value as the `key` defined in the request body. */\n key: string, \n/** The name of the workflow that the transition belongs to. */\n workflowName: string, \n/** The workflow status. Set to `live` for inactive workflows or `draft` for draft workflows. Active workflows cannot be edited. */\n workflowMode?: \"live\" | \"draft\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.key": {
        "rendered": "\n/** The key of the property being updated, also known as the name of the property. Set this to the same value as the `key` defined in the request body. */\n key: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.workflowName": {
        "rendered": "\n/** The name of the workflow that the transition belongs to. */\n workflowName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.workflowMode": {
        "rendered": "\n/** The workflow status. Set to `live` for inactive workflows or `draft` for draft workflows. Active workflows cannot be edited. */\n workflowMode?: \"live\" | \"draft\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: WorkflowTransitionProperty,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".transitionId": {
        "rendered": "\n/** The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition. */\n transitionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "WorkflowTransitionProperty",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "delete__/rest/api/3/workflow/{entityId}": {
    "query": {},
    "body": {},
    "path": {
      ".entityId": {
        "rendered": "\n/** The entity ID of the workflow. */\n entityId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/workflowscheme": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number, \n/** The maximum number of items to return per page. */\n maxResults?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startAt": {
        "rendered": "\n/** The index of the first item to return in a page of results (page offset). */\n startAt?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.maxResults": {
        "rendered": "\n/** The maximum number of items to return per page. */\n maxResults?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PageBeanWorkflowScheme",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/workflowscheme": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: WorkflowScheme,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "WorkflowScheme",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/workflowscheme/project": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The ID of a project to return the workflow schemes for. To include multiple projects, provide an ampersand-Jim: oneseparated list. For example, `projectId=10000&projectId=10001`. */\n projectId: (number)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** The ID of a project to return the workflow schemes for. To include multiple projects, provide an ampersand-Jim: oneseparated list. For example, `projectId=10000&projectId=10001`. */\n projectId: (number)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId.__no_name": {
        "rendered": "number",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "ContainerOfWorkflowSchemeAssociations",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "put__/rest/api/3/workflowscheme/project": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: WorkflowSchemeProjectAssociation,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/workflowscheme/{id}": {
    "query": {},
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID is shown in the URL as `schemeId`. For example, *schemeId=10301*. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/workflowscheme/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Returns the workflow scheme's draft rather than scheme itself, if set to true. If the workflow scheme does not have a draft, then the workflow scheme is returned. */\n returnDraftIfExists?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.returnDraftIfExists": {
        "rendered": "\n/** Returns the workflow scheme's draft rather than scheme itself, if set to true. If the workflow scheme does not have a draft, then the workflow scheme is returned. */\n returnDraftIfExists?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID is shown in the URL as `schemeId`. For example, *schemeId=10301*. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "WorkflowScheme",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "put__/rest/api/3/workflowscheme/{id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: WorkflowScheme,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID is shown in the URL as `schemeId`. For example, *schemeId=10301*. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "WorkflowScheme",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/workflowscheme/{id}/createdraft": {
    "query": {},
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the active workflow scheme that the draft is created from. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "WorkflowScheme",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "delete__/rest/api/3/workflowscheme/{id}/default": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Set to true to create or update the draft of a workflow scheme and delete the mapping from the draft, when the workflow scheme cannot be edited. Defaults to `false`. */\n updateDraftIfNeeded?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.updateDraftIfNeeded": {
        "rendered": "\n/** Set to true to create or update the draft of a workflow scheme and delete the mapping from the draft, when the workflow scheme cannot be edited. Defaults to `false`. */\n updateDraftIfNeeded?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the workflow scheme. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "WorkflowScheme",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/workflowscheme/{id}/default": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Set to `true` to return the default workflow for the workflow scheme's draft rather than scheme itself. If the workflow scheme does not have a draft, then the default workflow for the workflow scheme is returned. */\n returnDraftIfExists?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.returnDraftIfExists": {
        "rendered": "\n/** Set to `true` to return the default workflow for the workflow scheme's draft rather than scheme itself. If the workflow scheme does not have a draft, then the default workflow for the workflow scheme is returned. */\n returnDraftIfExists?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the workflow scheme. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "DefaultWorkflow",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/workflowscheme/{id}/default": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: DefaultWorkflow,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the workflow scheme. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "WorkflowScheme",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "delete__/rest/api/3/workflowscheme/{id}/draft": {
    "query": {},
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the active workflow scheme that the draft was created from. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/workflowscheme/{id}/draft": {
    "query": {},
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the active workflow scheme that the draft was created from. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "WorkflowScheme",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "put__/rest/api/3/workflowscheme/{id}/draft": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: WorkflowScheme,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the active workflow scheme that the draft was created from. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "WorkflowScheme",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "delete__/rest/api/3/workflowscheme/{id}/draft/default": {
    "query": {},
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the workflow scheme that the draft belongs to. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "WorkflowScheme",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/workflowscheme/{id}/draft/default": {
    "query": {},
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the workflow scheme that the draft belongs to. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "DefaultWorkflow",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/workflowscheme/{id}/draft/default": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: DefaultWorkflow,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the workflow scheme that the draft belongs to. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "WorkflowScheme",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "delete__/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}": {
    "query": {},
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the workflow scheme that the draft belongs to. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueType": {
        "rendered": "\n/** The ID of the issue type. */\n issueType: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "WorkflowScheme",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}": {
    "query": {},
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the workflow scheme that the draft belongs to. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueType": {
        "rendered": "\n/** The ID of the issue type. */\n issueType: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "IssueTypeWorkflowMapping",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: IssueTypeWorkflowMapping,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the workflow scheme that the draft belongs to. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueType": {
        "rendered": "\n/** The ID of the issue type. */\n issueType: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "WorkflowScheme",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/workflowscheme/{id}/draft/publish": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Whether the request only performs a validation. */\n validateOnly?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.validateOnly": {
        "rendered": "\n/** Whether the request only performs a validation. */\n validateOnly?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: PublishDraftWorkflowScheme,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the workflow scheme that the draft belongs to. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/api/3/workflowscheme/{id}/draft/workflow": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The name of the workflow. */\n workflowName: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.workflowName": {
        "rendered": "\n/** The name of the workflow. */\n workflowName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the workflow scheme that the draft belongs to. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/workflowscheme/{id}/draft/workflow": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The name of a workflow in the scheme. Limits the results to the workflow-issue type mapping for the specified workflow. */\n workflowName?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.workflowName": {
        "rendered": "\n/** The name of a workflow in the scheme. Limits the results to the workflow-issue type mapping for the specified workflow. */\n workflowName?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the workflow scheme that the draft belongs to. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "IssueTypesWorkflowMapping",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/workflowscheme/{id}/draft/workflow": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The name of the workflow. */\n workflowName: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.workflowName": {
        "rendered": "\n/** The name of the workflow. */\n workflowName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: IssueTypesWorkflowMapping,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the workflow scheme that the draft belongs to. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "WorkflowScheme",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "delete__/rest/api/3/workflowscheme/{id}/issuetype/{issueType}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Set to true to create or update the draft of a workflow scheme and update the mapping in the draft, when the workflow scheme cannot be edited. Defaults to `false`. */\n updateDraftIfNeeded?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.updateDraftIfNeeded": {
        "rendered": "\n/** Set to true to create or update the draft of a workflow scheme and update the mapping in the draft, when the workflow scheme cannot be edited. Defaults to `false`. */\n updateDraftIfNeeded?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the workflow scheme. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueType": {
        "rendered": "\n/** The ID of the issue type. */\n issueType: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "WorkflowScheme",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/workflowscheme/{id}/issuetype/{issueType}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Returns the mapping from the workflow scheme's draft rather than the workflow scheme, if set to true. If no draft exists, the mapping from the workflow scheme is returned. */\n returnDraftIfExists?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.returnDraftIfExists": {
        "rendered": "\n/** Returns the mapping from the workflow scheme's draft rather than the workflow scheme, if set to true. If no draft exists, the mapping from the workflow scheme is returned. */\n returnDraftIfExists?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the workflow scheme. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueType": {
        "rendered": "\n/** The ID of the issue type. */\n issueType: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "IssueTypeWorkflowMapping",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/workflowscheme/{id}/issuetype/{issueType}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: IssueTypeWorkflowMapping,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the workflow scheme. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueType": {
        "rendered": "\n/** The ID of the issue type. */\n issueType: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "WorkflowScheme",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "delete__/rest/api/3/workflowscheme/{id}/workflow": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The name of the workflow. */\n workflowName: string, \n/** Set to true to create or update the draft of a workflow scheme and delete the mapping from the draft, when the workflow scheme cannot be edited. Defaults to `false`. */\n updateDraftIfNeeded?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.workflowName": {
        "rendered": "\n/** The name of the workflow. */\n workflowName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.updateDraftIfNeeded": {
        "rendered": "\n/** Set to true to create or update the draft of a workflow scheme and delete the mapping from the draft, when the workflow scheme cannot be edited. Defaults to `false`. */\n updateDraftIfNeeded?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the workflow scheme. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/api/3/workflowscheme/{id}/workflow": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The name of a workflow in the scheme. Limits the results to the workflow-issue type mapping for the specified workflow. */\n workflowName?: string, \n/** Returns the mapping from the workflow scheme's draft rather than the workflow scheme, if set to true. If no draft exists, the mapping from the workflow scheme is returned. */\n returnDraftIfExists?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.workflowName": {
        "rendered": "\n/** The name of a workflow in the scheme. Limits the results to the workflow-issue type mapping for the specified workflow. */\n workflowName?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.returnDraftIfExists": {
        "rendered": "\n/** Returns the mapping from the workflow scheme's draft rather than the workflow scheme, if set to true. If no draft exists, the mapping from the workflow scheme is returned. */\n returnDraftIfExists?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the workflow scheme. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "IssueTypesWorkflowMapping",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/api/3/workflowscheme/{id}/workflow": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The name of the workflow. */\n workflowName: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.workflowName": {
        "rendered": "\n/** The name of the workflow. */\n workflowName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: IssueTypesWorkflowMapping,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".id": {
        "rendered": "\n/** The ID of the workflow scheme. */\n id: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "WorkflowScheme",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/worklog/deleted": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The date and time, as a UNIX timestamp in milliseconds, after which deleted worklogs are returned. */\n since?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.since": {
        "rendered": "\n/** The date and time, as a UNIX timestamp in milliseconds, after which deleted worklogs are returned. */\n since?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "ChangedWorklogs",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "post__/rest/api/3/worklog/list": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts `properties` that returns the properties of each worklog. */\n expand?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts `properties` that returns the properties of each worklog. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: WorklogIdsRequestBean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Worklog)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "Worklog",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/api/3/worklog/updated": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The date and time, as a UNIX timestamp in milliseconds, after which updated worklogs are returned. */\n since?: number, \n/** Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts `properties` that returns the properties of each worklog. */\n expand?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.since": {
        "rendered": "\n/** The date and time, as a UNIX timestamp in milliseconds, after which updated worklogs are returned. */\n since?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts `properties` that returns the properties of each worklog. */\n expand?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "ChangedWorklogs",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "get__/rest/atlassian-connect/1/addons/{addonKey}/properties": {
    "query": {},
    "body": {},
    "path": {
      ".addonKey": {
        "rendered": "\n/** The key of the app, as defined in its descriptor. */\n addonKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PropertyKeys",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}": {
    "query": {},
    "body": {},
    "path": {
      ".addonKey": {
        "rendered": "\n/** The key of the app, as defined in its descriptor. */\n addonKey: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".propertyKey": {
        "rendered": "\n/** The key of the property. */\n propertyKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}": {
    "query": {},
    "body": {},
    "path": {
      ".addonKey": {
        "rendered": "\n/** The key of the app, as defined in its descriptor. */\n addonKey: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".propertyKey": {
        "rendered": "\n/** The key of the property. */\n propertyKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EntityProperty",
        "requiresRelaxedTypeAnnotation": true
      }
    }
  },
  "put__/rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: any,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".addonKey": {
        "rendered": "\n/** The key of the app, as defined in its descriptor. */\n addonKey: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".propertyKey": {
        "rendered": "\n/** The key of the property. */\n propertyKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OperationMessage",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/rest/atlassian-connect/1/app/module/dynamic": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The key of the module to remove. To include multiple module keys, provide multiple copies of this parameter.\nFor example, `moduleKey=dynamic-attachment-entity-property&moduleKey=dynamic-select-field`.\nNonexistent keys are ignored. */\n moduleKey?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.moduleKey": {
        "rendered": "\n/** The key of the module to remove. To include multiple module keys, provide multiple copies of this parameter.\nFor example, `moduleKey=dynamic-attachment-entity-property&moduleKey=dynamic-select-field`.\nNonexistent keys are ignored. */\n moduleKey?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.moduleKey.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rest/atlassian-connect/1/app/module/dynamic": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "ConnectModules",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/atlassian-connect/1/app/module/dynamic": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: ConnectModules,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/atlassian-connect/1/migration/field": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: ConnectCustomFieldValues,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/rest/atlassian-connect/1/migration/properties/{entityType}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: (EntityPropertyDetails)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".entityType": {
        "rendered": "\n/** The type indicating the object that contains the entity properties. */\n entityType: \"IssueProperty\" | \"CommentProperty\" | \"DashboardItemProperty\" | \"IssueTypeProperty\" | \"ProjectProperty\" | \"UserProperty\" | \"WorklogProperty\" | \"BoardProperty\" | \"SprintProperty\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/rest/atlassian-connect/1/migration/workflow/rule/search": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: WorkflowRulesSearch,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "WorkflowRulesSearchDetails",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  }
}