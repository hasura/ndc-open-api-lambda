{
  "get__/v2/access-tokens": {
    "query": {
      ".query": {
        "rendered": " query: {  page?: number,  page_size?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": " page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page_size": {
        "rendered": " page_size?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "GetAccessTokensResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/v2/access-tokens": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: CreateAccessTokenRequest,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "CreateAccessTokensResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/v2/access-tokens/{uuid}": {
    "query": {},
    "body": {},
    "path": {
      ".uuid": {
        "rendered": " uuid: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/v2/access-tokens/{uuid}": {
    "query": {},
    "body": {},
    "path": {
      ".uuid": {
        "rendered": " uuid: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(AccessToken & {\n  /** @example \"\" */\n    token?: string,\n\n})",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/v2/access-tokens/{uuid}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: PatchAccessTokenRequest,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".uuid": {
        "rendered": " uuid: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PatchAccessTokenResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/v2/auditlogs/{account}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** action name one of [\"repo.tag.push\", ...]. Optional parameter to filter specific audit log actions. */\n action?: string, \n/** name. Optional parameter to filter audit log events to a specific name. For repository events, this is the name of the repository. For organization events, this is the name of the organization. For team member events, this is the username of the team member. */\n name?: string, \n/** actor name. Optional parameter to filter audit log events to the specific user who triggered the event. */\n actor?: string, \n/** Start of the time window you wish to query audit events for. */\n from?: string, \n/** End of the time window you wish to query audit events for. */\n to?: string, \n/** page - specify page number. Page number to get. */\n page?: number, \n/** page_size - specify page size. Number of events to return per page. */\n page_size?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.action": {
        "rendered": "\n/** action name one of [\"repo.tag.push\", ...]. Optional parameter to filter specific audit log actions. */\n action?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.name": {
        "rendered": "\n/** name. Optional parameter to filter audit log events to a specific name. For repository events, this is the name of the repository. For organization events, this is the name of the organization. For team member events, this is the username of the team member. */\n name?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.actor": {
        "rendered": "\n/** actor name. Optional parameter to filter audit log events to the specific user who triggered the event. */\n actor?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.from": {
        "rendered": "\n/** Start of the time window you wish to query audit events for. */\n from?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.to": {
        "rendered": "\n/** End of the time window you wish to query audit events for. */\n to?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** page - specify page number. Page number to get. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page_size": {
        "rendered": "\n/** page_size - specify page size. Number of events to return per page. */\n page_size?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".account": {
        "rendered": "\n/** Namespace to query audit logs for. */\n account: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GetAuditLogsResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/v2/auditlogs/{account}/actions": {
    "query": {},
    "body": {},
    "path": {
      ".account": {
        "rendered": "\n/** Namespace to query audit log actions for. */\n account: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GetAuditActionsResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/v2/namespaces/{namespace}/delete-images": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: PostNamespacesDeleteImagesRequest,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".namespace": {
        "rendered": "\n/** Namespace of the repository. */\n namespace: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PostNamespacesDeleteImagesResponseSuccess",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/v2/namespaces/{namespace}/repositories/{repository}/images": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Filters to only show images of this status. */\n status?: \"active\" | \"inactive\", \n/** Filters to only show images with:\n- `true`: at least 1 current tag.\n- `false`: no current tags.\n */\n currently_tagged?: boolean, \n/** Orders the results by this property.\n\nPrefixing with `-` sorts by descending order.\n */\n ordering?: \"last_activity\" | \"-last_activity\" | \"digest\" | \"-digest\", \n/** Sets the time from which an image must have been pushed or pulled to\nbe counted as active.\n\nDefaults to 1 month before the current time.\n */\n active_from?: string, \n/** Page number to get. Defaults to 1. */\n page?: number, \n/** Number of images to get per page. Defaults to 10. Max of 100. */\n page_size?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.status": {
        "rendered": "\n/** Filters to only show images of this status. */\n status?: \"active\" | \"inactive\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.currently_tagged": {
        "rendered": "\n/** Filters to only show images with:\n- `true`: at least 1 current tag.\n- `false`: no current tags.\n */\n currently_tagged?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ordering": {
        "rendered": "\n/** Orders the results by this property.\n\nPrefixing with `-` sorts by descending order.\n */\n ordering?: \"last_activity\" | \"-last_activity\" | \"digest\" | \"-digest\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.active_from": {
        "rendered": "\n/** Sets the time from which an image must have been pushed or pulled to\nbe counted as active.\n\nDefaults to 1 month before the current time.\n */\n active_from?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number to get. Defaults to 1. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page_size": {
        "rendered": "\n/** Number of images to get per page. Defaults to 10. Max of 100. */\n page_size?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".namespace": {
        "rendered": "\n/** Namespace of the repository. */\n namespace: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repository": {
        "rendered": "\n/** Name of the repository. */\n repository: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GetNamespaceRepositoryImagesResponse",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/v2/namespaces/{namespace}/repositories/{repository}/images-summary": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Sets the time from which an image must have been pushed or pulled to\nbe counted as active.\n\nDefaults to 1 month before the current time.\n */\n active_from?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.active_from": {
        "rendered": "\n/** Sets the time from which an image must have been pushed or pulled to\nbe counted as active.\n\nDefaults to 1 month before the current time.\n */\n active_from?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".namespace": {
        "rendered": "\n/** Namespace of the repository. */\n namespace: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repository": {
        "rendered": "\n/** Name of the repository. */\n repository: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GetNamespaceRepositoryImagesSummaryResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/v2/namespaces/{namespace}/repositories/{repository}/images/{digest}/tags": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Page number to get. Defaults to 1. */\n page?: number, \n/** Number of images to get per page. Defaults to 10. Max of 100. */\n page_size?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number to get. Defaults to 1. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page_size": {
        "rendered": "\n/** Number of images to get per page. Defaults to 10. Max of 100. */\n page_size?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".namespace": {
        "rendered": "\n/** Namespace of the repository. */\n namespace: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repository": {
        "rendered": "\n/** Name of the repository. */\n repository: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".digest": {
        "rendered": "\n/** Digest of the image. */\n digest: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GetNamespaceRepositoryImagesTagsResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/v2/namespaces/{namespace}/repositories/{repository}/tags": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Page number to get. Defaults to 1. */\n page?: number, \n/** Number of items to get per page. Defaults to 10. Max of 100. */\n page_size?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number to get. Defaults to 1. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page_size": {
        "rendered": "\n/** Number of items to get per page. Defaults to 10. Max of 100. */\n page_size?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".namespace": {
        "rendered": " namespace: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repository": {
        "rendered": " repository: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PaginatedTags",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "head__/v2/namespaces/{namespace}/repositories/{repository}/tags": {
    "query": {},
    "body": {},
    "path": {
      ".namespace": {
        "rendered": " namespace: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repository": {
        "rendered": " repository: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/v2/namespaces/{namespace}/repositories/{repository}/tags/{tag}": {
    "query": {},
    "body": {},
    "path": {
      ".namespace": {
        "rendered": " namespace: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repository": {
        "rendered": " repository: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".tag": {
        "rendered": " tag: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Tag",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "head__/v2/namespaces/{namespace}/repositories/{repository}/tags/{tag}": {
    "query": {},
    "body": {},
    "path": {
      ".namespace": {
        "rendered": " namespace: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repository": {
        "rendered": " repository: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".tag": {
        "rendered": " tag: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/v2/orgs/{name}/settings": {
    "query": {},
    "body": {},
    "path": {
      ".name": {
        "rendered": "\n/** Name of the organization. */\n name: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OrgSettings",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/v2/orgs/{name}/settings": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n    restricted_images: (RestrictedImages & hasuraSdk.JSONValue),\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".name": {
        "rendered": " name: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OrgSettings",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/v2/scim/2.0/ResourceTypes": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    resources?: (ScimResourceType)[],\n  /** @example [\"urn:ietf:params:scim:api:messages:2.0:ListResponse\"] */\n    schemas?: (string)[],\n  /** @example 1 */\n    totalResults?: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/v2/scim/2.0/ResourceTypes/{name}": {
    "query": {},
    "body": {},
    "path": {
      ".name": {
        "rendered": " name: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ScimResourceType",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/v2/scim/2.0/Schemas": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    resources?: (ScimSchema)[],\n  /** @example [\"urn:ietf:params:scim:api:messages:2.0:ListResponse\"] */\n    schemas?: (string)[],\n  /** @example 1 */\n    totalResults?: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/v2/scim/2.0/Schemas/{id}": {
    "query": {},
    "body": {},
    "path": {
      ".id": {
        "rendered": " id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ScimSchema",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/v2/scim/2.0/ServiceProviderConfig": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "ScimServiceProviderConfig",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/v2/scim/2.0/Users": {
    "query": {
      ".query": {
        "rendered": " query: {  startIndex?: number,  count?: number,  filter?: string, \n/** Comma delimited list of attributes to limit to in the response. */\n attributes?: string,  sortOrder?: \"ascending\" | \"descending\", \n/** User attribute to sort by. */\n sortBy?: string, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.startIndex": {
        "rendered": " startIndex?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.count": {
        "rendered": " count?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.filter": {
        "rendered": " filter?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.attributes": {
        "rendered": "\n/** Comma delimited list of attributes to limit to in the response. */\n attributes?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sortOrder": {
        "rendered": " sortOrder?: \"ascending\" | \"descending\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.sortBy": {
        "rendered": "\n/** User attribute to sort by. */\n sortBy?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** @example 10 */\n    itemsPerPage?: number,\n    resources?: (ScimUser)[],\n  /** @example [\"urn:ietf:params:scim:api:messages:2.0:ListResponse\"] */\n    schemas?: (string)[],\n  /** @example 1 */\n    startIndex?: number,\n  /** @example 1 */\n    totalResults?: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/v2/scim/2.0/Users": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n    name?: ScimUserName,\n    schemas: ScimUserSchemas,\n  /** The user's email address. This must be reachable via email. */\n    userName: ScimUserUsername,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "ScimUser",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/v2/scim/2.0/Users/{id}": {
    "query": {},
    "body": {},
    "path": {
      ".id": {
        "rendered": "\n/** The user ID. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ScimUser",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/v2/scim/2.0/Users/{id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * If this is omitted from the request, it will default to false resulting in a deactivated user.\n   * @default false\n   */\n    enabled?: boolean,\n  /** If this is omitted from the request, the update will skip the update on it. We will only ever change the name, but not clear it. */\n    name?: (ScimUserName),\n    schemas: ScimUserSchemas,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".id": {
        "rendered": " id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ScimUser",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/v2/users/2fa-login": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: Users2FALoginRequest,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PostUsersLoginSuccessResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/v2/users/login": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: UsersLoginRequest,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PostUsersLoginSuccessResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  }
}