{
  "post__/group/{groupId}/audit": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The date you wish to fetch results from, in the format YYYY-MM-DD. Default is 3 months ago. Please note that logs are only available for past 3 months. */\n from?: string, \n/** The date you wish to fetch results until, in the format YYYY-MM-DD. Default is today. Please note that logs are only available for past 3 months. */\n to?: string, \n/** The page of results to request. Audit logs are returned in page sizes of 100 */\n page?: number, \n/** The sort order of the returned audit logs by date. Values: `ASC`, `DESC`. Default: `DESC`. */\n sortOrder?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.from": {
        "rendered": "\n/** The date you wish to fetch results from, in the format YYYY-MM-DD. Default is 3 months ago. Please note that logs are only available for past 3 months. */\n from?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.to": {
        "rendered": "\n/** The date you wish to fetch results until, in the format YYYY-MM-DD. Default is today. Please note that logs are only available for past 3 months. */\n to?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page of results to request. Audit logs are returned in page sizes of 100 */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sortOrder": {
        "rendered": "\n/** The sort order of the returned audit logs by date. Values: `ASC`, `DESC`. Default: `DESC`. */\n sortOrder?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n    filters?: {\n  /** User email address. Will fetch only audit logs originated from this user's actions. Ignored if the userId filter is set. */\n    email?: string,\n  /** Will return only logs for this specific event. Only one of event and excludeEvent may be specified in a request. */\n    event?: \"api.access\" | \"group.cloud_config.settings.edit\" | \"group.create\" | \"group.delete\" | \"group.edit\" | \"group.feature_flags.edit\" | \"group.notification_settings.edit\" | \"group.org.add\" | \"group.org.remove\" | \"group.policy.create\" | \"group.policy.delete\" | \"group.policy.edit\" | \"group.request_access_settings.edit\" | \"group.role.create\" | \"group.role.edit\" | \"group.service_account.create\" | \"group.service_account.delete\" | \"group.service_account.edit\" | \"group.settings.edit\" | \"group.settings.feature_flag.edit\" | \"group.sso.auth0_connection.create\" | \"group.sso.auth0_connection.edit\" | \"group.sso.create\" | \"group.sso.edit\" | \"group.tag.create\" | \"group.tag.delete\" | \"group.user.add\" | \"group.user.provision.accept\" | \"group.user.provision.create\" | \"group.user.provision.delete\" | \"group.user.remove\" | \"group.user.role.edit\",\n  /** Will return logs except logs for this event. Only one of event and excludeEvent may be specified in a request. */\n    excludeEvent?: \"api.access\" | \"group.cloud_config.settings.edit\" | \"group.create\" | \"group.delete\" | \"group.edit\" | \"group.feature_flags.edit\" | \"group.notification_settings.edit\" | \"group.org.add\" | \"group.org.remove\" | \"group.policy.create\" | \"group.policy.delete\" | \"group.policy.edit\" | \"group.request_access_settings.edit\" | \"group.role.create\" | \"group.role.edit\" | \"group.service_account.create\" | \"group.service_account.delete\" | \"group.service_account.edit\" | \"group.settings.edit\" | \"group.settings.feature_flag.edit\" | \"group.sso.auth0_connection.create\" | \"group.sso.auth0_connection.edit\" | \"group.sso.create\" | \"group.sso.edit\" | \"group.tag.create\" | \"group.tag.delete\" | \"group.user.add\" | \"group.user.provision.accept\" | \"group.user.provision.create\" | \"group.user.provision.delete\" | \"group.user.remove\" | \"group.user.role.edit\",\n  /** Will return only logs for this specific project. */\n    projectId?: string,\n  /** User public ID. Will fetch only audit logs originated from this user's actions. */\n    userId?: string,\n\n},\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".groupId": {
        "rendered": "\n/** The group ID. The `API_KEY` must have access to this group. */\n groupId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/group/{groupId}/members": {
    "query": {},
    "body": {},
    "path": {
      ".groupId": {
        "rendered": "\n/** The group ID. The `API_KEY` must have access admin to this group. */\n groupId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "IgnoreRules",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/group/{groupId}/org/{orgId}/members": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The role of the user, \"admin\" or \"collaborator\". */\n    role?: string,\n  /** The id of the user. */\n    userId?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".groupId": {
        "rendered": "\n/** The group ID. The `API_KEY` must have access admin to this group. */\n groupId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".orgId": {
        "rendered": "\n/** The organization ID we want to add the member to. The `API_KEY` must have access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/group/{groupId}/orgs": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results to return (maximum is 100). */\n perPage?: number, \n/** For pagination - offset (from which to start returning results). */\n page?: number, \n/** Only organizations that have a name that **starts with** this value (case insensitive) will be returned. */\n name?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.perPage": {
        "rendered": "\n/** The number of results to return (maximum is 100). */\n perPage?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** For pagination - offset (from which to start returning results). */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.name": {
        "rendered": "\n/** Only organizations that have a name that **starts with** this value (case insensitive) will be returned. */\n name?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".groupId": {
        "rendered": "\n/** The group ID. The `API_KEY` must have READ access to this group and LIST organizations access in this group. */\n groupId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/group/{groupId}/roles": {
    "query": {},
    "body": {},
    "path": {
      ".groupId": {
        "rendered": "\n/** The group ID. The `API_KEY` must have READ access to this group. */\n groupId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/group/{groupId}/settings": {
    "query": {},
    "body": {},
    "path": {
      ".groupId": {
        "rendered": "\n/** The group ID. The `API_KEY` must have admin access to this group. */\n groupId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** Can only be updated if `API_KEY` has edit access to request access settings. */\n    requestAccess?: {\n  /** Choose whether a user may request access to Snyk orgs in this group that they are not a member of. */\n    enabled: boolean,\n\n},\n  /** The new session length for the group in minutes. This must be an integer between 1 and 43200 (30 days). Setting this value to null will result in this group inheriting from the global default of 30 days. */\n    sessionLength?: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/group/{groupId}/settings": {
    "query": {},
    "body": {},
    "path": {
      ".groupId": {
        "rendered": "\n/** Automatically added */\n groupId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** Can only be updated if `API_KEY` has edit access to request access settings. */\n    requestAccess?: {\n  /** Choose whether a user may request access to Snyk orgs in this group that they are not a member of. */\n    enabled: boolean,\n\n},\n  /** The new session length for the group in minutes. This must be an integer between 1 and 43200 (30 days). Setting this value to null will result in this group inheriting from the global default of 30 days. */\n    sessionLength?: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/group/{groupId}/tags": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results to return (the default is 1000). */\n perPage?: number, \n/** The offset from which to start returning results from. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.perPage": {
        "rendered": "\n/** The number of results to return (the default is 1000). */\n perPage?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The offset from which to start returning results from. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".groupId": {
        "rendered": "\n/** The group ID. The `API_KEY` must have access admin to this group. */\n groupId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    tags?: (any)[],\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/group/{groupId}/tags/delete": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** force delete tag that has entities (default is `false`). */\n    force?: boolean,\n  /** Valid tag key. */\n    key?: string,\n  /** Valid tag value. */\n    value?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".groupId": {
        "rendered": "\n/** The group ID. The `API_KEY` must have access admin to this group. */\n groupId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** force delete tag that has entities (default is `false`). */\n    force?: boolean,\n  /** Valid tag key. */\n    key?: string,\n  /** Valid tag value. */\n    value?: string,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/monitor/dep-graph": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The organization to test the package with. See \"The Snyk organization for a request\" above. */\n org?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.org": {
        "rendered": "\n/** The organization to test the package with. See \"The Snyk organization for a request\" above. */\n org?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** A [DepGraph data object](https://github.com/snyk/dep-graph#depgraphdata) defining all packages and their relationships. */\n    depGraph: {\n  /** Graph object references each pkg and how they depend on each other through the deps property. */\n    graph: {\n  /** Array of node objects. */\n    nodes: (any)[],\n  /** Root node id. Note the root node name is used as your project name. */\n    rootNodeId: string,\n\n},\n  /** Package manager information. */\n    pkgManager: {\n  /** Package manager name. */\n    name: string,\n  /** A list of package repositories (i.e. maven-central, or npm) that defaults to the canonical package registry for the given package manager. */\n    repositories?: (any)[],\n\n},\n  /** Array of package dependencies. */\n    pkgs: (any)[],\n  /** Snyk DepGraph library schema version. */\n    schemaVersion: string,\n\n},\n  /** Project metadata */\n    meta?: {\n  /** Required for a NuGet or Paket DepGraph only. Specify the target framework in your project file using Target Framework Monikers (TFMs). For example, netstandard1.0, netcoreapp1.0 or net452. Test each framework separately if you have multiple defined. */\n    targetFramework?: string,\n\n},\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/org": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The group ID. The `API_KEY` must have access to this group. */\n    groupId?: string,\n  /** The name of the new organization */\n    name: string,\n  /**\n   * The id of an organization to copy settings from.\n   * \n   * If provided, this organization must be associated with the same group.\n   * \n   * The items that will be copied are: \n   * Source control integrations (GitHub, GitLab, BitBucket)\n   * \\+ Container registries integrations (ACR, Docker Hub, ECR, GCR)\n   * \\+ Container orchestrators integrations (Kubernetes)\n   * \\+ PaaS and Serverless Integrations (Heroku, AWS Lambda)\n   * \\+ Notification integrations (Slack, Jira)\n   * \\+ Policies\n   * \\+ Ignore settings\n   * \\+ Language settings\n   * \\+ Infrastructure as Code settings\n   * \\+ Snyk Code settings\n   * \n   * The following will not be copied across:\n   * Service accounts\n   * \\+ Members\n   * \\+ Projects\n   * \\+ Notification preferences\n   */\n    sourceOrgId?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/org/{orgId}": {
    "query": {},
    "body": {},
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID. The `API_KEY` must have permission to delete the provided organization. Currently this operation is only supported for organizations without any projects. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/org/{orgId}/audit": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The date you wish to fetch results from, in the format YYYY-MM-DD. Default is 3 months ago. Please note that logs are only available for past 3 months. */\n from?: string, \n/** The date you wish to fetch results until, in the format YYYY-MM-DD. Default is today. Please note that logs are only available for past 3 months. */\n to?: string, \n/** The page of results to request. Audit logs are returned in page sizes of 100. */\n page?: number, \n/** The sort order of the returned audit logs by date. Values: `ASC`, `DESC`. Default: `DESC`. */\n sortOrder?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.from": {
        "rendered": "\n/** The date you wish to fetch results from, in the format YYYY-MM-DD. Default is 3 months ago. Please note that logs are only available for past 3 months. */\n from?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.to": {
        "rendered": "\n/** The date you wish to fetch results until, in the format YYYY-MM-DD. Default is today. Please note that logs are only available for past 3 months. */\n to?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page of results to request. Audit logs are returned in page sizes of 100. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sortOrder": {
        "rendered": "\n/** The sort order of the returned audit logs by date. Values: `ASC`, `DESC`. Default: `DESC`. */\n sortOrder?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n    filters?: {\n  /** User email address. Will fetch only audit logs originated from this user's actions. Ignored if the userId filter is set. */\n    email?: string,\n  /** Will return only logs for this specific event. Only one of event and excludeEvent may be specified in a request. */\n    event?: \"api.access\" | \"org.billing.info.edit\" | \"org.billing.subscription.edit\" | \"org.cloud_config.settings.edit\" | \"org.create\" | \"org.delete\" | \"org.edit\" | \"org.ignore_policy.edit\" | \"org.integration.create\" | \"org.integration.delete\" | \"org.integration.edit\" | \"org.integration.settings.edit\" | \"org.language_settings.edit\" | \"org.license_rule.create\" | \"org.license_rule.delete\" | \"org.license_rule.edit\" | \"org.notification_settings.edit\" | \"org.policy.edit\" | \"org.project.add\" | \"org.project.attributes.edit\" | \"org.project.delete\" | \"org.project.edit\" | \"org.project.fix_pr.auto_open\" | \"org.project.fix_pr.manual_open\" | \"org.project.ignore.create\" | \"org.project.ignore.delete\" | \"org.project.ignore.edit\" | \"org.project.monitor\" | \"org.project.pr_check.edit\" | \"org.project.remove\" | \"org.project.settings.delete\" | \"org.project.settings.edit\" | \"org.project.stop_monitor\" | \"org.project.tag.add\" | \"org.project.tag.remove\" | \"org.project.test\" | \"org.request_access_settings.edit\" | \"org.sast_settings.edit\" | \"org.service_account.create\" | \"org.service_account.delete\" | \"org.service_account.edit\" | \"org.service_account.membership.upsert\" | \"org.settings.feature_flag.edit\" | \"org.target.create\" | \"org.target.delete\" | \"org.user.add\" | \"org.user.invite\" | \"org.user.invite.accept\" | \"org.user.invite.revoke\" | \"org.user.invite_link.accept\" | \"org.user.invite_link.create\" | \"org.user.invite_link.revoke\" | \"org.user.leave\" | \"org.user.provision.accept\" | \"org.user.provision.create\" | \"org.user.provision.delete\" | \"org.user.remove\" | \"org.user.role.create\" | \"org.user.role.delete\" | \"org.user.role.details.edit\" | \"org.user.role.edit\" | \"org.user.role.permissions.edit\" | \"org.webhook.add\" | \"org.webhook.delete\",\n  /** Will return logs except logs for this event. Only one of event and excludeEvent may be specified in a request. */\n    excludeEvent?: \"api.access\" | \"org.billing.info.edit\" | \"org.billing.subscription.edit\" | \"org.cloud_config.settings.edit\" | \"org.create\" | \"org.delete\" | \"org.edit\" | \"org.ignore_policy.edit\" | \"org.integration.create\" | \"org.integration.delete\" | \"org.integration.edit\" | \"org.integration.settings.edit\" | \"org.language_settings.edit\" | \"org.license_rule.create\" | \"org.license_rule.delete\" | \"org.license_rule.edit\" | \"org.notification_settings.edit\" | \"org.policy.edit\" | \"org.project.add\" | \"org.project.attributes.edit\" | \"org.project.delete\" | \"org.project.edit\" | \"org.project.fix_pr.auto_open\" | \"org.project.fix_pr.manual_open\" | \"org.project.ignore.create\" | \"org.project.ignore.delete\" | \"org.project.ignore.edit\" | \"org.project.monitor\" | \"org.project.pr_check.edit\" | \"org.project.remove\" | \"org.project.settings.delete\" | \"org.project.settings.edit\" | \"org.project.stop_monitor\" | \"org.project.tag.add\" | \"org.project.tag.remove\" | \"org.project.test\" | \"org.request_access_settings.edit\" | \"org.sast_settings.edit\" | \"org.service_account.create\" | \"org.service_account.delete\" | \"org.service_account.edit\" | \"org.service_account.membership.upsert\" | \"org.settings.feature_flag.edit\" | \"org.target.create\" | \"org.target.delete\" | \"org.user.add\" | \"org.user.invite\" | \"org.user.invite.accept\" | \"org.user.invite.revoke\" | \"org.user.invite_link.accept\" | \"org.user.invite_link.create\" | \"org.user.invite_link.revoke\" | \"org.user.leave\" | \"org.user.provision.accept\" | \"org.user.provision.create\" | \"org.user.provision.delete\" | \"org.user.remove\" | \"org.user.role.create\" | \"org.user.role.delete\" | \"org.user.role.details.edit\" | \"org.user.role.edit\" | \"org.user.role.permissions.edit\" | \"org.webhook.add\" | \"org.webhook.delete\",\n  /** Will return only logs for this specific project. */\n    projectId?: string,\n  /** User public ID. Will fetch only audit logs originated from this user's actions. */\n    userId?: string,\n\n},\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID. The `API_KEY` must have access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/org/{orgId}/dependencies": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The field to sort results by. */\n sortBy?: \"projects\" | \"dependency\" | \"severity\" | \"dependenciesWithIssues\", \n/** The direction to sort results by. */\n order?: \"asc\" | \"desc\", \n/** The page of results to fetch. */\n page?: number, \n/** The number of results to fetch per page (maximum is 1000). */\n perPage?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.sortBy": {
        "rendered": "\n/** The field to sort results by. */\n sortBy?: \"projects\" | \"dependency\" | \"severity\" | \"dependenciesWithIssues\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.order": {
        "rendered": "\n/** The direction to sort results by. */\n order?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.page": {
        "rendered": "\n/** The page of results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.perPage": {
        "rendered": "\n/** The number of results to fetch per page (maximum is 1000). */\n perPage?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n    filters?: {\n  /** Status of the dependency. Requires reporting entitlement. Options: `deprecated` - Include only deprecated packages; `notDeprecated` - Include all packages that are not marked as deprecated; `any` - Include all packages (default) */\n    depStatus?: string,\n  /** The list of dependency IDs to filter the results by (i.e amdefine@1.0.1 or org.javassist:javassist@3.18.1-GA) */\n    dependencies?: any,\n  /** The type of languages to filter the results by */\n    languages?: (any)[],\n  /** The list of license IDs to filter the results by */\n    licenses?: any,\n  /** The list of project IDs to filter the results by */\n    projects?: any,\n  /** The severities to filter the results by */\n    severity?: (any)[],\n\n},\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID to list projects for. The `API_KEY` must have access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** A list of issues */\n    results: ({\n  /** The copyright notices for the package */\n    copyright?: (any)[],\n  /** The identifiers of dependencies with issues that are depended upon as a result of this dependency */\n    dependenciesWithIssues?: (any)[],\n  /** The numbers for those versions that are marked as deprecated */\n    deprecatedVersions?: (any)[],\n  /** The timestamp for when the specified package was first published. */\n    firstPublishedDate?: string,\n  /** The identifier of the package */\n    id: string,\n  /** True if the latest version of the package is marked as deprecated; False otherwise. */\n    isDeprecated?: boolean,\n  /** The number of critical severity issues in this dependency */\n    issuesCritical?: number,\n  /** The number of high severity issues in this dependency */\n    issuesHigh?: number,\n  /** The number of low severity issues in this dependency */\n    issuesLow?: number,\n  /** The number of medium severity issues in this dependency */\n    issuesMedium?: number,\n  /** The latest version available for the specified package */\n    latestVersion?: string,\n  /** The timestamp for when the latest version of the specified package was published. */\n    latestVersionPublishedDate?: string,\n  /** The licenses of the dependency */\n    licenses: ({\n  /** The identifier of the license */\n    id: string,\n  /** The type of the license */\n    license: string,\n  /** The title of the license */\n    title: string,\n\n})[],\n  /** The name of the package */\n    name: string,\n  /** The projects which depend on the dependency */\n    projects: ({\n  /** The identifier of the project */\n    id: string,\n  /** The name of the project */\n    name: string,\n\n})[],\n  /** The package type of the dependency */\n    type: string,\n  /** The version of the package */\n    version: string,\n\n})[],\n  /** The number of results returned */\n    total?: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/org/{orgId}/entitlement/{entitlementKey}": {
    "query": {},
    "body": {},
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID to query the entitlement for. The `API_KEY` must have access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".entitlementKey": {
        "rendered": "\n/** The entitlement to query. */\n entitlementKey: \"licenses\" | \"reports\" | \"fullVulnDB\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/org/{orgId}/entitlements": {
    "query": {},
    "body": {},
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID to list entitlements for. The `API_KEY` must have access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/org/{orgId}/integrations": {
    "query": {},
    "body": {},
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization public ID. The `API_KEY` must have admin access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "IntegrationCredentials",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/org/{orgId}/integrations": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: ({\n  /** credentials for given integration */\n    credentials: ({\n    AcrCredentials?: {\n    password: string,\n  /** e.g.: `name.azurecr.io` */\n    registryBase: string,\n    username: string,\n\n},\n\n} | {\n    ArtifactoryCrCredentials?: {\n    password: string,\n  /** e.g.: `name.jfrog.io` */\n    registryBase: string,\n    username: string,\n\n},\n\n} | {\n    AzureReposCredentials?: {\n    url: string,\n    username: string,\n\n},\n\n} | {\n    BitbucketCloudCredentials?: {\n    password: string,\n    username: string,\n\n},\n\n} | {\n    BitbucketServerCredentials?: {\n    password: string,\n    url: string,\n    username: string,\n\n},\n\n} | {\n    DigitalOceanCrCredentials?: {\n  /** Personal Access Token */\n    token: string,\n\n},\n\n} | {\n    DockerHubCredentials?: {\n  /** Access Token */\n    password: string,\n    username: string,\n\n},\n\n} | {\n    EcrCredentials?: {\n  /** e.g.: `eu-west-3` */\n    region: string,\n  /** e.g.: `arn:aws:iam::<account-id>:role/<newRole>` */\n    roleArn: string,\n\n},\n\n} | {\n    GcrCredentials?: {\n  /** JSON key file */\n    password: string,\n  /** e.g.: `gcr.io`, `us.gcr.io`, `eu.gcr.io`, `asia.gcr.io` */\n    registryBase: string,\n\n},\n\n} | {\n    GitHubCredentials?: {\n    token: string,\n\n},\n\n} | {\n    GitHubCrCredentials?: {\n    password: string,\n  /** e.g.: `ghcr.io` */\n    registryBase: string,\n    username: string,\n\n},\n\n} | {\n    GitHubEnterpriseCredentials?: {\n    token: string,\n    url: string,\n\n},\n\n} | {\n    GitLabCredentials?: {\n    token: string,\n  /** for self-hosted GitLab only */\n    url?: string,\n\n},\n\n} | {\n    GitLabCrCredentials?: {\n    password: string,\n  /** e.g.: `your.gitlab.host` */\n    registryBase: string,\n    username: string,\n\n},\n\n} | {\n    GoogleArtifactCrCredentials?: {\n  /** JSON key file */\n    password: string,\n  /** e.g.: `us-east1-docker.pkg.dev`, `europe-west1-docker.pkg.dev` */\n    registryBase: string,\n\n},\n\n} | {\n    HarborCrCredentials?: {\n    password: string,\n  /** e.g.: `your.harbor.host` */\n    registryBase: string,\n    username: string,\n\n},\n\n} | {\n    NexusCrCredentials?: {\n    password: string,\n  /** e.g.: `your.nexus.host` */\n    registryBase: string,\n    username: string,\n\n},\n\n} | {\n    QuayCrCredentials?: {\n    password: string,\n  /** e.g.: `quay.io`, `your.quay.host` */\n    registryBase: string,\n    username: string,\n\n},\n\n}),\n  /** integration type */\n    type: \"acr\" | \"artifactory-cr\" | \"azure-repos\" | \"bitbucket-cloud\" | \"bitbucket-server\" | \"digitalocean-cr\" | \"docker-hub\" | \"ecr\" | \"gcr\" | \"github\" | \"github-cr\" | \"github-enterprise\" | \"gitlab\" | \"gitlab-cr\" | \"google-artifact-cr\" | \"harbor-cr\" | \"nexus-cr\" | \"quay-cr\",\n\n} | {\n  /** brokered integration settings */\n    broker: {\n    enabled?: boolean,\n\n},\n  /** integration type */\n    type: \"acr\" | \"artifactory-cr\" | \"azure-repos\" | \"bitbucket-cloud\" | \"bitbucket-server\" | \"digitalocean-cr\" | \"docker-hub\" | \"ecr\" | \"gcr\" | \"github\" | \"github-cr\" | \"github-enterprise\" | \"gitlab\" | \"gitlab-cr\" | \"google-artifact-cr\" | \"harbor-cr\" | \"nexus-cr\" | \"quay-cr\",\n\n}),",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID. The `API_KEY` must have admin access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/org/{orgId}/integrations/{integrationId}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: ({\n  /** brokered integration settings */\n    broker: {\n    enabled?: boolean,\n\n},\n  /** integration type */\n    type: \"acr\" | \"artifactory-cr\" | \"azure-repos\" | \"bitbucket-cloud\" | \"bitbucket-server\" | \"digitalocean-cr\" | \"docker-hub\" | \"ecr\" | \"gcr\" | \"github\" | \"github-cr\" | \"github-enterprise\" | \"gitlab\" | \"gitlab-cr\" | \"google-artifact-cr\" | \"harbor-cr\" | \"nexus-cr\" | \"quay-cr\",\n\n} | {\n  /** credentials for given integration */\n    credentials: ({\n    AcrCredentials?: {\n    password: string,\n  /** e.g.: `name.azurecr.io` */\n    registryBase: string,\n    username: string,\n\n},\n\n} | {\n    ArtifactoryCrCredentials?: {\n    password: string,\n  /** e.g.: `name.jfrog.io` */\n    registryBase: string,\n    username: string,\n\n},\n\n} | {\n    AzureReposCredentials?: {\n    url: string,\n    username: string,\n\n},\n\n} | {\n    BitbucketCloudCredentials?: {\n    password: string,\n    username: string,\n\n},\n\n} | {\n    BitbucketServerCredentials?: {\n    password: string,\n    url: string,\n    username: string,\n\n},\n\n} | {\n    DigitalOceanCrCredentials?: {\n  /** Personal Access Token */\n    token: string,\n\n},\n\n} | {\n    DockerHubCredentials?: {\n  /** Access Token */\n    password: string,\n    username: string,\n\n},\n\n} | {\n    EcrCredentials?: {\n  /** e.g.: `eu-west-3` */\n    region: string,\n  /** e.g.: `arn:aws:iam::<account-id>:role/<newRole>` */\n    roleArn: string,\n\n},\n\n} | {\n    GcrCredentials?: {\n  /** JSON key file */\n    password: string,\n  /** e.g.: `gcr.io`, `us.gcr.io`, `eu.gcr.io`, `asia.gcr.io` */\n    registryBase: string,\n\n},\n\n} | {\n    GitHubCredentials?: {\n    token: string,\n\n},\n\n} | {\n    GitHubCrCredentials?: {\n    password: string,\n  /** e.g.: `ghcr.io` */\n    registryBase: string,\n    username: string,\n\n},\n\n} | {\n    GitHubEnterpriseCredentials?: {\n    token: string,\n    url: string,\n\n},\n\n} | {\n    GitLabCredentials?: {\n    token: string,\n  /** for self-hosted GitLab only */\n    url?: string,\n\n},\n\n} | {\n    GitLabCrCredentials?: {\n    password: string,\n  /** e.g.: `your.gitlab.host` */\n    registryBase: string,\n    username: string,\n\n},\n\n} | {\n    GoogleArtifactCrCredentials?: {\n  /** JSON key file */\n    password: string,\n  /** e.g.: `us-east1-docker.pkg.dev`, `europe-west1-docker.pkg.dev` */\n    registryBase: string,\n\n},\n\n} | {\n    HarborCrCredentials?: {\n    password: string,\n  /** e.g.: `your.harbor.host` */\n    registryBase: string,\n    username: string,\n\n},\n\n} | {\n    NexusCrCredentials?: {\n    password: string,\n  /** e.g.: `your.nexus.host` */\n    registryBase: string,\n    username: string,\n\n},\n\n} | {\n    QuayCrCredentials?: {\n    password: string,\n  /** e.g.: `quay.io`, `your.quay.host` */\n    registryBase: string,\n    username: string,\n\n},\n\n}),\n  /** integration type */\n    type: \"acr\" | \"artifactory-cr\" | \"azure-repos\" | \"bitbucket-cloud\" | \"bitbucket-server\" | \"digitalocean-cr\" | \"docker-hub\" | \"ecr\" | \"gcr\" | \"github\" | \"github-cr\" | \"github-enterprise\" | \"gitlab\" | \"gitlab-cr\" | \"google-artifact-cr\" | \"harbor-cr\" | \"nexus-cr\" | \"quay-cr\",\n\n} | {\n  /** brokered integration settings */\n    broker: {\n    enabled?: boolean,\n\n},\n  /** credentials for given integration */\n    credentials: ({\n    AcrCredentials?: {\n    password: string,\n  /** e.g.: `name.azurecr.io` */\n    registryBase: string,\n    username: string,\n\n},\n\n} | {\n    ArtifactoryCrCredentials?: {\n    password: string,\n  /** e.g.: `name.jfrog.io` */\n    registryBase: string,\n    username: string,\n\n},\n\n} | {\n    AzureReposCredentials?: {\n    url: string,\n    username: string,\n\n},\n\n} | {\n    BitbucketCloudCredentials?: {\n    password: string,\n    username: string,\n\n},\n\n} | {\n    BitbucketServerCredentials?: {\n    password: string,\n    url: string,\n    username: string,\n\n},\n\n} | {\n    DigitalOceanCrCredentials?: {\n  /** Personal Access Token */\n    token: string,\n\n},\n\n} | {\n    DockerHubCredentials?: {\n  /** Access Token */\n    password: string,\n    username: string,\n\n},\n\n} | {\n    EcrCredentials?: {\n  /** e.g.: `eu-west-3` */\n    region: string,\n  /** e.g.: `arn:aws:iam::<account-id>:role/<newRole>` */\n    roleArn: string,\n\n},\n\n} | {\n    GcrCredentials?: {\n  /** JSON key file */\n    password: string,\n  /** e.g.: `gcr.io`, `us.gcr.io`, `eu.gcr.io`, `asia.gcr.io` */\n    registryBase: string,\n\n},\n\n} | {\n    GitHubCredentials?: {\n    token: string,\n\n},\n\n} | {\n    GitHubCrCredentials?: {\n    password: string,\n  /** e.g.: `ghcr.io` */\n    registryBase: string,\n    username: string,\n\n},\n\n} | {\n    GitHubEnterpriseCredentials?: {\n    token: string,\n    url: string,\n\n},\n\n} | {\n    GitLabCredentials?: {\n    token: string,\n  /** for self-hosted GitLab only */\n    url?: string,\n\n},\n\n} | {\n    GitLabCrCredentials?: {\n    password: string,\n  /** e.g.: `your.gitlab.host` */\n    registryBase: string,\n    username: string,\n\n},\n\n} | {\n    GoogleArtifactCrCredentials?: {\n  /** JSON key file */\n    password: string,\n  /** e.g.: `us-east1-docker.pkg.dev`, `europe-west1-docker.pkg.dev` */\n    registryBase: string,\n\n},\n\n} | {\n    HarborCrCredentials?: {\n    password: string,\n  /** e.g.: `your.harbor.host` */\n    registryBase: string,\n    username: string,\n\n},\n\n} | {\n    NexusCrCredentials?: {\n    password: string,\n  /** e.g.: `your.nexus.host` */\n    registryBase: string,\n    username: string,\n\n},\n\n} | {\n    QuayCrCredentials?: {\n    password: string,\n  /** e.g.: `quay.io`, `your.quay.host` */\n    registryBase: string,\n    username: string,\n\n},\n\n}),\n  /** integration type */\n    type: \"acr\" | \"artifactory-cr\" | \"azure-repos\" | \"bitbucket-cloud\" | \"bitbucket-server\" | \"digitalocean-cr\" | \"docker-hub\" | \"ecr\" | \"gcr\" | \"github\" | \"github-cr\" | \"github-enterprise\" | \"gitlab\" | \"gitlab-cr\" | \"google-artifact-cr\" | \"harbor-cr\" | \"nexus-cr\" | \"quay-cr\",\n\n}),",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID. The `API_KEY` must have admin access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".integrationId": {
        "rendered": "\n/** The unique identifier for the configured integration. This can be found on the [Integration page in the Settings area](https://app.snyk.io/manage/integrations) for all integrations that have been configured. */\n integrationId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/org/{orgId}/integrations/{integrationId}/authentication": {
    "query": {},
    "body": {},
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID. The `API_KEY` must have access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".integrationId": {
        "rendered": "\n/** The integration ID. */\n integrationId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/org/{orgId}/integrations/{integrationId}/authentication/provision-token": {
    "query": {},
    "body": {},
    "path": {
      ".orgId": {
        "rendered": "\n/** The `API_KEY` must have access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".integrationId": {
        "rendered": " integrationId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/org/{orgId}/integrations/{integrationId}/authentication/switch-token": {
    "query": {},
    "body": {},
    "path": {
      ".orgId": {
        "rendered": "\n/** The `API_KEY` must have access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".integrationId": {
        "rendered": " integrationId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/org/{orgId}/integrations/{integrationId}/clone": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The organization public ID. The `API_KEY` must have access to this organization. */\n    destinationOrgPublicId: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".orgId": {
        "rendered": "\n/** Source organization public ID to clone integration settings from. The `API_KEY` must have access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".integrationId": {
        "rendered": "\n/** Source integration public ID to clone. */\n integrationId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/org/{orgId}/integrations/{integrationId}/import": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: ({\n  /** a comma-separated list of up to 10 folder names to exclude from scanning (each folder name must not exceed 100 characters). If not specified, it will default to \"fixtures, tests, \\_\\_tests\\_\\_, node_modules\". If an empty string is provided - no folders will be excluded. This attribute is only respected with Open Source and Container scan targets. */\n    exclusionGlobs?: string,\n  /** an array of file objects */\n    files?: (any)[],\n    target?: {\n  /** default branch of the repo (Please contact support if you want to import a non default repo branch) */\n    branch: string,\n  /** name of the repo */\n    name: string,\n  /** for Github: account owner of the repository; for Azure Repos, this is `Project ID`; for Bitbucket Cloud, this is the `Workspace ID` */\n    owner: string,\n\n},\n\n} | {\n  /** a comma-separated list of up to 10 folder names to exclude from scanning. If not specified, it will default to \"fixtures, tests, \\_\\_tests\\_\\_, node_modules\". If an empty string is provided - no folders will be excluded. This attribute is only respected with Open Source and Container scan targets. */\n    exclusionGlobs?: string,\n  /** an array of file objects */\n    files?: (any)[],\n    target?: {\n  /** repo branch */\n    branch: string,\n  /** id of the repo */\n    id: number,\n\n},\n\n} | {\n  /** a comma-separated list of up to 10 folder names to exclude from scanning. If not specified, it will default to \"fixtures, tests, \\_\\_tests\\_\\_, node_modules\". If an empty string is provided - no folders will be excluded. This attribute is only respected with Open Source and Container scan targets. */\n    exclusionGlobs?: string,\n  /** an array of file objects */\n    files?: (any)[],\n    target?: {\n  /** target branch name */\n    branch?: string,\n  /** custom name for the project */\n    name?: string,\n  /** project key */\n    projectKey: string,\n  /** slug of the repo */\n    repoSlug: string,\n\n},\n\n} | {\n  /** an array of file objects */\n    files?: (any)[],\n    target?: {\n  /** ID of the app */\n    appId: string,\n  /** ID of the slug */\n    slugId: string,\n\n},\n\n} | {\n  /** an array of file objects */\n    files?: (any)[],\n    target?: {\n  /** ID of the app */\n    functionId: string,\n\n},\n\n} | {\n  /** an array of file objects */\n    files?: (any)[],\n    target?: {\n  /** ID of the app */\n    appId: string,\n\n},\n\n} | {\n    target?: {\n  /** image name including tag prefixed by organization name */\n    name: string,\n\n},\n\n} | {\n    target?: {\n  /** image name including tag */\n    name: string,\n\n},\n\n} | {\n    target?: {\n  /** image name including tag prefixed by project id or project name */\n    name: string,\n\n},\n\n}),",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID. The `API_KEY` must have admin access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".integrationId": {
        "rendered": "\n/** The unique identifier for the configured integration. This can be found on the [Integration page in the Settings area](https://app.snyk.io/manage/integrations) for all integrations that have been configured. */\n integrationId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/org/{orgId}/integrations/{integrationId}/import/{jobId}": {
    "query": {},
    "body": {},
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID. The `API_KEY` must have admin access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".integrationId": {
        "rendered": "\n/** The unique identifier for the configured integration. This can be found on the [Integration page in the Settings area](https://app.snyk.io/manage/integrations) for all integrations that have been configured. */\n integrationId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".jobId": {
        "rendered": "\n/** The ID of the job. This can be found in the Location response header from the corresponding POST request that triggered the import job. */\n jobId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** the time when an import job was created represented as a [UTC (ISO-8601)](https://tools.ietf.org/html/rfc3339) string */\n    created?: string,\n  /** A uuid representing the job's id */\n    id?: string,\n  /** all organizations imported by the job */\n    logs?: (any)[],\n  /**\n   * a string representing the status of a job.\n   * \n   * One of: pending, failed, aborted or complete.\n   */\n    status?: string,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/org/{orgId}/integrations/{integrationId}/settings": {
    "query": {},
    "body": {},
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID. The `API_KEY` must have admin access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".integrationId": {
        "rendered": "\n/** The unique identifier for the configured integration. This can be found on the [Integration page in the Settings area](https://app.snyk.io/manage/integrations) for all integrations that have been configured. */\n integrationId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** Defines if the functionality is enabled */\n    autoDepUpgradeEnabled?: boolean,\n  /** A list of strings defining what dependencies should be ignored */\n    autoDepUpgradeIgnoredDependencies?: (any)[],\n  /** A limit on how many automatic dependency upgrade PRs can be opened simultaneously */\n    autoDepUpgradeLimit?: number,\n  /** The age (in days) that an automatic dependency check is valid for */\n    autoDepUpgradeMinAge?: number,\n  /** Defines automatic remediation policies */\n    autoRemediationPrs?: {\n  /** If true, allows automatic remediation of prioritized backlog issues */\n    backlogPrsEnabled?: boolean,\n  /** If true, allows automatic remediation of newly identified issues, or older issues where a fix has been identified */\n    freshPrsEnabled?: boolean,\n  /** If true, allows using patched remediation */\n    usePatchRemediation?: boolean,\n\n},\n  /** If true, will automatically detect and scan Dockerfiles in your Git repositories, surface base image vulnerabilities and recommend possible fixes */\n    dockerfileSCMEnabled?: boolean,\n  /** Defines manual remediation policies */\n    manualRemediationPrs?: {\n  /** If true, allows using patched remediation */\n    usePatchRemediation?: boolean,\n\n},\n  /** assign Snyk pull requests */\n    pullRequestAssignment?: {\n  /** an array of usernames that have contributed to the organization's project(s). */\n    assignees?: (any)[],\n  /** if the organization's project(s) will assign Snyk pull requests. */\n    enabled?: boolean,\n  /** a string representing the type of assignment your projects require. */\n    type?: \"auto\" | \"manual\",\n\n},\n  /** If an opened PR should fail to be validated if any vulnerable dependencies have been detected */\n    pullRequestFailOnAnyVulns?: boolean,\n  /** If an opened PR only should fail its validation if any dependencies are marked as being of high severity */\n    pullRequestFailOnlyForHighSeverity?: boolean,\n  /** If opened PRs should be tested */\n    pullRequestTestEnabled?: boolean,\n\n}",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/org/{orgId}/integrations/{integrationId}/settings": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Defines if the functionality is enabled */\n    autoDepUpgradeEnabled?: boolean,\n  /** A list of strings defining what dependencies should be ignored */\n    autoDepUpgradeIgnoredDependencies?: (any)[],\n  /** A limit on how many automatic dependency upgrade PRs can be opened simultaneously */\n    autoDepUpgradeLimit?: number,\n  /** The age (in days) that an automatic dependency check is valid for */\n    autoDepUpgradeMinAge?: number,\n  /** Defines automatic remediation policies */\n    autoRemediationPrs?: {\n  /** If true, allows automatic remediation of prioritized backlog issues */\n    backlogPrsEnabled?: boolean,\n  /** If true, allows automatic remediation of newly identified issues, or older issues where a fix has been identified */\n    freshPrsEnabled?: boolean,\n  /** If true, allows using patched remediation */\n    usePatchRemediation?: boolean,\n\n},\n  /** If true, will automatically detect and scan Dockerfiles in your Git repositories, surface base image vulnerabilities and recommend possible fixes */\n    dockerfileSCMEnabled?: boolean,\n  /** Defines manual remediation policies */\n    manualRemediationPrs?: {\n  /** If true, allows using patched remediation */\n    usePatchRemediation?: boolean,\n\n},\n  /** assign Snyk pull requests */\n    pullRequestAssignment?: {\n  /** an array of usernames that have contributed to the organization's project(s). */\n    assignees?: (any)[],\n  /** if the organization's project(s) will assign Snyk pull requests. */\n    enabled?: boolean,\n  /** a string representing the type of assignment your projects require. */\n    type?: \"auto\" | \"manual\",\n\n},\n  /** If an opened PR should fail to be validated if any vulnerable dependencies have been detected */\n    pullRequestFailOnAnyVulns?: boolean,\n  /** If an opened PR only should fail its validation if any dependencies are marked as being of high severity */\n    pullRequestFailOnlyForHighSeverity?: boolean,\n  /** If opened PRs should be tested */\n    pullRequestTestEnabled?: boolean,\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID. The `API_KEY` must have admin access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".integrationId": {
        "rendered": "\n/** The unique identifier for the configured integration. This can be found on the [Integration page in the Settings area](https://app.snyk.io/manage/integrations) for all integrations that have been configured. */\n integrationId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** Defines if the functionality is enabled */\n    autoDepUpgradeEnabled?: boolean,\n  /** A list of strings defining what dependencies should be ignored */\n    autoDepUpgradeIgnoredDependencies?: (any)[],\n  /** A limit on how many automatic dependency upgrade PRs can be opened simultaneously */\n    autoDepUpgradeLimit?: number,\n  /** The age (in days) that an automatic dependency check is valid for */\n    autoDepUpgradeMinAge?: number,\n  /** Defines automatic remediation policies */\n    autoRemediationPrs?: {\n  /** If true, allows automatic remediation of prioritized backlog issues */\n    backlogPrsEnabled?: boolean,\n  /** If true, allows automatic remediation of newly identified issues, or older issues where a fix has been identified */\n    freshPrsEnabled?: boolean,\n  /** If true, allows using patched remediation */\n    usePatchRemediation?: boolean,\n\n},\n  /** If true, will automatically detect and scan Dockerfiles in your Git repositories, surface base image vulnerabilities and recommend possible fixes */\n    dockerfileSCMEnabled?: boolean,\n  /** Defines manual remediation policies */\n    manualRemediationPrs?: {\n  /** If true, allows using patched remediation */\n    usePatchRemediation?: boolean,\n\n},\n  /** assign Snyk pull requests */\n    pullRequestAssignment?: {\n  /** an array of usernames that have contributed to the organization's project(s). */\n    assignees?: (any)[],\n  /** if the organization's project(s) will assign Snyk pull requests. */\n    enabled?: boolean,\n  /** a string representing the type of assignment your projects require. */\n    type?: \"auto\" | \"manual\",\n\n},\n  /** If an opened PR should fail to be validated if any vulnerable dependencies have been detected */\n    pullRequestFailOnAnyVulns?: boolean,\n  /** If an opened PR only should fail its validation if any dependencies are marked as being of high severity */\n    pullRequestFailOnlyForHighSeverity?: boolean,\n  /** If opened PRs should be tested */\n    pullRequestTestEnabled?: boolean,\n\n}",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/org/{orgId}/integrations/{type}": {
    "query": {},
    "body": {},
    "path": {
      ".orgId": {
        "rendered": "\n/** The `API_KEY` must have admin access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".type": {
        "rendered": "\n/** Integration type. */\n type: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** Alphanumeric UUID including - with a limit of 36 characters */\n    id?: string,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/org/{orgId}/invite": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The email of the user. */\n    email?: string,\n  /** (optional) Set the role as admin. */\n    isAdmin?: boolean,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID. The `API_KEY` must have admin access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/org/{orgId}/licenses": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The field to sort results by. */\n sortBy?: \"license\" | \"dependencies\" | \"projects\" | \"severity\", \n/** The direction to sort results by. */\n order?: \"asc\" | \"desc\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.sortBy": {
        "rendered": "\n/** The field to sort results by. */\n sortBy?: \"license\" | \"dependencies\" | \"projects\" | \"severity\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.order": {
        "rendered": "\n/** The direction to sort results by. */\n order?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n    filters?: {\n  /** The list of dependency IDs to filter the results by */\n    dependencies?: any,\n  /** The type of languages to filter the results by */\n    languages?: (any)[],\n  /** The list of license IDs to filter the results by */\n    licenses?: any,\n  /** The list of project IDs to filter the results by */\n    projects?: any,\n  /** The severities to filter the results by */\n    severity?: (any)[],\n\n},\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID to list projects for. The `API_KEY` must have access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** A list of licenses */\n    results: ({\n  /** The dependencies of projects in the organization which have the license */\n    dependencies: ({\n  /** The identifier of the package */\n    id: string,\n  /** The name of the package */\n    name: string,\n  /** The package manager of the dependency */\n    packageManager: string,\n  /** The version of the package */\n    version: string,\n\n})[],\n  /** The identifier of the license */\n    id: string,\n  /** Custom instructions assigned to this license */\n    instructions?: string,\n  /** The projects which contain the license */\n    projects: ({\n  /** The identifier of the project */\n    id: string,\n  /** The name of the project */\n    name: string,\n\n})[],\n  /** The severity assigned to this license */\n    severity?: \"none\" | \"high\" | \"medium\" | \"low\",\n\n})[],\n  /** The number of results returned */\n    total?: number,\n\n}",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/org/{orgId}/members": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Include group administrators who also have access to this organization. */\n includeGroupAdmins?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.includeGroupAdmins": {
        "rendered": "\n/** Include group administrators who also have access to this organization. */\n includeGroupAdmins?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "IgnoreRules",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/org/{orgId}/members/update/{userId}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The new role public ID to update the user to. */\n    rolePublicId?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID. The `API_KEY` must have admin access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The user ID. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/org/{orgId}/members/{userId}": {
    "query": {},
    "body": {},
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID. The `API_KEY` must admin have access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The user ID we want to remove. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/org/{orgId}/members/{userId}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The new role of the user, \"admin\" or \"collaborator\". */\n    role?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID. The `API_KEY` must have admin access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".userId": {
        "rendered": "\n/** The user ID. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/org/{orgId}/notification-settings": {
    "query": {},
    "body": {},
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID. The `API_KEY` must have access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    \"new-issues-remediations\"?: {\n  /** Whether notifications should be sent */\n    enabled: boolean,\n  /** Whether the setting was found on the requested context directly or inherited from a parent */\n    inherited?: boolean,\n  /** The severity levels of issues to send notifications for (only applicable for `new-remediations-vulnerabilities` notificationType) */\n    issueSeverity: \"all\" | \"high\",\n  /** Filter the types of issue to include in notifications (only applicable for `new-remediations-vulnerabilities` notificationType) */\n    issueType: \"all\" | \"vuln\" | \"license\" | \"none\",\n\n},\n    \"project-imported\"?: {\n  /** Whether notifications should be sent */\n    enabled: boolean,\n  /** Whether the setting was found on the requested context directly or inherited from a parent */\n    inherited?: boolean,\n\n},\n    \"test-limit\"?: {\n  /** Whether notifications should be sent */\n    enabled: boolean,\n  /** Whether the setting was found on the requested context directly or inherited from a parent */\n    inherited?: boolean,\n\n},\n    \"weekly-report\"?: {\n  /** Whether notifications should be sent */\n    enabled: boolean,\n  /** Whether the setting was found on the requested context directly or inherited from a parent */\n    inherited?: boolean,\n\n},\n\n}",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/org/{orgId}/notification-settings": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n    \"new-issues-remediations\"?: {\n  /** Whether notifications should be sent */\n    enabled: boolean,\n  /** The severity levels of issues to send notifications for (only applicable for `new-remediations-vulnerabilities` notificationType) */\n    issueSeverity: \"all\" | \"high\",\n  /** Filter the types of issue to include in notifications (only applicable for `new-remediations-vulnerabilities` notificationType) */\n    issueType: \"all\" | \"vuln\" | \"license\" | \"none\",\n\n},\n    \"project-imported\"?: {\n  /** Whether notifications should be sent */\n    enabled: boolean,\n\n},\n    \"test-limit\"?: {\n  /** Whether notifications should be sent */\n    enabled: boolean,\n\n},\n    \"weekly-report\"?: {\n  /** Whether notifications should be sent */\n    enabled: boolean,\n\n},\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".orgId": {
        "rendered": "\n/** Automatically added */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    \"new-issues-remediations\"?: {\n  /** Whether notifications should be sent */\n    enabled: boolean,\n  /** Whether the setting was found on the requested context directly or inherited from a parent */\n    inherited?: boolean,\n  /** The severity levels of issues to send notifications for (only applicable for `new-remediations-vulnerabilities` notificationType) */\n    issueSeverity: \"all\" | \"high\",\n  /** Filter the types of issue to include in notifications (only applicable for `new-remediations-vulnerabilities` notificationType) */\n    issueType: \"all\" | \"vuln\" | \"license\" | \"none\",\n\n},\n    \"project-imported\"?: {\n  /** Whether notifications should be sent */\n    enabled: boolean,\n  /** Whether the setting was found on the requested context directly or inherited from a parent */\n    inherited?: boolean,\n\n},\n    \"test-limit\"?: {\n  /** Whether notifications should be sent */\n    enabled: boolean,\n  /** Whether the setting was found on the requested context directly or inherited from a parent */\n    inherited?: boolean,\n\n},\n    \"weekly-report\"?: {\n  /** Whether notifications should be sent */\n    enabled: boolean,\n  /** Whether the setting was found on the requested context directly or inherited from a parent */\n    inherited?: boolean,\n\n},\n\n}",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/org/{orgId}/project/{projectId}": {
    "query": {},
    "body": {},
    "path": {
      ".orgId": {
        "rendered": "\n/** Automatically added */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".projectId": {
        "rendered": "\n/** Automatically added */\n projectId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/org/{orgId}/project/{projectId}": {
    "query": {},
    "body": {},
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID the project belongs to. The `API_KEY` must have access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".projectId": {
        "rendered": "\n/** The project ID. */\n projectId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** Applied project attributes */\n    attributes?: {\n    criticality?: (any)[],\n    environment?: (any)[],\n    lifecycle?: (any)[],\n\n},\n  /** The monitored branch (if available) */\n    branch?: string | null,\n  /** URL with project overview */\n    browseUrl?: string,\n  /** The date that the project was created on */\n    created?: string,\n  /** The hostname for a CLI project, null if not set */\n    hostname?: string | null,\n  /** The project identifier */\n    id?: string,\n  /** For docker projects shows the base image */\n    imageBaseImage?: string,\n  /** For Kubernetes projects shows the origin cluster name */\n    imageCluster?: string,\n  /** For docker projects shows the ID of the image */\n    imageId?: string,\n  /** For docker projects shows the platform of the image */\n    imagePlatform?: string,\n  /** For docker projects shows the tag of the image */\n    imageTag?: string,\n  /** The user who imported the project */\n    importingUser?: {\n  /** The email of the user. */\n    email?: string,\n  /** The ID of the user. */\n    id?: string,\n  /** The name of the user. */\n    name?: string,\n  /** The username of the user. */\n    username?: string,\n\n},\n  /** Describes if a project is currently monitored or it is de-activated */\n    isMonitored?: boolean,\n  /** Number of known vulnerabilities in the project, not including ignored issues */\n    issueCountsBySeverity?: {\n  /** Number of critical severity vulnerabilities */\n    critical?: number,\n  /** Number of high severity vulnerabilities */\n    high?: number,\n  /** Number of low severity vulnerabilities */\n    low?: number,\n  /** Number of medium severity vulnerabilities */\n    medium?: number,\n\n},\n  /** The date on which the most recent test was conducted for this project */\n    lastTestedDate?: string,\n    name?: string,\n  /** The origin the project was added from */\n    origin?: string,\n  /**\n   * The user who owns the project, null if not set\n   * \n   * {\n   *     \"id\": \"e713cf94-bb02-4ea0-89d9-613cce0caed2\",\n   *     \"name\": \"example-user@snyk.io\",\n   *     \"username\": \"exampleUser\",\n   *     \"email\": \"example-user@snyk.io\"\n   * }\n   */\n    owner?: hasuraSdk.JSONValue | null,\n  /** Whether the project is read-only */\n    readOnly?: boolean,\n  /** Remediation data (if available) */\n    remediation?: {\n  /**\n   * Recommended patches to apply to the project\n   * \n   * (object)\n   *    paths (array) - List of paths to the vulnerable dependency that can be patched\n   */\n    patch?: hasuraSdk.JSONValue,\n  /**\n   * Recommended pins to apply to the project (Python only)\n   * \n   * (object)\n   *     + upgradeTo (string, required) - `package@version` to upgrade to\n   *     + vulns (array[string], required) - List of vulnerability ids that will be fixed as part of this upgrade\n   *     + isTransitive (boolean) - Describes if the dependency to be pinned is a transitive dependency\n   */\n    pin?: hasuraSdk.JSONValue,\n  /**\n   * Recommended upgrades to apply to the project\n   * \n   * (object)\n   *     + upgradeTo (string, required) - `package@version` to upgrade to\n   *     + upgrades (array[string], required) -  List of `package@version` that will be upgraded as part of this upgrade\n   *     + vulns (array[string], required) - List of vulnerability ids that will be fixed as part of this upgrade\n   */\n    upgrade?: hasuraSdk.JSONValue,\n\n},\n  /** The project remote repository url. Only set for projects imported via the Snyk CLI tool. */\n    remoteRepoUrl?: string,\n  /** List of applied tags */\n    tags?: (any)[],\n  /** The identifier for which revision of the resource is scanned by Snyk. For example this may be a branch for SCM project, or a tag for a container image */\n    targetReference?: string | null,\n  /** The frequency of automated Snyk re-test. Can be 'daily', 'weekly or 'never' */\n    testFrequency?: string,\n  /** Number of dependencies of the project */\n    totalDependencies?: number,\n  /** The package manager of the project */\n    type?: string,\n\n}",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/org/{orgId}/project/{projectId}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The branch that this project should be monitoring */\n    branch?: string,\n  /** Set to `null` to remove all ownership. User must be a member of the same organization as the project. */\n    owner?: {\n  /** A user to assign as the project owner. */\n    id?: string,\n\n},\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".orgId": {
        "rendered": "\n/** Automatically added */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".projectId": {
        "rendered": "\n/** Automatically added */\n projectId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** Applied project attributes */\n    attributes?: {\n    criticality?: (any)[],\n    environment?: (any)[],\n    lifecycle?: (any)[],\n\n},\n  /** The monitored branch (if available) */\n    branch?: string | null,\n  /** URL with project overview */\n    browseUrl?: string,\n  /** The date that the project was created on */\n    created?: string,\n  /** The hostname for a CLI project, null if not set */\n    hostname?: string | null,\n  /** The project identifier */\n    id?: string,\n  /** For docker projects shows the base image */\n    imageBaseImage?: string,\n  /** For Kubernetes projects shows the origin cluster name */\n    imageCluster?: string,\n  /** For docker projects shows the ID of the image */\n    imageId?: string,\n  /** For docker projects shows the platform of the image */\n    imagePlatform?: string,\n  /** For docker projects shows the tag of the image */\n    imageTag?: string,\n  /** The user who imported the project */\n    importingUser?: {\n  /** The email of the user. */\n    email?: string,\n  /** The ID of the user. */\n    id?: string,\n  /** The name of the user. */\n    name?: string,\n  /** The username of the user. */\n    username?: string,\n\n},\n  /** Describes if a project is currently monitored or it is de-activated */\n    isMonitored?: boolean,\n  /** Number of known vulnerabilities in the project, not including ignored issues */\n    issueCountsBySeverity?: {\n  /** Number of critical severity vulnerabilities */\n    critical?: number,\n  /** Number of high severity vulnerabilities */\n    high?: number,\n  /** Number of low severity vulnerabilities */\n    low?: number,\n  /** Number of medium severity vulnerabilities */\n    medium?: number,\n\n},\n  /** The date on which the most recent test was conducted for this project */\n    lastTestedDate?: string,\n    name?: string,\n  /** The origin the project was added from */\n    origin?: string,\n  /**\n   * The user who owns the project, null if not set\n   * \n   * {\n   *     \"id\": \"e713cf94-bb02-4ea0-89d9-613cce0caed2\",\n   *     \"name\": \"example-user@snyk.io\",\n   *     \"username\": \"exampleUser\",\n   *     \"email\": \"example-user@snyk.io\"\n   * }\n   */\n    owner?: hasuraSdk.JSONValue | null,\n  /** Whether the project is read-only */\n    readOnly?: boolean,\n  /** Remediation data (if available) */\n    remediation?: {\n  /**\n   * Recommended patches to apply to the project\n   * \n   * (object)\n   *    paths (array) - List of paths to the vulnerable dependency that can be patched\n   */\n    patch?: hasuraSdk.JSONValue,\n  /**\n   * Recommended pins to apply to the project (Python only)\n   * \n   * (object)\n   *     + upgradeTo (string, required) - `package@version` to upgrade to\n   *     + vulns (array[string], required) - List of vulnerability ids that will be fixed as part of this upgrade\n   *     + isTransitive (boolean) - Describes if the dependency to be pinned is a transitive dependency\n   */\n    pin?: hasuraSdk.JSONValue,\n  /**\n   * Recommended upgrades to apply to the project\n   * \n   * (object)\n   *     + upgradeTo (string, required) - `package@version` to upgrade to\n   *     + upgrades (array[string], required) -  List of `package@version` that will be upgraded as part of this upgrade\n   *     + vulns (array[string], required) - List of vulnerability ids that will be fixed as part of this upgrade\n   */\n    upgrade?: hasuraSdk.JSONValue,\n\n},\n  /** The project remote repository url. Only set for projects imported via the Snyk CLI tool. */\n    remoteRepoUrl?: string,\n  /** List of applied tags */\n    tags?: (any)[],\n  /** The identifier for which revision of the resource is scanned by Snyk. For example this may be a branch for SCM project, or a tag for a container image */\n    targetReference?: string | null,\n  /** The frequency of automated Snyk re-test. Can be 'daily', 'weekly or 'never' */\n    testFrequency?: string,\n  /** Number of dependencies of the project */\n    totalDependencies?: number,\n  /** The package manager of the project */\n    type?: string,\n\n}",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/org/{orgId}/project/{projectId}/activate": {
    "query": {},
    "body": {},
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID the project belongs to. The `API_KEY` must have access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".projectId": {
        "rendered": "\n/** The project ID. */\n projectId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/org/{orgId}/project/{projectId}/aggregated-issues": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n    filters?: {\n  /** The exploit maturity levels of issues to filter the results by (Non-IaC projects only) */\n    exploitMaturity?: (any)[],\n  /** If set to `true`, only include issues which are ignored, if set to `false`, only include issues which are not ignored */\n    ignored?: boolean,\n  /** If set to `true`, only include issues which are patched, if set to `false`, only include issues which are not patched (Non-IaC projects only) */\n    patched?: boolean,\n  /** The priority to filter the issues by (Non-IaC projects only) */\n    priority?: {\n  /** Include issues where the priority score is between min and max */\n    score?: {\n    max?: number,\n    min?: number,\n\n},\n\n},\n  /** The severity levels of issues to filter the results by */\n    severities?: (any)[],\n  /** The type of issues to filter the results by (Non-IaC projects only) */\n    types?: (any)[],\n\n},\n  /** If set to `true`, Include issue's description, if set to `false` (by default), it won't (Non-IaC projects only) */\n    includeDescription?: boolean,\n  /** If set to `true`, Include issue's introducedThrough, if set to `false` (by default), it won't. It's for container only projects (Non-IaC projects only) */\n    includeIntroducedThrough?: boolean,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID. The `API_KEY` must have access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".projectId": {
        "rendered": "\n/** The project ID to return issues for. */\n projectId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** An array of identified issues */\n    issues?: ({\n  /** Information about fix/upgrade/pinnable options for the issue (Non-IaC projects only) */\n    fixInfo?: {\n  /** The set of versions in which this issue has been fixed. If the issue spanned multiple versions (i.e. `1.x` and `2.x`) then there will be multiple `fixedIn` entries */\n    fixedIn?: (any)[],\n  /** Whether all of the issue's paths are fixable. Paths that are already patched are not considered fixable unless they have an alternative remediation (e.g. pinning or upgrading). An upgrade path where the only changes are in transitive dependencies is only considered fixable if the package manager supports it. */\n    isFixable?: boolean,\n  /** Whether any of the issue's paths can be fixed. Paths that are already patched are not considered fixable unless they have an alternative remediation (e.g. pinning or upgrading).  An upgrade path where the only changes are in transitive dependencies is only considered fixable if the package manager supports it. */\n    isPartiallyFixable?: boolean,\n  /** Whether all the of issue's paths are patchable */\n    isPatchable?: boolean,\n  /** Whether the issue can be fixed by pinning a transitive */\n    isPinnable?: boolean,\n  /** Whether all of the issue's paths are upgradable */\n    isUpgradable?: boolean,\n  /** Nearest version which includes a fix for the issue. This is populated for container projects only. */\n    nearestFixedInVersion?: string,\n\n},\n  /** The identifier of the issue */\n    id: string,\n  /** The list of reasons why the issue was ignored */\n    ignoreReasons?: (any)[],\n  /** The list of what introduced the issue (it is available only for container project with Dockerfile) */\n    introducedThrough?: (any)[],\n  /** Whether the issue has been ignored */\n    isIgnored: boolean,\n  /** Whether the issue has been patched (Non-IaC projects only) */\n    isPatched: boolean,\n  /** The details of the issue */\n    issueData: {\n  /** The CVSS v3 string that signifies how the CVSS score was calculated (Non-IaC projects only) */\n    \"CVSSv3\": string,\n  /** The list of people responsible for first uncovering or reporting the issue (Non-IaC projects only) */\n    credit: (any)[],\n  /** The CVSS score that results from running the CVSSv3 string (Non-IaC projects only) */\n    cvssScore: number,\n    description: string,\n  /** The date that the vulnerability was first disclosed */\n    disclosureTime: string,\n  /** The exploit maturity of the issue */\n    exploitMaturity: string,\n  /** The identifier of the issue */\n    id: string,\n  /** External identifiers assigned to the issue (Non-IaC projects only) */\n    identifiers: {\n  /** Common Vulnerability Enumeration identifiers */\n    CVE?: (any)[],\n  /** Common Weakness Enumeration identifiers */\n    CWE?: (any)[],\n  /** Identifiers assigned by the Open Source Vulnerability Database (OSVDB) */\n    OSVDB?: (any)[],\n\n},\n  /** Whether the issue is intentional, indicating a malicious package */\n    isMaliciousPackage: boolean,\n  /** The language of the issue (Non-IaC projects only) */\n    language: string,\n  /** Nearest version which includes a fix for the issue. This is populated for container projects only. (Non-IaC projects only) */\n    nearestFixedInVersion: string,\n  /** The original severity status of the issue, as retrieved from Snyk Vulnerability database, before policies are applied */\n    originalSeverity: string,\n  /** A list of patches available for the given issue (Non-IaC projects only) */\n    patches: (any)[],\n  /** Path to the resource property violating the policy within the scanned project. (IaC projects only) */\n    path: string,\n  /** The date that the vulnerability was first published by Snyk (Non-IaC projects only) */\n    publicationTime: string,\n  /** The ranges that are vulnerable and unaffected by the issue (Non-IaC projects only) */\n    semver: {\n  /** The ranges that are unaffected by the issue */\n    unaffected?: string,\n  /** The ranges that are vulnerable to the issue. May be an array or a string. */\n    vulnerable?: (any)[],\n\n},\n  /** The severity status of the issue, after policies are applied */\n    severity: string,\n  /** The issue title */\n    title: string,\n  /** URL to a page containing information about the issue */\n    url: string,\n  /** The ID of the violated policy in the issue (IaC projects only) */\n    violatedPolicyPublicId: string,\n\n},\n  /** type of the issue ('vuln', 'license' or 'configuration') */\n    issueType: string,\n  /** Onward links from this record (Non-IaC projects only) */\n    links?: {\n  /** The URL for the dependency paths that introduce this issue */\n    paths?: string,\n\n},\n  /** The package name (Non-IaC projects only) */\n    pkgName: string,\n  /** List of affected package versions (Non-IaC projects only) */\n    pkgVersions: (string)[],\n  /** Information about the priority of the issue (Non-IaC projects only) */\n    priority?: {\n  /** The list of factors that contributed to the priority of the issue */\n    factors?: (any)[],\n  /** The priority score of the issue */\n    score?: number,\n\n},\n\n})[],\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/org/{orgId}/project/{projectId}/attributes": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n    criticality?: (any)[],\n    environment?: (any)[],\n    lifecycle?: (any)[],\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID. The `API_KEY` must have access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".projectId": {
        "rendered": "\n/** The project ID to remove a tag from */\n projectId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** Attributes now applied to the project */\n    attributes?: {\n    criticality?: (any)[],\n    environment?: (any)[],\n    lifecycle?: (any)[],\n\n},\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/org/{orgId}/project/{projectId}/deactivate": {
    "query": {},
    "body": {},
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID the project belongs to. The `API_KEY` must have access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".projectId": {
        "rendered": "\n/** The project ID. */\n projectId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/org/{orgId}/project/{projectId}/dep-graph": {
    "query": {},
    "body": {},
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID. The `API_KEY` must have access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".projectId": {
        "rendered": "\n/** The project ID to return issues for. */\n projectId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** The dependency-graph object */\n    depGraph: {\n  /** A directional graph of the packages in the project */\n    graph: {\n  /** A list of the first-level packages */\n    nodes?: ({\n  /** A list of the direct dependencies of the package */\n    deps: ({\n  /** The id of the node */\n    nodeId: string,\n\n})[],\n  /** The internal id of the node */\n    nodeId: string,\n  /** The id of the package */\n    pkgId: string,\n\n})[],\n  /** The internal id of the root node */\n    rootNodeId: string,\n\n},\n  /** The package manager of the project */\n    pkgManager: {\n  /** The name of the package manager */\n    name: string,\n    repositories?: ({\n    alias: string,\n\n})[],\n  /** The version of the package manager */\n    version?: string,\n\n},\n  /** A list of dependencies in the project */\n    pkgs: ({\n  /** The internal id of the package */\n    id: string,\n    info: {\n  /** The name of the package */\n    name: string,\n  /** The version of the package */\n    version?: string,\n\n},\n\n})[],\n  /** The scheme version of the depGraph object */\n    schemaVersion: string,\n\n},\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/org/{orgId}/project/{projectId}/history": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results to return (the default is 10, the maximum is 100). */\n perPage?: number, \n/** The offset from which to start returning results from. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.perPage": {
        "rendered": "\n/** The number of results to return (the default is 10, the maximum is 100). */\n perPage?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The offset from which to start returning results from. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n    filters?: {\n  /** For container projects, filter by the ID of the image */\n    imageId?: string,\n\n},\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID. The `API_KEY` must have access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".projectId": {
        "rendered": "\n/** The project ID to return snapshots for. */\n projectId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** A list of the project's snapshots, ordered according to date (latest first). */\n    snapshots?: ({\n  /** The date that the snapshot was taken */\n    created: string,\n  /** The snapshot identifier */\n    id: string,\n    imageBaseImage?: string,\n    imageId?: string,\n    imagePlatform?: string,\n    imageTag?: string,\n  /** Number of known vulnerabilities in the project, not including ignored issues */\n    issueCounts: {\n    license?: {\n  /** Number of critical severity vulnerabilities */\n    critical: number,\n  /** Number of high severity vulnerabilities */\n    high: number,\n  /** Number of low severity vulnerabilities */\n    low: number,\n  /** Number of medium severity vulnerabilities */\n    medium: number,\n\n},\n    sast?: {\n  /** Number of critical severity vulnerabilities */\n    critical: number,\n  /** Number of high severity vulnerabilities */\n    high: number,\n  /** Number of low severity vulnerabilities */\n    low: number,\n  /** Number of medium severity vulnerabilities */\n    medium: number,\n\n},\n    vuln?: {\n  /** Number of critical severity vulnerabilities */\n    critical: number,\n  /** Number of high severity vulnerabilities */\n    high: number,\n  /** Number of low severity vulnerabilities */\n    low: number,\n  /** Number of medium severity vulnerabilities */\n    medium: number,\n\n},\n\n},\n  /** The method by which this snapshot was created. */\n    method?: \"api\" | \"cli\" | \"recurring\" | \"web\" | \"web-test\" | \"wizard\",\n  /** Number of dependencies of the project */\n    totalDependencies: number,\n\n})[],\n  /** The total number of results */\n    total?: number,\n\n}",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/org/{orgId}/project/{projectId}/history/{snapshotId}/aggregated-issues": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n    filters?: {\n  /** The exploit maturity levels of issues to filter the results by (Non-IaC projects only) */\n    exploitMaturity?: (any)[],\n  /** If set to `true`, only include issues which are ignored, if set to `false`, only include issues which are not ignored */\n    ignored?: boolean,\n  /** If set to `true`, only include issues which are patched, if set to `false`, only include issues which are not patched (Non-IaC projects only) */\n    patched?: boolean,\n  /** The priority to filter the issues by (Non-IaC projects only) */\n    priority?: {\n  /** Include issues where the priority score is between min and max */\n    score?: {\n    max?: number,\n    min?: number,\n\n},\n\n},\n  /** The severity levels of issues to filter the results by */\n    severities?: (any)[],\n  /** The type of issues to filter the results by (Non-IaC projects only) */\n    types?: (any)[],\n\n},\n  /** If set to `true`, Include issue's description, if set to `false` (by default), it won't (Non-IaC projects only) */\n    includeDescription?: boolean,\n  /** If set to `true`, Include issue's introducedThrough, if set to `false` (by default), it won't. It's for container only projects (Non-IaC projects only) */\n    includeIntroducedThrough?: boolean,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID. The `API_KEY` must have access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".projectId": {
        "rendered": "\n/** The project ID. */\n projectId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".snapshotId": {
        "rendered": "\n/** The snapshot ID. If set to latest, the most recent snapshot will be used. */\n snapshotId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** An array of identified issues */\n    issues?: ({\n  /** Information about fix/upgrade/pinnable options for the issue (Non-IaC projects only) */\n    fixInfo?: {\n  /** The set of versions in which this issue has been fixed. If the issue spanned multiple versions (i.e. `1.x` and `2.x`) then there will be multiple `fixedIn` entries */\n    fixedIn?: (any)[],\n  /** Whether all of the issue's paths are fixable. Paths that are already patched are not considered fixable unless they have an alternative remediation (e.g. pinning or upgrading). An upgrade path where the only changes are in transitive dependencies is only considered fixable if the package manager supports it. */\n    isFixable?: boolean,\n  /** Whether any of the issue's paths can be fixed. Paths that are already patched are not considered fixable unless they have an alternative remediation (e.g. pinning or upgrading).  An upgrade path where the only changes are in transitive dependencies is only considered fixable if the package manager supports it. */\n    isPartiallyFixable?: boolean,\n  /** Whether all the of issue's paths are patchable */\n    isPatchable?: boolean,\n  /** Whether the issue can be fixed by pinning a transitive */\n    isPinnable?: boolean,\n  /** Whether all of the issue's paths are upgradable */\n    isUpgradable?: boolean,\n  /** Nearest version which includes a fix for the issue. This is populated for container projects only. */\n    nearestFixedInVersion?: string,\n\n},\n  /** The identifier of the issue */\n    id: string,\n  /** The list of reasons why the issue was ignored */\n    ignoreReasons?: (any)[],\n  /** The list of what introduced the issue (it is available only for container project with Dockerfile) */\n    introducedThrough?: (any)[],\n  /** Whether the issue has been ignored */\n    isIgnored: boolean,\n  /** Whether the issue has been patched (Non-IaC projects only) */\n    isPatched: boolean,\n  /** The details of the issue */\n    issueData: {\n  /** The CVSS v3 string that signifies how the CVSS score was calculated (Non-IaC projects only) */\n    \"CVSSv3\": string,\n  /** The list of people responsible for first uncovering or reporting the issue (Non-IaC projects only) */\n    credit: (any)[],\n  /** The CVSS score that results from running the CVSSv3 string (Non-IaC projects only) */\n    cvssScore: number,\n    description: string,\n  /** The date that the vulnerability was first disclosed */\n    disclosureTime: string,\n  /** The exploit maturity of the issue */\n    exploitMaturity: string,\n  /** The identifier of the issue */\n    id: string,\n  /** External identifiers assigned to the issue (Non-IaC projects only) */\n    identifiers: {\n  /** Common Vulnerability Enumeration identifiers */\n    CVE?: (any)[],\n  /** Common Weakness Enumeration identifiers */\n    CWE?: (any)[],\n  /** Identifiers assigned by the Open Source Vulnerability Database (OSVDB) */\n    OSVDB?: (any)[],\n\n},\n  /** Whether the issue is intentional, indicating a malicious package */\n    isMaliciousPackage: boolean,\n  /** The language of the issue (Non-IaC projects only) */\n    language: string,\n  /** Nearest version which includes a fix for the issue. This is populated for container projects only. (Non-IaC projects only) */\n    nearestFixedInVersion: string,\n  /** The original severity status of the issue, as retrieved from Snyk Vulnerability database, before policies are applied */\n    originalSeverity: string,\n  /** A list of patches available for the given issue (Non-IaC projects only) */\n    patches: (any)[],\n  /** Path to the resource property violating the policy within the scanned project. (IaC projects only) */\n    path: string,\n  /** The date that the vulnerability was first published by Snyk (Non-IaC projects only) */\n    publicationTime: string,\n  /** The ranges that are vulnerable and unaffected by the issue (Non-IaC projects only) */\n    semver: {\n  /** The ranges that are unaffected by the issue */\n    unaffected?: string,\n  /** The ranges that are vulnerable to the issue. May be an array or a string. */\n    vulnerable?: (any)[],\n\n},\n  /** The severity status of the issue, after policies are applied */\n    severity: string,\n  /** The issue title */\n    title: string,\n  /** URL to a page containing information about the issue */\n    url: string,\n  /** The ID of the violated policy in the issue (IaC projects only) */\n    violatedPolicyPublicId: string,\n\n},\n  /** type of the issue ('vuln', 'license' or 'configuration') */\n    issueType: string,\n  /** Onward links from this record (Non-IaC projects only) */\n    links?: {\n  /** The URL for the dependency paths that introduce this issue */\n    paths?: string,\n\n},\n  /** The package name (Non-IaC projects only) */\n    pkgName: string,\n  /** List of affected package versions (Non-IaC projects only) */\n    pkgVersions: (string)[],\n  /** Information about the priority of the issue (Non-IaC projects only) */\n    priority?: {\n  /** The list of factors that contributed to the priority of the issue */\n    factors?: (any)[],\n  /** The priority score of the issue */\n    score?: number,\n\n},\n\n})[],\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/org/{orgId}/project/{projectId}/history/{snapshotId}/issue/{issueId}/paths": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results to return per page (1 - 1000, inclusive). */\n perPage?: number, \n/** The page of results to return. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.perPage": {
        "rendered": "\n/** The number of results to return per page (1 - 1000, inclusive). */\n perPage?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page of results to return. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID. The `API_KEY` must have access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".projectId": {
        "rendered": "\n/** The project ID for which to return issue paths. */\n projectId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".snapshotId": {
        "rendered": "\n/** The project snapshot ID for which to return issue paths. If set to `latest`, the most recent snapshot will be used. Use the \"List all project snapshots\" endpoint to find suitable values for this. */\n snapshotId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueId": {
        "rendered": "\n/** The issue ID for which to return issue paths. */\n issueId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** Onward links from this record */\n    links?: {\n  /** The URL of the last page of paths for the issue */\n    last?: string,\n  /** The URL of the next page of paths for the issue, if not on the last page */\n    next?: string,\n  /** The URL of the previous page of paths for the issue, if not on the first page */\n    prev?: string,\n\n},\n  /** A list of the dependency paths that introduce the issue */\n    paths?: (({\n  /** The version to upgrade the package to in order to resolve the issue. This will only appear on the first element of the path, and only if the issue can be fixed by upgrading packages. Note that if the fix requires upgrading transitive dependencies, `fixVersion` will be the same as `version`. */\n    fixVersion?: string,\n  /** The package name */\n    name?: string,\n  /** The package version */\n    version?: string,\n\n})[])[],\n  /** The identifier of the snapshot for which the paths have been found */\n    snapshotId?: string,\n  /** The total number of results */\n    total?: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/org/{orgId}/project/{projectId}/ignore/{issueId}": {
    "query": {},
    "body": {},
    "path": {
      ".orgId": {
        "rendered": "\n/** Automatically added */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".projectId": {
        "rendered": "\n/** Automatically added */\n projectId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueId": {
        "rendered": "\n/** Automatically added */\n issueId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/org/{orgId}/project/{projectId}/ignore/{issueId}": {
    "query": {},
    "body": {},
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID to modify ignores for. The `API_KEY` must have access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".projectId": {
        "rendered": "\n/** The project ID to modify ignores for. */\n projectId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueId": {
        "rendered": "\n/** The issue ID to modify ignores for. Can be a vulnerability or a license Issue. */\n issueId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "IgnorePath",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/org/{orgId}/project/{projectId}/ignore/{issueId}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Only ignore the issue if no upgrade or patch is available. */\n    disregardIfFixable: boolean,\n  /** The timestamp that the issue will no longer be ignored. */\n    expires?: string,\n  /** The path to ignore (default is `*` which represents all paths). */\n    ignorePath?: string,\n  /** The reason that the issue was ignored. */\n    reason?: string,\n  /** The classification of the ignore. */\n    reasonType: \"not-vulnerable\" | \"wont-fix\" | \"temporary-ignore\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".orgId": {
        "rendered": "\n/** Automatically added */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".projectId": {
        "rendered": "\n/** Automatically added */\n projectId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueId": {
        "rendered": "\n/** Automatically added */\n issueId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "IgnorePath",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/org/{orgId}/project/{projectId}/ignore/{issueId}": {
    "query": {},
    "body": {},
    "path": {
      ".orgId": {
        "rendered": "\n/** Automatically added */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".projectId": {
        "rendered": "\n/** Automatically added */\n projectId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueId": {
        "rendered": "\n/** Automatically added */\n issueId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "IgnoreRules",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/org/{orgId}/project/{projectId}/ignores": {
    "query": {},
    "body": {},
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID to list ignores for. The `API_KEY` must have access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".projectId": {
        "rendered": "\n/** The project ID to list ignores for. */\n projectId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "IssueId",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/org/{orgId}/project/{projectId}/issue/{issueId}/jira-issue": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n    fields?: {\n  /** See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-issues/#api-rest-api-3-issue-post for details of what to send as fields. */\n    issuetype?: hasuraSdk.JSONValue,\n  /** See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-issues/#api-rest-api-3-issue-post for details of what to send as fields. */\n    project?: hasuraSdk.JSONValue,\n  /** See https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-issues/#api-rest-api-3-issue-post for details of what to send as fields. */\n    summary?: string,\n\n},\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".issueId": {
        "rendered": "\n/** The issue ID to create Jira issue for. */\n issueId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".orgId": {
        "rendered": "\n/** Automatically added */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".projectId": {
        "rendered": "\n/** Automatically added */\n projectId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** The details about the jira issue. */\n    jiraIssue?: {\n  /** The id of the issue in Jira. */\n    id?: string,\n  /** The key of the issue in Jira. */\n    key?: string,\n\n},\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/org/{orgId}/project/{projectId}/issue/{issueId}/paths": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The project snapshot ID for which to return issue paths. If set to `latest`, the most recent snapshot will be used. Use the \"List all project snapshots\" endpoint to find suitable values for this. */\n snapshotId?: string, \n/** The number of results to return per page (1 - 1000, inclusive). */\n perPage?: number, \n/** The page of results to return. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.snapshotId": {
        "rendered": "\n/** The project snapshot ID for which to return issue paths. If set to `latest`, the most recent snapshot will be used. Use the \"List all project snapshots\" endpoint to find suitable values for this. */\n snapshotId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.perPage": {
        "rendered": "\n/** The number of results to return per page (1 - 1000, inclusive). */\n perPage?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page of results to return. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID. The `API_KEY` must have access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".projectId": {
        "rendered": "\n/** The project ID for which to return issue paths. */\n projectId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueId": {
        "rendered": "\n/** The issue ID for which to return issue paths. */\n issueId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** Onward links from this record */\n    links?: {\n  /** The URL of the last page of paths for the issue */\n    last?: string,\n  /** The URL of the next page of paths for the issue, if not on the last page */\n    next?: string,\n  /** The URL of the previous page of paths for the issue, if not on the first page */\n    prev?: string,\n\n},\n  /** A list of the dependency paths that introduce the issue */\n    paths?: (({\n  /** The version to upgrade the package to in order to resolve the issue. This will only appear on the first element of the path, and only if the issue can be fixed by upgrading packages. Note that if the fix requires upgrading transitive dependencies, `fixVersion` will be the same as `version`. */\n    fixVersion?: string,\n  /** The package name */\n    name?: string,\n  /** The package version */\n    version?: string,\n\n})[])[],\n  /** The identifier of the snapshot for which the paths have been found */\n    snapshotId?: string,\n  /** The total number of results */\n    total?: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/org/{orgId}/project/{projectId}/jira-issues": {
    "query": {},
    "body": {},
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID to list Jira issues for. The `API_KEY` must have access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".projectId": {
        "rendered": "\n/** The project ID to list Jira issues for. */\n projectId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "IssueId",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/org/{orgId}/project/{projectId}/move": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The ID of the organization that the project should be moved to. The API_KEY must have group admin permissions. If the project is moved to a new group, a personal level API key is needed. */\n    targetOrgId?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID to which the project belongs. The API_KEY must have group admin permissions. If the project is moved to a new group, a personal level API key is needed. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".projectId": {
        "rendered": "\n/** The project ID. */\n projectId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/org/{orgId}/project/{projectId}/settings": {
    "query": {},
    "body": {},
    "path": {
      ".orgId": {
        "rendered": "\n/** Automatically added */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".projectId": {
        "rendered": "\n/** Automatically added */\n projectId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/org/{orgId}/project/{projectId}/settings": {
    "query": {},
    "body": {},
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID to which the project belongs. The API_KEY must have access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".projectId": {
        "rendered": "\n/** The project ID */\n projectId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** If set to `true`, Snyk will raise dependency upgrade PRs automatically. */\n    autoDepUpgradeEnabled?: boolean,\n  /** An array of comma-separated strings with names of dependencies you wish Snyk to ignore to upgrade. */\n    autoDepUpgradeIgnoredDependencies?: (any)[],\n  /** The limit on auto dependency upgrade PRs. */\n    autoDepUpgradeLimit?: number,\n  /** The age (in days) that an automatic dependency check is valid for */\n    autoDepUpgradeMinAge?: number,\n  /** Defines automatic remediation policies */\n    autoRemediationPrs?: {\n  /** If true, allows automatic remediation of newly identified issues, or older issues where a fix has been identified */\n    backlogPrsEnabled?: boolean,\n  /** If true, allows automatic remediation of prioritized backlog issues */\n    freshPrsEnabled?: boolean,\n  /** If true, allows using patched remediation */\n    usePatchRemediation?: boolean,\n\n},\n  /** assign Snyk pull requests */\n    pullRequestAssignment?: {\n  /** an array of usernames that have contributed to the organization's project(s). */\n    assignees?: (any)[],\n  /** if the organization's project(s) will assign Snyk pull requests. */\n    enabled?: boolean,\n  /** a string representing the type of assignment your projects require. */\n    type?: \"auto\" | \"manual\",\n\n},\n  /** If set to `true`, fail Snyk Test if the repo has any vulnerabilities. Otherwise, fail only when the PR is adding a vulnerable dependency. */\n    pullRequestFailOnAnyVulns?: boolean,\n  /** If set to `true`, fail Snyk Test only for high and critical severity vulnerabilities */\n    pullRequestFailOnlyForHighSeverity?: boolean,\n  /** If set to `true`, Snyk Test checks PRs for vulnerabilities.:cq */\n    pullRequestTestEnabled?: boolean,\n\n}",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/org/{orgId}/project/{projectId}/settings": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** If set to `true`, Snyk will raise dependency upgrade PRs automatically. */\n    autoDepUpgradeEnabled?: boolean,\n  /** An array of comma-separated strings with names of dependencies you wish Snyk to ignore to upgrade. */\n    autoDepUpgradeIgnoredDependencies?: (any)[],\n  /** The limit on auto dependency upgrade PRs. */\n    autoDepUpgradeLimit?: number,\n  /** The age (in days) that an automatic dependency check is valid for */\n    autoDepUpgradeMinAge?: number,\n  /** Defines automatic remediation policies */\n    autoRemediationPrs?: {\n  /** If true, allows automatic remediation of newly identified issues, or older issues where a fix has been identified */\n    backlogPrsEnabled?: boolean,\n  /** If true, allows automatic remediation of prioritized backlog issues */\n    freshPrsEnabled?: boolean,\n  /** If true, allows using patched remediation */\n    usePatchRemediation?: boolean,\n\n},\n  /** assign Snyk pull requests */\n    pullRequestAssignment?: {\n  /** an array of usernames that have contributed to the organization's project(s). */\n    assignees?: (any)[],\n  /** if the organization's project(s) will assign Snyk pull requests. */\n    enabled?: boolean,\n  /** a string representing the type of assignment your projects require. */\n    type?: \"auto\" | \"manual\",\n\n},\n  /** If set to `true`, fail Snyk Test if the repo has any vulnerabilities. Otherwise, fail only when the PR is adding a vulnerable dependency. */\n    pullRequestFailOnAnyVulns?: boolean,\n  /** If set to `true`, fail Snyk Test only for high and critical severity vulnerabilities */\n    pullRequestFailOnlyForHighSeverity?: boolean,\n  /** If set to `true`, Snyk Test checks PRs for vulnerabilities.:cq */\n    pullRequestTestEnabled?: boolean,\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".orgId": {
        "rendered": "\n/** Automatically added */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".projectId": {
        "rendered": "\n/** Automatically added */\n projectId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** If set to `true`, Snyk will raise dependency upgrade PRs automatically. */\n    autoDepUpgradeEnabled?: boolean,\n  /** An array of comma-separated strings with names of dependencies you wish Snyk to ignore to upgrade. */\n    autoDepUpgradeIgnoredDependencies?: (any)[],\n  /** The limit on auto dependency upgrade PRs. */\n    autoDepUpgradeLimit?: number,\n  /** The age (in days) that an automatic dependency check is valid for */\n    autoDepUpgradeMinAge?: number,\n  /** Defines automatic remediation policies */\n    autoRemediationPrs?: {\n  /** If true, allows automatic remediation of newly identified issues, or older issues where a fix has been identified */\n    backlogPrsEnabled?: boolean,\n  /** If true, allows automatic remediation of prioritized backlog issues */\n    freshPrsEnabled?: boolean,\n  /** If true, allows using patched remediation */\n    usePatchRemediation?: boolean,\n\n},\n  /** assign Snyk pull requests */\n    pullRequestAssignment?: {\n  /** an array of usernames that have contributed to the organization's project(s). */\n    assignees?: (any)[],\n  /** if the organization's project(s) will assign Snyk pull requests. */\n    enabled?: boolean,\n  /** a string representing the type of assignment your projects require. */\n    type?: \"auto\" | \"manual\",\n\n},\n  /** If set to `true`, fail Snyk Test if the repo has any vulnerabilities. Otherwise, fail only when the PR is adding a vulnerable dependency. */\n    pullRequestFailOnAnyVulns?: boolean,\n  /** If set to `true`, fail Snyk Test only for high and critical severity vulnerabilities */\n    pullRequestFailOnlyForHighSeverity?: boolean,\n  /** If set to `true`, Snyk Test checks PRs for vulnerabilities.:cq */\n    pullRequestTestEnabled?: boolean,\n\n}",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/org/{orgId}/project/{projectId}/tags": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Alphanumeric including - and _ with a limit of 30 characters */\n    key?: string,\n  /** Alphanumeric including - and _ with a limit of 50 characters */\n    value?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID. The `API_KEY` must have access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".projectId": {
        "rendered": "\n/** The project ID to apply the tag to */\n projectId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** Tags now applied to the project */\n    tags?: (any)[],\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/org/{orgId}/project/{projectId}/tags/remove": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Alphanumeric including - and _ with a limit of 30 characters */\n    key?: string,\n  /** Alphanumeric including - and _ with a limit of 50 characters */\n    value?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID. The `API_KEY` must have access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".projectId": {
        "rendered": "\n/** The project ID to remove a tag from */\n projectId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** Tags now applied to the project */\n    tags?: (any)[],\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/org/{orgId}/projects": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n    filters?: {\n  /**\n   * When you filter by multiple values on a single attribute, you will return projects that have been assigned one or more of the values in the filter.\n   * \n   * When you filter by multiple attributes, you will return projects which have been assigned values of both attributes in the filter.\n   */\n    attributes?: {\n    criticality?: (any)[],\n    environment?: (any)[],\n    lifecycle?: (any)[],\n\n},\n  /** If set to `true`, only include projects which are monitored, if set to `false`, only include projects which are not monitored */\n    isMonitored?: boolean,\n  /** If supplied, only projects that have a name that **starts with** this value will be returned */\n    name?: string,\n  /** If supplied, only projects that exactly match this origin will be returned */\n    origin?: string,\n    tags?: {\n  /** A project must have all provided tags in order to be included in the response. A maximum of 3 tags can be supplied. */\n    includes?: (any)[],\n\n},\n  /** If supplied, only projects that exactly match this type will be returned */\n    type?: string,\n\n},\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID to list projects for. The `API_KEY` must have access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    org?: {\n  /** The identifier of the org */\n    id?: string,\n    name?: string,\n\n},\n  /** A list of org's projects */\n    projects?: ({\n  /** Applied project attributes */\n    attributes?: {\n    criticality?: (any)[],\n    environment?: (any)[],\n    lifecycle?: (any)[],\n\n},\n  /** The monitored branch (if available) */\n    branch?: string | null,\n  /** URL with project overview */\n    browseUrl?: string,\n  /** The date that the project was created on */\n    created?: string,\n  /** The project identifier */\n    id?: string,\n  /** For docker projects shows the base image */\n    imageBaseImage?: string,\n  /** For Kubernetes projects shows the origin cluster name */\n    imageCluster?: string,\n  /** For docker projects shows the ID of the image */\n    imageId?: string,\n  /** For docker projects shows the platform of the image */\n    imagePlatform?: string,\n  /** For docker projects shows the tag of the image */\n    imageTag?: string,\n  /** The user who imported the project */\n    importingUser?: {\n  /** The email of the user. */\n    email?: string,\n  /** The ID of the user. */\n    id?: string,\n  /** The name of the user. */\n    name?: string,\n  /** The username of the user. */\n    username?: string,\n\n},\n  /** Describes if a project is currently monitored or it is de-activated */\n    isMonitored?: boolean,\n  /** Number of known vulnerabilities in the project, not including ignored issues */\n    issueCountsBySeverity?: {\n  /** Number of critical severity vulnerabilities */\n    critical?: number,\n  /** Number of high severity vulnerabilities */\n    high?: number,\n  /** Number of low severity vulnerabilities */\n    low?: number,\n  /** Number of medium severity vulnerabilities */\n    medium?: number,\n\n},\n  /** The date on which the most recent test was conducted for this project */\n    lastTestedDate?: string,\n    name?: string,\n  /** The origin the project was added from */\n    origin?: string,\n  /**\n   * The user who owns the project, null if not set\n   * \n   * {\n   *     \"id\": \"e713cf94-bb02-4ea0-89d9-613cce0caed2\",\n   *     \"name\": \"example-user@snyk.io\",\n   *     \"username\": \"exampleUser\",\n   *     \"email\": \"example-user@snyk.io\"\n   * }\n   */\n    owner?: hasuraSdk.JSONValue | null,\n  /** Whether the project is read-only */\n    readOnly?: boolean,\n  /** The project remote repository url. Only set for projects imported via the Snyk CLI tool. */\n    remoteRepoUrl?: string,\n  /** List of applied tags */\n    tags?: (any)[],\n  /** The identifier for which revision of the resource is scanned by Snyk. For example this may be a branch for SCM project, or a tag for a container image */\n    targetReference?: string | null,\n  /** The frequency of automated Snyk re-test. Can be 'daily', 'weekly or 'never' */\n    testFrequency?: string,\n  /** Number of dependencies of the project */\n    totalDependencies?: number,\n  /** The package manager of the project */\n    type?: string,\n\n})[],\n\n}",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/org/{orgId}/provision": {
    "query": {},
    "body": {},
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** Deletion succeeded. */\n    ok?: boolean,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/org/{orgId}/provision": {
    "query": {},
    "body": {},
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "IgnoreRules",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/org/{orgId}/provision": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The email of the user. */\n    email: string,\n  /** Deprecated. Name of the role to grant this user. Must be one of `ADMIN`, `COLLABORATOR`, or `RESTRICTED_COLLABORATOR`. This field is invalid if `rolePublicId` is supplied with the request. */\n    role?: string,\n  /** ID of the role to grant this user. */\n    rolePublicId?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID. The `API_KEY` must not exceed the permissions being granted to the provisioned user. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** Timestamp of when this provision record was created. */\n    created?: string,\n  /** The email of the user. */\n    email?: string,\n  /** Name of the role granted for this user. */\n    role?: string,\n  /** ID of the role to granted for this user. */\n    rolePublicId?: string,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/org/{orgId}/settings": {
    "query": {},
    "body": {},
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID. The `API_KEY` must have access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** Will only be returned if `API_KEY` has read access to request access settings. */\n    requestAccess?: {\n  /** Whether requesting access to the organization is enabled. */\n    enabled: boolean,\n\n},\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/org/{orgId}/settings": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Can only be updated if `API_KEY` has edit access to request access settings. */\n    requestAccess?: {\n  /** Whether requesting access to the organization is enabled. */\n    enabled: boolean,\n\n},\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID. The `API_KEY` must have admin access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** Will only be returned if `API_KEY` has read access to request access settings. */\n    requestAccess?: {\n  /** Whether requesting access to the organization is enabled. */\n    enabled: boolean,\n\n},\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/org/{orgId}/webhooks": {
    "query": {},
    "body": {},
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID to list projects for. The `API_KEY` must have access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/org/{orgId}/webhooks": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** This is a password you create, that Snyk uses to sign our transports to you, so you be sure the notification is authentic. Your `secret` should: Be a random string with high entropy; Not be used for anything else; Only known to Snyk and your webhook transport consuming code; */\n    secret?: string,\n  /** Webhooks can only be configured for URLs using the `https` protocol. `http` is not allowed. */\n    url?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID to list projects for. The `API_KEY` must have access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/org/{orgId}/webhooks/{webhookId}": {
    "query": {},
    "body": {},
    "path": {
      ".orgId": {
        "rendered": "\n/** Automatically added */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".webhookId": {
        "rendered": "\n/** Automatically added */\n webhookId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/org/{orgId}/webhooks/{webhookId}": {
    "query": {},
    "body": {},
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID the project belongs to. The `API_KEY` must have access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".webhookId": {
        "rendered": "\n/** The webhook ID. */\n webhookId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/org/{orgId}/webhooks/{webhookId}/ping": {
    "query": {},
    "body": {},
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID the project belongs to. The `API_KEY` must have access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".webhookId": {
        "rendered": "\n/** The webhook ID. */\n webhookId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/reporting/counts/issues": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The date you wish to fetch results from, in the format `YYYY-MM-DD` */\n from: string, \n/** The date you wish to fetch results until, in the format `YYYY-MM-DD` */\n to: string, \n/** The field to group results by */\n groupBy?: \"severity\" | \"fixable\" | \"project,[severity|fixable]\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.from": {
        "rendered": "\n/** The date you wish to fetch results from, in the format `YYYY-MM-DD` */\n from: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.to": {
        "rendered": "\n/** The date you wish to fetch results until, in the format `YYYY-MM-DD` */\n to: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.groupBy": {
        "rendered": "\n/** The field to group results by */\n groupBy?: \"severity\" | \"fixable\" | \"project,[severity|fixable]\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n    filters?: {\n  /** If set to `true`, only include issues which are fixable, if set to `false`, only include issues which are not fixable. An issue is fixable if it is either upgradable, patchable or pinnable. Also see isUpgradable, isPatchable and isPinnable filters. */\n    fixable?: boolean,\n  /** If set to `true`, only include issues which are ignored, if set to `false`, only include issues which are not ignored */\n    ignored?: boolean,\n  /** If set to `true`, only include issues which are patchable, if set to `false`, only include issues which are not patchable */\n    isPatchable?: boolean,\n  /** If set to `true`, only include issues which are pinnable, if set to `false`, only include issues which are not pinnable */\n    isPinnable?: boolean,\n  /** If set to `true`, only include issues which are upgradable, if set to `false`, only include issues which are not upgradable */\n    isUpgradable?: boolean,\n  /** The type of languages to filter the results by */\n    languages?: (any)[],\n  /** The list of org IDs to filter the results by */\n    orgs: any,\n  /** If set to `true`, only include issues which are patched, if set to `false`, only include issues which are not patched */\n    patched?: boolean,\n  /** The priority score ranging between 0-1000 */\n    priorityScore?: {\n    max?: number,\n    min?: number,\n\n},\n  /** The list of project IDs to filter issues by, max projects allowed is 1000 */\n    projects?: any,\n  /** The severity levels of issues to filter the results by */\n    severity?: (any)[],\n  /** The type of issues to filter the results by */\n    types?: (any)[],\n\n},\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** A list of issue counts by day */\n    results: ({\n  /** The number of issues */\n    count: number,\n  /** The date in the format `YYYY-MM-DD` */\n    day: string,\n    fixable?: {\n  /** The number of non-fixable issues */\n    false?: number,\n  /** The number of fixable issues */\n    true?: number,\n\n},\n    severity?: {\n  /** The number of critical severity issues */\n    critical?: number,\n  /** The number of high severity issues */\n    high?: number,\n  /** The number of low severity issues */\n    low?: number,\n  /** The number of medium severity issues */\n    medium?: number,\n\n},\n\n})[],\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/reporting/counts/issues/latest": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The field to group results by */\n groupBy?: \"severity\" | \"fixable\" | \"project,[severity|fixable]\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.groupBy": {
        "rendered": "\n/** The field to group results by */\n groupBy?: \"severity\" | \"fixable\" | \"project,[severity|fixable]\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n    filters?: {\n  /** If set to `true`, only include issues which are fixable, if set to `false`, only include issues which are not fixable. An issue is fixable if it is either upgradable, patchable or pinnable. Also see isUpgradable, isPatchable and isPinnable filters. */\n    fixable?: boolean,\n  /** If set to `true`, only include issues which are ignored, if set to `false`, only include issues which are not ignored */\n    ignored?: boolean,\n  /** If set to `true`, only include issues which are patchable, if set to `false`, only include issues which are not patchable */\n    isPatchable?: boolean,\n  /** If set to `true`, only include issues which are pinnable, if set to `false`, only include issues which are not pinnable */\n    isPinnable?: boolean,\n  /** If set to `true`, only include issues which are upgradable, if set to `false`, only include issues which are not upgradable */\n    isUpgradable?: boolean,\n  /** The type of languages to filter the results by */\n    languages?: (any)[],\n  /** The list of org IDs to filter the results by */\n    orgs: any,\n  /** If set to `true`, only include issues which are patched, if set to `false`, only include issues which are not patched */\n    patched?: boolean,\n  /** The priority score ranging between 0-1000 */\n    priorityScore?: {\n    max?: number,\n    min?: number,\n\n},\n  /** The list of project IDs to filter issues by, max projects allowed is 1000 */\n    projects?: any,\n  /** The severity levels of issues to filter the results by */\n    severity?: (any)[],\n  /** The type of issues to filter the results by */\n    types?: (any)[],\n\n},\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** A list of issue counts by day */\n    results: ({\n  /** The number of issues */\n    count: number,\n  /** The date in the format `YYYY-MM-DD` */\n    day: string,\n    fixable?: {\n  /** The number of non-fixable issues */\n    false?: number,\n  /** The number of fixable issues */\n    true?: number,\n\n},\n    severity?: {\n  /** The number of critical severity issues */\n    critical?: number,\n  /** The number of high severity issues */\n    high?: number,\n  /** The number of low severity issues */\n    low?: number,\n  /** The number of medium severity issues */\n    medium?: number,\n\n},\n\n})[],\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/reporting/counts/projects": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The date you wish to fetch results from, in the format `YYYY-MM-DD` */\n from: string, \n/** The date you wish to fetch results until, in the format `YYYY-MM-DD` */\n to: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.from": {
        "rendered": "\n/** The date you wish to fetch results from, in the format `YYYY-MM-DD` */\n from: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.to": {
        "rendered": "\n/** The date you wish to fetch results until, in the format `YYYY-MM-DD` */\n to: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n    filters?: {\n  /** The type of languages to filter the results by */\n    languages?: (any)[],\n  /** The list of org IDs to filter the results by */\n    orgs: any,\n  /** The list of project IDs to filter the results by, max projects allowed is 1000 */\n    projects?: any,\n\n},\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** A list of project counts by day */\n    results: ({\n  /** The number of projects */\n    count: number,\n  /** The date in the format `YYYY-MM-DD` */\n    day: string,\n\n})[],\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/reporting/counts/projects/latest": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n    filters?: {\n  /** The type of languages to filter the results by */\n    languages?: (any)[],\n  /** The list of org IDs to filter the results by */\n    orgs: any,\n  /** The list of project IDs to filter the results by, max projects allowed is 1000 */\n    projects?: any,\n\n},\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** A list of project counts by day */\n    results: ({\n  /** The number of projects */\n    count: number,\n  /** The date in the format `YYYY-MM-DD` */\n    day: string,\n\n})[],\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/reporting/counts/tests": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The date you wish to count tests from, in the format `YYYY-MM-DD` */\n from: string, \n/** The date you wish to count tests until, in the format `YYYY-MM-DD` */\n to: string, \n/** The field to group results by */\n groupBy?: \"isPrivate\" | \"issuesPrevented\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.from": {
        "rendered": "\n/** The date you wish to count tests from, in the format `YYYY-MM-DD` */\n from: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.to": {
        "rendered": "\n/** The date you wish to count tests until, in the format `YYYY-MM-DD` */\n to: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.groupBy": {
        "rendered": "\n/** The field to group results by */\n groupBy?: \"isPrivate\" | \"issuesPrevented\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n    filters?: {\n  /** If set to `true`, only include tests which were conducted against private projects, if set to `false` only include tests which were conducted against public projects */\n    isPrivate?: boolean,\n  /** If set to `true`, only include tests which prevented issues from being introduced, if set to `false` only include tests which did not prevent issues from being introduced */\n    issuesPrevented?: boolean,\n  /** The list of org IDs to filter the results by */\n    orgs: any,\n  /** The list of project IDs to filter issues by, max projects allowed is 1000 */\n    projects?: any,\n\n},\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** A list of test counts */\n    results: ({\n  /** The number of tests conducted */\n    count: number,\n    isPrivate?: {\n  /** The number of tests conducted against public projects */\n    false?: number,\n  /** The number of tests conducted against private projects */\n    true?: number,\n\n},\n    issuesPrevented?: {\n  /** The number of tests that did not prevent issues from being introduced */\n    false?: number,\n  /** The number of tests that prevented issues from being introduced */\n    true?: number,\n\n},\n\n})[],\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/reporting/issues/": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The date you wish to fetch results from, in the format `YYYY-MM-DD` */\n from: string, \n/** The date you wish to fetch results until, in the format `YYYY-MM-DD` */\n to: string, \n/** The page of results to request */\n page?: number, \n/** The number of results to return per page (Maximum: 1000) */\n perPage?: number, \n/** The key to sort results by */\n sortBy?: \"severity\" | \"issueTitle\" | \"projectName\" | \"isFixed\" | \"isPatched\" | \"isIgnored\" | \"introducedDate\" | \"isUpgradable\" | \"isPatchable\" | \"priorityScore\", \n/** The direction to sort results. */\n order?: string, \n/** Set to issue to group the same issue in multiple projects */\n groupBy?: \"issue\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.from": {
        "rendered": "\n/** The date you wish to fetch results from, in the format `YYYY-MM-DD` */\n from: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.to": {
        "rendered": "\n/** The date you wish to fetch results until, in the format `YYYY-MM-DD` */\n to: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** The page of results to request */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.perPage": {
        "rendered": "\n/** The number of results to return per page (Maximum: 1000) */\n perPage?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sortBy": {
        "rendered": "\n/** The key to sort results by */\n sortBy?: \"severity\" | \"issueTitle\" | \"projectName\" | \"isFixed\" | \"isPatched\" | \"isIgnored\" | \"introducedDate\" | \"isUpgradable\" | \"isPatchable\" | \"priorityScore\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.order": {
        "rendered": "\n/** The direction to sort results. */\n order?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.groupBy": {
        "rendered": "\n/** Set to issue to group the same issue in multiple projects */\n groupBy?: \"issue\",",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n    filters?: {\n  /** The exploit maturity levels of issues to filter the results by */\n    exploitMaturity?: (any)[],\n  /** If set to `true`, only include issues which are fixable, if set to `false`, only include issues which are not fixable. An issue is fixable if it is either upgradable, patchable or pinnable. Also see isUpgradable, isPatchable and isPinnable filters. */\n    fixable?: boolean,\n  /** Search term to filter issue name by, or an exact CVE or CWE */\n    identifier?: string,\n  /** If set to `true`, only include issues which are ignored, if set to `false`, only include issues which are not ignored */\n    ignored?: boolean,\n  /** If set to `true`, only include issues which are fixed, if set to `false`, only include issues which are not fixed */\n    isFixed?: boolean,\n  /** If set to `true`, only include issues which are patchable, if set to `false`, only include issues which are not patchable */\n    isPatchable?: boolean,\n  /** If set to `true`, only include issues which are pinnable, if set to `false`, only include issues which are not pinnable */\n    isPinnable?: boolean,\n  /** If set to `true`, only include issues which are upgradable, if set to `false`, only include issues which are not upgradable */\n    isUpgradable?: boolean,\n  /** The list of issue IDs to filter issues by */\n    issues?: any,\n  /** The type of languages to filter the results by */\n    languages?: (any)[],\n  /** The list of org IDs to filter the results by */\n    orgs: any,\n  /** If set to `true`, only include issues which are patched, if set to `false`, only include issues which are not patched */\n    patched?: boolean,\n  /** The priority score ranging between 0-1000 */\n    priorityScore?: {\n    max?: number,\n    min?: number,\n\n},\n  /** The list of project IDs to filter issues by, max projects allowed is 1000 */\n    projects?: any,\n  /** The severity levels of issues to filter the results by */\n    severity?: (any)[],\n  /** The type of issues to filter the results by */\n    types?: (any)[],\n\n},\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** A list of issues */\n    results: (({\n  /** When `groupBy` is used, multiple projects may be returned per issue */\n    projects: (any)[],\n\n} | {\n  /** When no `groupBy` is used, a single project is returned per issue */\n    project: {\n  /** The identifier of the project */\n    id: string,\n  /** The name of the project */\n    name: string,\n  /** The package manager for the project (e.g. npm, rubygems etc) */\n    packageManager: string,\n  /** The source of the project (e.g. github, heroku etc) */\n    source: string,\n  /** The file path to the dependency manifest or lock file (e.g. package.json, Gemfile.lock etc) */\n    targetFile?: string,\n  /** URL to a page containing information about the project */\n    url: string,\n\n},\n\n}) & ({\n  /** The date that the issue was fixed */\n    fixedDate?: string,\n  /** The date that the issue was introduced into the project */\n    introducedDate: string,\n  /** Whether the issue has been fixed */\n    isFixed: boolean,\n    issue: {\n  /** The CVSS v3 string that signifies how the CVSS score was calculated (not applicable to licenses) */\n    \"CVSSv3\"?: string,\n  /** The list of people responsible for first uncovering or reporting the issue (not applicable to licenses) */\n    credit?: (any)[],\n  /** The CVSS score that results from running the CVSSv3 string (not applicable to licenses) */\n    cvssScore?: number,\n  /** The date that the vulnerability was first disclosed (not applicable to licenses) */\n    disclosureTime?: string,\n  /** The exploit maturity of the issue */\n    exploitMaturity: string,\n  /** The identifier of the issue */\n    id: string,\n  /** External identifiers assigned to the issue (not applicable to licenses) */\n    identifiers?: {\n  /** Common Vulnerability Enumeration identifiers */\n    CVE?: (any)[],\n  /** Common Weakness Enumeration identifiers */\n    CWE?: (any)[],\n  /** Identifiers assigned by the Open Source Vulnerability Database (OSVDB) */\n    OSVDB?: (any)[],\n\n},\n  /** The list of ignore rules that were applied to the issue (only present if issue was ignored and no `groupBy` in the API request) */\n    ignored?: (any)[],\n  /** Whether the issue has been ignored (only present if there is no `groupBy` in the API request) */\n    isIgnored?: boolean,\n  /** Whether the issue can be patched */\n    isPatchable?: boolean,\n  /** Whether the issue has been patched (not applicable to licenses and only present if there is no `groupBy` in the API request) */\n    isPatched?: boolean,\n  /** Whether the issue can be pinned */\n    isPinnable?: boolean,\n  /** Whether the issue can be fixed by upgrading to a later version of the dependency */\n    isUpgradable?: boolean,\n  /** The link to the Jira issue attached to the vulnerability */\n    jiraIssueUrl?: string,\n  /** The language of the issue */\n    language?: string,\n  /** The original severity status of the issue, as retrieved from Snyk Vulnerability database, before policies are applied */\n    originalSeverity: string,\n  /** The name of the package that the issue relates to */\n    package: string,\n  /** The package manager of the issue */\n    packageManager?: string,\n  /** A list of patches available for the given issue (not applicable to licenses) */\n    patches?: (any)[],\n  /** The priority score ranging between 0-1000 */\n    priorityScore?: number,\n  /** The date that the vulnerability was first published by Snyk (not applicable to licenses) */\n    publicationTime?: string,\n  /** The ranges that are vulnerable and unaffected by the issue */\n    semver?: {\n  /** The ranges that are unaffected by the issue */\n    unaffected?: string,\n  /** The ranges that are vulnerable to the issue */\n    vulnerable?: (any)[],\n\n},\n  /** The severity status of the issue, after policies are applied */\n    severity: string,\n  /** The issue title */\n    title: string,\n  /** The issue type, can be \"vuln\", \"license\" */\n    type: string,\n  /** A list of all severities in issue per projects */\n    uniqueSeveritiesList?: (any)[],\n  /** URL to a page containing information about the issue */\n    url: string,\n  /** The version of the package that the issue relates to */\n    version: string,\n\n},\n  /** The date that the issue was patched */\n    patchedDate?: string,\n\n}))[],\n  /** The total number of results found */\n    total: number,\n\n}",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/reporting/issues/latest": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The page of results to request */\n page?: number, \n/** The number of results to return per page (Maximum: 1000) */\n perPage?: number, \n/** The key to sort results by */\n sortBy?: \"severity\" | \"issueTitle\" | \"projectName\" | \"isFixed\" | \"isPatched\" | \"isIgnored\" | \"introducedDate\" | \"isUpgradable\" | \"isPatchable\" | \"priorityScore\", \n/** The direction to sort results. */\n order?: string, \n/** Set to issue to group the same issue in multiple projects */\n groupBy?: \"issue\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.page": {
        "rendered": "\n/** The page of results to request */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.perPage": {
        "rendered": "\n/** The number of results to return per page (Maximum: 1000) */\n perPage?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sortBy": {
        "rendered": "\n/** The key to sort results by */\n sortBy?: \"severity\" | \"issueTitle\" | \"projectName\" | \"isFixed\" | \"isPatched\" | \"isIgnored\" | \"introducedDate\" | \"isUpgradable\" | \"isPatchable\" | \"priorityScore\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.order": {
        "rendered": "\n/** The direction to sort results. */\n order?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.groupBy": {
        "rendered": "\n/** Set to issue to group the same issue in multiple projects */\n groupBy?: \"issue\",",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n    filters?: {\n  /** The exploit maturity levels of issues to filter the results by */\n    exploitMaturity?: (any)[],\n  /** If set to `true`, only include issues which are fixable, if set to `false`, only include issues which are not fixable. An issue is fixable if it is either upgradable, patchable or pinnable. Also see isUpgradable, isPatchable and isPinnable filters. */\n    fixable?: boolean,\n  /** Search term to filter issue name by, or an exact CVE or CWE */\n    identifier?: string,\n  /** If set to `true`, only include issues which are ignored, if set to `false`, only include issues which are not ignored */\n    ignored?: boolean,\n  /** If set to `true`, only include issues which are fixed, if set to `false`, only include issues which are not fixed */\n    isFixed?: boolean,\n  /** If set to `true`, only include issues which are patchable, if set to `false`, only include issues which are not patchable */\n    isPatchable?: boolean,\n  /** If set to `true`, only include issues which are pinnable, if set to `false`, only include issues which are not pinnable */\n    isPinnable?: boolean,\n  /** If set to `true`, only include issues which are upgradable, if set to `false`, only include issues which are not upgradable */\n    isUpgradable?: boolean,\n  /** The list of issue IDs to filter issues by */\n    issues?: any,\n  /** The type of languages to filter the results by */\n    languages?: (any)[],\n  /** The list of org IDs to filter the results by */\n    orgs: any,\n  /** If set to `true`, only include issues which are patched, if set to `false`, only include issues which are not patched */\n    patched?: boolean,\n  /** The priority score ranging between 0-1000 */\n    priorityScore?: {\n    max?: number,\n    min?: number,\n\n},\n  /** The list of project IDs to filter issues by, max projects allowed is 1000 */\n    projects?: any,\n  /** The severity levels of issues to filter the results by */\n    severity?: (any)[],\n  /** The type of issues to filter the results by */\n    types?: (any)[],\n\n},\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** A list of issues */\n    results: (({\n  /** When `groupBy` is used, multiple projects may be returned per issue */\n    projects: (any)[],\n\n} | {\n  /** When no `groupBy` is used, a single project is returned per issue */\n    project: {\n  /** The identifier of the project */\n    id: string,\n  /** The name of the project */\n    name: string,\n  /** The package manager for the project (e.g. npm, rubygems etc) */\n    packageManager: string,\n  /** The source of the project (e.g. github, heroku etc) */\n    source: string,\n  /** The file path to the dependency manifest or lock file (e.g. package.json, Gemfile.lock etc) */\n    targetFile?: string,\n  /** URL to a page containing information about the project */\n    url: string,\n\n},\n\n}) & ({\n  /** The date that the issue was fixed */\n    fixedDate?: string,\n  /** The date that the issue was introduced into the project */\n    introducedDate: string,\n  /** Whether the issue has been fixed */\n    isFixed: boolean,\n    issue: {\n  /** The CVSS v3 string that signifies how the CVSS score was calculated (not applicable to licenses) */\n    \"CVSSv3\"?: string,\n  /** The list of people responsible for first uncovering or reporting the issue (not applicable to licenses) */\n    credit?: (any)[],\n  /** The CVSS score that results from running the CVSSv3 string (not applicable to licenses) */\n    cvssScore?: number,\n  /** The date that the vulnerability was first disclosed (not applicable to licenses) */\n    disclosureTime?: string,\n  /** The exploit maturity of the issue */\n    exploitMaturity: string,\n  /** The identifier of the issue */\n    id: string,\n  /** External identifiers assigned to the issue (not applicable to licenses) */\n    identifiers?: {\n  /** Common Vulnerability Enumeration identifiers */\n    CVE?: (any)[],\n  /** Common Weakness Enumeration identifiers */\n    CWE?: (any)[],\n  /** Identifiers assigned by the Open Source Vulnerability Database (OSVDB) */\n    OSVDB?: (any)[],\n\n},\n  /** The list of ignore rules that were applied to the issue (only present if issue was ignored and no `groupBy` in the API request) */\n    ignored?: (any)[],\n  /** Whether the issue has been ignored (only present if there is no `groupBy` in the API request) */\n    isIgnored?: boolean,\n  /** Whether the issue can be patched */\n    isPatchable?: boolean,\n  /** Whether the issue has been patched (not applicable to licenses and only present if there is no `groupBy` in the API request) */\n    isPatched?: boolean,\n  /** Whether the issue can be pinned */\n    isPinnable?: boolean,\n  /** Whether the issue can be fixed by upgrading to a later version of the dependency */\n    isUpgradable?: boolean,\n  /** The link to the Jira issue attached to the vulnerability */\n    jiraIssueUrl?: string,\n  /** The language of the issue */\n    language?: string,\n  /** The original severity status of the issue, as retrieved from Snyk Vulnerability database, before policies are applied */\n    originalSeverity: string,\n  /** The name of the package that the issue relates to */\n    package: string,\n  /** The package manager of the issue */\n    packageManager?: string,\n  /** A list of patches available for the given issue (not applicable to licenses) */\n    patches?: (any)[],\n  /** The priority score ranging between 0-1000 */\n    priorityScore?: number,\n  /** The date that the vulnerability was first published by Snyk (not applicable to licenses) */\n    publicationTime?: string,\n  /** The ranges that are vulnerable and unaffected by the issue */\n    semver?: {\n  /** The ranges that are unaffected by the issue */\n    unaffected?: string,\n  /** The ranges that are vulnerable to the issue */\n    vulnerable?: (any)[],\n\n},\n  /** The severity status of the issue, after policies are applied */\n    severity: string,\n  /** The issue title */\n    title: string,\n  /** The issue type, can be \"vuln\", \"license\" */\n    type: string,\n  /** A list of all severities in issue per projects */\n    uniqueSeveritiesList?: (any)[],\n  /** URL to a page containing information about the issue */\n    url: string,\n  /** The version of the package that the issue relates to */\n    version: string,\n\n},\n  /** The date that the issue was patched */\n    patchedDate?: string,\n\n}))[],\n  /** The total number of results found */\n    total: number,\n\n}",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/test/composer": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * the encoding for the manifest files sent.\n   * @default \"base64\"\n   */\n    encoding?: \"plain\" | \"base64\",\n  /** The manifest files: */\n    files: {\n  /** a lockfile encoded according the the \"encoding\" field. */\n    additional: (any)[],\n  /** the `composer.json` file, encoded according the the \"encoding\" field. */\n    target: {\n    contents?: string,\n\n},\n\n},\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/test/dep-graph": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The organization to test the package with. See \"The Snyk organization for a request\" above. */\n org?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.org": {
        "rendered": "\n/** The organization to test the package with. See \"The Snyk organization for a request\" above. */\n org?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** A [DepGraph data object](https://github.com/snyk/dep-graph#depgraphdata) defining all packages and their relationships. */\n    depGraph: {\n  /** Graph object references each pkg and how they depend on each other through the deps property. */\n    graph: {\n  /** Array of node objects. */\n    nodes: (any)[],\n  /** Root node id. */\n    rootNodeId: string,\n\n},\n  /** Package manager information. */\n    pkgManager: {\n  /** Package manager name. */\n    name: string,\n  /** A list of package repositories (i.e. maven-central, or npm) that defaults to the canonical package registry for the given package manager. */\n    repositories?: (any)[],\n\n},\n  /** Array of package dependencies. */\n    pkgs: (any)[],\n  /** Snyk DepGraph library schema version. */\n    schemaVersion: string,\n\n},\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/test/golangdep": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The organization to test the package with. See \"The Snyk organization for a request\" above. */\n org?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.org": {
        "rendered": "\n/** The organization to test the package with. See \"The Snyk organization for a request\" above. */\n org?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * the encoding for the manifest files sent.\n   * @default \"base64\"\n   */\n    encoding?: \"plain\" | \"base64\",\n  /** The manifest files: */\n    files: {\n  /** a lockfile encoded according the the \"encoding\" field. */\n    additional: (any)[],\n  /** the `Gopkg.toml` file, encoded according the the \"encoding\" field. */\n    target: {\n    contents?: string,\n\n},\n\n},\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/test/govendor": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * the encoding for the manifest files sent.\n   * @default \"base64\"\n   */\n    encoding?: \"plain\" | \"base64\",\n  /** The manifest files: */\n    files: {\n  /** the `vendor.json` file, encoded according the the \"encoding\" field. */\n    target: {\n    contents?: string,\n\n},\n\n},\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/test/gradle": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * the encoding for the manifest files sent.\n   * @default \"base64\"\n   */\n    encoding?: \"plain\" | \"base64\",\n  /** The manifest files: */\n    files: {\n  /** the manifest file, encoded according the the \"encoding\" field. */\n    target: {\n  /** The contents of the file, encoded according to the `encoding` field. */\n    contents: string,\n\n},\n\n},\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/test/gradle/{group}/{name}/{version}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The organization to test the package with. See \"The Snyk organization for a request\" above. */\n org?: string, \n/** The repository hosting this package. The default value is Maven Central. More than one value is supported, in order. */\n repository?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.org": {
        "rendered": "\n/** The organization to test the package with. See \"The Snyk organization for a request\" above. */\n org?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.repository": {
        "rendered": "\n/** The repository hosting this package. The default value is Maven Central. More than one value is supported, in order. */\n repository?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".group": {
        "rendered": "\n/** The package's group ID. */\n group: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".name": {
        "rendered": "\n/** The package's artifact ID. */\n name: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".version": {
        "rendered": "\n/** The package version to test. */\n version: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/test/maven": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The organization to test the package with. See \"The Snyk organization for a request\" above. */\n org?: string, \n/** The Maven repository hosting this package. The default value is Maven Central. More than one value is supported, in order. */\n repository?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.org": {
        "rendered": "\n/** The organization to test the package with. See \"The Snyk organization for a request\" above. */\n org?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.repository": {
        "rendered": "\n/** The Maven repository hosting this package. The default value is Maven Central. More than one value is supported, in order. */\n repository?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * the encoding for the manifest files sent.\n   * @default \"base64\"\n   */\n    encoding?: \"plain\" | \"base64\",\n  /** The manifest files: */\n    files: {\n  /** additional manifest files (if needed), encoded according the the \"encoding\" field. */\n    additional?: (any)[],\n  /** the main/root manifest file, encoded according the the \"encoding\" field. */\n    target: {\n  /** The contents of the file, encoded according to the `encoding` field. */\n    contents: string,\n\n},\n\n},\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/test/maven/{groupId}/{artifactId}/{version}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The organization to test the package with. See \"The Snyk organization for a request\" above. */\n org?: string, \n/** The Maven repository hosting this package. The default value is Maven Central. More than one value is supported, in order. */\n repository?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.org": {
        "rendered": "\n/** The organization to test the package with. See \"The Snyk organization for a request\" above. */\n org?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.repository": {
        "rendered": "\n/** The Maven repository hosting this package. The default value is Maven Central. More than one value is supported, in order. */\n repository?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".groupId": {
        "rendered": "\n/** The package's group ID. */\n groupId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".artifactId": {
        "rendered": "\n/** The package's artifact ID. */\n artifactId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".version": {
        "rendered": "\n/** The package version to test. */\n version: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/test/npm": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * the encoding for the manifest files sent.\n   * @default \"base64\"\n   */\n    encoding?: \"plain\" | \"base64\",\n  /** The manifest files: */\n    files: {\n  /** a lockfile can be sent (if needed), encoded according the the \"encoding\" field. */\n    additional?: (any)[],\n  /** the `package.json` file, encoded according the the \"encoding\" field. */\n    target: {\n  /** the contents of `package.json` as a string. */\n    contents: string,\n\n},\n\n},\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/test/npm/{packageName}/{version}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The organization to test the package with. See \"The Snyk organization for a request\" above. */\n org?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.org": {
        "rendered": "\n/** The organization to test the package with. See \"The Snyk organization for a request\" above. */\n org?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".packageName": {
        "rendered": "\n/** The package name. For scoped packages, **must** be url-encoded, so to test \"@angular/core\" version 4.3.2, one should `GET /test/npm/%40angular%2Fcore/4.3.2`. */\n packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".version": {
        "rendered": "\n/** The Package version to test. */\n version: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/test/pip": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * the encoding for the manifest files sent.\n   * @default \"base64\"\n   */\n    encoding?: \"plain\" | \"base64\",\n  /** The manifest files: */\n    files: {\n  /** the `requirements.txt` file, encoded according the the \"encoding\" field. */\n    target: {\n  /** the contents of `requirements.txt` as a string, encoded according to `encoding` above. */\n    contents: string,\n\n},\n\n},\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/test/pip/{packageName}/{version}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The organization to test the package with. See \"The Snyk organization for a request\" above. */\n org?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.org": {
        "rendered": "\n/** The organization to test the package with. See \"The Snyk organization for a request\" above. */\n org?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".packageName": {
        "rendered": "\n/** The package name. */\n packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".version": {
        "rendered": "\n/** The Package version to test. */\n version: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/test/rubygems": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * the encoding for the manifest files sent.\n   * @default \"base64\"\n   */\n    encoding?: \"plain\" | \"base64\",\n  /** The manifest files: */\n    files: {\n  /** the `Gemfile.lock` file, encoded according the the \"encoding\" field. */\n    target: {\n  /** the contents of `Gemfile.lock` as a string. */\n    contents: string,\n\n},\n\n},\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/test/rubygems/{gemName}/{version}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The organization to test the package with. See \"The Snyk organization for a request\" above. */\n org?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.org": {
        "rendered": "\n/** The organization to test the package with. See \"The Snyk organization for a request\" above. */\n org?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".gemName": {
        "rendered": "\n/** The gem name. */\n gemName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".version": {
        "rendered": "\n/** The gem version to test. */\n version: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/test/sbt": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * the encoding for the manifest files sent.\n   * @default \"base64\"\n   */\n    encoding?: \"plain\" | \"base64\",\n  /** The manifest files: */\n    files: {\n  /** the manifest file, encoded according the the \"encoding\" field. */\n    target: {\n  /** The contents of the file, encoded according to the `encoding` field. */\n    contents: string,\n\n},\n\n},\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/test/sbt/{groupId}/{artifactId}/{version}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The organization to test the package with. See \"The Snyk organization for a request\" above. */\n org?: string, \n/** The repository hosting this package. The default value is Maven Central. More than one value is supported, in order. */\n repository?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.org": {
        "rendered": "\n/** The organization to test the package with. See \"The Snyk organization for a request\" above. */\n org?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.repository": {
        "rendered": "\n/** The repository hosting this package. The default value is Maven Central. More than one value is supported, in order. */\n repository?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".groupId": {
        "rendered": "\n/** The package's group ID. */\n groupId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".artifactId": {
        "rendered": "\n/** The package's artifact ID. */\n artifactId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".version": {
        "rendered": "\n/** The package version to test. */\n version: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/test/yarn": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * the encoding for the manifest files sent.\n   * @default \"plain\"\n   */\n    encoding?: \"plain\" | \"base64\",\n  /** The manifest files: */\n    files: {\n  /** a lockfile can be sent (if needed), encoded according the the \"encoding\" field. */\n    additional?: (any)[],\n  /** the `package.json` file, encoded according the the \"encoding\" field. */\n    target: {\n  /** the contents of `package.json` as a string. */\n    contents: string,\n\n},\n\n},\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/me": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** The email of the user. */\n    email?: string,\n  /** The id of the user. */\n    id?: string,\n  /** The organizations that the user belongs to. */\n    orgs?: any,\n  /** The username of the user. */\n    username?: string,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/me/notification-settings/org/{orgId}": {
    "query": {},
    "body": {},
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID. The `API_KEY` must have access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    \"new-issues-remediations\"?: {\n  /** Whether notifications should be sent */\n    enabled: boolean,\n  /** Whether the setting was found on the requested context directly or inherited from a parent */\n    inherited?: boolean,\n  /** The severity levels of issues to send notifications for (only applicable for `new-remediations-vulnerabilities` notificationType) */\n    issueSeverity: \"all\" | \"high\",\n  /** Filter the types of issue to include in notifications (only applicable for `new-remediations-vulnerabilities` notificationType) */\n    issueType: \"all\" | \"vuln\" | \"license\" | \"none\",\n\n},\n    \"project-imported\"?: {\n  /** Whether notifications should be sent */\n    enabled: boolean,\n  /** Whether the setting was found on the requested context directly or inherited from a parent */\n    inherited?: boolean,\n\n},\n    \"test-limit\"?: {\n  /** Whether notifications should be sent */\n    enabled: boolean,\n  /** Whether the setting was found on the requested context directly or inherited from a parent */\n    inherited?: boolean,\n\n},\n    \"weekly-report\"?: {\n  /** Whether notifications should be sent */\n    enabled: boolean,\n  /** Whether the setting was found on the requested context directly or inherited from a parent */\n    inherited?: boolean,\n\n},\n\n}",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/user/me/notification-settings/org/{orgId}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n    \"new-issues-remediations\"?: {\n  /** Whether notifications should be sent */\n    enabled: boolean,\n  /** The severity levels of issues to send notifications for (only applicable for `new-remediations-vulnerabilities` notificationType) */\n    issueSeverity: \"all\" | \"high\",\n  /** Filter the types of issue to include in notifications (only applicable for `new-remediations-vulnerabilities` notificationType) */\n    issueType: \"all\" | \"vuln\" | \"license\" | \"none\",\n\n},\n    \"project-imported\"?: {\n  /** Whether notifications should be sent */\n    enabled: boolean,\n\n},\n    \"test-limit\"?: {\n  /** Whether notifications should be sent */\n    enabled: boolean,\n\n},\n    \"weekly-report\"?: {\n  /** Whether notifications should be sent */\n    enabled: boolean,\n\n},\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".orgId": {
        "rendered": "\n/** Automatically added */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    \"new-issues-remediations\"?: {\n  /** Whether notifications should be sent */\n    enabled: boolean,\n  /** Whether the setting was found on the requested context directly or inherited from a parent */\n    inherited?: boolean,\n  /** The severity levels of issues to send notifications for (only applicable for `new-remediations-vulnerabilities` notificationType) */\n    issueSeverity: \"all\" | \"high\",\n  /** Filter the types of issue to include in notifications (only applicable for `new-remediations-vulnerabilities` notificationType) */\n    issueType: \"all\" | \"vuln\" | \"license\" | \"none\",\n\n},\n    \"project-imported\"?: {\n  /** Whether notifications should be sent */\n    enabled: boolean,\n  /** Whether the setting was found on the requested context directly or inherited from a parent */\n    inherited?: boolean,\n\n},\n    \"test-limit\"?: {\n  /** Whether notifications should be sent */\n    enabled: boolean,\n  /** Whether the setting was found on the requested context directly or inherited from a parent */\n    inherited?: boolean,\n\n},\n    \"weekly-report\"?: {\n  /** Whether notifications should be sent */\n    enabled: boolean,\n  /** Whether the setting was found on the requested context directly or inherited from a parent */\n    inherited?: boolean,\n\n},\n\n}",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/me/notification-settings/org/{orgId}/project/{projectId}": {
    "query": {},
    "body": {},
    "path": {
      ".orgId": {
        "rendered": "\n/** The organization ID. The `API_KEY` must have access to this organization. */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".projectId": {
        "rendered": "\n/** The project ID to return notification settings for. */\n projectId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    \"new-issues-remediations\"?: {\n  /** Whether notifications should be sent */\n    enabled: boolean,\n  /** Whether the setting was found on the requested context directly or inherited from a parent */\n    inherited?: boolean,\n  /** The severity levels of issues to send notifications for (only applicable for `new-remediations-vulnerabilities` notificationType) */\n    issueSeverity: \"all\" | \"high\",\n  /** Filter the types of issue to include in notifications (only applicable for `new-remediations-vulnerabilities` notificationType) */\n    issueType: \"all\" | \"vuln\" | \"license\" | \"none\",\n\n},\n    \"project-imported\"?: {\n  /** Whether notifications should be sent */\n    enabled: boolean,\n  /** Whether the setting was found on the requested context directly or inherited from a parent */\n    inherited?: boolean,\n\n},\n    \"test-limit\"?: {\n  /** Whether notifications should be sent */\n    enabled: boolean,\n  /** Whether the setting was found on the requested context directly or inherited from a parent */\n    inherited?: boolean,\n\n},\n    \"weekly-report\"?: {\n  /** Whether notifications should be sent */\n    enabled: boolean,\n  /** Whether the setting was found on the requested context directly or inherited from a parent */\n    inherited?: boolean,\n\n},\n\n}",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/user/me/notification-settings/org/{orgId}/project/{projectId}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n    \"new-issues-remediations\"?: {\n  /** Whether notifications should be sent */\n    enabled: boolean,\n  /** The severity levels of issues to send notifications for (only applicable for `new-remediations-vulnerabilities` notificationType) */\n    issueSeverity: \"all\" | \"high\",\n  /** Filter the types of issue to include in notifications (only applicable for `new-remediations-vulnerabilities` notificationType) */\n    issueType: \"all\" | \"vuln\" | \"license\" | \"none\",\n\n},\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".orgId": {
        "rendered": "\n/** Automatically added */\n orgId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".projectId": {
        "rendered": "\n/** Automatically added */\n projectId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/{userId}": {
    "query": {},
    "body": {},
    "path": {
      ".userId": {
        "rendered": "\n/** The users ID. The `API_KEY` must have admin access to at least one group or organization where the requested user is a member and must have the `api` entitlement on their preferred organization. */\n userId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** The email of the user. */\n    email?: string,\n  /** The id of the user. */\n    id?: string,\n  /** The name of the user. */\n    name?: string,\n  /** The username of the user. */\n    username?: string,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  }
}