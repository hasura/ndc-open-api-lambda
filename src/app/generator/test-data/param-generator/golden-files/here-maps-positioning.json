{
  "get__/health": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "ApiHealthStatus",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/locate": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Confidence level in percent for the accuracy/uncertainty in the location estimate response. If not specified, the default is 68 (this corresponds to a 68% probability that the true position is within the accuracy/uncertainty radius of the location estimate: the higher the number, the greater the confidence level).\n */\n confidence?: number, \n/** Acceptable fallback options for cell and WLAN positioning. Values `area` and `any` apply to cell based positioning, and value `singleWifi` applies to WLAN based positioning. Both cell and WLAN options may be specified in the same request. If both `area` and `any` are specified, then `area` is ignored.\n\nBy default, cell based positioning returns cell tower level location estimates only. If you allow a WGS-84 compliant geocoordinate location estimate based on LAC, RNC, TAC, NID, or RZ areas, use the `fallback=area` setting. If you use the `fallback=any` setting, the service uses all available cell fallback methods and therefore the location estimate in the response may be at the MNC, SID, or MCC level.\n\nFor privacy reasons, the precise positioning based on a single WLAN AP is not possible. You can use the `fallback=singleWifi` setting to allow less accurate positioning based on a single WLAN AP. In that case, the center location of the position estimate will be deviated and the reported accuracy radius will be larger.\n */\n fallback?: (\"any\" | \"area\" | \"singleWifi\")[], \n/** Comma-separated list of additional data fields that the service should include in the response if data is available. The query parameter supports the value `altitude`.\n */\n desired?: (\"altitude\")[], \n/** Comma-separated list of additional data fields that the service should include in the response. If the data is not available, the response contains an error message. The query parameter supports the value `altitude`.\n */\n required?: (\"altitude\")[], },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.confidence": {
        "rendered": "\n/** Confidence level in percent for the accuracy/uncertainty in the location estimate response. If not specified, the default is 68 (this corresponds to a 68% probability that the true position is within the accuracy/uncertainty radius of the location estimate: the higher the number, the greater the confidence level).\n */\n confidence?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fallback": {
        "rendered": "\n/** Acceptable fallback options for cell and WLAN positioning. Values `area` and `any` apply to cell based positioning, and value `singleWifi` applies to WLAN based positioning. Both cell and WLAN options may be specified in the same request. If both `area` and `any` are specified, then `area` is ignored.\n\nBy default, cell based positioning returns cell tower level location estimates only. If you allow a WGS-84 compliant geocoordinate location estimate based on LAC, RNC, TAC, NID, or RZ areas, use the `fallback=area` setting. If you use the `fallback=any` setting, the service uses all available cell fallback methods and therefore the location estimate in the response may be at the MNC, SID, or MCC level.\n\nFor privacy reasons, the precise positioning based on a single WLAN AP is not possible. You can use the `fallback=singleWifi` setting to allow less accurate positioning based on a single WLAN AP. In that case, the center location of the position estimate will be deviated and the reported accuracy radius will be larger.\n */\n fallback?: (\"any\" | \"area\" | \"singleWifi\")[],",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.fallback.__no_name": {
        "rendered": "\"any\" | \"area\" | \"singleWifi\"",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.desired": {
        "rendered": "\n/** Comma-separated list of additional data fields that the service should include in the response if data is available. The query parameter supports the value `altitude`.\n */\n desired?: (\"altitude\")[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.desired.__no_name": {
        "rendered": "\"altitude\"",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.required": {
        "rendered": "\n/** Comma-separated list of additional data fields that the service should include in the response. If the data is not available, the response contains an error message. The query parameter supports the value `altitude`.\n */\n required?: (\"altitude\")[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.required.__no_name": {
        "rendered": "\"altitude\"",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: Locate,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** Object containing information on a location where a measurement was taken. */\n    location: PositionLocate,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/version": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "ApiVersion",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  }
}