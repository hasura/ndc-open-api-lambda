{
  "get__/": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "Root",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/app": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "Integration",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/app-manifests/{code}/conversions": {
    "query": {},
    "body": {},
    "path": {
      ".code": {
        "rendered": " code: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Integration & {\n    client_id: string,\n    client_secret: string,\n    pem: string,\n    webhook_secret: string | null,\n    [key: string]: any,\n\n})",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/app/hook/config": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "WebhookConfig",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/app/hook/config": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */\n    content_type?: WebhookConfigContentType,\n  /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */\n    insecure_ssl?: WebhookConfigInsecureSsl,\n  /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). */\n    secret?: WebhookConfigSecret,\n  /** The URL to which the payloads will be delivered. */\n    url?: WebhookConfigUrl,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "WebhookConfig",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/app/hook/deliveries": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors. */\n cursor?: string,  redelivery?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cursor": {
        "rendered": "\n/** Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors. */\n cursor?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.redelivery": {
        "rendered": " redelivery?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(HookDeliveryItem)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/app/hook/deliveries/{delivery_id}": {
    "query": {},
    "body": {},
    "path": {
      ".deliveryId": {
        "rendered": " deliveryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "HookDelivery",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/app/hook/deliveries/{delivery_id}/attempts": {
    "query": {},
    "body": {},
    "path": {
      ".deliveryId": {
        "rendered": " deliveryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/app/installations": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, \n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string,  outdated?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.since": {
        "rendered": "\n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.outdated": {
        "rendered": " outdated?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Installation)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/app/installations/{installation_id}": {
    "query": {},
    "body": {},
    "path": {
      ".installationId": {
        "rendered": "\n/** The unique identifier of the installation. */\n installationId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/app/installations/{installation_id}": {
    "query": {},
    "body": {},
    "path": {
      ".installationId": {
        "rendered": " installationId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Installation",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/app/installations/{installation_id}/access_tokens": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /** The permissions granted to the user-to-server access token. */\n    permissions?: AppPermissions,\n  /** List of repository names that the token should have access to */\n    repositories?: (string)[],\n  /**\n   * List of repository IDs that the token should have access to\n   * @example [1]\n   */\n    repository_ids?: (number)[],\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".installationId": {
        "rendered": " installationId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "InstallationToken",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/app/installations/{installation_id}/suspended": {
    "query": {},
    "body": {},
    "path": {
      ".installationId": {
        "rendered": " installationId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/app/installations/{installation_id}/suspended": {
    "query": {},
    "body": {},
    "path": {
      ".installationId": {
        "rendered": " installationId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/applications/{client_id}/grant": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The OAuth access token used to authenticate to the GitHub API. */\n    access_token: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".clientId": {
        "rendered": "\n/** The client ID of the GitHub app. */\n clientId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/applications/{client_id}/token": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The OAuth access token used to authenticate to the GitHub API. */\n    access_token: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".clientId": {
        "rendered": " clientId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/applications/{client_id}/token": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The access_token of the OAuth application. */\n    access_token: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".clientId": {
        "rendered": " clientId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Authorization",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/applications/{client_id}/token": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The access_token of the OAuth application. */\n    access_token: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".clientId": {
        "rendered": " clientId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Authorization",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/applications/{client_id}/token/scoped": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * The access token used to authenticate to the GitHub API.\n   * @example \"e72e16c7e42f292c6912e7710c838347ae178b4a\"\n   */\n    access_token: string,\n  /** The permissions granted to the user-to-server access token. */\n    permissions?: AppPermissions,\n  /** The list of repository names to scope the user-to-server access token to. `repositories` may not be specified if `repository_ids` is specified. */\n    repositories?: (string)[],\n  /**\n   * The list of repository IDs to scope the user-to-server access token to. `repository_ids` may not be specified if `repositories` is specified.\n   * @example [1]\n   */\n    repository_ids?: (number)[],\n  /**\n   * The name of the user or organization to scope the user-to-server access token to. **Required** unless `target_id` is specified.\n   * @example \"octocat\"\n   */\n    target?: string,\n  /**\n   * The ID of the user or organization to scope the user-to-server access token to. **Required** unless `target` is specified.\n   * @example 1\n   */\n    target_id?: number,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".clientId": {
        "rendered": " clientId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Authorization",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/apps/{app_slug}": {
    "query": {},
    "body": {},
    "path": {
      ".appSlug": {
        "rendered": " appSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Integration",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/codes_of_conduct": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(CodeOfConduct)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/codes_of_conduct/{key}": {
    "query": {},
    "body": {},
    "path": {
      ".key": {
        "rendered": " key: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CodeOfConduct",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/emojis": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/enterprises/{enterprise}/dependabot/alerts": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A comma-separated list of states. If specified, only alerts with these states will be returned.\n\nCan be: `dismissed`, `fixed`, `open` */\n state?: string, \n/** A comma-separated list of severities. If specified, only alerts with these severities will be returned.\n\nCan be: `low`, `medium`, `high`, `critical` */\n severity?: string, \n/** A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.\n\nCan be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust` */\n ecosystem?: string, \n/** A comma-separated list of package names. If specified, only alerts for these packages will be returned. */\n package?: string, \n/** The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned. */\n scope?: \"development\" | \"runtime\", \n/** The property by which to sort the results.\n`created` means when the alert was created.\n`updated` means when the alert's state last changed. */\n sort?: \"created\" | \"updated\", \n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\", \n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor. */\n before?: string, \n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor. */\n after?: string, \n/** **Deprecated**. The number of results per page (max 100), starting from the first matching result.\nThis parameter must not be used in combination with `last`.\nInstead, use `per_page` in combination with `after` to fetch the first page of results. */\n first?: number, \n/** **Deprecated**. The number of results per page (max 100), starting from the last matching result.\nThis parameter must not be used in combination with `first`.\nInstead, use `per_page` in combination with `before` to fetch the last page of results. */\n last?: number, \n/** The number of results per page (max 100). */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.state": {
        "rendered": "\n/** A comma-separated list of states. If specified, only alerts with these states will be returned.\n\nCan be: `dismissed`, `fixed`, `open` */\n state?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.severity": {
        "rendered": "\n/** A comma-separated list of severities. If specified, only alerts with these severities will be returned.\n\nCan be: `low`, `medium`, `high`, `critical` */\n severity?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ecosystem": {
        "rendered": "\n/** A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.\n\nCan be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust` */\n ecosystem?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.package": {
        "rendered": "\n/** A comma-separated list of package names. If specified, only alerts for these packages will be returned. */\n package?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.scope": {
        "rendered": "\n/** The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned. */\n scope?: \"development\" | \"runtime\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.sort": {
        "rendered": "\n/** The property by which to sort the results.\n`created` means when the alert was created.\n`updated` means when the alert's state last changed. */\n sort?: \"created\" | \"updated\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.before": {
        "rendered": "\n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor. */\n before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.after": {
        "rendered": "\n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor. */\n after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.first": {
        "rendered": "\n/** **Deprecated**. The number of results per page (max 100), starting from the first matching result.\nThis parameter must not be used in combination with `last`.\nInstead, use `per_page` in combination with `after` to fetch the first page of results. */\n first?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.last": {
        "rendered": "\n/** **Deprecated**. The number of results per page (max 100), starting from the last matching result.\nThis parameter must not be used in combination with `first`.\nInstead, use `per_page` in combination with `before` to fetch the last page of results. */\n last?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".enterprise": {
        "rendered": "\n/** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n enterprise: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(DependabotAlertWithRepository)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/enterprises/{enterprise}/secret-scanning/alerts": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Set to `open` or `resolved` to only list secret scanning alerts in a specific state. */\n state?: \"open\" | \"resolved\", \n/** A comma-separated list of secret types to return. By default all secret types are returned.\nSee \"[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)\"\nfor a complete list of secret types. */\n secret_type?: string, \n/** A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`. */\n resolution?: string, \n/** The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved. */\n sort?: \"created\" | \"updated\", \n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor. */\n before?: string, \n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor. */\n after?: string, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.state": {
        "rendered": "\n/** Set to `open` or `resolved` to only list secret scanning alerts in a specific state. */\n state?: \"open\" | \"resolved\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.secret_type": {
        "rendered": "\n/** A comma-separated list of secret types to return. By default all secret types are returned.\nSee \"[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)\"\nfor a complete list of secret types. */\n secret_type?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.resolution": {
        "rendered": "\n/** A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`. */\n resolution?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved. */\n sort?: \"created\" | \"updated\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.before": {
        "rendered": "\n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor. */\n before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.after": {
        "rendered": "\n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor. */\n after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".enterprise": {
        "rendered": " enterprise: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(OrganizationSecretScanningAlert)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/events": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Event)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/feeds": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "Feed",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/gists": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.since": {
        "rendered": "\n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(BaseGist)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/gists": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * Description of the gist\n   * @example \"Example Ruby script\"\n   */\n    description?: string,\n  /**\n   * Names and content for the files that make up the gist\n   * @example {\"hello.rb\":{\"content\":\"puts \\\"Hello, World!\\\"\"}}\n   */\n    files: hasuraSdk.JSONValue,\n  /** Flag indicating whether the gist is public */\n    public?: (boolean | \"true\" | \"false\"),\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "GistSimple",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/gists/public": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.since": {
        "rendered": "\n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(BaseGist)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/gists/starred": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.since": {
        "rendered": "\n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(BaseGist)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/gists/{gist_id}": {
    "query": {},
    "body": {},
    "path": {
      ".gistId": {
        "rendered": "\n/** The unique identifier of the gist. */\n gistId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/gists/{gist_id}": {
    "query": {},
    "body": {},
    "path": {
      ".gistId": {
        "rendered": " gistId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GistSimple",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/gists/{gist_id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: ( | null) & ({\n  /**\n   * The description of the gist.\n   * @example \"Example Ruby script\"\n   */\n    description?: string,\n  /**\n   * The gist files to be updated, renamed, or deleted. Each `key` must match the current filename\n   * (including extension) of the targeted gist file. For example: `hello.py`.\n   * \n   * To delete a file, set the whole file to null. For example: `hello.py : null`.\n   * @example {\"hello.rb\":{\"content\":\"blah\",\"filename\":\"goodbye.rb\"}}\n   */\n    files?: hasuraSdk.JSONValue,\n\n}),",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".gistId": {
        "rendered": " gistId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GistSimple",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/gists/{gist_id}/comments": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".gistId": {
        "rendered": " gistId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(GistComment)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/gists/{gist_id}/comments": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * The comment text.\n   * @maxLength 65535\n   * @example \"Body of the attachment\"\n   */\n    body: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".gistId": {
        "rendered": " gistId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GistComment",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/gists/{gist_id}/comments/{comment_id}": {
    "query": {},
    "body": {},
    "path": {
      ".gistId": {
        "rendered": " gistId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": "\n/** The unique identifier of the comment. */\n commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/gists/{gist_id}/comments/{comment_id}": {
    "query": {},
    "body": {},
    "path": {
      ".gistId": {
        "rendered": " gistId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": " commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GistComment",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/gists/{gist_id}/comments/{comment_id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * The comment text.\n   * @maxLength 65535\n   * @example \"Body of the attachment\"\n   */\n    body: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".gistId": {
        "rendered": " gistId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": " commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GistComment",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/gists/{gist_id}/commits": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".gistId": {
        "rendered": " gistId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(GistCommit)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/gists/{gist_id}/forks": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".gistId": {
        "rendered": " gistId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(GistSimple)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/gists/{gist_id}/forks": {
    "query": {},
    "body": {},
    "path": {
      ".gistId": {
        "rendered": " gistId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "BaseGist",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/gists/{gist_id}/star": {
    "query": {},
    "body": {},
    "path": {
      ".gistId": {
        "rendered": " gistId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/gists/{gist_id}/star": {
    "query": {},
    "body": {},
    "path": {
      ".gistId": {
        "rendered": " gistId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/gists/{gist_id}/star": {
    "query": {},
    "body": {},
    "path": {
      ".gistId": {
        "rendered": " gistId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/gists/{gist_id}/{sha}": {
    "query": {},
    "body": {},
    "path": {
      ".gistId": {
        "rendered": " gistId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".sha": {
        "rendered": " sha: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GistSimple",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/gitignore/templates": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(string)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/gitignore/templates/{name}": {
    "query": {},
    "body": {},
    "path": {
      ".name": {
        "rendered": " name: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GitignoreTemplate",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/installation/repositories": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    repositories: (Repository)[],\n  /** @example \"selected\" */\n    repository_selection?: string,\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/installation/token": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/issues": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation. */\n filter?: \"assigned\" | \"created\" | \"mentioned\" | \"subscribed\" | \"repos\" | \"all\", \n/** Indicates the state of the issues to return. */\n state?: \"open\" | \"closed\" | \"all\", \n/** A list of comma separated label names. Example: `bug,ui,@high` */\n labels?: string, \n/** What to sort results by. */\n sort?: \"created\" | \"updated\" | \"comments\", \n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\", \n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string,  collab?: boolean,  orgs?: boolean,  owned?: boolean,  pulls?: boolean, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter": {
        "rendered": "\n/** Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation. */\n filter?: \"assigned\" | \"created\" | \"mentioned\" | \"subscribed\" | \"repos\" | \"all\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.state": {
        "rendered": "\n/** Indicates the state of the issues to return. */\n state?: \"open\" | \"closed\" | \"all\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.labels": {
        "rendered": "\n/** A list of comma separated label names. Example: `bug,ui,@high` */\n labels?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** What to sort results by. */\n sort?: \"created\" | \"updated\" | \"comments\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.since": {
        "rendered": "\n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.collab": {
        "rendered": " collab?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.orgs": {
        "rendered": " orgs?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.owned": {
        "rendered": " owned?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pulls": {
        "rendered": " pulls?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Issue)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/licenses": {
    "query": {
      ".query": {
        "rendered": " query: {  featured?: boolean, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.featured": {
        "rendered": " featured?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(LicenseSimple)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/licenses/{license}": {
    "query": {},
    "body": {},
    "path": {
      ".license": {
        "rendered": " license: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "License",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/markdown": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The repository context to use when creating references in `gfm` mode.  For example, setting `context` to `octo-org/octo-repo` will change the text `#42` into an HTML link to issue 42 in the `octo-org/octo-repo` repository. */\n    context?: string,\n  /**\n   * The rendering mode.\n   * @default \"markdown\"\n   * @example \"markdown\"\n   */\n    mode?: \"markdown\" | \"gfm\",\n  /** The Markdown text to render in HTML. */\n    text: string,\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "AlertCreatedAt",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/markdown/raw": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: AlertCreatedAt,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "AlertCreatedAt",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/marketplace_listing/accounts/{account_id}": {
    "query": {},
    "body": {},
    "path": {
      ".accountId": {
        "rendered": "\n/** account_id parameter */\n accountId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "MarketplacePurchase",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/marketplace_listing/plans": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(MarketplaceListingPlan)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/marketplace_listing/plans/{plan_id}/accounts": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to. */\n sort?: \"created\" | \"updated\", \n/** To return the oldest accounts first, set to `asc`. Ignored without the `sort` parameter. */\n direction?: \"asc\" | \"desc\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.sort": {
        "rendered": "\n/** The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to. */\n sort?: \"created\" | \"updated\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** To return the oldest accounts first, set to `asc`. Ignored without the `sort` parameter. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".planId": {
        "rendered": "\n/** The unique identifier of the plan. */\n planId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(MarketplacePurchase)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/marketplace_listing/stubbed/accounts/{account_id}": {
    "query": {},
    "body": {},
    "path": {
      ".accountId": {
        "rendered": " accountId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "MarketplacePurchase",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/marketplace_listing/stubbed/plans": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(MarketplaceListingPlan)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/marketplace_listing/stubbed/plans/{plan_id}/accounts": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to. */\n sort?: \"created\" | \"updated\", \n/** To return the oldest accounts first, set to `asc`. Ignored without the `sort` parameter. */\n direction?: \"asc\" | \"desc\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.sort": {
        "rendered": "\n/** The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to. */\n sort?: \"created\" | \"updated\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** To return the oldest accounts first, set to `asc`. Ignored without the `sort` parameter. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".planId": {
        "rendered": " planId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(MarketplacePurchase)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/meta": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "ApiOverview",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/networks/{owner}/{repo}/events": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": "\n/** The account owner of the repository. The name is not case sensitive. */\n owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": "\n/** The name of the repository. The name is not case sensitive. */\n repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Event)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/notifications": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** If `true`, show notifications marked as read. */\n all?: boolean, \n/** If `true`, only shows notifications in which the user is directly participating or mentioned. */\n participating?: boolean, \n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string, \n/** Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n before?: string, \n/** Page number of the results to fetch. */\n page?: number, \n/** The number of results per page (max 50). */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.all": {
        "rendered": "\n/** If `true`, show notifications marked as read. */\n all?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.participating": {
        "rendered": "\n/** If `true`, only shows notifications in which the user is directly participating or mentioned. */\n participating?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.since": {
        "rendered": "\n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.before": {
        "rendered": "\n/** Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 50). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Thread)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/notifications": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /**\n   * Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.\n   * @format date-time\n   */\n    last_read_at?: string,\n  /** Whether the notification has been read. */\n    read?: boolean,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    message?: string,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/notifications/threads/{thread_id}": {
    "query": {},
    "body": {},
    "path": {
      ".threadId": {
        "rendered": "\n/** The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user)). */\n threadId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Thread",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/notifications/threads/{thread_id}": {
    "query": {},
    "body": {},
    "path": {
      ".threadId": {
        "rendered": " threadId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/notifications/threads/{thread_id}/subscription": {
    "query": {},
    "body": {},
    "path": {
      ".threadId": {
        "rendered": " threadId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/notifications/threads/{thread_id}/subscription": {
    "query": {},
    "body": {},
    "path": {
      ".threadId": {
        "rendered": " threadId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ThreadSubscription",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/notifications/threads/{thread_id}/subscription": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /**\n   * Whether to block all notifications from a thread.\n   * @default false\n   */\n    ignored?: boolean,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".threadId": {
        "rendered": " threadId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ThreadSubscription",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/octocat": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The words to show in Octocat's speech bubble */\n s?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.s": {
        "rendered": "\n/** The words to show in Octocat's speech bubble */\n s?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "AlertCreatedAt",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/organizations": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** An organization ID. Only return organizations with an ID greater than this ID. */\n since?: number, \n/** The number of results per page (max 100). */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.since": {
        "rendered": "\n/** An organization ID. Only return organizations with an ID greater than this ID. */\n since?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(OrganizationSimple)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": "\n/** The organization name. The name is not case sensitive. */\n org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OrganizationFull",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/orgs/{org}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /**\n   * Whether GitHub Advanced Security is automatically enabled for new repositories.\n   * \n   * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"\n   * \n   * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.\n   */\n    advanced_security_enabled_for_new_repositories?: boolean,\n  /** Billing email address. This address is not publicized. */\n    billing_email?: string,\n  /** @example \"\"http://github.blog\"\" */\n    blog?: string,\n  /** The company name. */\n    company?: string,\n  /**\n   * Default permission level members have for organization repositories.\n   * @default \"read\"\n   */\n    default_repository_permission?: \"read\" | \"write\" | \"admin\" | \"none\",\n  /**\n   * Whether Dependabot alerts is automatically enabled for new repositories.\n   * \n   * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"\n   * \n   * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.\n   */\n    dependabot_alerts_enabled_for_new_repositories?: boolean,\n  /**\n   * Whether Dependabot security updates is automatically enabled for new repositories.\n   * \n   * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"\n   * \n   * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.\n   */\n    dependabot_security_updates_enabled_for_new_repositories?: boolean,\n  /**\n   * Whether dependency graph is automatically enabled for new repositories.\n   * \n   * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"\n   * \n   * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.\n   */\n    dependency_graph_enabled_for_new_repositories?: boolean,\n  /** The description of the company. */\n    description?: string,\n  /** The publicly visible email address. */\n    email?: string,\n  /** Whether an organization can use organization projects. */\n    has_organization_projects?: boolean,\n  /** Whether repositories that belong to the organization can use repository projects. */\n    has_repository_projects?: boolean,\n  /** The location. */\n    location?: string,\n  /**\n   * Specifies which types of repositories non-admin organization members can create. `private` is only available to repositories that are part of an organization on GitHub Enterprise Cloud. \n   * **Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.\n   */\n    members_allowed_repository_creation_type?: \"all\" | \"private\" | \"none\",\n  /** Whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see \"[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\" in the GitHub Help documentation. */\n    members_can_create_internal_repositories?: boolean,\n  /**\n   * Whether organization members can create GitHub Pages sites. Existing published sites will not be impacted.\n   * @default true\n   */\n    members_can_create_pages?: boolean,\n  /**\n   * Whether organization members can create private GitHub Pages sites. Existing published sites will not be impacted.\n   * @default true\n   */\n    members_can_create_private_pages?: boolean,\n  /** Whether organization members can create private repositories, which are visible to organization members with permission. For more information, see \"[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\" in the GitHub Help documentation. */\n    members_can_create_private_repositories?: boolean,\n  /**\n   * Whether organization members can create public GitHub Pages sites. Existing published sites will not be impacted.\n   * @default true\n   */\n    members_can_create_public_pages?: boolean,\n  /** Whether organization members can create public repositories, which are visible to anyone. For more information, see \"[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\" in the GitHub Help documentation. */\n    members_can_create_public_repositories?: boolean,\n  /**\n   * Whether of non-admin organization members can create repositories. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.\n   * @default true\n   */\n    members_can_create_repositories?: boolean,\n  /**\n   * Whether organization members can fork private organization repositories.\n   * @default false\n   */\n    members_can_fork_private_repositories?: boolean,\n  /** The shorthand name of the company. */\n    name?: string,\n  /**\n   * Whether secret scanning is automatically enabled for new repositories.\n   * \n   * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"\n   * \n   * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.\n   */\n    secret_scanning_enabled_for_new_repositories?: boolean,\n  /** If `secret_scanning_push_protection_custom_link_enabled` is true, the URL that will be displayed to contributors who are blocked from pushing a secret. */\n    secret_scanning_push_protection_custom_link?: string,\n  /** Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection. */\n    secret_scanning_push_protection_custom_link_enabled?: boolean,\n  /**\n   * Whether secret scanning push protection is automatically enabled for new repositories.\n   * \n   * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"\n   * \n   * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.\n   */\n    secret_scanning_push_protection_enabled_for_new_repositories?: boolean,\n  /** The Twitter username of the company. */\n    twitter_username?: string,\n  /**\n   * Whether contributors to organization repositories are required to sign off on commits they make through GitHub's web interface.\n   * @default false\n   */\n    web_commit_signoff_required?: boolean,\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OrganizationFull",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/actions/cache/usage": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ActionsCacheUsageOrgEnterprise",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/actions/cache/usage-by-repository": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    repository_cache_usages: (ActionsCacheUsageByRepository)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/actions/oidc/customization/sub": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OidcCustomSub",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/orgs/{org}/actions/oidc/customization/sub": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: OidcCustomSub,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/actions/permissions": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ActionsOrganizationPermissions",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/orgs/{org}/actions/permissions": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The permissions policy that controls the actions and reusable workflows that are allowed to run. */\n    allowed_actions?: AllowedActions,\n  /** The policy that controls the repositories in the organization that are allowed to run GitHub Actions. */\n    enabled_repositories: EnabledRepositories,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/actions/permissions/repositories": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    repositories: (Repository)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/orgs/{org}/actions/permissions/repositories": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** List of repository IDs to enable for GitHub Actions. */\n    selected_repository_ids: (number)[],\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/actions/permissions/repositories/{repository_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repositoryId": {
        "rendered": "\n/** The unique identifier of the repository. */\n repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/orgs/{org}/actions/permissions/repositories/{repository_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/actions/permissions/selected-actions": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "SelectedActions",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/orgs/{org}/actions/permissions/selected-actions": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: SelectedActions,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/actions/permissions/workflow": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ActionsGetDefaultWorkflowPermissions",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/orgs/{org}/actions/permissions/workflow": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: ActionsSetDefaultWorkflowPermissions,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/actions/required_workflows": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    required_workflows: (RequiredWorkflow)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/orgs/{org}/actions/required_workflows": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The ID of the repository that contains the workflow file. */\n    repository_id: string,\n  /**\n   * Enable the required workflow for all repositories or selected repositories in the organization.\n   * @default \"all\"\n   */\n    scope?: \"selected\" | \"all\",\n  /** A list of repository IDs where you want to enable the required workflow. You can only provide a list of repository ids when the `scope` is set to `selected`. */\n    selected_repository_ids?: (number)[],\n  /** Path of the workflow file to be configured as a required workflow. */\n    workflow_file_path: string,\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "RequiredWorkflow",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/actions/required_workflows/{required_workflow_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".requiredWorkflowId": {
        "rendered": "\n/** The unique identifier of the required workflow. */\n requiredWorkflowId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/actions/required_workflows/{required_workflow_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".requiredWorkflowId": {
        "rendered": " requiredWorkflowId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "RequiredWorkflow",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/orgs/{org}/actions/required_workflows/{required_workflow_id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The ID of the repository that contains the workflow file. */\n    repository_id?: string,\n  /**\n   * Enable the required workflow for all repositories or selected repositories in the organization.\n   * @default \"all\"\n   */\n    scope?: \"selected\" | \"all\",\n  /** A list of repository IDs where you want to enable the required workflow. A list of repository IDs where you want to enable the required workflow. You can only provide a list of repository ids when the `scope` is set to `selected`. */\n    selected_repository_ids?: (number)[],\n  /** Path of the workflow file to be configured as a required workflow. */\n    workflow_file_path?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".requiredWorkflowId": {
        "rendered": " requiredWorkflowId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "RequiredWorkflow",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".requiredWorkflowId": {
        "rendered": " requiredWorkflowId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    repositories: (Repository)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The IDs of the repositories for which the workflow should be required. */\n    selected_repository_ids: (number)[],\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".requiredWorkflowId": {
        "rendered": " requiredWorkflowId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories/{repository_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".requiredWorkflowId": {
        "rendered": " requiredWorkflowId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories/{repository_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".requiredWorkflowId": {
        "rendered": " requiredWorkflowId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/actions/runners": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    runners: (Runner)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/actions/runners/downloads": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(RunnerApplication)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/orgs/{org}/actions/runners/registration-token": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "AuthenticationToken",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/orgs/{org}/actions/runners/remove-token": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "AuthenticationToken",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/actions/runners/{runner_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runnerId": {
        "rendered": "\n/** Unique identifier of the self-hosted runner. */\n runnerId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/actions/runners/{runner_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runnerId": {
        "rendered": " runnerId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Runner",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/actions/runners/{runner_id}/labels": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runnerId": {
        "rendered": " runnerId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    labels: (RunnerLabel)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/actions/runners/{runner_id}/labels": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runnerId": {
        "rendered": " runnerId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    labels: (RunnerLabel)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/orgs/{org}/actions/runners/{runner_id}/labels": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * The names of the custom labels to add to the runner.\n   * @maxItems 100\n   * @minItems 1\n   */\n    labels: (string)[],\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runnerId": {
        "rendered": " runnerId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    labels: (RunnerLabel)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/orgs/{org}/actions/runners/{runner_id}/labels": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.\n   * @maxItems 100\n   * @minItems 0\n   */\n    labels: (string)[],\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runnerId": {
        "rendered": " runnerId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    labels: (RunnerLabel)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/actions/runners/{runner_id}/labels/{name}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runnerId": {
        "rendered": " runnerId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".name": {
        "rendered": "\n/** The name of a self-hosted runner's custom label. */\n name: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    labels: (RunnerLabel)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/actions/secrets": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    secrets: (OrganizationActionsSecret)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/actions/secrets/public-key": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ActionsPublicKey",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/actions/secrets/{secret_name}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": "\n/** The name of the secret. */\n secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/actions/secrets/{secret_name}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OrganizationActionsSecret",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/orgs/{org}/actions/secrets/{secret_name}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/reference/actions#get-an-organization-public-key) endpoint.\n   * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$\n   */\n    encrypted_value?: string,\n  /** ID of the key you used to encrypt the secret. */\n    key_id?: string,\n  /** An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints. */\n    selected_repository_ids?: (number)[],\n  /** Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret. */\n    visibility: \"all\" | \"private\" | \"selected\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/actions/secrets/{secret_name}/repositories": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Page number of the results to fetch. */\n page?: number, \n/** The number of results per page (max 100). */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    repositories: (MinimalRepository)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/orgs/{org}/actions/secrets/{secret_name}/repositories": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Add selected repository to an organization secret](https://docs.github.com/rest/actions/secrets#add-selected-repository-to-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints. */\n    selected_repository_ids: (number)[],\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/actions/variables": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 30). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 30). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    total_count: number,\n    variables: (OrganizationActionsVariable)[],\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/orgs/{org}/actions/variables": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The name of the variable. */\n    name: string,\n  /** An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`. */\n    selected_repository_ids?: (number)[],\n  /** The value of the variable. */\n    value: string,\n  /** The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable. */\n    visibility: \"all\" | \"private\" | \"selected\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/actions/variables/{name}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".name": {
        "rendered": "\n/** The name of the variable. */\n name: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/actions/variables/{name}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".name": {
        "rendered": " name: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OrganizationActionsVariable",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/orgs/{org}/actions/variables/{name}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The name of the variable. */\n    name?: string,\n  /** An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`. */\n    selected_repository_ids?: (number)[],\n  /** The value of the variable. */\n    value?: string,\n  /** The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable. */\n    visibility?: \"all\" | \"private\" | \"selected\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".name": {
        "rendered": " name: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/actions/variables/{name}/repositories": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Page number of the results to fetch. */\n page?: number, \n/** The number of results per page (max 100). */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".name": {
        "rendered": " name: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    repositories: (MinimalRepository)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/orgs/{org}/actions/variables/{name}/repositories": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The IDs of the repositories that can access the organization variable. */\n    selected_repository_ids: (number)[],\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".name": {
        "rendered": " name: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/actions/variables/{name}/repositories/{repository_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".name": {
        "rendered": " name: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/orgs/{org}/actions/variables/{name}/repositories/{repository_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".name": {
        "rendered": " name: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/blocks": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(SimpleUser)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/blocks/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": "\n/** The handle for the GitHub user account. */\n username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/blocks/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/orgs/{org}/blocks/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/code-scanning/alerts": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both. */\n tool_name?: CodeScanningAnalysisToolName, \n/** The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both. */\n tool_guid?: CodeScanningAnalysisToolGuid, \n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor. */\n before?: string, \n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor. */\n after?: string, \n/** Page number of the results to fetch. */\n page?: number, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\", \n/** If specified, only code scanning alerts with this state will be returned. */\n state?: CodeScanningAlertState, \n/** The property by which to sort the results. */\n sort?: \"created\" | \"updated\", \n/** If specified, only code scanning alerts with this severity will be returned. */\n severity?: CodeScanningAlertSeverity, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.tool_name": {
        "rendered": "\n/** The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both. */\n tool_name?: CodeScanningAnalysisToolName,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.tool_guid": {
        "rendered": "\n/** The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both. */\n tool_guid?: CodeScanningAnalysisToolGuid,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.before": {
        "rendered": "\n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor. */\n before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.after": {
        "rendered": "\n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor. */\n after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.state": {
        "rendered": "\n/** If specified, only code scanning alerts with this state will be returned. */\n state?: CodeScanningAlertState,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.sort": {
        "rendered": "\n/** The property by which to sort the results. */\n sort?: \"created\" | \"updated\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.severity": {
        "rendered": "\n/** If specified, only code scanning alerts with this severity will be returned. */\n severity?: CodeScanningAlertSeverity,",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(CodeScanningOrganizationAlertItems)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/codespaces": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    codespaces: (Codespace)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/orgs/{org}/codespaces/billing": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * The usernames of the organization members who should have access to codespaces in the organization. Required when `visibility` is `selected_members`. The provided list of usernames will replace any existing value.\n   * @maxItems 100\n   */\n    selected_usernames?: (string)[],\n  /** Which users can access codespaces in the organization. `disabled` means that no users can access codespaces in the organization. */\n    visibility: \"disabled\" | \"selected_members\" | \"all_members\" | \"all_members_and_outside_collaborators\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/codespaces/billing/selected_users": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * The usernames of the organization members whose codespaces should not be billed to the organization.\n   * @maxItems 100\n   */\n    selected_usernames: (string)[],\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/orgs/{org}/codespaces/billing/selected_users": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * The usernames of the organization members whose codespaces be billed to the organization.\n   * @maxItems 100\n   */\n    selected_usernames: (string)[],\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/codespaces/secrets": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    secrets: (CodespacesOrgSecret)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/codespaces/secrets/public-key": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CodespacesPublicKey",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/codespaces/secrets/{secret_name}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/codespaces/secrets/{secret_name}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CodespacesOrgSecret",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/orgs/{org}/codespaces/secrets/{secret_name}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * The value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/reference/codespaces#get-an-organization-public-key) endpoint.\n   * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$\n   */\n    encrypted_value?: string,\n  /** The ID of the key you used to encrypt the secret. */\n    key_id?: string,\n  /** An array of repository IDs that can access the organization secret. You can only provide a list of repository IDs when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/codespaces#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/codespaces#remove-selected-repository-from-an-organization-secret) endpoints. */\n    selected_repository_ids?: (number)[],\n  /** Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret. */\n    visibility: \"all\" | \"private\" | \"selected\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/codespaces/secrets/{secret_name}/repositories": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Page number of the results to fetch. */\n page?: number, \n/** The number of results per page (max 100). */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    repositories: (MinimalRepository)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/orgs/{org}/codespaces/secrets/{secret_name}/repositories": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/codespaces#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/codespaces#remove-selected-repository-from-an-organization-secret) endpoints. */\n    selected_repository_ids: (number)[],\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/dependabot/alerts": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A comma-separated list of states. If specified, only alerts with these states will be returned.\n\nCan be: `dismissed`, `fixed`, `open` */\n state?: string, \n/** A comma-separated list of severities. If specified, only alerts with these severities will be returned.\n\nCan be: `low`, `medium`, `high`, `critical` */\n severity?: string, \n/** A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.\n\nCan be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust` */\n ecosystem?: string, \n/** A comma-separated list of package names. If specified, only alerts for these packages will be returned. */\n package?: string, \n/** The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned. */\n scope?: \"development\" | \"runtime\", \n/** The property by which to sort the results.\n`created` means when the alert was created.\n`updated` means when the alert's state last changed. */\n sort?: \"created\" | \"updated\", \n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\", \n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor. */\n before?: string, \n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor. */\n after?: string, \n/** **Deprecated**. The number of results per page (max 100), starting from the first matching result.\nThis parameter must not be used in combination with `last`.\nInstead, use `per_page` in combination with `after` to fetch the first page of results. */\n first?: number, \n/** **Deprecated**. The number of results per page (max 100), starting from the last matching result.\nThis parameter must not be used in combination with `first`.\nInstead, use `per_page` in combination with `before` to fetch the last page of results. */\n last?: number, \n/** The number of results per page (max 100). */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.state": {
        "rendered": "\n/** A comma-separated list of states. If specified, only alerts with these states will be returned.\n\nCan be: `dismissed`, `fixed`, `open` */\n state?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.severity": {
        "rendered": "\n/** A comma-separated list of severities. If specified, only alerts with these severities will be returned.\n\nCan be: `low`, `medium`, `high`, `critical` */\n severity?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ecosystem": {
        "rendered": "\n/** A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.\n\nCan be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust` */\n ecosystem?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.package": {
        "rendered": "\n/** A comma-separated list of package names. If specified, only alerts for these packages will be returned. */\n package?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.scope": {
        "rendered": "\n/** The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned. */\n scope?: \"development\" | \"runtime\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.sort": {
        "rendered": "\n/** The property by which to sort the results.\n`created` means when the alert was created.\n`updated` means when the alert's state last changed. */\n sort?: \"created\" | \"updated\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.before": {
        "rendered": "\n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor. */\n before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.after": {
        "rendered": "\n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor. */\n after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.first": {
        "rendered": "\n/** **Deprecated**. The number of results per page (max 100), starting from the first matching result.\nThis parameter must not be used in combination with `last`.\nInstead, use `per_page` in combination with `after` to fetch the first page of results. */\n first?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.last": {
        "rendered": "\n/** **Deprecated**. The number of results per page (max 100), starting from the last matching result.\nThis parameter must not be used in combination with `first`.\nInstead, use `per_page` in combination with `before` to fetch the last page of results. */\n last?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(DependabotAlertWithRepository)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/dependabot/secrets": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    secrets: (OrganizationDependabotSecret)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/dependabot/secrets/public-key": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "DependabotPublicKey",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/dependabot/secrets/{secret_name}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/dependabot/secrets/{secret_name}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OrganizationDependabotSecret",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/orgs/{org}/dependabot/secrets/{secret_name}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/reference/dependabot#get-an-organization-public-key) endpoint.\n   * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$\n   */\n    encrypted_value?: string,\n  /** ID of the key you used to encrypt the secret. */\n    key_id?: string,\n  /** An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/reference/dependabot#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/dependabot#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/dependabot#remove-selected-repository-from-an-organization-secret) endpoints. */\n    selected_repository_ids?: (string)[],\n  /** Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret. */\n    visibility: \"all\" | \"private\" | \"selected\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/dependabot/secrets/{secret_name}/repositories": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Page number of the results to fetch. */\n page?: number, \n/** The number of results per page (max 100). */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    repositories: (MinimalRepository)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/orgs/{org}/dependabot/secrets/{secret_name}/repositories": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/dependabot#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/dependabot#remove-selected-repository-from-an-organization-secret) endpoints. */\n    selected_repository_ids: (number)[],\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/events": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Event)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/failed_invitations": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(OrganizationInvitation)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/hooks": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(OrgHook)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/orgs/{org}/hooks": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.\n   * @default true\n   */\n    active?: boolean,\n  /** Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/orgs#create-hook-config-params). */\n    config: {\n  /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */\n    content_type?: WebhookConfigContentType,\n  /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */\n    insecure_ssl?: WebhookConfigInsecureSsl,\n  /** @example \"\"password\"\" */\n    password?: string,\n  /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). */\n    secret?: WebhookConfigSecret,\n  /** The URL to which the payloads will be delivered. */\n    url: WebhookConfigUrl,\n  /** @example \"\"kdaigle\"\" */\n    username?: string,\n\n},\n  /**\n   * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. Set to `[\"*\"]` to receive all possible events.\n   * @default [\"push\"]\n   */\n    events?: (string)[],\n  /** Must be passed as \"web\". */\n    name: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OrgHook",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/hooks/{hook_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".hookId": {
        "rendered": "\n/** The unique identifier of the hook. */\n hookId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/hooks/{hook_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".hookId": {
        "rendered": " hookId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OrgHook",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/orgs/{org}/hooks/{hook_id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /**\n   * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.\n   * @default true\n   */\n    active?: boolean,\n  /** Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/orgs#update-hook-config-params). */\n    config?: {\n  /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */\n    content_type?: WebhookConfigContentType,\n  /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */\n    insecure_ssl?: WebhookConfigInsecureSsl,\n  /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). */\n    secret?: WebhookConfigSecret,\n  /** The URL to which the payloads will be delivered. */\n    url: WebhookConfigUrl,\n\n},\n  /**\n   * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.\n   * @default [\"push\"]\n   */\n    events?: (string)[],\n  /** @example \"\"web\"\" */\n    name?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".hookId": {
        "rendered": " hookId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OrgHook",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/hooks/{hook_id}/config": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".hookId": {
        "rendered": " hookId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "WebhookConfig",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/orgs/{org}/hooks/{hook_id}/config": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */\n    content_type?: WebhookConfigContentType,\n  /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */\n    insecure_ssl?: WebhookConfigInsecureSsl,\n  /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). */\n    secret?: WebhookConfigSecret,\n  /** The URL to which the payloads will be delivered. */\n    url?: WebhookConfigUrl,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".hookId": {
        "rendered": " hookId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "WebhookConfig",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/hooks/{hook_id}/deliveries": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors. */\n cursor?: string,  redelivery?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cursor": {
        "rendered": "\n/** Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors. */\n cursor?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.redelivery": {
        "rendered": " redelivery?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".hookId": {
        "rendered": " hookId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(HookDeliveryItem)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".hookId": {
        "rendered": " hookId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".deliveryId": {
        "rendered": " deliveryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "HookDelivery",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".hookId": {
        "rendered": " hookId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".deliveryId": {
        "rendered": " deliveryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/orgs/{org}/hooks/{hook_id}/pings": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".hookId": {
        "rendered": " hookId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/installation": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Installation",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/installations": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    installations: (Installation)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/interaction-limits": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/interaction-limits": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(InteractionLimitResponse | hasuraSdk.JSONValue)",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/orgs/{org}/interaction-limits": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: InteractionLimit,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "InteractionLimitResponse",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/invitations": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, \n/** Filter invitations by their member role. */\n role?: \"all\" | \"admin\" | \"direct_member\" | \"billing_manager\" | \"hiring_manager\", \n/** Filter invitations by their invitation source. */\n invitation_source?: \"all\" | \"member\" | \"scim\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.role": {
        "rendered": "\n/** Filter invitations by their member role. */\n role?: \"all\" | \"admin\" | \"direct_member\" | \"billing_manager\" | \"hiring_manager\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.invitation_source": {
        "rendered": "\n/** Filter invitations by their invitation source. */\n invitation_source?: \"all\" | \"member\" | \"scim\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(OrganizationInvitation)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/orgs/{org}/invitations": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /** **Required unless you provide `invitee_id`**. Email address of the person you are inviting, which can be an existing GitHub user. */\n    email?: string,\n  /** **Required unless you provide `email`**. GitHub user ID for the person you are inviting. */\n    invitee_id?: number,\n  /**\n   * The role for the new member. \n   *  * `admin` - Organization owners with full administrative rights to the organization and complete access to all repositories and teams.  \n   *  * `direct_member` - Non-owner organization members with ability to see other members and join teams by invitation.  \n   *  * `billing_manager` - Non-owner organization members with ability to manage the billing settings of your organization.\n   * @default \"direct_member\"\n   */\n    role?: \"admin\" | \"direct_member\" | \"billing_manager\",\n  /** Specify IDs for the teams you want to invite new members to. */\n    team_ids?: (number)[],\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OrganizationInvitation",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/invitations/{invitation_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".invitationId": {
        "rendered": "\n/** The unique identifier of the invitation. */\n invitationId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/invitations/{invitation_id}/teams": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".invitationId": {
        "rendered": " invitationId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Team)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/issues": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation. */\n filter?: \"assigned\" | \"created\" | \"mentioned\" | \"subscribed\" | \"repos\" | \"all\", \n/** Indicates the state of the issues to return. */\n state?: \"open\" | \"closed\" | \"all\", \n/** A list of comma separated label names. Example: `bug,ui,@high` */\n labels?: string, \n/** What to sort results by. */\n sort?: \"created\" | \"updated\" | \"comments\", \n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\", \n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter": {
        "rendered": "\n/** Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation. */\n filter?: \"assigned\" | \"created\" | \"mentioned\" | \"subscribed\" | \"repos\" | \"all\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.state": {
        "rendered": "\n/** Indicates the state of the issues to return. */\n state?: \"open\" | \"closed\" | \"all\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.labels": {
        "rendered": "\n/** A list of comma separated label names. Example: `bug,ui,@high` */\n labels?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** What to sort results by. */\n sort?: \"created\" | \"updated\" | \"comments\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.since": {
        "rendered": "\n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Issue)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/members": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Filter members returned in the list. `2fa_disabled` means that only members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned. This options is only available for organization owners. */\n filter?: \"2fa_disabled\" | \"all\", \n/** Filter members returned by their role. */\n role?: \"all\" | \"admin\" | \"member\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter": {
        "rendered": "\n/** Filter members returned in the list. `2fa_disabled` means that only members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned. This options is only available for organization owners. */\n filter?: \"2fa_disabled\" | \"all\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.role": {
        "rendered": "\n/** Filter members returned by their role. */\n role?: \"all\" | \"admin\" | \"member\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(SimpleUser)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/members/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/members/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/members/{username}/codespaces": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    codespaces: (Codespace)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/members/{username}/codespaces/{codespace_name}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".codespaceName": {
        "rendered": "\n/** The name of the codespace. */\n codespaceName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/orgs/{org}/members/{username}/codespaces/{codespace_name}/stop": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".codespaceName": {
        "rendered": " codespaceName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Codespace",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/memberships/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/memberships/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OrgMembership",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/orgs/{org}/memberships/{username}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /**\n   * The role to give the user in the organization. Can be one of:  \n   *  * `admin` - The user will become an owner of the organization.  \n   *  * `member` - The user will become a non-owner member of the organization.\n   * @default \"member\"\n   */\n    role?: \"admin\" | \"member\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OrgMembership",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/migrations": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, \n/** Exclude attributes from the API response to improve performance */\n exclude?: (\"repositories\")[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.exclude": {
        "rendered": "\n/** Exclude attributes from the API response to improve performance */\n exclude?: (\"repositories\")[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.exclude.__no_name": {
        "rendered": "\"repositories\"",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Migration)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/orgs/{org}/migrations": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Exclude related items from being returned in the response in order to improve performance of the request. The array can include any of: `\"repositories\"`. */\n    exclude?: (\"repositories\")[],\n  /**\n   * Indicates whether attachments should be excluded from the migration (to reduce migration archive file size).\n   * @default false\n   * @example true\n   */\n    exclude_attachments?: boolean,\n  /**\n   * Indicates whether the repository git data should be excluded from the migration.\n   * @default false\n   */\n    exclude_git_data?: boolean,\n  /**\n   * Indicates whether metadata should be excluded and only git source should be included for the migration.\n   * @default false\n   */\n    exclude_metadata?: boolean,\n  /**\n   * Indicates whether projects owned by the organization or users should be excluded. from the migration.\n   * @default false\n   * @example true\n   */\n    exclude_owner_projects?: boolean,\n  /**\n   * Indicates whether releases should be excluded from the migration (to reduce migration archive file size).\n   * @default false\n   * @example true\n   */\n    exclude_releases?: boolean,\n  /**\n   * Indicates whether repositories should be locked (to prevent manipulation) while migrating data.\n   * @default false\n   * @example true\n   */\n    lock_repositories?: boolean,\n  /**\n   * Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).\n   * @default false\n   * @example true\n   */\n    org_metadata_only?: boolean,\n  /** A list of arrays indicating which repositories should be migrated. */\n    repositories: (string)[],\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Migration",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/migrations/{migration_id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Exclude attributes from the API response to improve performance */\n exclude?: (\"repositories\")[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.exclude": {
        "rendered": "\n/** Exclude attributes from the API response to improve performance */\n exclude?: (\"repositories\")[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.exclude.__no_name": {
        "rendered": "\"repositories\"",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".migrationId": {
        "rendered": "\n/** The unique identifier of the migration. */\n migrationId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Migration",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/migrations/{migration_id}/archive": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".migrationId": {
        "rendered": " migrationId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/migrations/{migration_id}/archive": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".migrationId": {
        "rendered": " migrationId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".migrationId": {
        "rendered": " migrationId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repoName": {
        "rendered": "\n/** repo_name parameter */\n repoName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/migrations/{migration_id}/repositories": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".migrationId": {
        "rendered": " migrationId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(MinimalRepository)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/outside_collaborators": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Filter the list of outside collaborators. `2fa_disabled` means that only outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned. */\n filter?: \"2fa_disabled\" | \"all\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter": {
        "rendered": "\n/** Filter the list of outside collaborators. `2fa_disabled` means that only outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned. */\n filter?: \"2fa_disabled\" | \"all\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(SimpleUser)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/outside_collaborators/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/orgs/{org}/outside_collaborators/{username}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /**\n   * When set to `true`, the request will be performed asynchronously. Returns a 202 status code when the job is successfully queued.\n   * @default false\n   */\n    async?: boolean,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/packages": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */\n package_type: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\", \n/** The selected visibility of the packages.  This parameter is optional and only filters an existing result set.\n\nThe `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.\nFor the list of GitHub Packages registries that support granular permissions, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\" */\n visibility?: \"public\" | \"private\" | \"internal\", \n/** Page number of the results to fetch. */\n page?: number, \n/** The number of results per page (max 100). */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.package_type": {
        "rendered": "\n/** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */\n package_type: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.visibility": {
        "rendered": "\n/** The selected visibility of the packages.  This parameter is optional and only filters an existing result set.\n\nThe `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.\nFor the list of GitHub Packages registries that support granular permissions, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\" */\n visibility?: \"public\" | \"private\" | \"internal\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Package)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/packages/{package_type}/{package_name}": {
    "query": {},
    "body": {},
    "path": {
      ".packageType": {
        "rendered": "\n/** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */\n packageType: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".packageName": {
        "rendered": "\n/** The name of the package. */\n packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/packages/{package_type}/{package_name}": {
    "query": {},
    "body": {},
    "path": {
      ".packageType": {
        "rendered": " packageType: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".packageName": {
        "rendered": " packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Package",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/orgs/{org}/packages/{package_type}/{package_name}/restore": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** package token */\n token?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** package token */\n token?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".packageType": {
        "rendered": " packageType: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".packageName": {
        "rendered": " packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/packages/{package_type}/{package_name}/versions": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Page number of the results to fetch. */\n page?: number, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** The state of the package, either active or deleted. */\n state?: \"active\" | \"deleted\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.state": {
        "rendered": "\n/** The state of the package, either active or deleted. */\n state?: \"active\" | \"deleted\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".packageType": {
        "rendered": " packageType: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".packageName": {
        "rendered": " packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(PackageVersion)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}": {
    "query": {},
    "body": {},
    "path": {
      ".packageType": {
        "rendered": " packageType: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".packageName": {
        "rendered": " packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".packageVersionId": {
        "rendered": "\n/** Unique identifier of the package version. */\n packageVersionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}": {
    "query": {},
    "body": {},
    "path": {
      ".packageType": {
        "rendered": " packageType: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".packageName": {
        "rendered": " packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".packageVersionId": {
        "rendered": " packageVersionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PackageVersion",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore": {
    "query": {},
    "body": {},
    "path": {
      ".packageType": {
        "rendered": " packageType: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".packageName": {
        "rendered": " packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".packageVersionId": {
        "rendered": " packageVersionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/projects": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Indicates the state of the projects to return. */\n state?: \"open\" | \"closed\" | \"all\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.state": {
        "rendered": "\n/** Indicates the state of the projects to return. */\n state?: \"open\" | \"closed\" | \"all\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Project)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/orgs/{org}/projects": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The description of the project. */\n    body?: string,\n  /** The name of the project. */\n    name: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Project",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/public_members": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(SimpleUser)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/public_members/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/public_members/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/orgs/{org}/public_members/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/repos": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies the types of repositories you want returned. */\n type?: \"all\" | \"public\" | \"private\" | \"forks\" | \"sources\" | \"member\", \n/** The property to sort the results by. */\n sort?: \"created\" | \"updated\" | \"pushed\" | \"full_name\", \n/** The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`. */\n direction?: \"asc\" | \"desc\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.type": {
        "rendered": "\n/** Specifies the types of repositories you want returned. */\n type?: \"all\" | \"public\" | \"private\" | \"forks\" | \"sources\" | \"member\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.sort": {
        "rendered": "\n/** The property to sort the results by. */\n sort?: \"created\" | \"updated\" | \"pushed\" | \"full_name\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(MinimalRepository)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/orgs/{org}/repos": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.\n   * @default false\n   */\n    allow_auto_merge?: boolean,\n  /**\n   * Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.\n   * @default true\n   */\n    allow_merge_commit?: boolean,\n  /**\n   * Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.\n   * @default true\n   */\n    allow_rebase_merge?: boolean,\n  /**\n   * Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.\n   * @default true\n   */\n    allow_squash_merge?: boolean,\n  /**\n   * Pass `true` to create an initial commit with empty README.\n   * @default false\n   */\n    auto_init?: boolean,\n  /**\n   * Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion. **The authenticated user must be an organization owner to set this property to `true`.**\n   * @default false\n   */\n    delete_branch_on_merge?: boolean,\n  /** A short description of the repository. */\n    description?: string,\n  /** Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, \"Haskell\". */\n    gitignore_template?: string,\n  /**\n   * Whether downloads are enabled.\n   * @default true\n   * @example true\n   */\n    has_downloads?: boolean,\n  /**\n   * Either `true` to enable issues for this repository or `false` to disable them.\n   * @default true\n   */\n    has_issues?: boolean,\n  /**\n   * Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.\n   * @default true\n   */\n    has_projects?: boolean,\n  /**\n   * Either `true` to enable the wiki for this repository or `false` to disable it.\n   * @default true\n   */\n    has_wiki?: boolean,\n  /** A URL with more information about the repository. */\n    homepage?: string,\n  /**\n   * Either `true` to make this repo available as a template repository or `false` to prevent it.\n   * @default false\n   */\n    is_template?: boolean,\n  /** Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, \"mit\" or \"mpl-2.0\". */\n    license_template?: string,\n  /**\n   * The default value for a merge commit message.\n   * \n   * - `PR_TITLE` - default to the pull request's title.\n   * - `PR_BODY` - default to the pull request's body.\n   * - `BLANK` - default to a blank commit message.\n   */\n    merge_commit_message?: \"PR_BODY\" | \"PR_TITLE\" | \"BLANK\",\n  /**\n   * The default value for a merge commit title.\n   * \n   * - `PR_TITLE` - default to the pull request's title.\n   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).\n   */\n    merge_commit_title?: \"PR_TITLE\" | \"MERGE_MESSAGE\",\n  /** The name of the repository. */\n    name: string,\n  /**\n   * Whether the repository is private.\n   * @default false\n   */\n    private?: boolean,\n  /**\n   * The default value for a squash merge commit message:\n   * \n   * - `PR_BODY` - default to the pull request's body.\n   * - `COMMIT_MESSAGES` - default to the branch's commit messages.\n   * - `BLANK` - default to a blank commit message.\n   */\n    squash_merge_commit_message?: \"PR_BODY\" | \"COMMIT_MESSAGES\" | \"BLANK\",\n  /**\n   * The default value for a squash merge commit title:\n   * \n   * - `PR_TITLE` - default to the pull request's title.\n   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).\n   */\n    squash_merge_commit_title?: \"PR_TITLE\" | \"COMMIT_OR_PR_TITLE\",\n  /** The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization. */\n    team_id?: number,\n  /**\n   * Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property has been deprecated. Please use `squash_merge_commit_title` instead.\n   * @deprecated\n   * @default false\n   */\n    use_squash_pr_title_as_default?: boolean,\n  /** The visibility of the repository. */\n    visibility?: \"public\" | \"private\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Repository",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/secret-scanning/alerts": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Set to `open` or `resolved` to only list secret scanning alerts in a specific state. */\n state?: \"open\" | \"resolved\", \n/** A comma-separated list of secret types to return. By default all secret types are returned.\nSee \"[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)\"\nfor a complete list of secret types. */\n secret_type?: string, \n/** A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`. */\n resolution?: string, \n/** The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved. */\n sort?: \"created\" | \"updated\", \n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\", \n/** Page number of the results to fetch. */\n page?: number, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty \"before\" query string. */\n before?: string, \n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty \"after\" query string. */\n after?: string, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.state": {
        "rendered": "\n/** Set to `open` or `resolved` to only list secret scanning alerts in a specific state. */\n state?: \"open\" | \"resolved\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.secret_type": {
        "rendered": "\n/** A comma-separated list of secret types to return. By default all secret types are returned.\nSee \"[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)\"\nfor a complete list of secret types. */\n secret_type?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.resolution": {
        "rendered": "\n/** A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`. */\n resolution?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved. */\n sort?: \"created\" | \"updated\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.before": {
        "rendered": "\n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty \"before\" query string. */\n before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.after": {
        "rendered": "\n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty \"after\" query string. */\n after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(OrganizationSecretScanningAlert)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/security-managers": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(TeamSimple)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/security-managers/teams/{team_slug}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": "\n/** The slug of the team name. */\n teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/orgs/{org}/security-managers/teams/{team_slug}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/settings/billing/actions": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ActionsBillingUsage",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/settings/billing/packages": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PackagesBillingUsage",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/settings/billing/shared-storage": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CombinedBillingUsage",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/teams": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Team)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/orgs/{org}/teams": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The description of the team. */\n    description?: string,\n  /** List GitHub IDs for organization members who will become team maintainers. */\n    maintainers?: (string)[],\n  /** The name of the team. */\n    name: string,\n  /** The ID of a team to set as the parent team. */\n    parent_team_id?: number,\n  /**\n   * **Deprecated**. The permission that new repositories will be added to the team with when none is specified.\n   * @default \"pull\"\n   */\n    permission?: \"pull\" | \"push\",\n  /**\n   * The level of privacy this team should have. The options are:  \n   * **For a non-nested team:**  \n   *  * `secret` - only visible to organization owners and members of this team.  \n   *  * `closed` - visible to all members of this organization.  \n   * Default: `secret`  \n   * **For a parent or child team:**  \n   *  * `closed` - visible to all members of this organization.  \n   * Default for child team: `closed`\n   */\n    privacy?: \"secret\" | \"closed\",\n  /** The full name (e.g., \"organization-name/repository-name\") of repositories to add the team to. */\n    repo_names?: (string)[],\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamFull",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/teams/{team_slug}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/teams/{team_slug}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamFull",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/orgs/{org}/teams/{team_slug}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /** The description of the team. */\n    description?: string,\n  /** The name of the team. */\n    name?: string,\n  /** The ID of a team to set as the parent team. */\n    parent_team_id?: number | null,\n  /**\n   * **Deprecated**. The permission that new repositories will be added to the team with when none is specified.\n   * @default \"pull\"\n   */\n    permission?: \"pull\" | \"push\" | \"admin\",\n  /**\n   * The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:  \n   * **For a non-nested team:**  \n   *  * `secret` - only visible to organization owners and members of this team.  \n   *  * `closed` - visible to all members of this organization.  \n   * **For a parent or child team:**  \n   *  * `closed` - visible to all members of this organization.\n   */\n    privacy?: \"secret\" | \"closed\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamFull",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/teams/{team_slug}/discussions": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, \n/** Pinned discussions only filter */\n pinned?: string, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pinned": {
        "rendered": "\n/** Pinned discussions only filter */\n pinned?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(TeamDiscussion)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/orgs/{org}/teams/{team_slug}/discussions": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The discussion post's body text. */\n    body: string,\n  /**\n   * Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.\n   * @default false\n   */\n    private?: boolean,\n  /** The discussion post's title. */\n    title: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamDiscussion",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": "\n/** The number that identifies the discussion. */\n discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamDiscussion",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /** The discussion post's body text. */\n    body?: string,\n  /** The discussion post's title. */\n    title?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamDiscussion",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(TeamDiscussionComment)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The discussion comment's body text. */\n    body: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamDiscussionComment",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentNumber": {
        "rendered": "\n/** The number that identifies the comment. */\n commentNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentNumber": {
        "rendered": " commentNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamDiscussionComment",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The discussion comment's body text. */\n    body: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentNumber": {
        "rendered": " commentNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamDiscussionComment",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment. */\n content?: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.content": {
        "rendered": "\n/** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment. */\n content?: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentNumber": {
        "rendered": " commentNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Reaction)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion comment. */\n    content: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentNumber": {
        "rendered": " commentNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Reaction",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentNumber": {
        "rendered": " commentNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".reactionId": {
        "rendered": "\n/** The unique identifier of the reaction. */\n reactionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion. */\n content?: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.content": {
        "rendered": "\n/** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion. */\n content?: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Reaction)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion. */\n    content: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Reaction",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".reactionId": {
        "rendered": " reactionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/teams/{team_slug}/invitations": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(OrganizationInvitation)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/teams/{team_slug}/members": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Filters members returned by their role in the team. */\n role?: \"member\" | \"maintainer\" | \"all\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.role": {
        "rendered": "\n/** Filters members returned by their role in the team. */\n role?: \"member\" | \"maintainer\" | \"all\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(SimpleUser)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/teams/{team_slug}/memberships/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/teams/{team_slug}/memberships/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamMembership",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/orgs/{org}/teams/{team_slug}/memberships/{username}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /**\n   * The role that this user should have in the team.\n   * @default \"member\"\n   */\n    role?: \"member\" | \"maintainer\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamMembership",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/teams/{team_slug}/projects": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(TeamProject)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/teams/{team_slug}/projects/{project_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".projectId": {
        "rendered": "\n/** The unique identifier of the project. */\n projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/teams/{team_slug}/projects/{project_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".projectId": {
        "rendered": " projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamProject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/orgs/{org}/teams/{team_slug}/projects/{project_id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /** The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\" */\n    permission?: \"read\" | \"write\" | \"admin\",\n\n} | null,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".projectId": {
        "rendered": " projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/teams/{team_slug}/repos": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(MinimalRepository)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamRepository",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /**\n   * The permission to grant the team on this repository. We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.\n   * @default \"push\"\n   */\n    permission?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/teams/{team_slug}/teams": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Team)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/orgs/{org}/{security_product}/{enablement}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".securityProduct": {
        "rendered": "\n/** The security feature to enable or disable. */\n securityProduct: \"dependency_graph\" | \"dependabot_alerts\" | \"dependabot_security_updates\" | \"advanced_security\" | \"secret_scanning\" | \"secret_scanning_push_protection\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".enablement": {
        "rendered": "\n/** The action to take.\n\n`enable_all` means to enable the specified security feature for all repositories in the organization.\n`disable_all` means to disable the specified security feature for all repositories in the organization. */\n enablement: \"enable_all\" | \"disable_all\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/projects/columns/cards/{card_id}": {
    "query": {},
    "body": {},
    "path": {
      ".cardId": {
        "rendered": "\n/** The unique identifier of the card. */\n cardId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/projects/columns/cards/{card_id}": {
    "query": {},
    "body": {},
    "path": {
      ".cardId": {
        "rendered": " cardId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProjectCard",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/projects/columns/cards/{card_id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /**\n   * Whether or not the card is archived\n   * @example false\n   */\n    archived?: boolean,\n  /**\n   * The project card's note\n   * @example \"Update all gems\"\n   */\n    note?: string | null,\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".cardId": {
        "rendered": " cardId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProjectCard",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/projects/columns/cards/{card_id}/moves": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * The unique identifier of the column the card should be moved to\n   * @example 42\n   */\n    column_id?: number,\n  /**\n   * The position of the card in a column. Can be one of: `top`, `bottom`, or `after:<card_id>` to place after the specified card.\n   * @pattern ^(?:top|bottom|after:\\d+)$\n   * @example \"bottom\"\n   */\n    position: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".cardId": {
        "rendered": " cardId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/projects/columns/{column_id}": {
    "query": {},
    "body": {},
    "path": {
      ".columnId": {
        "rendered": "\n/** The unique identifier of the column. */\n columnId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/projects/columns/{column_id}": {
    "query": {},
    "body": {},
    "path": {
      ".columnId": {
        "rendered": " columnId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProjectColumn",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/projects/columns/{column_id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * Name of the project column\n   * @example \"Remaining tasks\"\n   */\n    name: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".columnId": {
        "rendered": " columnId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProjectColumn",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/projects/columns/{column_id}/cards": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Filters the project cards that are returned by the card's state. */\n archived_state?: \"all\" | \"archived\" | \"not_archived\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.archived_state": {
        "rendered": "\n/** Filters the project cards that are returned by the card's state. */\n archived_state?: \"all\" | \"archived\" | \"not_archived\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".columnId": {
        "rendered": " columnId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(ProjectCard)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/projects/columns/{column_id}/cards": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: ({\n  /**\n   * The project card's note\n   * @example \"Update all gems\"\n   */\n    note: string | null,\n\n} | {\n  /**\n   * The unique identifier of the content associated with the card\n   * @example 42\n   */\n    content_id: number,\n  /**\n   * The piece of content associated with the card\n   * @example \"PullRequest\"\n   */\n    content_type: string,\n\n}),",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".columnId": {
        "rendered": " columnId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProjectCard",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/projects/columns/{column_id}/moves": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * The position of the column in a project. Can be one of: `first`, `last`, or `after:<column_id>` to place after the specified column.\n   * @pattern ^(?:first|last|after:\\d+)$\n   * @example \"last\"\n   */\n    position: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".columnId": {
        "rendered": " columnId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/projects/{project_id}": {
    "query": {},
    "body": {},
    "path": {
      ".projectId": {
        "rendered": " projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/projects/{project_id}": {
    "query": {},
    "body": {},
    "path": {
      ".projectId": {
        "rendered": " projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Project",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/projects/{project_id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /**\n   * Body of the project\n   * @example \"This project represents the sprint of the first week in January\"\n   */\n    body?: string | null,\n  /**\n   * Name of the project\n   * @example \"Week One Sprint\"\n   */\n    name?: string,\n  /** The baseline permission that all organization members have on this project */\n    organization_permission?: \"read\" | \"write\" | \"admin\" | \"none\",\n  /** Whether or not this project can be seen by everyone. */\n    private?: boolean,\n  /**\n   * State of the project; either 'open' or 'closed'\n   * @example \"open\"\n   */\n    state?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".projectId": {
        "rendered": " projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Project",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/projects/{project_id}/collaborators": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Filters the collaborators by their affiliation. `outside` means outside collaborators of a project that are not a member of the project's organization. `direct` means collaborators with permissions to a project, regardless of organization membership status. `all` means all collaborators the authenticated user can see. */\n affiliation?: \"outside\" | \"direct\" | \"all\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.affiliation": {
        "rendered": "\n/** Filters the collaborators by their affiliation. `outside` means outside collaborators of a project that are not a member of the project's organization. `direct` means collaborators with permissions to a project, regardless of organization membership status. `all` means all collaborators the authenticated user can see. */\n affiliation?: \"outside\" | \"direct\" | \"all\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".projectId": {
        "rendered": " projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(SimpleUser)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/projects/{project_id}/collaborators/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".projectId": {
        "rendered": " projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/projects/{project_id}/collaborators/{username}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /**\n   * The permission to grant the collaborator.\n   * @default \"write\"\n   * @example \"write\"\n   */\n    permission?: \"read\" | \"write\" | \"admin\",\n\n} | null,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".projectId": {
        "rendered": " projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/projects/{project_id}/collaborators/{username}/permission": {
    "query": {},
    "body": {},
    "path": {
      ".projectId": {
        "rendered": " projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProjectCollaboratorPermission",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/projects/{project_id}/columns": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".projectId": {
        "rendered": " projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(ProjectColumn)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/projects/{project_id}/columns": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * Name of the project column\n   * @example \"Remaining tasks\"\n   */\n    name: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".projectId": {
        "rendered": " projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProjectColumn",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rate_limit": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "RateLimitOverview",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{org}/{repo}/actions/required_workflows": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    required_workflows: (RepoRequiredWorkflow)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{org}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".requiredWorkflowIdForRepo": {
        "rendered": "\n/** The ID of the required workflow that has run at least once in a repository. */\n requiredWorkflowIdForRepo: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "RepoRequiredWorkflow",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{org}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}/timing": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".requiredWorkflowIdForRepo": {
        "rendered": " requiredWorkflowIdForRepo: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "WorkflowUsage",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "FullRepository",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/repos/{owner}/{repo}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /**\n   * Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.\n   * @default false\n   */\n    allow_auto_merge?: boolean,\n  /**\n   * Either `true` to allow private forks, or `false` to prevent private forks.\n   * @default false\n   */\n    allow_forking?: boolean,\n  /**\n   * Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.\n   * @default true\n   */\n    allow_merge_commit?: boolean,\n  /**\n   * Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.\n   * @default true\n   */\n    allow_rebase_merge?: boolean,\n  /**\n   * Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.\n   * @default true\n   */\n    allow_squash_merge?: boolean,\n  /**\n   * Either `true` to always allow a pull request head branch that is behind its base branch to be updated even if it is not required to be up to date before merging, or false otherwise.\n   * @default false\n   */\n    allow_update_branch?: boolean,\n  /**\n   * Whether to archive this repository. `false` will unarchive a previously archived repository.\n   * @default false\n   */\n    archived?: boolean,\n  /** Updates the default branch for this repository. */\n    default_branch?: string,\n  /**\n   * Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.\n   * @default false\n   */\n    delete_branch_on_merge?: boolean,\n  /** A short description of the repository. */\n    description?: string,\n  /**\n   * Either `true` to enable issues for this repository or `false` to disable them.\n   * @default true\n   */\n    has_issues?: boolean,\n  /**\n   * Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.\n   * @default true\n   */\n    has_projects?: boolean,\n  /**\n   * Either `true` to enable the wiki for this repository or `false` to disable it.\n   * @default true\n   */\n    has_wiki?: boolean,\n  /** A URL with more information about the repository. */\n    homepage?: string,\n  /**\n   * Either `true` to make this repo available as a template repository or `false` to prevent it.\n   * @default false\n   */\n    is_template?: boolean,\n  /**\n   * The default value for a merge commit message.\n   * \n   * - `PR_TITLE` - default to the pull request's title.\n   * - `PR_BODY` - default to the pull request's body.\n   * - `BLANK` - default to a blank commit message.\n   */\n    merge_commit_message?: \"PR_BODY\" | \"PR_TITLE\" | \"BLANK\",\n  /**\n   * The default value for a merge commit title.\n   * \n   * - `PR_TITLE` - default to the pull request's title.\n   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).\n   */\n    merge_commit_title?: \"PR_TITLE\" | \"MERGE_MESSAGE\",\n  /** The name of the repository. */\n    name?: string,\n  /**\n   * Either `true` to make the repository private or `false` to make it public. Default: `false`.  \n   * **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.\n   * @default false\n   */\n    private?: boolean,\n  /**\n   * Specify which security and analysis features to enable or disable for the repository.\n   * \n   * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"\n   * \n   * For example, to enable GitHub Advanced Security, use this data in the body of the `PATCH` request:\n   * `{ \"security_and_analysis\": {\"advanced_security\": { \"status\": \"enabled\" } } }`.\n   * \n   * You can check which security and analysis features are currently enabled by using a `GET /repos/{owner}/{repo}` request.\n   */\n    security_and_analysis?: {\n  /** Use the `status` property to enable or disable GitHub Advanced Security for this repository. For more information, see \"[About GitHub Advanced Security](/github/getting-started-with-github/learning-about-github/about-github-advanced-security).\" */\n    advanced_security?: {\n  /** Can be `enabled` or `disabled`. */\n    status?: string,\n\n},\n  /** Use the `status` property to enable or disable secret scanning for this repository. For more information, see \"[About secret scanning](/code-security/secret-security/about-secret-scanning).\" */\n    secret_scanning?: {\n  /** Can be `enabled` or `disabled`. */\n    status?: string,\n\n},\n  /** Use the `status` property to enable or disable secret scanning push protection for this repository. For more information, see \"[Protecting pushes with secret scanning](/code-security/secret-scanning/protecting-pushes-with-secret-scanning).\" */\n    secret_scanning_push_protection?: {\n  /** Can be `enabled` or `disabled`. */\n    status?: string,\n\n},\n\n} | null,\n  /**\n   * The default value for a squash merge commit message:\n   * \n   * - `PR_BODY` - default to the pull request's body.\n   * - `COMMIT_MESSAGES` - default to the branch's commit messages.\n   * - `BLANK` - default to a blank commit message.\n   */\n    squash_merge_commit_message?: \"PR_BODY\" | \"COMMIT_MESSAGES\" | \"BLANK\",\n  /**\n   * The default value for a squash merge commit title:\n   * \n   * - `PR_TITLE` - default to the pull request's title.\n   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).\n   */\n    squash_merge_commit_title?: \"PR_TITLE\" | \"COMMIT_OR_PR_TITLE\",\n  /**\n   * Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property has been deprecated. Please use `squash_merge_commit_title` instead.\n   * @deprecated\n   * @default false\n   */\n    use_squash_pr_title_as_default?: boolean,\n  /** The visibility of the repository. */\n    visibility?: \"public\" | \"private\",\n  /**\n   * Either `true` to require contributors to sign off on web-based commits, or `false` to not require contributors to sign off on web-based commits.\n   * @default false\n   */\n    web_commit_signoff_required?: boolean,\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "FullRepository",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/artifacts": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, \n/** Filters artifacts by exact match on their name field. */\n name?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.name": {
        "rendered": "\n/** Filters artifacts by exact match on their name field. */\n name?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    artifacts: (Artifact)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/actions/artifacts/{artifact_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".artifactId": {
        "rendered": "\n/** The unique identifier of the artifact. */\n artifactId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/artifacts/{artifact_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".artifactId": {
        "rendered": " artifactId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Artifact",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".artifactId": {
        "rendered": " artifactId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".archiveFormat": {
        "rendered": " archiveFormat: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/cache/usage": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ActionsCacheUsageByRepository",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/actions/caches": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A key for identifying the cache. */\n key: string, \n/** The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */\n ref?: CodeScanningRef, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** A key for identifying the cache. */\n key: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ref": {
        "rendered": "\n/** The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */\n ref?: CodeScanningRef,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ActionsCacheList",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/caches": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, \n/** The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */\n ref?: CodeScanningRef, \n/** An explicit key or prefix for identifying the cache */\n key?: string, \n/** The property to sort the results by. `created_at` means when the cache was created. `last_accessed_at` means when the cache was last accessed. `size_in_bytes` is the size of the cache in bytes. */\n sort?: \"created_at\" | \"last_accessed_at\" | \"size_in_bytes\", \n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ref": {
        "rendered": "\n/** The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */\n ref?: CodeScanningRef,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** An explicit key or prefix for identifying the cache */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The property to sort the results by. `created_at` means when the cache was created. `last_accessed_at` means when the cache was last accessed. `size_in_bytes` is the size of the cache in bytes. */\n sort?: \"created_at\" | \"last_accessed_at\" | \"size_in_bytes\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ActionsCacheList",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/actions/caches/{cache_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".cacheId": {
        "rendered": "\n/** The unique identifier of the GitHub Actions cache. */\n cacheId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/jobs/{job_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".jobId": {
        "rendered": "\n/** The unique identifier of the job. */\n jobId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Job",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/jobs/{job_id}/logs": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".jobId": {
        "rendered": " jobId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /**\n   * Whether to enable debug logging for the re-run.\n   * @default false\n   */\n    enable_debug_logging?: boolean,\n\n} | null,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".jobId": {
        "rendered": " jobId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/oidc/customization/sub": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OidcCustomSubRepo",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/repos/{owner}/{repo}/actions/oidc/customization/sub": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Array of unique strings. Each claim key can only contain alphanumeric characters and underscores. */\n    include_claim_keys?: (string)[],\n  /** Whether to use the default template or not. If `true`, the `include_claim_keys` field is ignored. */\n    use_default: boolean,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/permissions": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ActionsRepositoryPermissions",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/repos/{owner}/{repo}/actions/permissions": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The permissions policy that controls the actions and reusable workflows that are allowed to run. */\n    allowed_actions?: AllowedActions,\n  /** Whether GitHub Actions is enabled on the repository. */\n    enabled: ActionsEnabled,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/permissions/access": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ActionsWorkflowAccessToRepository",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/repos/{owner}/{repo}/actions/permissions/access": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: ActionsWorkflowAccessToRepository,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/permissions/selected-actions": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "SelectedActions",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/repos/{owner}/{repo}/actions/permissions/selected-actions": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: SelectedActions,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/permissions/workflow": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ActionsGetDefaultWorkflowPermissions",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/repos/{owner}/{repo}/actions/permissions/workflow": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: ActionsSetDefaultWorkflowPermissions,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}/runs": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run. */\n actor?: string, \n/** Returns workflow runs associated with a branch. Use the name of the branch of the `push`. */\n branch?: string, \n/** Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \"[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\" */\n event?: string, \n/** Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. */\n status?: \"completed\" | \"action_required\" | \"cancelled\" | \"failure\" | \"neutral\" | \"skipped\" | \"stale\" | \"success\" | \"timed_out\" | \"in_progress\" | \"queued\" | \"requested\" | \"waiting\" | \"pending\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, \n/** Returns workflow runs created within the given date-time range. For more information on the syntax, see \"[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\" */\n created?: string, \n/** If `true` pull requests are omitted from the response (empty array). */\n exclude_pull_requests?: boolean, \n/** Returns workflow runs with the `check_suite_id` that you specify. */\n check_suite_id?: number, \n/** Only returns workflow runs that are associated with the specified `head_sha`. */\n head_sha?: string, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.actor": {
        "rendered": "\n/** Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run. */\n actor?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.branch": {
        "rendered": "\n/** Returns workflow runs associated with a branch. Use the name of the branch of the `push`. */\n branch?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.event": {
        "rendered": "\n/** Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \"[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\" */\n event?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.status": {
        "rendered": "\n/** Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. */\n status?: \"completed\" | \"action_required\" | \"cancelled\" | \"failure\" | \"neutral\" | \"skipped\" | \"stale\" | \"success\" | \"timed_out\" | \"in_progress\" | \"queued\" | \"requested\" | \"waiting\" | \"pending\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": "\n/** Returns workflow runs created within the given date-time range. For more information on the syntax, see \"[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\" */\n created?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.exclude_pull_requests": {
        "rendered": "\n/** If `true` pull requests are omitted from the response (empty array). */\n exclude_pull_requests?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.check_suite_id": {
        "rendered": "\n/** Returns workflow runs with the `check_suite_id` that you specify. */\n check_suite_id?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.head_sha": {
        "rendered": "\n/** Only returns workflow runs that are associated with the specified `head_sha`. */\n head_sha?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".requiredWorkflowIdForRepo": {
        "rendered": " requiredWorkflowIdForRepo: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    total_count: number,\n    workflow_runs: (WorkflowRun)[],\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/runners": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    runners: (Runner)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/runners/downloads": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(RunnerApplication)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/actions/runners/registration-token": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "AuthenticationToken",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/actions/runners/remove-token": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "AuthenticationToken",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/actions/runners/{runner_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runnerId": {
        "rendered": " runnerId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/runners/{runner_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runnerId": {
        "rendered": " runnerId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Runner",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/actions/runners/{runner_id}/labels": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runnerId": {
        "rendered": " runnerId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    labels: (RunnerLabel)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/runners/{runner_id}/labels": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runnerId": {
        "rendered": " runnerId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    labels: (RunnerLabel)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/actions/runners/{runner_id}/labels": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * The names of the custom labels to add to the runner.\n   * @maxItems 100\n   * @minItems 1\n   */\n    labels: (string)[],\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runnerId": {
        "rendered": " runnerId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    labels: (RunnerLabel)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/repos/{owner}/{repo}/actions/runners/{runner_id}/labels": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.\n   * @maxItems 100\n   * @minItems 0\n   */\n    labels: (string)[],\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runnerId": {
        "rendered": " runnerId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    labels: (RunnerLabel)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runnerId": {
        "rendered": " runnerId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".name": {
        "rendered": " name: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    labels: (RunnerLabel)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/runs": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run. */\n actor?: string, \n/** Returns workflow runs associated with a branch. Use the name of the branch of the `push`. */\n branch?: string, \n/** Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \"[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\" */\n event?: string, \n/** Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. */\n status?: \"completed\" | \"action_required\" | \"cancelled\" | \"failure\" | \"neutral\" | \"skipped\" | \"stale\" | \"success\" | \"timed_out\" | \"in_progress\" | \"queued\" | \"requested\" | \"waiting\" | \"pending\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, \n/** Returns workflow runs created within the given date-time range. For more information on the syntax, see \"[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\" */\n created?: string, \n/** If `true` pull requests are omitted from the response (empty array). */\n exclude_pull_requests?: boolean, \n/** Returns workflow runs with the `check_suite_id` that you specify. */\n check_suite_id?: number, \n/** Only returns workflow runs that are associated with the specified `head_sha`. */\n head_sha?: string, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.actor": {
        "rendered": "\n/** Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run. */\n actor?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.branch": {
        "rendered": "\n/** Returns workflow runs associated with a branch. Use the name of the branch of the `push`. */\n branch?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.event": {
        "rendered": "\n/** Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \"[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\" */\n event?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.status": {
        "rendered": "\n/** Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. */\n status?: \"completed\" | \"action_required\" | \"cancelled\" | \"failure\" | \"neutral\" | \"skipped\" | \"stale\" | \"success\" | \"timed_out\" | \"in_progress\" | \"queued\" | \"requested\" | \"waiting\" | \"pending\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": "\n/** Returns workflow runs created within the given date-time range. For more information on the syntax, see \"[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\" */\n created?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.exclude_pull_requests": {
        "rendered": "\n/** If `true` pull requests are omitted from the response (empty array). */\n exclude_pull_requests?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.check_suite_id": {
        "rendered": "\n/** Returns workflow runs with the `check_suite_id` that you specify. */\n check_suite_id?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.head_sha": {
        "rendered": "\n/** Only returns workflow runs that are associated with the specified `head_sha`. */\n head_sha?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    total_count: number,\n    workflow_runs: (WorkflowRun)[],\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/actions/runs/{run_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runId": {
        "rendered": "\n/** The unique identifier of the workflow run. */\n runId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/runs/{run_id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** If `true` pull requests are omitted from the response (empty array). */\n exclude_pull_requests?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.exclude_pull_requests": {
        "rendered": "\n/** If `true` pull requests are omitted from the response (empty array). */\n exclude_pull_requests?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runId": {
        "rendered": " runId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "WorkflowRun",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/runs/{run_id}/approvals": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runId": {
        "rendered": " runId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(EnvironmentApprovals)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/actions/runs/{run_id}/approve": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runId": {
        "rendered": " runId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runId": {
        "rendered": " runId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    artifacts: (Artifact)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** If `true` pull requests are omitted from the response (empty array). */\n exclude_pull_requests?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.exclude_pull_requests": {
        "rendered": "\n/** If `true` pull requests are omitted from the response (empty array). */\n exclude_pull_requests?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runId": {
        "rendered": " runId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".attemptNumber": {
        "rendered": "\n/** The attempt number of the workflow run. */\n attemptNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "WorkflowRun",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runId": {
        "rendered": " runId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".attemptNumber": {
        "rendered": " attemptNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    jobs: (Job)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runId": {
        "rendered": " runId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".attemptNumber": {
        "rendered": " attemptNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/actions/runs/{run_id}/cancel": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runId": {
        "rendered": " runId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/runs/{run_id}/jobs": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Filters jobs by their `completed_at` timestamp. `latest` returns jobs from the most recent execution of the workflow run. `all` returns all jobs for a workflow run, including from old executions of the workflow run. */\n filter?: \"latest\" | \"all\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter": {
        "rendered": "\n/** Filters jobs by their `completed_at` timestamp. `latest` returns jobs from the most recent execution of the workflow run. `all` returns all jobs for a workflow run, including from old executions of the workflow run. */\n filter?: \"latest\" | \"all\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runId": {
        "rendered": " runId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    jobs: (Job)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/actions/runs/{run_id}/logs": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runId": {
        "rendered": " runId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/runs/{run_id}/logs": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runId": {
        "rendered": " runId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runId": {
        "rendered": " runId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(PendingDeployment)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * A comment to accompany the deployment review\n   * @example \"Ship it!\"\n   */\n    comment: string,\n  /**\n   * The list of environment ids to approve or reject\n   * @example [161171787,161171795]\n   */\n    environment_ids: (number)[],\n  /**\n   * Whether to approve or reject deployment to the specified environments.\n   * @example \"approved\"\n   */\n    state: \"approved\" | \"rejected\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runId": {
        "rendered": " runId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Deployment)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/actions/runs/{run_id}/rerun": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /**\n   * Whether to enable debug logging for the re-run.\n   * @default false\n   */\n    enable_debug_logging?: boolean,\n\n} | null,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runId": {
        "rendered": " runId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /**\n   * Whether to enable debug logging for the re-run.\n   * @default false\n   */\n    enable_debug_logging?: boolean,\n\n} | null,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runId": {
        "rendered": " runId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/runs/{run_id}/timing": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runId": {
        "rendered": " runId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "WorkflowRunUsage",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/secrets": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    secrets: (ActionsSecret)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/secrets/public-key": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ActionsPublicKey",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/actions/secrets/{secret_name}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/secrets/{secret_name}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ActionsSecret",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/repos/{owner}/{repo}/actions/secrets/{secret_name}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/reference/actions#get-a-repository-public-key) endpoint.\n   * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$\n   */\n    encrypted_value?: string,\n  /** ID of the key you used to encrypt the secret. */\n    key_id?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/variables": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 30). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 30). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    total_count: number,\n    variables: (ActionsVariable)[],\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/actions/variables": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The name of the variable. */\n    name: string,\n  /** The value of the variable. */\n    value: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/actions/variables/{name}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".name": {
        "rendered": " name: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/variables/{name}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".name": {
        "rendered": " name: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ActionsVariable",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/repos/{owner}/{repo}/actions/variables/{name}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The name of the variable. */\n    name?: string,\n  /** The value of the variable. */\n    value?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".name": {
        "rendered": " name: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/workflows": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    total_count: number,\n    workflows: (Workflow)[],\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/workflows/{workflow_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".workflowId": {
        "rendered": "\n/** The ID of the workflow. You can also pass the workflow file name as a string. */\n workflowId: number | string,",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Workflow",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".workflowId": {
        "rendered": " workflowId: number | string,",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted. */\n    inputs?: hasuraSdk.JSONValue,\n  /** The git reference for the workflow. The reference can be a branch or tag name. */\n    ref: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".workflowId": {
        "rendered": " workflowId: number | string,",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".workflowId": {
        "rendered": " workflowId: number | string,",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run. */\n actor?: string, \n/** Returns workflow runs associated with a branch. Use the name of the branch of the `push`. */\n branch?: string, \n/** Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \"[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\" */\n event?: string, \n/** Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. */\n status?: \"completed\" | \"action_required\" | \"cancelled\" | \"failure\" | \"neutral\" | \"skipped\" | \"stale\" | \"success\" | \"timed_out\" | \"in_progress\" | \"queued\" | \"requested\" | \"waiting\" | \"pending\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, \n/** Returns workflow runs created within the given date-time range. For more information on the syntax, see \"[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\" */\n created?: string, \n/** If `true` pull requests are omitted from the response (empty array). */\n exclude_pull_requests?: boolean, \n/** Returns workflow runs with the `check_suite_id` that you specify. */\n check_suite_id?: number, \n/** Only returns workflow runs that are associated with the specified `head_sha`. */\n head_sha?: string, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.actor": {
        "rendered": "\n/** Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run. */\n actor?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.branch": {
        "rendered": "\n/** Returns workflow runs associated with a branch. Use the name of the branch of the `push`. */\n branch?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.event": {
        "rendered": "\n/** Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \"[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\" */\n event?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.status": {
        "rendered": "\n/** Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. */\n status?: \"completed\" | \"action_required\" | \"cancelled\" | \"failure\" | \"neutral\" | \"skipped\" | \"stale\" | \"success\" | \"timed_out\" | \"in_progress\" | \"queued\" | \"requested\" | \"waiting\" | \"pending\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": "\n/** Returns workflow runs created within the given date-time range. For more information on the syntax, see \"[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\" */\n created?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.exclude_pull_requests": {
        "rendered": "\n/** If `true` pull requests are omitted from the response (empty array). */\n exclude_pull_requests?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.check_suite_id": {
        "rendered": "\n/** Returns workflow runs with the `check_suite_id` that you specify. */\n check_suite_id?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.head_sha": {
        "rendered": "\n/** Only returns workflow runs that are associated with the specified `head_sha`. */\n head_sha?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".workflowId": {
        "rendered": " workflowId: number | string,",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    total_count: number,\n    workflow_runs: (WorkflowRun)[],\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".workflowId": {
        "rendered": " workflowId: number | string,",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "WorkflowUsage",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/assignees": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(SimpleUser)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/assignees/{assignee}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".assignee": {
        "rendered": " assignee: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/autolinks": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Autolink)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/autolinks": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * Whether this autolink reference matches alphanumeric characters. If true, the `<num>` parameter of the `url_template` matches alphanumeric characters `A-Z` (case insensitive), `0-9`, and `-`. If false, this autolink reference only matches numeric characters.\n   * @default \"true\"\n   */\n    is_alphanumeric?: boolean,\n  /** This prefix appended by certain characters will generate a link any time it is found in an issue, pull request, or commit. */\n    key_prefix: string,\n  /** The URL must contain `<num>` for the reference number. `<num>` matches different characters depending on the value of `is_alphanumeric`. */\n    url_template: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Autolink",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/autolinks/{autolink_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".autolinkId": {
        "rendered": "\n/** The unique identifier of the autolink. */\n autolinkId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/autolinks/{autolink_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".autolinkId": {
        "rendered": " autolinkId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Autolink",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/automated-security-fixes": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/repos/{owner}/{repo}/automated-security-fixes": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/branches": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Setting to `true` returns only protected branches. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches. */\n protected?: boolean, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.protected": {
        "rendered": "\n/** Setting to `true` returns only protected branches. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches. */\n protected?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(ShortBranch)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/branches/{branch}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": "\n/** The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). */\n branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "BranchWithProtection",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/branches/{branch}/protection": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/branches/{branch}/protection": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "BranchProtection",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/repos/{owner}/{repo}/branches/{branch}/protection": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see \"[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)\" in the GitHub Help documentation. */\n    allow_deletions?: boolean,\n  /** Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see \"[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)\" in the GitHub Help documentation.\" */\n    allow_force_pushes?: boolean | null,\n  /**\n   * Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing. Default: `false`.\n   * @default false\n   */\n    allow_fork_syncing?: boolean,\n  /** If set to `true`, the `restrictions` branch protection settings which limits who can push will also block pushes which create new branches, unless the push is initiated by a user, team, or app which has the ability to push. Set to `true` to restrict new branch creation. Default: `false`. */\n    block_creations?: boolean,\n  /** Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable. */\n    enforce_admins: boolean | null,\n  /**\n   * Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. Default: `false`.\n   * @default false\n   */\n    lock_branch?: boolean,\n  /** Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to `false` to disable. Default: `false`. */\n    required_conversation_resolution?: boolean,\n  /** Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see \"[Requiring a linear commit history](https://docs.github.com/github/administering-a-repository/requiring-a-linear-commit-history)\" in the GitHub Help documentation. */\n    required_linear_history?: boolean,\n  /** Require at least one approving review on a pull request, before merging. Set to `null` to disable. */\n    required_pull_request_reviews: {\n  /** Allow specific users, teams, or apps to bypass pull request requirements. */\n    bypass_pull_request_allowances?: {\n  /** The list of app `slug`s allowed to bypass pull request requirements. */\n    apps?: (string)[],\n  /** The list of team `slug`s allowed to bypass pull request requirements. */\n    teams?: (string)[],\n  /** The list of user `login`s allowed to bypass pull request requirements. */\n    users?: (string)[],\n\n},\n  /** Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit. */\n    dismiss_stale_reviews?: boolean,\n  /** Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories. */\n    dismissal_restrictions?: {\n  /** The list of app `slug`s with dismissal access */\n    apps?: (string)[],\n  /** The list of team `slug`s with dismissal access */\n    teams?: (string)[],\n  /** The list of user `login`s with dismissal access */\n    users?: (string)[],\n\n},\n  /** Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) review them. */\n    require_code_owner_reviews?: boolean,\n  /**\n   * Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`.\n   * @default false\n   */\n    require_last_push_approval?: boolean,\n  /** Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers. */\n    required_approving_review_count?: number,\n\n} | null,\n  /** Require status checks to pass before merging. Set to `null` to disable. */\n    required_status_checks: {\n  /** The list of status checks to require in order to merge into this branch. */\n    checks?: ({\n  /** The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status. */\n    app_id?: number,\n  /** The name of the required check */\n    context: string,\n\n})[],\n  /**\n   * **Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.\n   * @deprecated\n   */\n    contexts: (string)[],\n  /** Require branches to be up to date before merging. */\n    strict: boolean,\n\n} | null,\n  /** Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable. */\n    restrictions: {\n  /** The list of app `slug`s with push access */\n    apps?: (string)[],\n  /** The list of team `slug`s with push access */\n    teams: (string)[],\n  /** The list of user `login`s with push access */\n    users: (string)[],\n\n} | null,\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProtectedBranch",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProtectedBranchAdminEnforced",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProtectedBranchAdminEnforced",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProtectedBranchPullRequestReview",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /** Allow specific users, teams, or apps to bypass pull request requirements. */\n    bypass_pull_request_allowances?: {\n  /** The list of app `slug`s allowed to bypass pull request requirements. */\n    apps?: (string)[],\n  /** The list of team `slug`s allowed to bypass pull request requirements. */\n    teams?: (string)[],\n  /** The list of user `login`s allowed to bypass pull request requirements. */\n    users?: (string)[],\n\n},\n  /** Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit. */\n    dismiss_stale_reviews?: boolean,\n  /** Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories. */\n    dismissal_restrictions?: {\n  /** The list of app `slug`s with dismissal access */\n    apps?: (string)[],\n  /** The list of team `slug`s with dismissal access */\n    teams?: (string)[],\n  /** The list of user `login`s with dismissal access */\n    users?: (string)[],\n\n},\n  /** Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) have reviewed. */\n    require_code_owner_reviews?: boolean,\n  /**\n   * Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`\n   * @default false\n   */\n    require_last_push_approval?: boolean,\n  /** Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers. */\n    required_approving_review_count?: number,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProtectedBranchPullRequestReview",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProtectedBranchAdminEnforced",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProtectedBranchAdminEnforced",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "StatusCheckPolicy",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /** The list of status checks to require in order to merge into this branch. */\n    checks?: ({\n  /** The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status. */\n    app_id?: number,\n  /** The name of the required check */\n    context: string,\n\n})[],\n  /**\n   * **Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.\n   * @deprecated\n   */\n    contexts?: (string)[],\n  /** Require branches to be up to date before merging. */\n    strict?: boolean,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "StatusCheckPolicy",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: ({\n  /** The name of the status checks */\n    contexts: (string)[],\n\n} | (string)[]),",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(string)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(string)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: ({\n  /** The name of the status checks */\n    contexts: (string)[],\n\n} | (string)[]),",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(string)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: ({\n  /** The name of the status checks */\n    contexts: (string)[],\n\n} | (string)[]),",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(string)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/branches/{branch}/protection/restrictions": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/branches/{branch}/protection/restrictions": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "BranchRestrictionPolicy",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: ({\n  /** The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items. */\n    apps: (string)[],\n\n} | (string)[]),",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Integration)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Integration)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: ({\n  /** The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items. */\n    apps: (string)[],\n\n} | (string)[]),",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Integration)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: ({\n  /** The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items. */\n    apps: (string)[],\n\n} | (string)[]),",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Integration)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: ({\n  /** The slug values for teams */\n    teams: (string)[],\n\n} | (string)[]),",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Team)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Team)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: ({\n  /** The slug values for teams */\n    teams: (string)[],\n\n} | (string)[]),",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Team)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: ({\n  /** The slug values for teams */\n    teams: (string)[],\n\n} | (string)[]),",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Team)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: ({\n  /** The username for users */\n    users: (string)[],\n\n} | (string)[]),",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(SimpleUser)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(SimpleUser)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: ({\n  /** The username for users */\n    users: (string)[],\n\n} | (string)[]),",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(SimpleUser)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: ({\n  /** The username for users */\n    users: (string)[],\n\n} | (string)[]),",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(SimpleUser)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/branches/{branch}/rename": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The new name of the branch. */\n    new_name: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "BranchWithProtection",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/check-runs": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: ({\n    status: \"completed\",\n    [key: string]: any,\n\n} | {\n    status?: \"queued\" | \"in_progress\",\n    [key: string]: any,\n\n}) & ({\n  /**\n   * Displays a button on GitHub that can be clicked to alert your app to do additional tasks. For example, a code linting app can display a button that automatically fixes detected errors. The button created in this object is displayed after the check run completes. When a user clicks the button, GitHub sends the [`check_run.requested_action` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) to your app. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. To learn more about check runs and requested actions, see \"[Check runs and requested actions](https://docs.github.com/rest/reference/checks#check-runs-and-requested-actions).\"\n   * @maxItems 3\n   */\n    actions?: ({\n  /**\n   * A short explanation of what this action would do. The maximum size is 40 characters.\n   * @maxLength 40\n   */\n    description: string,\n  /**\n   * A reference for the action on the integrator's system. The maximum size is 20 characters.\n   * @maxLength 20\n   */\n    identifier: string,\n  /**\n   * The text to be displayed on a button in the web UI. The maximum size is 20 characters.\n   * @maxLength 20\n   */\n    label: string,\n\n})[],\n  /**\n   * The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.\n   * @format date-time\n   */\n    completed_at?: string,\n  /**\n   * **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. \n   * **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.\n   */\n    conclusion?: \"action_required\" | \"cancelled\" | \"failure\" | \"neutral\" | \"success\" | \"skipped\" | \"stale\" | \"timed_out\",\n  /** The URL of the integrator's site that has the full details of the check. If the integrator does not provide this, then the homepage of the GitHub app is used. */\n    details_url?: string,\n  /** A reference for the run on the integrator's system. */\n    external_id?: string,\n  /** The SHA of the commit. */\n    head_sha: string,\n  /** The name of the check. For example, \"code-coverage\". */\n    name: string,\n  /** Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. */\n    output?: {\n  /**\n   * Adds information from your analysis to specific lines of code. Annotations are visible on GitHub in the **Checks** and **Files changed** tab of the pull request. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/rest/reference/checks#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about how you can view annotations on GitHub, see \"[About status checks](https://docs.github.com/articles/about-status-checks#checks)\".\n   * @maxItems 50\n   */\n    annotations?: ({\n  /** The level of the annotation. */\n    annotation_level: \"notice\" | \"warning\" | \"failure\",\n  /** The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. */\n    end_column?: number,\n  /** The end line of the annotation. */\n    end_line: number,\n  /** A short description of the feedback for these lines of code. The maximum size is 64 KB. */\n    message: string,\n  /** The path of the file to add an annotation to. For example, `assets/css/main.css`. */\n    path: string,\n  /** Details about this annotation. The maximum size is 64 KB. */\n    raw_details?: string,\n  /** The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. Column numbers start at 1. */\n    start_column?: number,\n  /** The start line of the annotation. Line numbers start at 1. */\n    start_line: number,\n  /** The title that represents the annotation. The maximum size is 255 characters. */\n    title?: string,\n\n})[],\n  /** Adds images to the output displayed in the GitHub pull request UI. */\n    images?: ({\n  /** The alternative text for the image. */\n    alt: string,\n  /** A short image description. */\n    caption?: string,\n  /** The full URL of the image. */\n    image_url: string,\n\n})[],\n  /**\n   * The summary of the check run. This parameter supports Markdown. **Maximum length**: 65535 characters.\n   * @maxLength 65535\n   */\n    summary: string,\n  /**\n   * The details of the check run. This parameter supports Markdown. **Maximum length**: 65535 characters.\n   * @maxLength 65535\n   */\n    text?: string,\n  /** The title of the check run. */\n    title: string,\n\n},\n  /**\n   * The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.\n   * @format date-time\n   */\n    started_at?: string,\n  /**\n   * The current status.\n   * @default \"queued\"\n   */\n    status?: \"queued\" | \"in_progress\" | \"completed\",\n\n}),",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CheckRun",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/check-runs/{check_run_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".checkRunId": {
        "rendered": "\n/** The unique identifier of the check run. */\n checkRunId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CheckRun",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/repos/{owner}/{repo}/check-runs/{check_run_id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: ({\n    status?: \"completed\",\n    [key: string]: any,\n\n} | {\n    status?: \"queued\" | \"in_progress\",\n    [key: string]: any,\n\n}) & ({\n  /**\n   * Possible further actions the integrator can perform, which a user may trigger. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. See the [`actions` object](https://docs.github.com/rest/reference/checks#actions-object) description. To learn more about check runs and requested actions, see \"[Check runs and requested actions](https://docs.github.com/rest/reference/checks#check-runs-and-requested-actions).\"\n   * @maxItems 3\n   */\n    actions?: ({\n  /**\n   * A short explanation of what this action would do. The maximum size is 40 characters.\n   * @maxLength 40\n   */\n    description: string,\n  /**\n   * A reference for the action on the integrator's system. The maximum size is 20 characters.\n   * @maxLength 20\n   */\n    identifier: string,\n  /**\n   * The text to be displayed on a button in the web UI. The maximum size is 20 characters.\n   * @maxLength 20\n   */\n    label: string,\n\n})[],\n  /**\n   * The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.\n   * @format date-time\n   */\n    completed_at?: string,\n  /**\n   * **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. \n   * **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.\n   */\n    conclusion?: \"action_required\" | \"cancelled\" | \"failure\" | \"neutral\" | \"success\" | \"skipped\" | \"stale\" | \"timed_out\",\n  /** The URL of the integrator's site that has the full details of the check. */\n    details_url?: string,\n  /** A reference for the run on the integrator's system. */\n    external_id?: string,\n  /** The name of the check. For example, \"code-coverage\". */\n    name?: string,\n  /** Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. */\n    output?: {\n  /**\n   * Adds information from your analysis to specific lines of code. Annotations are visible in GitHub's pull request UI. Annotations are visible in GitHub's pull request UI. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/rest/reference/checks#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about annotations in the UI, see \"[About status checks](https://docs.github.com/articles/about-status-checks#checks)\".\n   * @maxItems 50\n   */\n    annotations?: ({\n  /** The level of the annotation. */\n    annotation_level: \"notice\" | \"warning\" | \"failure\",\n  /** The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. */\n    end_column?: number,\n  /** The end line of the annotation. */\n    end_line: number,\n  /** A short description of the feedback for these lines of code. The maximum size is 64 KB. */\n    message: string,\n  /** The path of the file to add an annotation to. For example, `assets/css/main.css`. */\n    path: string,\n  /** Details about this annotation. The maximum size is 64 KB. */\n    raw_details?: string,\n  /** The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. Column numbers start at 1. */\n    start_column?: number,\n  /** The start line of the annotation. Line numbers start at 1. */\n    start_line: number,\n  /** The title that represents the annotation. The maximum size is 255 characters. */\n    title?: string,\n\n})[],\n  /** Adds images to the output displayed in the GitHub pull request UI. */\n    images?: ({\n  /** The alternative text for the image. */\n    alt: string,\n  /** A short image description. */\n    caption?: string,\n  /** The full URL of the image. */\n    image_url: string,\n\n})[],\n  /**\n   * Can contain Markdown.\n   * @maxLength 65535\n   */\n    summary: string,\n  /**\n   * Can contain Markdown.\n   * @maxLength 65535\n   */\n    text?: string,\n  /** **Required**. */\n    title?: string,\n\n},\n  /**\n   * This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.\n   * @format date-time\n   */\n    started_at?: string,\n  /** The current status. */\n    status?: \"queued\" | \"in_progress\" | \"completed\",\n\n}),",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".checkRunId": {
        "rendered": " checkRunId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CheckRun",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".checkRunId": {
        "rendered": " checkRunId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(CheckAnnotation)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".checkRunId": {
        "rendered": " checkRunId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/check-suites": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The sha of the head commit. */\n    head_sha: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CheckSuite",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/repos/{owner}/{repo}/check-suites/preferences": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default. */\n    auto_trigger_checks?: ({\n  /** The `id` of the GitHub App. */\n    app_id: number,\n  /**\n   * Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository, or `false` to disable them.\n   * @default true\n   */\n    setting: boolean,\n\n})[],\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CheckSuitePreference",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/check-suites/{check_suite_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".checkSuiteId": {
        "rendered": "\n/** The unique identifier of the check suite. */\n checkSuiteId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CheckSuite",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Returns check runs with the specified `name`. */\n check_name?: string, \n/** Returns check runs with the specified `status`. */\n status?: \"queued\" | \"in_progress\" | \"completed\", \n/** Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs. */\n filter?: \"latest\" | \"all\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.check_name": {
        "rendered": "\n/** Returns check runs with the specified `name`. */\n check_name?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.status": {
        "rendered": "\n/** Returns check runs with the specified `status`. */\n status?: \"queued\" | \"in_progress\" | \"completed\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter": {
        "rendered": "\n/** Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs. */\n filter?: \"latest\" | \"all\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".checkSuiteId": {
        "rendered": " checkSuiteId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    check_runs: (CheckRun)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".checkSuiteId": {
        "rendered": " checkSuiteId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/code-scanning/alerts": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both. */\n tool_name?: CodeScanningAnalysisToolName, \n/** The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both. */\n tool_guid?: CodeScanningAnalysisToolGuid, \n/** Page number of the results to fetch. */\n page?: number, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */\n ref?: CodeScanningRef, \n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\", \n/** The property by which to sort the results. */\n sort?: \"created\" | \"updated\", \n/** If specified, only code scanning alerts with this state will be returned. */\n state?: CodeScanningAlertState, \n/** If specified, only code scanning alerts with this severity will be returned. */\n severity?: CodeScanningAlertSeverity, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.tool_name": {
        "rendered": "\n/** The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both. */\n tool_name?: CodeScanningAnalysisToolName,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.tool_guid": {
        "rendered": "\n/** The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both. */\n tool_guid?: CodeScanningAnalysisToolGuid,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ref": {
        "rendered": "\n/** The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */\n ref?: CodeScanningRef,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.sort": {
        "rendered": "\n/** The property by which to sort the results. */\n sort?: \"created\" | \"updated\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.state": {
        "rendered": "\n/** If specified, only code scanning alerts with this state will be returned. */\n state?: CodeScanningAlertState,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.severity": {
        "rendered": "\n/** If specified, only code scanning alerts with this severity will be returned. */\n severity?: CodeScanningAlertSeverity,",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(CodeScanningAlertItems)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".alertNumber": {
        "rendered": "\n/** The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. */\n alertNumber: AlertNumber,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CodeScanningAlert",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The dismissal comment associated with the dismissal of the alert. */\n    dismissed_comment?: CodeScanningAlertDismissedComment,\n  /** **Required when the state is dismissed.** The reason for dismissing or closing the alert. */\n    dismissed_reason?: CodeScanningAlertDismissedReason,\n  /** Sets the state of the code scanning alert. You must provide `dismissed_reason` when you set the state to `dismissed`. */\n    state: CodeScanningAlertSetState,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".alertNumber": {
        "rendered": " alertNumber: AlertNumber,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CodeScanningAlert",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Page number of the results to fetch. */\n page?: number, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */\n ref?: CodeScanningRef, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ref": {
        "rendered": "\n/** The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */\n ref?: CodeScanningRef,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".alertNumber": {
        "rendered": " alertNumber: AlertNumber,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(CodeScanningAlertInstance)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/code-scanning/analyses": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both. */\n tool_name?: CodeScanningAnalysisToolName, \n/** The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both. */\n tool_guid?: CodeScanningAnalysisToolGuid, \n/** Page number of the results to fetch. */\n page?: number, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** The Git reference for the analyses you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */\n ref?: CodeScanningRef, \n/** Filter analyses belonging to the same SARIF upload. */\n sarif_id?: CodeScanningAnalysisSarifId, \n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\", \n/** The property by which to sort the results. */\n sort?: \"created\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.tool_name": {
        "rendered": "\n/** The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both. */\n tool_name?: CodeScanningAnalysisToolName,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.tool_guid": {
        "rendered": "\n/** The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both. */\n tool_guid?: CodeScanningAnalysisToolGuid,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ref": {
        "rendered": "\n/** The Git reference for the analyses you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */\n ref?: CodeScanningRef,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sarif_id": {
        "rendered": "\n/** Filter analyses belonging to the same SARIF upload. */\n sarif_id?: CodeScanningAnalysisSarifId,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.sort": {
        "rendered": "\n/** The property by which to sort the results. */\n sort?: \"created\",",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(CodeScanningAnalysis)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Allow deletion if the specified analysis is the last in a set. If you attempt to delete the final analysis in a set without setting this parameter to `true`, you'll get a 400 response with the message: `Analysis is last of its type and deletion may result in the loss of historical alert data. Please specify confirm_delete.` */\n confirm_delete?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.confirm_delete": {
        "rendered": "\n/** Allow deletion if the specified analysis is the last in a set. If you attempt to delete the final analysis in a set without setting this parameter to `true`, you'll get a 400 response with the message: `Analysis is last of its type and deletion may result in the loss of historical alert data. Please specify confirm_delete.` */\n confirm_delete?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".analysisId": {
        "rendered": "\n/** The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation. */\n analysisId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CodeScanningAnalysisDeletion",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".analysisId": {
        "rendered": "\n/** The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation. */\n analysisId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CodeScanningAnalysis",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/code-scanning/codeql/databases": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(CodeScanningCodeqlDatabase)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/code-scanning/codeql/databases/{language}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".language": {
        "rendered": "\n/** The language of the CodeQL database. */\n language: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CodeScanningCodeqlDatabase",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/code-scanning/sarifs": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * The base directory used in the analysis, as it appears in the SARIF file.\n   * This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.\n   * @format uri\n   * @example \"file:///github/workspace/\"\n   */\n    checkout_uri?: string,\n  /** The SHA of the commit to which the analysis you are uploading relates. */\n    commit_sha: CodeScanningAnalysisCommitSha,\n  /**\n   * The full Git reference, formatted as `refs/heads/<branch name>`,\n   * `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.\n   */\n    ref: CodeScanningRef,\n  /** A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see \"[SARIF support for code scanning](https://docs.github.com/code-security/secure-coding/sarif-support-for-code-scanning).\" */\n    sarif: CodeScanningAnalysisSarifFile,\n  /**\n   * The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.\n   * @format date-time\n   */\n    started_at?: string,\n  /** The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to \"API\". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`. */\n    tool_name?: string,\n  /**\n   * Whether the SARIF file will be validated according to the code scanning specifications.\n   * This parameter is intended to help integrators ensure that the uploaded SARIF files are correctly rendered by code scanning.\n   */\n    validate?: boolean,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CodeScanningSarifsReceipt",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".sarifId": {
        "rendered": "\n/** The SARIF ID obtained after uploading. */\n sarifId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CodeScanningSarifsStatus",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/codeowners/errors": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A branch, tag or commit name used to determine which version of the CODEOWNERS file to use. Default: the repository's default branch (e.g. `main`) */\n ref?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ref": {
        "rendered": "\n/** A branch, tag or commit name used to determine which version of the CODEOWNERS file to use. Default: the repository's default branch (e.g. `main`) */\n ref?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CodeownersErrors",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/codespaces": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    codespaces: (Codespace)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/codespaces": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** IP for location auto-detection when proxying a request */\n    client_ip?: string,\n  /** Path to devcontainer.json config to use for this codespace */\n    devcontainer_path?: string,\n  /** Display name for this codespace */\n    display_name?: string,\n  /** Time in minutes before codespace stops from inactivity */\n    idle_timeout_minutes?: number,\n  /** Location for this codespace. Assigned by IP if not provided */\n    location?: string,\n  /** Machine type to use for this codespace */\n    machine?: string,\n  /** Whether to authorize requested permissions from devcontainer.json */\n    multi_repo_permissions_opt_out?: boolean,\n  /** Git ref (typically a branch name) for this codespace */\n    ref?: string,\n  /** Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days). */\n    retention_period_minutes?: number,\n  /** Working directory for this codespace */\n    working_directory?: string,\n\n} | null,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Codespace",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/codespaces/devcontainers": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    devcontainers: ({\n    name?: string,\n    path: string,\n\n})[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/codespaces/machines": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The location to check for available machines. Assigned by IP if not provided. */\n location?: string, \n/** IP for location auto-detection when proxying a request */\n client_ip?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.location": {
        "rendered": "\n/** The location to check for available machines. Assigned by IP if not provided. */\n location?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.client_ip": {
        "rendered": "\n/** IP for location auto-detection when proxying a request */\n client_ip?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    machines: (CodespaceMachine)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/codespaces/new": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The branch or commit to check for a default devcontainer path. If not specified, the default branch will be checked. */\n ref?: string, \n/** An alternative IP for default location auto-detection, such as when proxying a request. */\n client_ip?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ref": {
        "rendered": "\n/** The branch or commit to check for a default devcontainer path. If not specified, the default branch will be checked. */\n ref?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.client_ip": {
        "rendered": "\n/** An alternative IP for default location auto-detection, such as when proxying a request. */\n client_ip?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** A GitHub user. */\n    billable_owner?: SimpleUser,\n    defaults?: {\n    devcontainer_path: string | null,\n    location: string,\n\n},\n\n}",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/codespaces/secrets": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    secrets: (RepoCodespacesSecret)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/codespaces/secrets/public-key": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CodespacesPublicKey",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/codespaces/secrets/{secret_name}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/codespaces/secrets/{secret_name}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "RepoCodespacesSecret",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/repos/{owner}/{repo}/codespaces/secrets/{secret_name}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/reference/codespaces#get-a-repository-public-key) endpoint.\n   * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$\n   */\n    encrypted_value?: string,\n  /** ID of the key you used to encrypt the secret. */\n    key_id?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/collaborators": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Filter collaborators returned by their affiliation. `outside` means all outside collaborators of an organization-owned repository. `direct` means all collaborators with permissions to an organization-owned repository, regardless of organization membership status. `all` means all collaborators the authenticated user can see. */\n affiliation?: \"outside\" | \"direct\" | \"all\", \n/** Filter collaborators by the permissions they have on the repository. If not specified, all collaborators will be returned. */\n permission?: \"pull\" | \"triage\" | \"push\" | \"maintain\" | \"admin\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.affiliation": {
        "rendered": "\n/** Filter collaborators returned by their affiliation. `outside` means all outside collaborators of an organization-owned repository. `direct` means all collaborators with permissions to an organization-owned repository, regardless of organization membership status. `all` means all collaborators the authenticated user can see. */\n affiliation?: \"outside\" | \"direct\" | \"all\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.permission": {
        "rendered": "\n/** Filter collaborators by the permissions they have on the repository. If not specified, all collaborators will be returned. */\n permission?: \"pull\" | \"triage\" | \"push\" | \"maintain\" | \"admin\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Collaborator)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/collaborators/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/collaborators/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/repos/{owner}/{repo}/collaborators/{username}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /**\n   * The permission to grant the collaborator. **Only valid on organization-owned repositories.** We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any.\n   * @default \"push\"\n   */\n    permission?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "RepositoryInvitation",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/collaborators/{username}/permission": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "RepositoryCollaboratorPermission",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/comments": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(CommitComment)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/comments/{comment_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": " commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/comments/{comment_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": " commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CommitComment",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/repos/{owner}/{repo}/comments/{comment_id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The contents of the comment */\n    body: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": " commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CommitComment",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/comments/{comment_id}/reactions": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a commit comment. */\n content?: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.content": {
        "rendered": "\n/** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a commit comment. */\n content?: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": " commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Reaction)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/comments/{comment_id}/reactions": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the commit comment. */\n    content: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": " commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Reaction",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": " commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".reactionId": {
        "rendered": " reactionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/commits": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** SHA or branch to start listing commits from. Default: the repository’s default branch (usually `main`). */\n sha?: string, \n/** Only commits containing this file path will be returned. */\n path?: string, \n/** GitHub login or email address by which to filter by commit author. */\n author?: string, \n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string, \n/** Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n until?: string, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sha": {
        "rendered": "\n/** SHA or branch to start listing commits from. Default: the repository’s default branch (usually `main`). */\n sha?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.path": {
        "rendered": "\n/** Only commits containing this file path will be returned. */\n path?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.author": {
        "rendered": "\n/** GitHub login or email address by which to filter by commit author. */\n author?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.since": {
        "rendered": "\n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.until": {
        "rendered": "\n/** Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n until?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Commit)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commitSha": {
        "rendered": "\n/** The SHA of the commit. */\n commitSha: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(BranchShort)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/commits/{commit_sha}/comments": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commitSha": {
        "rendered": " commitSha: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(CommitComment)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/commits/{commit_sha}/comments": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The contents of the comment. */\n    body: string,\n  /** **Deprecated**. Use **position** parameter instead. Line number in the file to comment on. */\n    line?: number,\n  /** Relative path of the file to comment on. */\n    path?: string,\n  /** Line index in the diff to comment on. */\n    position?: number,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commitSha": {
        "rendered": " commitSha: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CommitComment",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/commits/{commit_sha}/pulls": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commitSha": {
        "rendered": " commitSha: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(PullRequestSimple)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/commits/{ref}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Page number of the results to fetch. */\n page?: number, \n/** The number of results per page (max 100). */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".ref": {
        "rendered": "\n/** ref parameter */\n ref: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Commit",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/commits/{ref}/check-runs": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Returns check runs with the specified `name`. */\n check_name?: string, \n/** Returns check runs with the specified `status`. */\n status?: \"queued\" | \"in_progress\" | \"completed\", \n/** Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs. */\n filter?: \"latest\" | \"all\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number,  app_id?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.check_name": {
        "rendered": "\n/** Returns check runs with the specified `name`. */\n check_name?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.status": {
        "rendered": "\n/** Returns check runs with the specified `status`. */\n status?: \"queued\" | \"in_progress\" | \"completed\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter": {
        "rendered": "\n/** Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs. */\n filter?: \"latest\" | \"all\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.app_id": {
        "rendered": " app_id?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".ref": {
        "rendered": "\n/** ref parameter */\n ref: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    check_runs: (CheckRun)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/commits/{ref}/check-suites": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Filters check suites by GitHub App `id`. */\n app_id?: number, \n/** Returns check runs with the specified `name`. */\n check_name?: string, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.app_id": {
        "rendered": "\n/** Filters check suites by GitHub App `id`. */\n app_id?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.check_name": {
        "rendered": "\n/** Returns check runs with the specified `name`. */\n check_name?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".ref": {
        "rendered": "\n/** ref parameter */\n ref: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    check_suites: (CheckSuite)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/commits/{ref}/status": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".ref": {
        "rendered": "\n/** ref parameter */\n ref: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CombinedCommitStatus",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/commits/{ref}/statuses": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".ref": {
        "rendered": "\n/** ref parameter */\n ref: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Status)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/community/profile": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CommunityProfile",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/compare/{basehead}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Page number of the results to fetch. */\n page?: number, \n/** The number of results per page (max 100). */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".basehead": {
        "rendered": "\n/** The base branch and head branch to compare. This parameter expects the format `BASE...HEAD`. Both must be branch names in `repo`. To compare with a branch that exists in a different repository in the same network as `repo`, the `basehead` parameter expects the format `USERNAME:BASE...USERNAME:HEAD`. */\n basehead: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CommitComparison",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/contents/{path}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** object containing information about the author. */\n    author?: {\n  /** The email of the author (or committer) of the commit */\n    email?: string,\n  /** The name of the author (or committer) of the commit */\n    name?: string,\n\n},\n  /** The branch name. Default: the repository’s default branch (usually `master`) */\n    branch?: string,\n  /** object containing information about the committer. */\n    committer?: {\n  /** The email of the author (or committer) of the commit */\n    email?: string,\n  /** The name of the author (or committer) of the commit */\n    name?: string,\n\n},\n  /** The commit message. */\n    message: string,\n  /** The blob SHA of the file being deleted. */\n    sha: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".path": {
        "rendered": "\n/** path parameter */\n path: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "FileCommit",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/contents/{path}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`) */\n ref?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ref": {
        "rendered": "\n/** The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`) */\n ref?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".path": {
        "rendered": "\n/** path parameter */\n path: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(ContentDirectory | ContentFile | ContentSymlink | ContentSubmodule)",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/repos/{owner}/{repo}/contents/{path}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The author of the file. Default: The `committer` or the authenticated user if you omit `committer`. */\n    author?: {\n  /** @example \"\"2013-01-15T17:13:22+05:00\"\" */\n    date?: string,\n  /** The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted. */\n    email: string,\n  /** The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted. */\n    name: string,\n\n},\n  /** The branch name. Default: the repository’s default branch (usually `master`) */\n    branch?: string,\n  /** The person that committed the file. Default: the authenticated user. */\n    committer?: {\n  /** @example \"\"2013-01-05T13:13:22+05:00\"\" */\n    date?: string,\n  /** The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted. */\n    email: string,\n  /** The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted. */\n    name: string,\n\n},\n  /** The new file content, using Base64 encoding. */\n    content: string,\n  /** The commit message. */\n    message: string,\n  /** **Required if you are updating a file**. The blob SHA of the file being replaced. */\n    sha?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".path": {
        "rendered": "\n/** path parameter */\n path: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "FileCommit",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/contributors": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Set to `1` or `true` to include anonymous contributors in results. */\n anon?: string, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.anon": {
        "rendered": "\n/** Set to `1` or `true` to include anonymous contributors in results. */\n anon?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Contributor)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/dependabot/alerts": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A comma-separated list of states. If specified, only alerts with these states will be returned.\n\nCan be: `dismissed`, `fixed`, `open` */\n state?: string, \n/** A comma-separated list of severities. If specified, only alerts with these severities will be returned.\n\nCan be: `low`, `medium`, `high`, `critical` */\n severity?: string, \n/** A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.\n\nCan be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust` */\n ecosystem?: string, \n/** A comma-separated list of package names. If specified, only alerts for these packages will be returned. */\n package?: string, \n/** A comma-separated list of full manifest paths. If specified, only alerts for these manifests will be returned. */\n manifest?: string, \n/** The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned. */\n scope?: \"development\" | \"runtime\", \n/** The property by which to sort the results.\n`created` means when the alert was created.\n`updated` means when the alert's state last changed. */\n sort?: \"created\" | \"updated\", \n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\", \n/** **Deprecated**. Page number of the results to fetch. Use cursor-based pagination with `before` or `after` instead. */\n page?: number, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor. */\n before?: string, \n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor. */\n after?: string, \n/** **Deprecated**. The number of results per page (max 100), starting from the first matching result.\nThis parameter must not be used in combination with `last`.\nInstead, use `per_page` in combination with `after` to fetch the first page of results. */\n first?: number, \n/** **Deprecated**. The number of results per page (max 100), starting from the last matching result.\nThis parameter must not be used in combination with `first`.\nInstead, use `per_page` in combination with `before` to fetch the last page of results. */\n last?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.state": {
        "rendered": "\n/** A comma-separated list of states. If specified, only alerts with these states will be returned.\n\nCan be: `dismissed`, `fixed`, `open` */\n state?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.severity": {
        "rendered": "\n/** A comma-separated list of severities. If specified, only alerts with these severities will be returned.\n\nCan be: `low`, `medium`, `high`, `critical` */\n severity?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ecosystem": {
        "rendered": "\n/** A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.\n\nCan be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust` */\n ecosystem?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.package": {
        "rendered": "\n/** A comma-separated list of package names. If specified, only alerts for these packages will be returned. */\n package?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.manifest": {
        "rendered": "\n/** A comma-separated list of full manifest paths. If specified, only alerts for these manifests will be returned. */\n manifest?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.scope": {
        "rendered": "\n/** The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned. */\n scope?: \"development\" | \"runtime\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.sort": {
        "rendered": "\n/** The property by which to sort the results.\n`created` means when the alert was created.\n`updated` means when the alert's state last changed. */\n sort?: \"created\" | \"updated\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.page": {
        "rendered": "\n/** **Deprecated**. Page number of the results to fetch. Use cursor-based pagination with `before` or `after` instead. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.before": {
        "rendered": "\n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor. */\n before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.after": {
        "rendered": "\n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor. */\n after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.first": {
        "rendered": "\n/** **Deprecated**. The number of results per page (max 100), starting from the first matching result.\nThis parameter must not be used in combination with `last`.\nInstead, use `per_page` in combination with `after` to fetch the first page of results. */\n first?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.last": {
        "rendered": "\n/** **Deprecated**. The number of results per page (max 100), starting from the last matching result.\nThis parameter must not be used in combination with `first`.\nInstead, use `per_page` in combination with `before` to fetch the last page of results. */\n last?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(DependabotAlert)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/dependabot/alerts/{alert_number}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".alertNumber": {
        "rendered": "\n/** The number that identifies a Dependabot alert in its repository.\nYou can find this at the end of the URL for a Dependabot alert within GitHub,\nor in `number` fields in the response from the\n`GET /repos/{owner}/{repo}/dependabot/alerts` operation. */\n alertNumber: AlertNumber,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "DependabotAlert",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/repos/{owner}/{repo}/dependabot/alerts/{alert_number}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * An optional comment associated with dismissing the alert.\n   * @maxLength 280\n   */\n    dismissed_comment?: string,\n  /** **Required when `state` is `dismissed`.** A reason for dismissing the alert. */\n    dismissed_reason?: \"fix_started\" | \"inaccurate\" | \"no_bandwidth\" | \"not_used\" | \"tolerable_risk\",\n  /**\n   * The state of the Dependabot alert.\n   * A `dismissed_reason` must be provided when setting the state to `dismissed`.\n   */\n    state: \"dismissed\" | \"open\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".alertNumber": {
        "rendered": " alertNumber: AlertNumber,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "DependabotAlert",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/dependabot/secrets": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    secrets: (DependabotSecret)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/dependabot/secrets/public-key": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "DependabotPublicKey",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/dependabot/secrets/{secret_name}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/dependabot/secrets/{secret_name}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "DependabotSecret",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/repos/{owner}/{repo}/dependabot/secrets/{secret_name}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/reference/dependabot#get-a-repository-public-key) endpoint.\n   * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$\n   */\n    encrypted_value?: string,\n  /** ID of the key you used to encrypt the secret. */\n    key_id?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/dependency-graph/compare/{basehead}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The full path, relative to the repository root, of the dependency manifest file. */\n name?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.name": {
        "rendered": "\n/** The full path, relative to the repository root, of the dependency manifest file. */\n name?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".basehead": {
        "rendered": "\n/** The base and head Git revisions to compare. The Git revisions will be resolved to commit SHAs. Named revisions will be resolved to their corresponding HEAD commits, and an appropriate merge base will be determined. This parameter expects the format `{base}...{head}`. */\n basehead: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "DependencyGraphDiff",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/dependency-graph/snapshots": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: Snapshot,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** The time at which the snapshot was created. */\n    created_at: string,\n  /** ID of the created snapshot. */\n    id: number,\n  /** A message providing further details about the result, such as why the dependencies were not updated. */\n    message: string,\n  /** Either \"SUCCESS\", \"ACCEPTED\", or \"INVALID\". \"SUCCESS\" indicates that the snapshot was successfully created and the repository's dependencies were updated. \"ACCEPTED\" indicates that the snapshot was successfully created, but the repository's dependencies were not updated. \"INVALID\" indicates that the snapshot was malformed. */\n    result: string,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/deployments": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The SHA recorded at creation time. */\n sha?: string, \n/** The name of the ref. This can be a branch, tag, or SHA. */\n ref?: string, \n/** The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`). */\n task?: string, \n/** The name of the environment that was deployed to (e.g., `staging` or `production`). */\n environment?: string, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sha": {
        "rendered": "\n/** The SHA recorded at creation time. */\n sha?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ref": {
        "rendered": "\n/** The name of the ref. This can be a branch, tag, or SHA. */\n ref?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.task": {
        "rendered": "\n/** The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`). */\n task?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.environment": {
        "rendered": "\n/** The name of the environment that was deployed to (e.g., `staging` or `production`). */\n environment?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Deployment)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/deployments": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.\n   * @default true\n   */\n    auto_merge?: boolean,\n  /**\n   * Short description of the deployment.\n   * @default \"\"\n   */\n    description?: string | null,\n  /**\n   * Name for the target deployment environment (e.g., `production`, `staging`, `qa`).\n   * @default \"production\"\n   */\n    environment?: string,\n  /** JSON payload with extra information about the deployment. */\n    payload?: (hasuraSdk.JSONValue | string),\n  /** Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise. */\n    production_environment?: boolean,\n  /** The ref to deploy. This can be a branch, tag, or SHA. */\n    ref: string,\n  /** The [status](https://docs.github.com/rest/commits/statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts. */\n    required_contexts?: (string)[],\n  /**\n   * Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).\n   * @default \"deploy\"\n   */\n    task?: string,\n  /**\n   * Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`\n   * @default false\n   */\n    transient_environment?: boolean,\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Deployment",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/deployments/{deployment_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".deploymentId": {
        "rendered": "\n/** deployment_id parameter */\n deploymentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/deployments/{deployment_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".deploymentId": {
        "rendered": " deploymentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Deployment",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/deployments/{deployment_id}/statuses": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".deploymentId": {
        "rendered": " deploymentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(DeploymentStatus)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/deployments/{deployment_id}/statuses": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true` */\n    auto_inactive?: boolean,\n  /**\n   * A short description of the status. The maximum description length is 140 characters.\n   * @default \"\"\n   */\n    description?: string,\n  /** Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`. */\n    environment?: \"production\" | \"staging\" | \"qa\",\n  /**\n   * Sets the URL for accessing your environment. Default: `\"\"`\n   * @default \"\"\n   */\n    environment_url?: string,\n  /**\n   * The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `\"\"`\n   * @default \"\"\n   */\n    log_url?: string,\n  /** The state of the status. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub. */\n    state: \"error\" | \"failure\" | \"inactive\" | \"in_progress\" | \"queued\" | \"pending\" | \"success\",\n  /**\n   * The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. **Note:** It's recommended to use the `log_url` parameter, which replaces `target_url`.\n   * @default \"\"\n   */\n    target_url?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".deploymentId": {
        "rendered": " deploymentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "DeploymentStatus",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".deploymentId": {
        "rendered": " deploymentId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".statusId": {
        "rendered": " statusId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "DeploymentStatus",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/dispatches": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** JSON payload with extra information about the webhook event that your action or workflow may use. The maximum number of top-level properties is 10. */\n    client_payload?: hasuraSdk.JSONValue,\n  /**\n   * A custom webhook event name. Must be 100 characters or fewer.\n   * @minLength 1\n   * @maxLength 100\n   */\n    event_type: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/environments": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    environments?: (Environment)[],\n  /**\n   * The number of environments in this repository\n   * @example 5\n   */\n    total_count?: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/environments/{environment_name}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".environmentName": {
        "rendered": "\n/** The name of the environment. */\n environmentName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/environments/{environment_name}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".environmentName": {
        "rendered": " environmentName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Environment",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/repos/{owner}/{repo}/environments/{environment_name}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /** The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`. */\n    deployment_branch_policy?: DeploymentBranchPolicySettings,\n  /** The people or teams that may review jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed. */\n    reviewers?: ({\n  /**\n   * The id of the user or team who can review the deployment\n   * @example 4532992\n   */\n    id?: number,\n  /** The type of reviewer. */\n    type?: DeploymentReviewerType,\n\n})[] | null,\n  /** The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days). */\n    wait_timer?: WaitTimer,\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".environmentName": {
        "rendered": " environmentName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Environment",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".environmentName": {
        "rendered": " environmentName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    branch_policies: (DeploymentBranchPolicy)[],\n  /**\n   * The number of deployment branch policies for the environment.\n   * @example 2\n   */\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: DeploymentBranchPolicyNamePattern,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".environmentName": {
        "rendered": " environmentName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "DeploymentBranchPolicy",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".environmentName": {
        "rendered": " environmentName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branchPolicyId": {
        "rendered": "\n/** The unique identifier of the branch policy. */\n branchPolicyId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".environmentName": {
        "rendered": " environmentName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branchPolicyId": {
        "rendered": " branchPolicyId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "DeploymentBranchPolicy",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: DeploymentBranchPolicyNamePattern,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".environmentName": {
        "rendered": " environmentName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branchPolicyId": {
        "rendered": " branchPolicyId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "DeploymentBranchPolicy",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/events": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Event)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/forks": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort order. `stargazers` will sort by star count. */\n sort?: \"newest\" | \"oldest\" | \"stargazers\" | \"watchers\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.sort": {
        "rendered": "\n/** The sort order. `stargazers` will sort by star count. */\n sort?: \"newest\" | \"oldest\" | \"stargazers\" | \"watchers\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(MinimalRepository)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/forks": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /** When forking from an existing repository, fork with only the default branch. */\n    default_branch_only?: boolean,\n  /** When forking from an existing repository, a new name for the fork. */\n    name?: string,\n  /** Optional parameter to specify the organization name if forking into an organization. */\n    organization?: string,\n\n} | null,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "FullRepository",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/git/blobs": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The new blob's content. */\n    content: string,\n  /**\n   * The encoding used for `content`. Currently, `\"utf-8\"` and `\"base64\"` are supported.\n   * @default \"utf-8\"\n   */\n    encoding?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ShortBlob",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/git/blobs/{file_sha}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".fileSha": {
        "rendered": " fileSha: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Blob",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/git/commits": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details. */\n    author?: {\n  /**\n   * Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.\n   * @format date-time\n   */\n    date?: string,\n  /** The email of the author (or committer) of the commit */\n    email: string,\n  /** The name of the author (or committer) of the commit */\n    name: string,\n\n},\n  /** Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details. */\n    committer?: {\n  /**\n   * Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.\n   * @format date-time\n   */\n    date?: string,\n  /** The email of the author (or committer) of the commit */\n    email?: string,\n  /** The name of the author (or committer) of the commit */\n    name?: string,\n\n},\n  /** The commit message */\n    message: string,\n  /** The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided. */\n    parents?: (string)[],\n  /** The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits. */\n    signature?: string,\n  /** The SHA of the tree object this commit points to */\n    tree: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GitCommit",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/git/commits/{commit_sha}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commitSha": {
        "rendered": " commitSha: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GitCommit",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/git/matching-refs/{ref}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".ref": {
        "rendered": "\n/** ref parameter */\n ref: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(GitRef)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/git/ref/{ref}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".ref": {
        "rendered": "\n/** ref parameter */\n ref: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GitRef",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/git/refs": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** @example \"\"refs/heads/newbranch\"\" */\n    key?: string,\n  /** The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected. */\n    ref: string,\n  /** The SHA1 value for this reference. */\n    sha: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GitRef",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/git/refs/{ref}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".ref": {
        "rendered": "\n/** ref parameter */\n ref: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/repos/{owner}/{repo}/git/refs/{ref}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work.\n   * @default false\n   */\n    force?: boolean,\n  /** The SHA1 value to set this reference to */\n    sha: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".ref": {
        "rendered": "\n/** The name of the fully qualified reference to update. For example, `refs/heads/master`. If the value doesn't start with `refs` and have at least two slashes, it will be rejected. */\n ref: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GitRef",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/git/tags": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The tag message. */\n    message: string,\n  /** The SHA of the git object this is tagging. */\n    object: string,\n  /** The tag's name. This is typically a version (e.g., \"v0.0.1\"). */\n    tag: string,\n  /** An object with information about the individual creating the tag. */\n    tagger?: {\n  /**\n   * When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.\n   * @format date-time\n   */\n    date?: string,\n  /** The email of the author of the tag */\n    email: string,\n  /** The name of the author of the tag */\n    name: string,\n\n},\n  /** The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`. */\n    type: \"commit\" | \"tree\" | \"blob\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GitTag",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/git/tags/{tag_sha}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".tagSha": {
        "rendered": " tagSha: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GitTag",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/git/trees": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on.\n   * If not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the `tree` parameter will be listed as deleted by the new commit.\n   */\n    base_tree?: string,\n  /** Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure. */\n    tree: ({\n  /**\n   * The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.  \n   *   \n   * **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.\n   */\n    content?: string,\n  /** The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink. */\n    mode?: \"100644\" | \"100755\" | \"040000\" | \"160000\" | \"120000\",\n  /** The file referenced in the tree. */\n    path?: string,\n  /**\n   * The SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the value is `null` then the file will be deleted.  \n   *   \n   * **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.\n   */\n    sha?: string | null,\n  /** Either `blob`, `tree`, or `commit`. */\n    type?: \"blob\" | \"tree\" | \"commit\",\n\n})[],\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GitTree",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/git/trees/{tree_sha}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Setting this parameter to any value returns the objects or subtrees referenced by the tree specified in `:tree_sha`. For example, setting `recursive` to any of the following will enable returning objects or subtrees: `0`, `1`, `\"true\"`, and `\"false\"`. Omit this parameter to prevent recursively returning objects or subtrees. */\n recursive?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.recursive": {
        "rendered": "\n/** Setting this parameter to any value returns the objects or subtrees referenced by the tree specified in `:tree_sha`. For example, setting `recursive` to any of the following will enable returning objects or subtrees: `0`, `1`, `\"true\"`, and `\"false\"`. Omit this parameter to prevent recursively returning objects or subtrees. */\n recursive?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".treeSha": {
        "rendered": " treeSha: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GitTree",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/hooks": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Hook)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/hooks": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /**\n   * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.\n   * @default true\n   */\n    active?: boolean,\n  /** Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/repos#create-hook-config-params). */\n    config?: {\n  /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */\n    content_type?: WebhookConfigContentType,\n  /** @example \"\"sha256\"\" */\n    digest?: string,\n  /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */\n    insecure_ssl?: WebhookConfigInsecureSsl,\n  /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). */\n    secret?: WebhookConfigSecret,\n  /** @example \"\"abc\"\" */\n    token?: string,\n  /** The URL to which the payloads will be delivered. */\n    url?: WebhookConfigUrl,\n\n},\n  /**\n   * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.\n   * @default [\"push\"]\n   */\n    events?: (string)[],\n  /** Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`. */\n    name?: string,\n\n} | null,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Hook",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/hooks/{hook_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".hookId": {
        "rendered": " hookId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/hooks/{hook_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".hookId": {
        "rendered": " hookId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Hook",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/repos/{owner}/{repo}/hooks/{hook_id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.\n   * @default true\n   */\n    active?: boolean,\n  /** Determines a list of events to be added to the list of events that the Hook triggers for. */\n    add_events?: (string)[],\n  /** Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/repos#create-hook-config-params). */\n    config?: {\n  /** @example \"\"bar@example.com\"\" */\n    address?: string,\n  /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */\n    content_type?: WebhookConfigContentType,\n  /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */\n    insecure_ssl?: WebhookConfigInsecureSsl,\n  /** @example \"\"The Serious Room\"\" */\n    room?: string,\n  /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). */\n    secret?: WebhookConfigSecret,\n  /** The URL to which the payloads will be delivered. */\n    url: WebhookConfigUrl,\n\n},\n  /**\n   * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.\n   * @default [\"push\"]\n   */\n    events?: (string)[],\n  /** Determines a list of events to be removed from the list of events that the Hook triggers for. */\n    remove_events?: (string)[],\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".hookId": {
        "rendered": " hookId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Hook",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/hooks/{hook_id}/config": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".hookId": {
        "rendered": " hookId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "WebhookConfig",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/repos/{owner}/{repo}/hooks/{hook_id}/config": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */\n    content_type?: WebhookConfigContentType,\n  /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */\n    insecure_ssl?: WebhookConfigInsecureSsl,\n  /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). */\n    secret?: WebhookConfigSecret,\n  /** The URL to which the payloads will be delivered. */\n    url?: WebhookConfigUrl,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".hookId": {
        "rendered": " hookId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "WebhookConfig",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/hooks/{hook_id}/deliveries": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors. */\n cursor?: string,  redelivery?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cursor": {
        "rendered": "\n/** Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors. */\n cursor?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.redelivery": {
        "rendered": " redelivery?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".hookId": {
        "rendered": " hookId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(HookDeliveryItem)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".hookId": {
        "rendered": " hookId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".deliveryId": {
        "rendered": " deliveryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "HookDelivery",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".hookId": {
        "rendered": " hookId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".deliveryId": {
        "rendered": " deliveryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/hooks/{hook_id}/pings": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".hookId": {
        "rendered": " hookId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/hooks/{hook_id}/tests": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".hookId": {
        "rendered": " hookId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/import": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/import": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Import",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/repos/{owner}/{repo}/import": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /**\n   * For a tfvc import, the name of the project that is being imported.\n   * @example \"\"project1\"\"\n   */\n    tfvc_project?: string,\n  /**\n   * The type of version control system you are migrating from.\n   * @example \"\"git\"\"\n   */\n    vcs?: \"subversion\" | \"tfvc\" | \"git\" | \"mercurial\",\n  /** The password to provide to the originating repository. */\n    vcs_password?: string,\n  /** The username to provide to the originating repository. */\n    vcs_username?: string,\n\n} | null,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Import",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/repos/{owner}/{repo}/import": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** For a tfvc import, the name of the project that is being imported. */\n    tfvc_project?: string,\n  /** The originating VCS type. Without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response. */\n    vcs?: \"subversion\" | \"git\" | \"mercurial\" | \"tfvc\",\n  /** If authentication is required, the password to provide to `vcs_url`. */\n    vcs_password?: string,\n  /** The URL of the originating repository. */\n    vcs_url: string,\n  /** If authentication is required, the username to provide to `vcs_url`. */\n    vcs_username?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Import",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/import/authors": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A user ID. Only return users with an ID greater than this ID. */\n since?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.since": {
        "rendered": "\n/** A user ID. Only return users with an ID greater than this ID. */\n since?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(PorterAuthor)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/repos/{owner}/{repo}/import/authors/{author_id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /** The new Git author email. */\n    email?: string,\n  /** The new Git author name. */\n    name?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".authorId": {
        "rendered": " authorId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PorterAuthor",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/import/large_files": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(PorterLargeFile)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/repos/{owner}/{repo}/import/lfs": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Whether to store large files during the import. `opt_in` means large files will be stored using Git LFS. `opt_out` means large files will be removed during the import. */\n    use_lfs: \"opt_in\" | \"opt_out\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Import",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/installation": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Installation",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/interaction-limits": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/interaction-limits": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(InteractionLimitResponse | hasuraSdk.JSONValue)",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/repos/{owner}/{repo}/interaction-limits": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: InteractionLimit,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "InteractionLimitResponse",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/invitations": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(RepositoryInvitation)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/invitations/{invitation_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".invitationId": {
        "rendered": " invitationId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/repos/{owner}/{repo}/invitations/{invitation_id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /** The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`. */\n    permissions?: \"read\" | \"write\" | \"maintain\" | \"triage\" | \"admin\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".invitationId": {
        "rendered": " invitationId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "RepositoryInvitation",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/issues": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned. */\n milestone?: string, \n/** Indicates the state of the issues to return. */\n state?: \"open\" | \"closed\" | \"all\", \n/** Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user. */\n assignee?: string, \n/** The user that created the issue. */\n creator?: string, \n/** A user that's mentioned in the issue. */\n mentioned?: string, \n/** A list of comma separated label names. Example: `bug,ui,@high` */\n labels?: string, \n/** What to sort results by. */\n sort?: \"created\" | \"updated\" | \"comments\", \n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\", \n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.milestone": {
        "rendered": "\n/** If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned. */\n milestone?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.state": {
        "rendered": "\n/** Indicates the state of the issues to return. */\n state?: \"open\" | \"closed\" | \"all\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.assignee": {
        "rendered": "\n/** Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user. */\n assignee?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.creator": {
        "rendered": "\n/** The user that created the issue. */\n creator?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.mentioned": {
        "rendered": "\n/** A user that's mentioned in the issue. */\n mentioned?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.labels": {
        "rendered": "\n/** A list of comma separated label names. Example: `bug,ui,@high` */\n labels?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** What to sort results by. */\n sort?: \"created\" | \"updated\" | \"comments\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.since": {
        "rendered": "\n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Issue)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/issues": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_ */\n    assignee?: string | null,\n  /** Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._ */\n    assignees?: (string)[],\n  /** The contents of the issue. */\n    body?: string,\n  /** Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._ */\n    labels?: ((string | {\n    color?: string | null,\n    description?: string | null,\n    id?: number,\n    name?: string,\n\n}))[],\n  /** The `number` of the milestone to associate this issue with. _NOTE: Only users with push access can set the milestone for new issues. The milestone is silently dropped otherwise._ */\n    milestone?: (string | number | null),\n  /** The title of the issue. */\n    title: (string | number),\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Issue",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/issues/comments": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to. */\n sort?: \"created\" | \"updated\", \n/** Either `asc` or `desc`. Ignored without the `sort` parameter. */\n direction?: \"asc\" | \"desc\", \n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.sort": {
        "rendered": "\n/** The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to. */\n sort?: \"created\" | \"updated\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** Either `asc` or `desc`. Ignored without the `sort` parameter. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.since": {
        "rendered": "\n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(IssueComment)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/issues/comments/{comment_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": " commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/issues/comments/{comment_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": " commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "IssueComment",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/repos/{owner}/{repo}/issues/comments/{comment_id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The contents of the comment. */\n    body: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": " commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "IssueComment",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue comment. */\n content?: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.content": {
        "rendered": "\n/** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue comment. */\n content?: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": " commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Reaction)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the issue comment. */\n    content: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": " commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Reaction",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": " commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".reactionId": {
        "rendered": " reactionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/issues/events": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(IssueEvent)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/issues/events/{event_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".eventId": {
        "rendered": " eventId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "IssueEvent",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/issues/{issue_number}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueNumber": {
        "rendered": "\n/** The number that identifies the issue. */\n issueNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Issue",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/repos/{owner}/{repo}/issues/{issue_number}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /** Username to assign to this issue. **This field is deprecated.** */\n    assignee?: string | null,\n  /** Usernames to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this issue. Send an empty array (`[]`) to clear all assignees from the issue. Only users with push access can set assignees for new issues. Without push access to the repository, assignee changes are silently dropped. */\n    assignees?: (string)[],\n  /** The contents of the issue. */\n    body?: string | null,\n  /** Labels to associate with this issue. Pass one or more labels to _replace_ the set of labels on this issue. Send an empty array (`[]`) to clear all labels from the issue. Only users with push access can set labels for issues. Without push access to the repository, label changes are silently dropped. */\n    labels?: ((string | {\n    color?: string | null,\n    description?: string | null,\n    id?: number,\n    name?: string,\n\n}))[],\n  /** The `number` of the milestone to associate this issue with or use `null` to remove the current milestone. Only users with push access can set the milestone for issues. Without push access to the repository, milestone changes are silently dropped. */\n    milestone?: (string | number | null),\n  /** The open or closed state of the issue. */\n    state?: \"open\" | \"closed\",\n  /**\n   * The reason for the state change. Ignored unless `state` is changed.\n   * @example \"not_planned\"\n   */\n    state_reason?: \"completed\" | \"not_planned\" | \"reopened\" | null,\n  /** The title of the issue. */\n    title?: (string | number | null),\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueNumber": {
        "rendered": " issueNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Issue",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/issues/{issue_number}/assignees": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._ */\n    assignees?: (string)[],\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueNumber": {
        "rendered": " issueNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Issue",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/issues/{issue_number}/assignees": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /** Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._ */\n    assignees?: (string)[],\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueNumber": {
        "rendered": " issueNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Issue",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueNumber": {
        "rendered": " issueNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".assignee": {
        "rendered": " assignee: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/issues/{issue_number}/comments": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.since": {
        "rendered": "\n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueNumber": {
        "rendered": " issueNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(IssueComment)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/issues/{issue_number}/comments": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The contents of the comment. */\n    body: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueNumber": {
        "rendered": " issueNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "IssueComment",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/issues/{issue_number}/events": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueNumber": {
        "rendered": " issueNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(IssueEventForIssue)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/issues/{issue_number}/labels": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueNumber": {
        "rendered": " issueNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/issues/{issue_number}/labels": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueNumber": {
        "rendered": " issueNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Label)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/issues/{issue_number}/labels": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: ({\n  /**\n   * The names of the labels to add to the issue's existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also replace all of the labels for an issue. For more information, see \"[Set labels for an issue](https://docs.github.com/rest/reference/issues#set-labels-for-an-issue).\"\n   * @minItems 1\n   */\n    labels?: (string)[],\n\n} | (string)[] | {\n  /** @minItems 1 */\n    labels?: ({\n    name: string,\n\n})[],\n\n} | ({\n    name: string,\n\n})[] | string),",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueNumber": {
        "rendered": " issueNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Label)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/repos/{owner}/{repo}/issues/{issue_number}/labels": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: ({\n  /**\n   * The names of the labels to set for the issue. The labels you set replace any existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also add labels to the existing labels for an issue. For more information, see \"[Add labels to an issue](https://docs.github.com/rest/reference/issues#add-labels-to-an-issue).\"\n   * @minItems 1\n   */\n    labels?: (string)[],\n\n} | (string)[] | {\n  /** @minItems 1 */\n    labels?: ({\n    name: string,\n\n})[],\n\n} | ({\n    name: string,\n\n})[] | string),",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueNumber": {
        "rendered": " issueNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Label)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueNumber": {
        "rendered": " issueNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".name": {
        "rendered": " name: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Label)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/issues/{issue_number}/lock": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueNumber": {
        "rendered": " issueNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/repos/{owner}/{repo}/issues/{issue_number}/lock": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /**\n   * The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:  \n   *  * `off-topic`  \n   *  * `too heated`  \n   *  * `resolved`  \n   *  * `spam`\n   */\n    lock_reason?: \"off-topic\" | \"too heated\" | \"resolved\" | \"spam\",\n\n} | null,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueNumber": {
        "rendered": " issueNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/issues/{issue_number}/reactions": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue. */\n content?: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.content": {
        "rendered": "\n/** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue. */\n content?: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueNumber": {
        "rendered": " issueNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Reaction)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/issues/{issue_number}/reactions": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the issue. */\n    content: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueNumber": {
        "rendered": " issueNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Reaction",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueNumber": {
        "rendered": " issueNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".reactionId": {
        "rendered": " reactionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/issues/{issue_number}/timeline": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueNumber": {
        "rendered": " issueNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(TimelineIssueEvents)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/keys": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(DeployKey)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/keys": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The contents of the key. */\n    key: string,\n  /**\n   * If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.  \n   *   \n   * Deploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see \"[Repository permission levels for an organization](https://docs.github.com/articles/repository-permission-levels-for-an-organization/)\" and \"[Permission levels for a user account repository](https://docs.github.com/articles/permission-levels-for-a-user-account-repository/).\"\n   */\n    read_only?: boolean,\n  /** A name for the key. */\n    title?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "DeployKey",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/keys/{key_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".keyId": {
        "rendered": "\n/** The unique identifier of the key. */\n keyId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/keys/{key_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".keyId": {
        "rendered": " keyId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "DeployKey",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/labels": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Label)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/labels": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`. */\n    color?: string,\n  /** A short description of the label. Must be 100 characters or fewer. */\n    description?: string,\n  /** The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png \":strawberry:\"). For a full list of available emoji and codes, see \"[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet).\" */\n    name: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Label",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/labels/{name}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".name": {
        "rendered": " name: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/labels/{name}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".name": {
        "rendered": " name: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Label",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/repos/{owner}/{repo}/labels/{name}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /** The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`. */\n    color?: string,\n  /** A short description of the label. Must be 100 characters or fewer. */\n    description?: string,\n  /** The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png \":strawberry:\"). For a full list of available emoji and codes, see \"[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet).\" */\n    new_name?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".name": {
        "rendered": " name: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Label",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/languages": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Language",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/lfs": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/repos/{owner}/{repo}/lfs": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/license": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "LicenseContent",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/merge-upstream": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The name of the branch which should be updated to match upstream. */\n    branch: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "MergedUpstream",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/merges": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The name of the base branch that the head will be merged into. */\n    base: string,\n  /** Commit message to use for the merge commit. If omitted, a default message will be used. */\n    commit_message?: string,\n  /** The head to merge. This can be a branch name or a commit SHA1. */\n    head: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Commit",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/milestones": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The state of the milestone. Either `open`, `closed`, or `all`. */\n state?: \"open\" | \"closed\" | \"all\", \n/** What to sort results by. Either `due_on` or `completeness`. */\n sort?: \"due_on\" | \"completeness\", \n/** The direction of the sort. Either `asc` or `desc`. */\n direction?: \"asc\" | \"desc\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.state": {
        "rendered": "\n/** The state of the milestone. Either `open`, `closed`, or `all`. */\n state?: \"open\" | \"closed\" | \"all\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.sort": {
        "rendered": "\n/** What to sort results by. Either `due_on` or `completeness`. */\n sort?: \"due_on\" | \"completeness\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The direction of the sort. Either `asc` or `desc`. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Milestone)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/milestones": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** A description of the milestone. */\n    description?: string,\n  /**\n   * The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.\n   * @format date-time\n   */\n    due_on?: string,\n  /**\n   * The state of the milestone. Either `open` or `closed`.\n   * @default \"open\"\n   */\n    state?: \"open\" | \"closed\",\n  /** The title of the milestone. */\n    title: string,\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Milestone",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/milestones/{milestone_number}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".milestoneNumber": {
        "rendered": "\n/** The number that identifies the milestone. */\n milestoneNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/milestones/{milestone_number}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".milestoneNumber": {
        "rendered": " milestoneNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Milestone",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/repos/{owner}/{repo}/milestones/{milestone_number}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /** A description of the milestone. */\n    description?: string,\n  /**\n   * The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.\n   * @format date-time\n   */\n    due_on?: string,\n  /**\n   * The state of the milestone. Either `open` or `closed`.\n   * @default \"open\"\n   */\n    state?: \"open\" | \"closed\",\n  /** The title of the milestone. */\n    title?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".milestoneNumber": {
        "rendered": " milestoneNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Milestone",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/milestones/{milestone_number}/labels": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".milestoneNumber": {
        "rendered": " milestoneNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Label)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/notifications": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** If `true`, show notifications marked as read. */\n all?: boolean, \n/** If `true`, only shows notifications in which the user is directly participating or mentioned. */\n participating?: boolean, \n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string, \n/** Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n before?: string, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.all": {
        "rendered": "\n/** If `true`, show notifications marked as read. */\n all?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.participating": {
        "rendered": "\n/** If `true`, only shows notifications in which the user is directly participating or mentioned. */\n participating?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.since": {
        "rendered": "\n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.before": {
        "rendered": "\n/** Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Thread)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/repos/{owner}/{repo}/notifications": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /**\n   * Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.\n   * @format date-time\n   */\n    last_read_at?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    message?: string,\n    url?: string,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/pages": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/pages": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Page",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/pages": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: ( | null) & ({\n  /** The process in which the Page will be built. Possible values are `\"legacy\"` and `\"workflow\"`. */\n    build_type?: \"legacy\" | \"workflow\",\n  /** The source branch and directory used to publish your Pages site. */\n    source?: {\n  /** The repository branch used to publish your site's source files. */\n    branch: string,\n  /**\n   * The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/`\n   * @default \"/\"\n   */\n    path?: \"/\" | \"/docs\",\n\n},\n\n} | null),",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Page",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/repos/{owner}/{repo}/pages": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: ({\n  /** The process by which the GitHub Pages site will be built. `workflow` means that the site is built by a custom GitHub Actions workflow. `legacy` means that the site is built by GitHub when changes are pushed to a specific branch. */\n    build_type?: \"legacy\" | \"workflow\",\n  /** Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see \"[Using a custom domain with GitHub Pages](https://docs.github.com/articles/using-a-custom-domain-with-github-pages/).\" */\n    cname?: string | null,\n  /** Specify whether HTTPS should be enforced for the repository. */\n    https_enforced?: boolean,\n  /** Update the source for the repository. Must include the branch name, and may optionally specify the subdirectory `/docs`. Possible values are `\"gh-pages\"`, `\"master\"`, and `\"master /docs\"`. */\n    source?: (\"gh-pages\" | \"master\" | \"master /docs\" | {\n  /** The repository branch used to publish your site's source files. */\n    branch: string,\n  /** The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. */\n    path: \"/\" | \"/docs\",\n\n}),\n\n}),",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/pages/builds": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(PageBuild)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/pages/builds": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PageBuildStatus",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/pages/builds/latest": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PageBuild",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/pages/builds/{build_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".buildId": {
        "rendered": " buildId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PageBuild",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/pages/deployment": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The URL of an artifact that contains the .zip or .tar of static assets to deploy. The artifact belongs to the repository. */\n    artifact_url: string,\n  /**\n   * The target environment for this GitHub Pages deployment.\n   * @default \"github-pages\"\n   */\n    environment?: string,\n  /** The OIDC token issued by GitHub Actions certifying the origin of the deployment. */\n    oidc_token: string,\n  /**\n   * A unique string that represents the version of the build for this deployment.\n   * @default \"GITHUB_SHA\"\n   */\n    pages_build_version: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PageDeployment",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/pages/health": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PagesHealthCheck",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/projects": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Indicates the state of the projects to return. */\n state?: \"open\" | \"closed\" | \"all\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.state": {
        "rendered": "\n/** Indicates the state of the projects to return. */\n state?: \"open\" | \"closed\" | \"all\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Project)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/projects": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The description of the project. */\n    body?: string,\n  /** The name of the project. */\n    name: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Project",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/pulls": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Either `open`, `closed`, or `all` to filter by state. */\n state?: \"open\" | \"closed\" | \"all\", \n/** Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`. */\n head?: string, \n/** Filter pulls by base branch name. Example: `gh-pages`. */\n base?: string, \n/** What to sort results by. `popularity` will sort by the number of comments. `long-running` will sort by date created and will limit the results to pull requests that have been open for more than a month and have had activity within the past month. */\n sort?: \"created\" | \"updated\" | \"popularity\" | \"long-running\", \n/** The direction of the sort. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`. */\n direction?: \"asc\" | \"desc\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.state": {
        "rendered": "\n/** Either `open`, `closed`, or `all` to filter by state. */\n state?: \"open\" | \"closed\" | \"all\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.head": {
        "rendered": "\n/** Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`. */\n head?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.base": {
        "rendered": "\n/** Filter pulls by base branch name. Example: `gh-pages`. */\n base?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** What to sort results by. `popularity` will sort by the number of comments. `long-running` will sort by date created and will limit the results to pull requests that have been open for more than a month and have had activity within the past month. */\n sort?: \"created\" | \"updated\" | \"popularity\" | \"long-running\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The direction of the sort. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(PullRequestSimple)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/pulls": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository. */\n    base: string,\n  /** The contents of the pull request. */\n    body?: string,\n  /** Indicates whether the pull request is a draft. See \"[Draft Pull Requests](https://docs.github.com/articles/about-pull-requests#draft-pull-requests)\" in the GitHub Help documentation to learn more. */\n    draft?: boolean,\n  /** The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`. */\n    head: string,\n  /**\n   * The name of the repository where the changes in the pull request were made. This field is required for cross-repository pull requests if both repositories are owned by the same organization.\n   * @format repo.nwo\n   * @example \"octo-org/octo-repo\"\n   */\n    head_repo?: string,\n  /**\n   * An issue in the repository to convert to a pull request. The issue title, body, and comments will become the title, body, and comments on the new pull request. Required unless `title` is specified.\n   * @example 1\n   */\n    issue?: number,\n  /** Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request. */\n    maintainer_can_modify?: boolean,\n  /** The title of the new pull request. Required unless `issue` is specified. */\n    title?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PullRequest",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/pulls/comments": {
    "query": {
      ".query": {
        "rendered": " query: {  sort?: \"created\" | \"updated\" | \"created_at\", \n/** The direction to sort results. Ignored without `sort` parameter. */\n direction?: \"asc\" | \"desc\", \n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.sort": {
        "rendered": " sort?: \"created\" | \"updated\" | \"created_at\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort results. Ignored without `sort` parameter. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.since": {
        "rendered": "\n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(PullRequestReviewComment)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/pulls/comments/{comment_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": " commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/pulls/comments/{comment_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": " commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PullRequestReviewComment",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/repos/{owner}/{repo}/pulls/comments/{comment_id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The text of the reply to the review comment. */\n    body: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": " commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PullRequestReviewComment",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a pull request review comment. */\n content?: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.content": {
        "rendered": "\n/** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a pull request review comment. */\n content?: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": " commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Reaction)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the pull request review comment. */\n    content: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": " commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Reaction",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": " commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".reactionId": {
        "rendered": " reactionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/pulls/{pull_number}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": "\n/** The number that identifies the pull request. */\n pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PullRequest",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/repos/{owner}/{repo}/pulls/{pull_number}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /** The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository. */\n    base?: string,\n  /** The contents of the pull request. */\n    body?: string,\n  /** Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request. */\n    maintainer_can_modify?: boolean,\n  /** State of this Pull Request. Either `open` or `closed`. */\n    state?: \"open\" | \"closed\",\n  /** The title of the pull request. */\n    title?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": " pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PullRequest",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/pulls/{pull_number}/codespaces": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** IP for location auto-detection when proxying a request */\n    client_ip?: string,\n  /** Path to devcontainer.json config to use for this codespace */\n    devcontainer_path?: string,\n  /** Display name for this codespace */\n    display_name?: string,\n  /** Time in minutes before codespace stops from inactivity */\n    idle_timeout_minutes?: number,\n  /** Location for this codespace. Assigned by IP if not provided */\n    location?: string,\n  /** Machine type to use for this codespace */\n    machine?: string,\n  /** Whether to authorize requested permissions from devcontainer.json */\n    multi_repo_permissions_opt_out?: boolean,\n  /** Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days). */\n    retention_period_minutes?: number,\n  /** Working directory for this codespace */\n    working_directory?: string,\n\n} | null,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": " pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Codespace",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/pulls/{pull_number}/comments": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to. */\n sort?: \"created\" | \"updated\", \n/** The direction to sort results. Ignored without `sort` parameter. */\n direction?: \"asc\" | \"desc\", \n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.sort": {
        "rendered": "\n/** The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to. */\n sort?: \"created\" | \"updated\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort results. Ignored without `sort` parameter. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.since": {
        "rendered": "\n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": " pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(PullRequestReviewComment)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/pulls/{pull_number}/comments": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The text of the review comment. */\n    body: string,\n  /** The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`. */\n    commit_id: string,\n  /**\n   * The ID of the review comment to reply to. To find the ID of a review comment with [\"List review comments on a pull request\"](#list-review-comments-on-a-pull-request). When specified, all parameters other than `body` in the request body are ignored.\n   * @example 2\n   */\n    in_reply_to?: number,\n  /** The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to. */\n    line: number,\n  /** The relative path to the file that necessitates a comment. */\n    path: string,\n  /**\n   * **This parameter is deprecated. Use `line` instead**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above.\n   * @deprecated\n   */\n    position?: number,\n  /** In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see \"[Diff view options](https://docs.github.com/articles/about-comparing-branches-in-pull-requests#diff-view-options)\" in the GitHub Help documentation. */\n    side?: \"LEFT\" | \"RIGHT\",\n  /** **Required when using multi-line comments unless using `in_reply_to`**. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see \"[Commenting on a pull request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)\" in the GitHub Help documentation. */\n    start_line?: number,\n  /** **Required when using multi-line comments unless using `in_reply_to`**. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see \"[Commenting on a pull request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)\" in the GitHub Help documentation. See `side` in this table for additional context. */\n    start_side?: \"LEFT\" | \"RIGHT\" | \"side\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": " pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PullRequestReviewComment",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The text of the review comment. */\n    body: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": " pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": " commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PullRequestReviewComment",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/pulls/{pull_number}/commits": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": " pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Commit)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/pulls/{pull_number}/files": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": " pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(DiffEntry)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/pulls/{pull_number}/merge": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": " pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/repos/{owner}/{repo}/pulls/{pull_number}/merge": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /** Extra detail to append to automatic commit message. */\n    commit_message?: string,\n  /** Title for the automatic commit message. */\n    commit_title?: string,\n  /** The merge method to use. */\n    merge_method?: \"merge\" | \"squash\" | \"rebase\",\n  /** SHA that pull request head must match to allow merge. */\n    sha?: string,\n\n} | null,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": " pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PullRequestMergeResult",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** An array of user `login`s that will be removed. */\n    reviewers: (string)[],\n  /** An array of team `slug`s that will be removed. */\n    team_reviewers?: (string)[],\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": " pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PullRequestSimple",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": " pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PullRequestReviewRequest",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: ({\n  /** An array of user `login`s that will be requested. */\n    reviewers?: (string)[],\n  /** An array of team `slug`s that will be requested. */\n    team_reviewers?: (string)[],\n\n}),",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": " pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PullRequestSimple",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/pulls/{pull_number}/reviews": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": " pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(PullRequestReview)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/pulls/{pull_number}/reviews": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /** **Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review. */\n    body?: string,\n  /** Use the following table to specify the location, destination, and contents of the draft review comment. */\n    comments?: ({\n  /** Text of the review comment. */\n    body: string,\n  /** @example 28 */\n    line?: number,\n  /** The relative path to the file that necessitates a review comment. */\n    path: string,\n  /** The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note below. */\n    position?: number,\n  /** @example \"RIGHT\" */\n    side?: string,\n  /** @example 26 */\n    start_line?: number,\n  /** @example \"LEFT\" */\n    start_side?: string,\n\n})[],\n  /** The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value. */\n    commit_id?: string,\n  /** The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/rest/pulls#submit-a-review-for-a-pull-request) when you are ready. */\n    event?: \"APPROVE\" | \"REQUEST_CHANGES\" | \"COMMENT\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": " pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PullRequestReview",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": " pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".reviewId": {
        "rendered": "\n/** The unique identifier of the review. */\n reviewId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PullRequestReview",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": " pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".reviewId": {
        "rendered": " reviewId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PullRequestReview",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The body text of the pull request review. */\n    body: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": " pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".reviewId": {
        "rendered": " reviewId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PullRequestReview",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": " pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".reviewId": {
        "rendered": " reviewId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(ReviewComment)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** @example \"\"DISMISS\"\" */\n    event?: \"DISMISS\",\n  /** The message for the pull request review dismissal */\n    message: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": " pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".reviewId": {
        "rendered": " reviewId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PullRequestReview",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The body text of the pull request review */\n    body?: string,\n  /** The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action. */\n    event: \"APPROVE\" | \"REQUEST_CHANGES\" | \"COMMENT\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": " pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".reviewId": {
        "rendered": " reviewId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PullRequestReview",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/repos/{owner}/{repo}/pulls/{pull_number}/update-branch": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /** The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a `422 Unprocessable Entity` status. You can use the \"[List commits](https://docs.github.com/rest/reference/repos#list-commits)\" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref. */\n    expected_head_sha?: string,\n\n} | null,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": " pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    message?: string,\n    url?: string,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/readme": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`) */\n ref?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ref": {
        "rendered": "\n/** The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`) */\n ref?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ContentFile",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/readme/{dir}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`) */\n ref?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ref": {
        "rendered": "\n/** The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`) */\n ref?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".dir": {
        "rendered": "\n/** The alternate path to look for a README file */\n dir: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ContentFile",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/releases": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Release)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/releases": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Text describing the contents of the tag. */\n    body?: string,\n  /** If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see \"[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository).\" */\n    discussion_category_name?: string,\n  /**\n   * `true` to create a draft (unpublished) release, `false` to create a published one.\n   * @default false\n   */\n    draft?: boolean,\n  /**\n   * Whether to automatically generate the name and body for this release. If `name` is specified, the specified name will be used; otherwise, a name will be automatically generated. If `body` is specified, the body will be pre-pended to the automatically generated notes.\n   * @default false\n   */\n    generate_release_notes?: boolean,\n  /**\n   * Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.\n   * @default true\n   */\n    make_latest?: \"true\" | \"false\" | \"legacy\",\n  /** The name of the release. */\n    name?: string,\n  /**\n   * `true` to identify the release as a prerelease. `false` to identify the release as a full release.\n   * @default false\n   */\n    prerelease?: boolean,\n  /** The name of the tag. */\n    tag_name: string,\n  /** Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`). */\n    target_commitish?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Release",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/releases/assets/{asset_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".assetId": {
        "rendered": "\n/** The unique identifier of the asset. */\n assetId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/releases/assets/{asset_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".assetId": {
        "rendered": " assetId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ReleaseAsset",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/repos/{owner}/{repo}/releases/assets/{asset_id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /** An alternate short description of the asset. Used in place of the filename. */\n    label?: string,\n  /** The file name of the asset. */\n    name?: string,\n  /** @example \"\"uploaded\"\" */\n    state?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".assetId": {
        "rendered": " assetId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ReleaseAsset",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/releases/generate-notes": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Specifies a path to a file in the repository containing configuration settings used for generating the release notes. If unspecified, the configuration file located in the repository at '.github/release.yml' or '.github/release.yaml' will be used. If that is not present, the default configuration will be used. */\n    configuration_file_path?: string,\n  /** The name of the previous tag to use as the starting point for the release notes. Use to manually specify the range for the set of changes considered as part this release. */\n    previous_tag_name?: string,\n  /** The tag name for the release. This can be an existing tag or a new one. */\n    tag_name: string,\n  /** Specifies the commitish value that will be the target for the release's tag. Required if the supplied tag_name does not reference an existing tag. Ignored if the tag_name already exists. */\n    target_commitish?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ReleaseNotesContent",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/releases/latest": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Release",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/releases/tags/{tag}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".tag": {
        "rendered": "\n/** tag parameter */\n tag: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Release",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/releases/{release_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".releaseId": {
        "rendered": "\n/** The unique identifier of the release. */\n releaseId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/releases/{release_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".releaseId": {
        "rendered": " releaseId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Release",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/repos/{owner}/{repo}/releases/{release_id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /** Text describing the contents of the tag. */\n    body?: string,\n  /** If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. If there is already a discussion linked to the release, this parameter is ignored. For more information, see \"[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository).\" */\n    discussion_category_name?: string,\n  /** `true` makes the release a draft, and `false` publishes the release. */\n    draft?: boolean,\n  /**\n   * Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.\n   * @default true\n   */\n    make_latest?: \"true\" | \"false\" | \"legacy\",\n  /** The name of the release. */\n    name?: string,\n  /** `true` to identify the release as a prerelease, `false` to identify the release as a full release. */\n    prerelease?: boolean,\n  /** The name of the tag. */\n    tag_name?: string,\n  /** Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`). */\n    target_commitish?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".releaseId": {
        "rendered": " releaseId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Release",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/releases/{release_id}/assets": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".releaseId": {
        "rendered": " releaseId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(ReleaseAsset)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/releases/{release_id}/assets": {
    "query": {
      ".query": {
        "rendered": " query: {  name: string,  label?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.name": {
        "rendered": " name: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.label": {
        "rendered": " label?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: File,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".releaseId": {
        "rendered": " releaseId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ReleaseAsset",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/releases/{release_id}/reactions": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a release. */\n content?: \"+1\" | \"laugh\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.content": {
        "rendered": "\n/** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a release. */\n content?: \"+1\" | \"laugh\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".releaseId": {
        "rendered": " releaseId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Reaction)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/releases/{release_id}/reactions": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the release. */\n    content: \"+1\" | \"laugh\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".releaseId": {
        "rendered": " releaseId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Reaction",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".releaseId": {
        "rendered": " releaseId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".reactionId": {
        "rendered": " reactionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/secret-scanning/alerts": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Set to `open` or `resolved` to only list secret scanning alerts in a specific state. */\n state?: \"open\" | \"resolved\", \n/** A comma-separated list of secret types to return. By default all secret types are returned.\nSee \"[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)\"\nfor a complete list of secret types. */\n secret_type?: string, \n/** A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`. */\n resolution?: string, \n/** The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved. */\n sort?: \"created\" | \"updated\", \n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\", \n/** Page number of the results to fetch. */\n page?: number, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty \"before\" query string. */\n before?: string, \n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty \"after\" query string. */\n after?: string, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.state": {
        "rendered": "\n/** Set to `open` or `resolved` to only list secret scanning alerts in a specific state. */\n state?: \"open\" | \"resolved\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.secret_type": {
        "rendered": "\n/** A comma-separated list of secret types to return. By default all secret types are returned.\nSee \"[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)\"\nfor a complete list of secret types. */\n secret_type?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.resolution": {
        "rendered": "\n/** A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`. */\n resolution?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved. */\n sort?: \"created\" | \"updated\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.before": {
        "rendered": "\n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty \"before\" query string. */\n before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.after": {
        "rendered": "\n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty \"after\" query string. */\n after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(SecretScanningAlert)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".alertNumber": {
        "rendered": " alertNumber: AlertNumber,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "SecretScanningAlert",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** **Required when the `state` is `resolved`.** The reason for resolving the alert. */\n    resolution?: SecretScanningAlertResolution,\n  /** An optional comment when closing an alert. Cannot be updated or deleted. Must be `null` when changing `state` to `open`. */\n    resolution_comment?: SecretScanningAlertResolutionComment,\n  /** Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`. */\n    state: SecretScanningAlertState,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".alertNumber": {
        "rendered": " alertNumber: AlertNumber,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "SecretScanningAlert",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Page number of the results to fetch. */\n page?: number, \n/** The number of results per page (max 100). */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".alertNumber": {
        "rendered": " alertNumber: AlertNumber,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(SecretScanningLocation)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/stargazers": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "((SimpleUser)[] | (Stargazer)[])",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/stats/code_frequency": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(CodeFrequencyStat)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/stats/commit_activity": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(CommitActivity)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/stats/contributors": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(ContributorActivity)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/stats/participation": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ParticipationStats",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/stats/punch_card": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(CodeFrequencyStat)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/statuses/{sha}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * A string label to differentiate this status from the status of other systems. This field is case-insensitive.\n   * @default \"default\"\n   */\n    context?: string,\n  /** A short description of the status. */\n    description?: string | null,\n  /** The state of the status. */\n    state: \"error\" | \"failure\" | \"pending\" | \"success\",\n  /**\n   * The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.  \n   * For example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:  \n   * `http://ci.example.com/user/repo/build/sha`\n   */\n    target_url?: string | null,\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".sha": {
        "rendered": " sha: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Status",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/subscribers": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(SimpleUser)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/subscription": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/subscription": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "RepositorySubscription",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/repos/{owner}/{repo}/subscription": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /** Determines if all notifications should be blocked from this repository. */\n    ignored?: boolean,\n  /** Determines if notifications should be received from this repository. */\n    subscribed?: boolean,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "RepositorySubscription",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/tags": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Tag)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/tags/protection": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(TagProtection)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/tags/protection": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** An optional glob pattern to match against when enforcing tag protection. */\n    pattern: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TagProtection",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/tags/protection/{tag_protection_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".tagProtectionId": {
        "rendered": "\n/** The unique identifier of the tag protection. */\n tagProtectionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/tarball/{ref}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".ref": {
        "rendered": " ref: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/teams": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Team)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/topics": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Page number of the results to fetch. */\n page?: number, \n/** The number of results per page (max 100). */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Topic",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/repos/{owner}/{repo}/topics": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` cannot contain uppercase letters. */\n    names: (string)[],\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Topic",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/traffic/clones": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The time frame to display results for. */\n per?: \"day\" | \"week\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per": {
        "rendered": "\n/** The time frame to display results for. */\n per?: \"day\" | \"week\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CloneTraffic",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/traffic/popular/paths": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(ContentTraffic)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/traffic/popular/referrers": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(ReferrerTraffic)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/traffic/views": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The time frame to display results for. */\n per?: \"day\" | \"week\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per": {
        "rendered": "\n/** The time frame to display results for. */\n per?: \"day\" | \"week\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ViewTraffic",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/transfer": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The new name to be given to the repository. */\n    new_name?: string,\n  /** The username or organization name the repository will be transferred to. */\n    new_owner: string,\n  /** ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories. */\n    team_ids?: (number)[],\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "MinimalRepository",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/vulnerability-alerts": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/vulnerability-alerts": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/repos/{owner}/{repo}/vulnerability-alerts": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/zipball/{ref}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".ref": {
        "rendered": " ref: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{template_owner}/{template_repo}/generate": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** A short description of the new repository. */\n    description?: string,\n  /**\n   * Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`.\n   * @default false\n   */\n    include_all_branches?: boolean,\n  /** The name of the new repository. */\n    name: string,\n  /** The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization. */\n    owner?: string,\n  /**\n   * Either `true` to create a new private repository or `false` to create a new public one.\n   * @default false\n   */\n    private?: boolean,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".templateOwner": {
        "rendered": " templateOwner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".templateRepo": {
        "rendered": " templateRepo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Repository",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repositories": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A repository ID. Only return repositories with an ID greater than this ID. */\n since?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.since": {
        "rendered": "\n/** A repository ID. Only return repositories with an ID greater than this ID. */\n since?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(MinimalRepository)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repositories/{repository_id}/environments/{environment_name}/secrets": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".environmentName": {
        "rendered": " environmentName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    secrets: (ActionsSecret)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repositories/{repository_id}/environments/{environment_name}/secrets/public-key": {
    "query": {},
    "body": {},
    "path": {
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".environmentName": {
        "rendered": " environmentName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ActionsPublicKey",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}": {
    "query": {},
    "body": {},
    "path": {
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".environmentName": {
        "rendered": " environmentName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}": {
    "query": {},
    "body": {},
    "path": {
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".environmentName": {
        "rendered": " environmentName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ActionsSecret",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an environment public key](https://docs.github.com/rest/reference/actions#get-an-environment-public-key) endpoint.\n   * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$\n   */\n    encrypted_value: string,\n  /** ID of the key you used to encrypt the secret. */\n    key_id: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".environmentName": {
        "rendered": " environmentName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repositories/{repository_id}/environments/{environment_name}/variables": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 30). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 30). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".environmentName": {
        "rendered": " environmentName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    total_count: number,\n    variables: (ActionsVariable)[],\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repositories/{repository_id}/environments/{environment_name}/variables": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The name of the variable. */\n    name: string,\n  /** The value of the variable. */\n    value: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".environmentName": {
        "rendered": " environmentName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repositories/{repository_id}/environments/{environment_name}/variables/{name}": {
    "query": {},
    "body": {},
    "path": {
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".name": {
        "rendered": " name: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".environmentName": {
        "rendered": " environmentName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repositories/{repository_id}/environments/{environment_name}/variables/{name}": {
    "query": {},
    "body": {},
    "path": {
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".environmentName": {
        "rendered": " environmentName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".name": {
        "rendered": " name: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ActionsVariable",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/repositories/{repository_id}/environments/{environment_name}/variables/{name}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The name of the variable. */\n    name?: string,\n  /** The value of the variable. */\n    value?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".name": {
        "rendered": " name: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".environmentName": {
        "rendered": " environmentName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/search/code": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See \"[Searching code](https://docs.github.com/search-github/searching-on-github/searching-code)\" for a detailed list of qualifiers. */\n q: string, \n/** Sorts the results of your query. Can only be `indexed`, which indicates how recently a file has been indexed by the GitHub search infrastructure. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */\n sort?: \"indexed\", \n/** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */\n order?: \"desc\" | \"asc\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.q": {
        "rendered": "\n/** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See \"[Searching code](https://docs.github.com/search-github/searching-on-github/searching-code)\" for a detailed list of qualifiers. */\n q: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** Sorts the results of your query. Can only be `indexed`, which indicates how recently a file has been indexed by the GitHub search infrastructure. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */\n sort?: \"indexed\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.order": {
        "rendered": "\n/** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */\n order?: \"desc\" | \"asc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    incomplete_results: boolean,\n    items: (CodeSearchResultItem)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/search/commits": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See \"[Searching commits](https://docs.github.com/search-github/searching-on-github/searching-commits)\" for a detailed list of qualifiers. */\n q: string, \n/** Sorts the results of your query by `author-date` or `committer-date`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */\n sort?: \"author-date\" | \"committer-date\", \n/** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */\n order?: \"desc\" | \"asc\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.q": {
        "rendered": "\n/** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See \"[Searching commits](https://docs.github.com/search-github/searching-on-github/searching-commits)\" for a detailed list of qualifiers. */\n q: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** Sorts the results of your query by `author-date` or `committer-date`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */\n sort?: \"author-date\" | \"committer-date\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.order": {
        "rendered": "\n/** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */\n order?: \"desc\" | \"asc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    incomplete_results: boolean,\n    items: (CommitSearchResultItem)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/search/issues": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See \"[Searching issues and pull requests](https://docs.github.com/search-github/searching-on-github/searching-issues-and-pull-requests)\" for a detailed list of qualifiers. */\n q: string, \n/** Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`, Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */\n sort?: \"comments\" | \"reactions\" | \"reactions-+1\" | \"reactions--1\" | \"reactions-smile\" | \"reactions-thinking_face\" | \"reactions-heart\" | \"reactions-tada\" | \"interactions\" | \"created\" | \"updated\", \n/** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */\n order?: \"desc\" | \"asc\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.q": {
        "rendered": "\n/** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See \"[Searching issues and pull requests](https://docs.github.com/search-github/searching-on-github/searching-issues-and-pull-requests)\" for a detailed list of qualifiers. */\n q: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`, Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */\n sort?: \"comments\" | \"reactions\" | \"reactions-+1\" | \"reactions--1\" | \"reactions-smile\" | \"reactions-thinking_face\" | \"reactions-heart\" | \"reactions-tada\" | \"interactions\" | \"created\" | \"updated\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.order": {
        "rendered": "\n/** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */\n order?: \"desc\" | \"asc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    incomplete_results: boolean,\n    items: (IssueSearchResultItem)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/search/labels": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The id of the repository. */\n repository_id: number, \n/** The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). */\n q: string, \n/** Sorts the results of your query by when the label was `created` or `updated`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */\n sort?: \"created\" | \"updated\", \n/** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */\n order?: \"desc\" | \"asc\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.repository_id": {
        "rendered": "\n/** The id of the repository. */\n repository_id: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.q": {
        "rendered": "\n/** The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). */\n q: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** Sorts the results of your query by when the label was `created` or `updated`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */\n sort?: \"created\" | \"updated\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.order": {
        "rendered": "\n/** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */\n order?: \"desc\" | \"asc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    incomplete_results: boolean,\n    items: (LabelSearchResultItem)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/search/repositories": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See \"[Searching for repositories](https://docs.github.com/articles/searching-for-repositories/)\" for a detailed list of qualifiers. */\n q: string, \n/** Sorts the results of your query by number of `stars`, `forks`, or `help-wanted-issues` or how recently the items were `updated`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */\n sort?: \"stars\" | \"forks\" | \"help-wanted-issues\" | \"updated\", \n/** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */\n order?: \"desc\" | \"asc\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.q": {
        "rendered": "\n/** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See \"[Searching for repositories](https://docs.github.com/articles/searching-for-repositories/)\" for a detailed list of qualifiers. */\n q: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** Sorts the results of your query by number of `stars`, `forks`, or `help-wanted-issues` or how recently the items were `updated`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */\n sort?: \"stars\" | \"forks\" | \"help-wanted-issues\" | \"updated\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.order": {
        "rendered": "\n/** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */\n order?: \"desc\" | \"asc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    incomplete_results: boolean,\n    items: (RepoSearchResultItem)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/search/topics": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). */\n q: string, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.q": {
        "rendered": "\n/** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). */\n q: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    incomplete_results: boolean,\n    items: (TopicSearchResultItem)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/search/users": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See \"[Searching users](https://docs.github.com/search-github/searching-on-github/searching-users)\" for a detailed list of qualifiers. */\n q: string, \n/** Sorts the results of your query by number of `followers` or `repositories`, or when the person `joined` GitHub. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */\n sort?: \"followers\" | \"repositories\" | \"joined\", \n/** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */\n order?: \"desc\" | \"asc\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.q": {
        "rendered": "\n/** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See \"[Searching users](https://docs.github.com/search-github/searching-on-github/searching-users)\" for a detailed list of qualifiers. */\n q: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** Sorts the results of your query by number of `followers` or `repositories`, or when the person `joined` GitHub. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */\n sort?: \"followers\" | \"repositories\" | \"joined\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.order": {
        "rendered": "\n/** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */\n order?: \"desc\" | \"asc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    incomplete_results: boolean,\n    items: (UserSearchResultItem)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/teams/{team_id}": {
    "query": {},
    "body": {},
    "path": {
      ".teamId": {
        "rendered": "\n/** The unique identifier of the team. */\n teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/teams/{team_id}": {
    "query": {},
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamFull",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/teams/{team_id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The description of the team. */\n    description?: string,\n  /** The name of the team. */\n    name: string,\n  /** The ID of a team to set as the parent team. */\n    parent_team_id?: number | null,\n  /**\n   * **Deprecated**. The permission that new repositories will be added to the team with when none is specified.\n   * @default \"pull\"\n   */\n    permission?: \"pull\" | \"push\" | \"admin\",\n  /**\n   * The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:  \n   * **For a non-nested team:**  \n   *  * `secret` - only visible to organization owners and members of this team.  \n   *  * `closed` - visible to all members of this organization.  \n   * **For a parent or child team:**  \n   *  * `closed` - visible to all members of this organization.\n   */\n    privacy?: \"secret\" | \"closed\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamFull",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/teams/{team_id}/discussions": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(TeamDiscussion)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/teams/{team_id}/discussions": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The discussion post's body text. */\n    body: string,\n  /**\n   * Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.\n   * @default false\n   */\n    private?: boolean,\n  /** The discussion post's title. */\n    title: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamDiscussion",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/teams/{team_id}/discussions/{discussion_number}": {
    "query": {},
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/teams/{team_id}/discussions/{discussion_number}": {
    "query": {},
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamDiscussion",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/teams/{team_id}/discussions/{discussion_number}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /** The discussion post's body text. */\n    body?: string,\n  /** The discussion post's title. */\n    title?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamDiscussion",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/teams/{team_id}/discussions/{discussion_number}/comments": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(TeamDiscussionComment)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/teams/{team_id}/discussions/{discussion_number}/comments": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The discussion comment's body text. */\n    body: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamDiscussionComment",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}": {
    "query": {},
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentNumber": {
        "rendered": " commentNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}": {
    "query": {},
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentNumber": {
        "rendered": " commentNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamDiscussionComment",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The discussion comment's body text. */\n    body: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentNumber": {
        "rendered": " commentNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamDiscussionComment",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment. */\n content?: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.content": {
        "rendered": "\n/** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment. */\n content?: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentNumber": {
        "rendered": " commentNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Reaction)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion comment. */\n    content: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentNumber": {
        "rendered": " commentNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Reaction",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/teams/{team_id}/discussions/{discussion_number}/reactions": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion. */\n content?: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.content": {
        "rendered": "\n/** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion. */\n content?: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Reaction)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/teams/{team_id}/discussions/{discussion_number}/reactions": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion. */\n    content: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Reaction",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/teams/{team_id}/invitations": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(OrganizationInvitation)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/teams/{team_id}/members": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Filters members returned by their role in the team. */\n role?: \"member\" | \"maintainer\" | \"all\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.role": {
        "rendered": "\n/** Filters members returned by their role in the team. */\n role?: \"member\" | \"maintainer\" | \"all\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(SimpleUser)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/teams/{team_id}/members/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/teams/{team_id}/members/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/teams/{team_id}/members/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/teams/{team_id}/memberships/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/teams/{team_id}/memberships/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamMembership",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/teams/{team_id}/memberships/{username}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /**\n   * The role that this user should have in the team.\n   * @default \"member\"\n   */\n    role?: \"member\" | \"maintainer\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamMembership",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/teams/{team_id}/projects": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(TeamProject)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/teams/{team_id}/projects/{project_id}": {
    "query": {},
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".projectId": {
        "rendered": " projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/teams/{team_id}/projects/{project_id}": {
    "query": {},
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".projectId": {
        "rendered": " projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamProject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/teams/{team_id}/projects/{project_id}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /** The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs).\" */\n    permission?: \"read\" | \"write\" | \"admin\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".projectId": {
        "rendered": " projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/teams/{team_id}/repos": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(MinimalRepository)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/teams/{team_id}/repos/{owner}/{repo}": {
    "query": {},
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/teams/{team_id}/repos/{owner}/{repo}": {
    "query": {},
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamRepository",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/teams/{team_id}/repos/{owner}/{repo}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /** The permission to grant the team on this repository. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository. */\n    permission?: \"pull\" | \"push\" | \"admin\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/teams/{team_id}/teams": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Team)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(PrivateUser | PublicUser)",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/user": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /** The new short biography of the user. */\n    bio?: string,\n  /**\n   * The new blog URL of the user.\n   * @example \"blog.example.com\"\n   */\n    blog?: string,\n  /**\n   * The new company of the user.\n   * @example \"Acme corporation\"\n   */\n    company?: string,\n  /**\n   * The publicly visible email address of the user.\n   * @example \"omar@example.com\"\n   */\n    email?: string,\n  /** The new hiring availability of the user. */\n    hireable?: boolean,\n  /**\n   * The new location of the user.\n   * @example \"Berlin, Germany\"\n   */\n    location?: string,\n  /**\n   * The new name of the user.\n   * @example \"Omar Jahandar\"\n   */\n    name?: string,\n  /**\n   * The new Twitter username of the user.\n   * @example \"therealomarj\"\n   */\n    twitter_username?: string | null,\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PrivateUser",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/blocks": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(SimpleUser)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/user/blocks/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/blocks/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/user/blocks/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/codespaces": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, \n/** ID of the Repository to filter on */\n repository_id?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.repository_id": {
        "rendered": "\n/** ID of the Repository to filter on */\n repository_id?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    codespaces: (Codespace)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/user/codespaces": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: ({\n  /** IP for location auto-detection when proxying a request */\n    client_ip?: string,\n  /** Path to devcontainer.json config to use for this codespace */\n    devcontainer_path?: string,\n  /** Display name for this codespace */\n    display_name?: string,\n  /** Time in minutes before codespace stops from inactivity */\n    idle_timeout_minutes?: number,\n  /** Location for this codespace. Assigned by IP if not provided */\n    location?: string,\n  /** Machine type to use for this codespace */\n    machine?: string,\n  /** Whether to authorize requested permissions from devcontainer.json */\n    multi_repo_permissions_opt_out?: boolean,\n  /** Git ref (typically a branch name) for this codespace */\n    ref?: string,\n  /** Repository id for this codespace */\n    repository_id: number,\n  /** Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days). */\n    retention_period_minutes?: number,\n  /** Working directory for this codespace */\n    working_directory?: string,\n\n} | {\n  /** Path to devcontainer.json config to use for this codespace */\n    devcontainer_path?: string,\n  /** Time in minutes before codespace stops from inactivity */\n    idle_timeout_minutes?: number,\n  /** Location for this codespace. Assigned by IP if not provided */\n    location?: string,\n  /** Machine type to use for this codespace */\n    machine?: string,\n  /** Pull request number for this codespace */\n    pull_request: {\n  /** Pull request number */\n    pull_request_number: number,\n  /** Repository id for this codespace */\n    repository_id: number,\n\n},\n  /** Working directory for this codespace */\n    working_directory?: string,\n\n}),",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "Codespace",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/codespaces/secrets": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    secrets: (CodespacesSecret)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/codespaces/secrets/public-key": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "CodespacesUserPublicKey",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/user/codespaces/secrets/{secret_name}": {
    "query": {},
    "body": {},
    "path": {
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/codespaces/secrets/{secret_name}": {
    "query": {},
    "body": {},
    "path": {
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CodespacesSecret",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/user/codespaces/secrets/{secret_name}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get the public key for the authenticated user](https://docs.github.com/rest/reference/codespaces#get-the-public-key-for-the-authenticated-user) endpoint.\n   * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$\n   */\n    encrypted_value?: string,\n  /** ID of the key you used to encrypt the secret. */\n    key_id: string,\n  /** An array of repository ids that can access the user secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-a-user-secret), [Set selected repositories for a user secret](https://docs.github.com/rest/reference/codespaces#set-selected-repositories-for-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/reference/codespaces#remove-a-selected-repository-from-a-user-secret) endpoints. */\n    selected_repository_ids?: ((number | string))[],\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/codespaces/secrets/{secret_name}/repositories": {
    "query": {},
    "body": {},
    "path": {
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    repositories: (MinimalRepository)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/user/codespaces/secrets/{secret_name}/repositories": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** An array of repository ids for which a codespace can access the secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-a-user-secret), [Add a selected repository to a user secret](https://docs.github.com/rest/reference/codespaces#add-a-selected-repository-to-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/reference/codespaces#remove-a-selected-repository-from-a-user-secret) endpoints. */\n    selected_repository_ids: (number)[],\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/user/codespaces/secrets/{secret_name}/repositories/{repository_id}": {
    "query": {},
    "body": {},
    "path": {
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/user/codespaces/secrets/{secret_name}/repositories/{repository_id}": {
    "query": {},
    "body": {},
    "path": {
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/user/codespaces/{codespace_name}": {
    "query": {},
    "body": {},
    "path": {
      ".codespaceName": {
        "rendered": " codespaceName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/codespaces/{codespace_name}": {
    "query": {},
    "body": {},
    "path": {
      ".codespaceName": {
        "rendered": " codespaceName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Codespace",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/user/codespaces/{codespace_name}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: {\n  /** Display name for this codespace */\n    display_name?: string,\n  /** A valid machine to transition this codespace to. */\n    machine?: string,\n  /** Recently opened folders inside the codespace. It is currently used by the clients to determine the folder path to load the codespace in. */\n    recent_folders?: (string)[],\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".codespaceName": {
        "rendered": " codespaceName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Codespace",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/user/codespaces/{codespace_name}/exports": {
    "query": {},
    "body": {},
    "path": {
      ".codespaceName": {
        "rendered": " codespaceName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CodespaceExportDetails",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/codespaces/{codespace_name}/exports/{export_id}": {
    "query": {},
    "body": {},
    "path": {
      ".codespaceName": {
        "rendered": " codespaceName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".exportId": {
        "rendered": "\n/** The ID of the export operation, or `latest`. Currently only `latest` is currently supported. */\n exportId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CodespaceExportDetails",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/codespaces/{codespace_name}/machines": {
    "query": {},
    "body": {},
    "path": {
      ".codespaceName": {
        "rendered": " codespaceName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    machines: (CodespaceMachine)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/user/codespaces/{codespace_name}/publish": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** A name for the new repository. */\n    name?: string,\n  /**\n   * Whether the new repository should be private.\n   * @default false\n   */\n    private?: boolean,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".codespaceName": {
        "rendered": " codespaceName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CodespaceWithFullRepository",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/user/codespaces/{codespace_name}/start": {
    "query": {},
    "body": {},
    "path": {
      ".codespaceName": {
        "rendered": " codespaceName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Codespace",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/user/codespaces/{codespace_name}/stop": {
    "query": {},
    "body": {},
    "path": {
      ".codespaceName": {
        "rendered": " codespaceName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Codespace",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/user/email/visibility": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Denotes whether an email is publicly visible. */\n    visibility: \"public\" | \"private\",\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Email)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/user/emails": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: ({\n  /** Email addresses associated with the GitHub user account. */\n    emails: (string)[],\n\n} | (string)[] | string),",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/emails": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Email)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/user/emails": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data?: ({\n  /**\n   * Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.\n   * @example []\n   */\n    emails: (string)[],\n\n} | (string)[] | string),",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Email)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/followers": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(SimpleUser)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/following": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(SimpleUser)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/user/following/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/following/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/user/following/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/gpg_keys": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(GpgKey)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/user/gpg_keys": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** A GPG key in ASCII-armored format. */\n    armored_public_key: string,\n  /** A descriptive name for the new key. */\n    name?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "GpgKey",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/user/gpg_keys/{gpg_key_id}": {
    "query": {},
    "body": {},
    "path": {
      ".gpgKeyId": {
        "rendered": "\n/** The unique identifier of the GPG key. */\n gpgKeyId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/gpg_keys/{gpg_key_id}": {
    "query": {},
    "body": {},
    "path": {
      ".gpgKeyId": {
        "rendered": " gpgKeyId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GpgKey",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/installations": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    installations: (Installation)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/installations/{installation_id}/repositories": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".installationId": {
        "rendered": " installationId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    repositories: (Repository)[],\n    repository_selection?: string,\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/user/installations/{installation_id}/repositories/{repository_id}": {
    "query": {},
    "body": {},
    "path": {
      ".installationId": {
        "rendered": " installationId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/user/installations/{installation_id}/repositories/{repository_id}": {
    "query": {},
    "body": {},
    "path": {
      ".installationId": {
        "rendered": " installationId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/user/interaction-limits": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/interaction-limits": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(InteractionLimitResponse | hasuraSdk.JSONValue)",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/user/interaction-limits": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: InteractionLimit,",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "InteractionLimitResponse",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/issues": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation. */\n filter?: \"assigned\" | \"created\" | \"mentioned\" | \"subscribed\" | \"repos\" | \"all\", \n/** Indicates the state of the issues to return. */\n state?: \"open\" | \"closed\" | \"all\", \n/** A list of comma separated label names. Example: `bug,ui,@high` */\n labels?: string, \n/** What to sort results by. */\n sort?: \"created\" | \"updated\" | \"comments\", \n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\", \n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.filter": {
        "rendered": "\n/** Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation. */\n filter?: \"assigned\" | \"created\" | \"mentioned\" | \"subscribed\" | \"repos\" | \"all\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.state": {
        "rendered": "\n/** Indicates the state of the issues to return. */\n state?: \"open\" | \"closed\" | \"all\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.labels": {
        "rendered": "\n/** A list of comma separated label names. Example: `bug,ui,@high` */\n labels?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** What to sort results by. */\n sort?: \"created\" | \"updated\" | \"comments\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.since": {
        "rendered": "\n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Issue)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/keys": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Key)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/user/keys": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * The public SSH key to add to your GitHub account.\n   * @pattern ^ssh-(rsa|dss|ed25519) |^ecdsa-sha2-nistp(256|384|521) \n   */\n    key: string,\n  /**\n   * A descriptive name for the new key.\n   * @example \"Personal MacBook Air\"\n   */\n    title?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "Key",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/user/keys/{key_id}": {
    "query": {},
    "body": {},
    "path": {
      ".keyId": {
        "rendered": " keyId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/keys/{key_id}": {
    "query": {},
    "body": {},
    "path": {
      ".keyId": {
        "rendered": " keyId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Key",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/marketplace_purchases": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(UserMarketplacePurchase)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/marketplace_purchases/stubbed": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(UserMarketplacePurchase)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/memberships/orgs": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Indicates the state of the memberships to return. If not specified, the API returns both active and pending memberships. */\n state?: \"active\" | \"pending\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.state": {
        "rendered": "\n/** Indicates the state of the memberships to return. If not specified, the API returns both active and pending memberships. */\n state?: \"active\" | \"pending\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(OrgMembership)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/memberships/orgs/{org}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OrgMembership",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/user/memberships/orgs/{org}": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The state that the membership should be in. Only `\"active\"` will be accepted. */\n    state: \"active\",\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OrgMembership",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/migrations": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Migration)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/user/migrations": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * Exclude attributes from the API response to improve performance\n   * @example [\"repositories\"]\n   */\n    exclude?: (\"repositories\")[],\n  /**\n   * Do not include attachments in the migration\n   * @example true\n   */\n    exclude_attachments?: boolean,\n  /**\n   * Indicates whether the repository git data should be excluded from the migration.\n   * @example true\n   */\n    exclude_git_data?: boolean,\n  /**\n   * Indicates whether metadata should be excluded and only git source should be included for the migration.\n   * @example true\n   */\n    exclude_metadata?: boolean,\n  /**\n   * Indicates whether projects owned by the organization or users should be excluded.\n   * @example true\n   */\n    exclude_owner_projects?: boolean,\n  /**\n   * Do not include releases in the migration\n   * @example true\n   */\n    exclude_releases?: boolean,\n  /**\n   * Lock the repositories being migrated at the start of the migration\n   * @example true\n   */\n    lock_repositories?: boolean,\n  /**\n   * Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).\n   * @default false\n   * @example true\n   */\n    org_metadata_only?: boolean,\n    repositories: (string)[],\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "Migration",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/migrations/{migration_id}": {
    "query": {
      ".query": {
        "rendered": " query: {  exclude?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.exclude": {
        "rendered": " exclude?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.exclude.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".migrationId": {
        "rendered": " migrationId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Migration",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/user/migrations/{migration_id}/archive": {
    "query": {},
    "body": {},
    "path": {
      ".migrationId": {
        "rendered": " migrationId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/migrations/{migration_id}/archive": {
    "query": {},
    "body": {},
    "path": {
      ".migrationId": {
        "rendered": " migrationId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/user/migrations/{migration_id}/repos/{repo_name}/lock": {
    "query": {},
    "body": {},
    "path": {
      ".migrationId": {
        "rendered": " migrationId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repoName": {
        "rendered": " repoName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/migrations/{migration_id}/repositories": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".migrationId": {
        "rendered": " migrationId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(MinimalRepository)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/orgs": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(OrganizationSimple)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/packages": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */\n package_type: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\", \n/** The selected visibility of the packages.  This parameter is optional and only filters an existing result set.\n\nThe `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.\nFor the list of GitHub Packages registries that support granular permissions, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\" */\n visibility?: \"public\" | \"private\" | \"internal\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.package_type": {
        "rendered": "\n/** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */\n package_type: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.visibility": {
        "rendered": "\n/** The selected visibility of the packages.  This parameter is optional and only filters an existing result set.\n\nThe `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.\nFor the list of GitHub Packages registries that support granular permissions, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\" */\n visibility?: \"public\" | \"private\" | \"internal\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Package)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/user/packages/{package_type}/{package_name}": {
    "query": {},
    "body": {},
    "path": {
      ".packageType": {
        "rendered": " packageType: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".packageName": {
        "rendered": " packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/packages/{package_type}/{package_name}": {
    "query": {},
    "body": {},
    "path": {
      ".packageType": {
        "rendered": " packageType: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".packageName": {
        "rendered": " packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Package",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/user/packages/{package_type}/{package_name}/restore": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** package token */\n token?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** package token */\n token?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".packageType": {
        "rendered": " packageType: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".packageName": {
        "rendered": " packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/packages/{package_type}/{package_name}/versions": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Page number of the results to fetch. */\n page?: number, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** The state of the package, either active or deleted. */\n state?: \"active\" | \"deleted\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.state": {
        "rendered": "\n/** The state of the package, either active or deleted. */\n state?: \"active\" | \"deleted\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".packageType": {
        "rendered": " packageType: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".packageName": {
        "rendered": " packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(PackageVersion)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/user/packages/{package_type}/{package_name}/versions/{package_version_id}": {
    "query": {},
    "body": {},
    "path": {
      ".packageType": {
        "rendered": " packageType: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".packageName": {
        "rendered": " packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".packageVersionId": {
        "rendered": " packageVersionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/packages/{package_type}/{package_name}/versions/{package_version_id}": {
    "query": {},
    "body": {},
    "path": {
      ".packageType": {
        "rendered": " packageType: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".packageName": {
        "rendered": " packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".packageVersionId": {
        "rendered": " packageVersionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PackageVersion",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore": {
    "query": {},
    "body": {},
    "path": {
      ".packageType": {
        "rendered": " packageType: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".packageName": {
        "rendered": " packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".packageVersionId": {
        "rendered": " packageVersionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/user/projects": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * Body of the project\n   * @example \"This project represents the sprint of the first week in January\"\n   */\n    body?: string | null,\n  /**\n   * Name of the project\n   * @example \"Week One Sprint\"\n   */\n    name: string,\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "Project",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/public_emails": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Email)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/repos": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Limit results to repositories with the specified visibility. */\n visibility?: \"all\" | \"public\" | \"private\", \n/** Comma-separated list of values. Can include:  \n * `owner`: Repositories that are owned by the authenticated user.  \n * `collaborator`: Repositories that the user has been added to as a collaborator.  \n * `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on. */\n affiliation?: string, \n/** Limit results to repositories of the specified type. Will cause a `422` error if used in the same request as **visibility** or **affiliation**. */\n type?: \"all\" | \"owner\" | \"public\" | \"private\" | \"member\", \n/** The property to sort the results by. */\n sort?: \"created\" | \"updated\" | \"pushed\" | \"full_name\", \n/** The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`. */\n direction?: \"asc\" | \"desc\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, \n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string, \n/** Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n before?: string, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.visibility": {
        "rendered": "\n/** Limit results to repositories with the specified visibility. */\n visibility?: \"all\" | \"public\" | \"private\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.affiliation": {
        "rendered": "\n/** Comma-separated list of values. Can include:  \n * `owner`: Repositories that are owned by the authenticated user.  \n * `collaborator`: Repositories that the user has been added to as a collaborator.  \n * `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on. */\n affiliation?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.type": {
        "rendered": "\n/** Limit results to repositories of the specified type. Will cause a `422` error if used in the same request as **visibility** or **affiliation**. */\n type?: \"all\" | \"owner\" | \"public\" | \"private\" | \"member\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.sort": {
        "rendered": "\n/** The property to sort the results by. */\n sort?: \"created\" | \"updated\" | \"pushed\" | \"full_name\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.since": {
        "rendered": "\n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.before": {
        "rendered": "\n/** Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n before?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Repository)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/user/repos": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * Whether to allow Auto-merge to be used on pull requests.\n   * @default false\n   * @example false\n   */\n    allow_auto_merge?: boolean,\n  /**\n   * Whether to allow merge commits for pull requests.\n   * @default true\n   * @example true\n   */\n    allow_merge_commit?: boolean,\n  /**\n   * Whether to allow rebase merges for pull requests.\n   * @default true\n   * @example true\n   */\n    allow_rebase_merge?: boolean,\n  /**\n   * Whether to allow squash merges for pull requests.\n   * @default true\n   * @example true\n   */\n    allow_squash_merge?: boolean,\n  /**\n   * Whether the repository is initialized with a minimal README.\n   * @default false\n   */\n    auto_init?: boolean,\n  /**\n   * Whether to delete head branches when pull requests are merged\n   * @default false\n   * @example false\n   */\n    delete_branch_on_merge?: boolean,\n  /** A short description of the repository. */\n    description?: string,\n  /**\n   * The desired language or platform to apply to the .gitignore.\n   * @example \"Haskell\"\n   */\n    gitignore_template?: string,\n  /**\n   * Whether discussions are enabled.\n   * @default false\n   * @example true\n   */\n    has_discussions?: boolean,\n  /**\n   * Whether downloads are enabled.\n   * @default true\n   * @example true\n   */\n    has_downloads?: boolean,\n  /**\n   * Whether issues are enabled.\n   * @default true\n   * @example true\n   */\n    has_issues?: boolean,\n  /**\n   * Whether projects are enabled.\n   * @default true\n   * @example true\n   */\n    has_projects?: boolean,\n  /**\n   * Whether the wiki is enabled.\n   * @default true\n   * @example true\n   */\n    has_wiki?: boolean,\n  /** A URL with more information about the repository. */\n    homepage?: string,\n  /**\n   * Whether this repository acts as a template that can be used to generate new repositories.\n   * @default false\n   * @example true\n   */\n    is_template?: boolean,\n  /**\n   * The license keyword of the open source license for this repository.\n   * @example \"mit\"\n   */\n    license_template?: string,\n  /**\n   * The default value for a merge commit message.\n   * \n   * - `PR_TITLE` - default to the pull request's title.\n   * - `PR_BODY` - default to the pull request's body.\n   * - `BLANK` - default to a blank commit message.\n   */\n    merge_commit_message?: \"PR_BODY\" | \"PR_TITLE\" | \"BLANK\",\n  /**\n   * The default value for a merge commit title.\n   * \n   * - `PR_TITLE` - default to the pull request's title.\n   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).\n   */\n    merge_commit_title?: \"PR_TITLE\" | \"MERGE_MESSAGE\",\n  /**\n   * The name of the repository.\n   * @example \"Team Environment\"\n   */\n    name: string,\n  /**\n   * Whether the repository is private.\n   * @default false\n   */\n    private?: boolean,\n  /**\n   * The default value for a squash merge commit message:\n   * \n   * - `PR_BODY` - default to the pull request's body.\n   * - `COMMIT_MESSAGES` - default to the branch's commit messages.\n   * - `BLANK` - default to a blank commit message.\n   */\n    squash_merge_commit_message?: \"PR_BODY\" | \"COMMIT_MESSAGES\" | \"BLANK\",\n  /**\n   * The default value for a squash merge commit title:\n   * \n   * - `PR_TITLE` - default to the pull request's title.\n   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).\n   */\n    squash_merge_commit_title?: \"PR_TITLE\" | \"COMMIT_OR_PR_TITLE\",\n  /** The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization. */\n    team_id?: number,\n\n},",
        "requiresRelaxedTypeAnnotation": true
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "Repository",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/repository_invitations": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(RepositoryInvitation)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/user/repository_invitations/{invitation_id}": {
    "query": {},
    "body": {},
    "path": {
      ".invitationId": {
        "rendered": " invitationId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/user/repository_invitations/{invitation_id}": {
    "query": {},
    "body": {},
    "path": {
      ".invitationId": {
        "rendered": " invitationId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/ssh_signing_keys": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(SshSigningKey)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/user/ssh_signing_keys": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /**\n   * The public SSH key to add to your GitHub account. For more information, see \"[Checking for existing SSH keys](https://docs.github.com/authentication/connecting-to-github-with-ssh/checking-for-existing-ssh-keys).\"\n   * @pattern ^ssh-(rsa|dss|ed25519) |^ecdsa-sha2-nistp(256|384|521) |^(sk-ssh-ed25519|sk-ecdsa-sha2-nistp256)@openssh.com \n   */\n    key: string,\n  /**\n   * A descriptive name for the new key.\n   * @example \"Personal MacBook Air\"\n   */\n    title?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "SshSigningKey",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/user/ssh_signing_keys/{ssh_signing_key_id}": {
    "query": {},
    "body": {},
    "path": {
      ".sshSigningKeyId": {
        "rendered": "\n/** The unique identifier of the SSH signing key. */\n sshSigningKeyId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/ssh_signing_keys/{ssh_signing_key_id}": {
    "query": {},
    "body": {},
    "path": {
      ".sshSigningKeyId": {
        "rendered": " sshSigningKeyId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "SshSigningKey",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/starred": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to. */\n sort?: \"created\" | \"updated\", \n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.sort": {
        "rendered": "\n/** The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to. */\n sort?: \"created\" | \"updated\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Repository)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/user/starred/{owner}/{repo}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/starred/{owner}/{repo}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/user/starred/{owner}/{repo}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/subscriptions": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(MinimalRepository)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/teams": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(TeamFull)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A user ID. Only return users with an ID greater than this ID. */\n since?: number, \n/** The number of results per page (max 100). */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.since": {
        "rendered": "\n/** A user ID. Only return users with an ID greater than this ID. */\n since?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(SimpleUser)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(PrivateUser | PublicUser)",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{username}/events": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Event)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{username}/events/orgs/{org}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Event)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{username}/events/public": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Event)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{username}/followers": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(SimpleUser)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{username}/following": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(SimpleUser)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{username}/following/{target_user}": {
    "query": {},
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".targetUser": {
        "rendered": " targetUser: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{username}/gists": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.since": {
        "rendered": "\n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(BaseGist)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{username}/gpg_keys": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(GpgKey)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{username}/hovercard": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Identifies which additional information you'd like to receive about the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`. */\n subject_type?: \"organization\" | \"repository\" | \"issue\" | \"pull_request\", \n/** Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`. */\n subject_id?: string, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.subject_type": {
        "rendered": "\n/** Identifies which additional information you'd like to receive about the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`. */\n subject_type?: \"organization\" | \"repository\" | \"issue\" | \"pull_request\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.subject_id": {
        "rendered": "\n/** Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`. */\n subject_id?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Hovercard",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{username}/installation": {
    "query": {},
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Installation",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{username}/keys": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(KeySimple)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{username}/orgs": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(OrganizationSimple)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{username}/packages": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */\n package_type: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\", \n/** The selected visibility of the packages.  This parameter is optional and only filters an existing result set.\n\nThe `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.\nFor the list of GitHub Packages registries that support granular permissions, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\" */\n visibility?: \"public\" | \"private\" | \"internal\", },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.package_type": {
        "rendered": "\n/** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */\n package_type: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.visibility": {
        "rendered": "\n/** The selected visibility of the packages.  This parameter is optional and only filters an existing result set.\n\nThe `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.\nFor the list of GitHub Packages registries that support granular permissions, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\" */\n visibility?: \"public\" | \"private\" | \"internal\",",
        "requiresRelaxedTypeAnnotation": true
      }
    },
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Package)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/users/{username}/packages/{package_type}/{package_name}": {
    "query": {},
    "body": {},
    "path": {
      ".packageType": {
        "rendered": " packageType: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".packageName": {
        "rendered": " packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{username}/packages/{package_type}/{package_name}": {
    "query": {},
    "body": {},
    "path": {
      ".packageType": {
        "rendered": " packageType: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".packageName": {
        "rendered": " packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Package",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/users/{username}/packages/{package_type}/{package_name}/restore": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** package token */\n token?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** package token */\n token?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".packageType": {
        "rendered": " packageType: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".packageName": {
        "rendered": " packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{username}/packages/{package_type}/{package_name}/versions": {
    "query": {},
    "body": {},
    "path": {
      ".packageType": {
        "rendered": " packageType: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".packageName": {
        "rendered": " packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(PackageVersion)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}": {
    "query": {},
    "body": {},
    "path": {
      ".packageType": {
        "rendered": " packageType: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".packageName": {
        "rendered": " packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".packageVersionId": {
        "rendered": " packageVersionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}": {
    "query": {},
    "body": {},
    "path": {
      ".packageType": {
        "rendered": " packageType: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".packageName": {
        "rendered": " packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".packageVersionId": {
        "rendered": " packageVersionId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PackageVersion",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore": {
    "query": {},
    "body": {},
    "path": {
      ".packageType": {
        "rendered": " packageType: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".packageName": {
        "rendered": " packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".packageVersionId": {
        "rendered": " packageVersionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{username}/projects": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Indicates the state of the projects to return. */\n state?: \"open\" | \"closed\" | \"all\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.state": {
        "rendered": "\n/** Indicates the state of the projects to return. */\n state?: \"open\" | \"closed\" | \"all\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Project)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{username}/received_events": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Event)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{username}/received_events/public": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Event)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{username}/repos": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Limit results to repositories of the specified type. */\n type?: \"all\" | \"owner\" | \"member\", \n/** The property to sort the results by. */\n sort?: \"created\" | \"updated\" | \"pushed\" | \"full_name\", \n/** The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`. */\n direction?: \"asc\" | \"desc\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.type": {
        "rendered": "\n/** Limit results to repositories of the specified type. */\n type?: \"all\" | \"owner\" | \"member\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.sort": {
        "rendered": "\n/** The property to sort the results by. */\n sort?: \"created\" | \"updated\" | \"pushed\" | \"full_name\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(MinimalRepository)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{username}/settings/billing/actions": {
    "query": {},
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ActionsBillingUsage",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{username}/settings/billing/packages": {
    "query": {},
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PackagesBillingUsage",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{username}/settings/billing/shared-storage": {
    "query": {},
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CombinedBillingUsage",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{username}/ssh_signing_keys": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(SshSigningKey)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{username}/starred": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to. */\n sort?: \"created\" | \"updated\", \n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.sort": {
        "rendered": "\n/** The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to. */\n sort?: \"created\" | \"updated\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": true
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "((StarredRepository)[] | (Repository)[])",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{username}/subscriptions": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(MinimalRepository)[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/versions": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(string)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/zen": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "AlertCreatedAt",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  }
}
