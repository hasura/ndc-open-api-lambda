{
  "get__/": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "Root",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/app": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "Integration",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/app-manifests/{code}/conversions": {
    "query": {},
    "body": {},
    "path": {
      ".code": {
        "rendered": " code: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Integration & {\n    client_id: string,\n    client_secret: string,\n    pem: string,\n    webhook_secret: string | null,\n    [key: string]: any,\n\n})",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/app/hook/config": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "WebhookConfig",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/app/hook/config": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "WebhookConfig",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/app/hook/deliveries": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors. */\n cursor?: string,  redelivery?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cursor": {
        "rendered": "\n/** Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors. */\n cursor?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.redelivery": {
        "rendered": " redelivery?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(HookDeliveryItem)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/app/hook/deliveries/{delivery_id}": {
    "query": {},
    "body": {},
    "path": {
      ".deliveryId": {
        "rendered": " deliveryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "HookDelivery",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/app/hook/deliveries/{delivery_id}/attempts": {
    "query": {},
    "body": {},
    "path": {
      ".deliveryId": {
        "rendered": " deliveryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/app/installations": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, \n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string,  outdated?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.since": {
        "rendered": "\n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.outdated": {
        "rendered": " outdated?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Installation)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/app/installations/{installation_id}": {
    "query": {},
    "body": {},
    "path": {
      ".installationId": {
        "rendered": "\n/** The unique identifier of the installation. */\n installationId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/app/installations/{installation_id}": {
    "query": {},
    "body": {},
    "path": {
      ".installationId": {
        "rendered": " installationId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Installation",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/app/installations/{installation_id}/access_tokens": {
    "query": {},
    "body": {},
    "path": {
      ".installationId": {
        "rendered": " installationId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "InstallationToken",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/app/installations/{installation_id}/suspended": {
    "query": {},
    "body": {},
    "path": {
      ".installationId": {
        "rendered": " installationId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/app/installations/{installation_id}/suspended": {
    "query": {},
    "body": {},
    "path": {
      ".installationId": {
        "rendered": " installationId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/applications/{client_id}/grant": {
    "query": {},
    "body": {},
    "path": {
      ".clientId": {
        "rendered": "\n/** The client ID of the GitHub app. */\n clientId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/applications/{client_id}/token": {
    "query": {},
    "body": {},
    "path": {
      ".clientId": {
        "rendered": " clientId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/applications/{client_id}/token": {
    "query": {},
    "body": {},
    "path": {
      ".clientId": {
        "rendered": " clientId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Authorization",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/applications/{client_id}/token": {
    "query": {},
    "body": {},
    "path": {
      ".clientId": {
        "rendered": " clientId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Authorization",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/applications/{client_id}/token/scoped": {
    "query": {},
    "body": {},
    "path": {
      ".clientId": {
        "rendered": " clientId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Authorization",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/apps/{app_slug}": {
    "query": {},
    "body": {},
    "path": {
      ".appSlug": {
        "rendered": " appSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Integration",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/codes_of_conduct": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(CodeOfConduct)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/codes_of_conduct/{key}": {
    "query": {},
    "body": {},
    "path": {
      ".key": {
        "rendered": " key: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CodeOfConduct",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/emojis": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/enterprises/{enterprise}/dependabot/alerts": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A comma-separated list of states. If specified, only alerts with these states will be returned.\n\nCan be: `dismissed`, `fixed`, `open` */\n state?: string, \n/** A comma-separated list of severities. If specified, only alerts with these severities will be returned.\n\nCan be: `low`, `medium`, `high`, `critical` */\n severity?: string, \n/** A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.\n\nCan be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust` */\n ecosystem?: string, \n/** A comma-separated list of package names. If specified, only alerts for these packages will be returned. */\n package?: string, \n/** The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned. */\n scope?: \"development\" | \"runtime\", \n/** The property by which to sort the results.\n`created` means when the alert was created.\n`updated` means when the alert's state last changed. */\n sort?: \"created\" | \"updated\", \n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\", \n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor. */\n before?: string, \n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor. */\n after?: string, \n/** **Deprecated**. The number of results per page (max 100), starting from the first matching result.\nThis parameter must not be used in combination with `last`.\nInstead, use `per_page` in combination with `after` to fetch the first page of results. */\n first?: number, \n/** **Deprecated**. The number of results per page (max 100), starting from the last matching result.\nThis parameter must not be used in combination with `first`.\nInstead, use `per_page` in combination with `before` to fetch the last page of results. */\n last?: number, \n/** The number of results per page (max 100). */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.state": {
        "rendered": "\n/** A comma-separated list of states. If specified, only alerts with these states will be returned.\n\nCan be: `dismissed`, `fixed`, `open` */\n state?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.severity": {
        "rendered": "\n/** A comma-separated list of severities. If specified, only alerts with these severities will be returned.\n\nCan be: `low`, `medium`, `high`, `critical` */\n severity?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ecosystem": {
        "rendered": "\n/** A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.\n\nCan be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust` */\n ecosystem?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.package": {
        "rendered": "\n/** A comma-separated list of package names. If specified, only alerts for these packages will be returned. */\n package?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.scope": {
        "rendered": "\n/** The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned. */\n scope?: \"development\" | \"runtime\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The property by which to sort the results.\n`created` means when the alert was created.\n`updated` means when the alert's state last changed. */\n sort?: \"created\" | \"updated\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.before": {
        "rendered": "\n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor. */\n before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.after": {
        "rendered": "\n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor. */\n after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.first": {
        "rendered": "\n/** **Deprecated**. The number of results per page (max 100), starting from the first matching result.\nThis parameter must not be used in combination with `last`.\nInstead, use `per_page` in combination with `after` to fetch the first page of results. */\n first?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.last": {
        "rendered": "\n/** **Deprecated**. The number of results per page (max 100), starting from the last matching result.\nThis parameter must not be used in combination with `first`.\nInstead, use `per_page` in combination with `before` to fetch the last page of results. */\n last?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".enterprise": {
        "rendered": "\n/** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */\n enterprise: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(DependabotAlertWithRepository)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/enterprises/{enterprise}/secret-scanning/alerts": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Set to `open` or `resolved` to only list secret scanning alerts in a specific state. */\n state?: \"open\" | \"resolved\", \n/** A comma-separated list of secret types to return. By default all secret types are returned.\nSee \"[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)\"\nfor a complete list of secret types. */\n secret_type?: string, \n/** A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`. */\n resolution?: string, \n/** The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved. */\n sort?: \"created\" | \"updated\", \n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor. */\n before?: string, \n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor. */\n after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.state": {
        "rendered": "\n/** Set to `open` or `resolved` to only list secret scanning alerts in a specific state. */\n state?: \"open\" | \"resolved\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.secret_type": {
        "rendered": "\n/** A comma-separated list of secret types to return. By default all secret types are returned.\nSee \"[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)\"\nfor a complete list of secret types. */\n secret_type?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.resolution": {
        "rendered": "\n/** A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`. */\n resolution?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved. */\n sort?: \"created\" | \"updated\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.before": {
        "rendered": "\n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor. */\n before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.after": {
        "rendered": "\n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor. */\n after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".enterprise": {
        "rendered": " enterprise: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(OrganizationSecretScanningAlert)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/events": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Event)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/feeds": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "Feed",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/gists": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.since": {
        "rendered": "\n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(BaseGist)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/gists": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "GistSimple",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/gists/public": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.since": {
        "rendered": "\n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(BaseGist)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/gists/starred": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.since": {
        "rendered": "\n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(BaseGist)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/gists/{gist_id}": {
    "query": {},
    "body": {},
    "path": {
      ".gistId": {
        "rendered": "\n/** The unique identifier of the gist. */\n gistId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/gists/{gist_id}": {
    "query": {},
    "body": {},
    "path": {
      ".gistId": {
        "rendered": " gistId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GistSimple",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/gists/{gist_id}": {
    "query": {},
    "body": {},
    "path": {
      ".gistId": {
        "rendered": " gistId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GistSimple",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/gists/{gist_id}/comments": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".gistId": {
        "rendered": " gistId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(GistComment)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/gists/{gist_id}/comments": {
    "query": {},
    "body": {},
    "path": {
      ".gistId": {
        "rendered": " gistId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GistComment",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/gists/{gist_id}/comments/{comment_id}": {
    "query": {},
    "body": {},
    "path": {
      ".gistId": {
        "rendered": " gistId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": "\n/** The unique identifier of the comment. */\n commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/gists/{gist_id}/comments/{comment_id}": {
    "query": {},
    "body": {},
    "path": {
      ".gistId": {
        "rendered": " gistId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": " commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GistComment",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/gists/{gist_id}/comments/{comment_id}": {
    "query": {},
    "body": {},
    "path": {
      ".gistId": {
        "rendered": " gistId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": " commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GistComment",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/gists/{gist_id}/commits": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".gistId": {
        "rendered": " gistId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(GistCommit)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/gists/{gist_id}/forks": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".gistId": {
        "rendered": " gistId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(GistSimple)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/gists/{gist_id}/forks": {
    "query": {},
    "body": {},
    "path": {
      ".gistId": {
        "rendered": " gistId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "BaseGist",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/gists/{gist_id}/star": {
    "query": {},
    "body": {},
    "path": {
      ".gistId": {
        "rendered": " gistId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/gists/{gist_id}/star": {
    "query": {},
    "body": {},
    "path": {
      ".gistId": {
        "rendered": " gistId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/gists/{gist_id}/star": {
    "query": {},
    "body": {},
    "path": {
      ".gistId": {
        "rendered": " gistId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/gists/{gist_id}/{sha}": {
    "query": {},
    "body": {},
    "path": {
      ".gistId": {
        "rendered": " gistId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".sha": {
        "rendered": " sha: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GistSimple",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/gitignore/templates": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(string)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/gitignore/templates/{name}": {
    "query": {},
    "body": {},
    "path": {
      ".name": {
        "rendered": " name: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GitignoreTemplate",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/installation/repositories": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    repositories: (Repository)[],\n  /** @example \"selected\" */\n    repository_selection?: string,\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/installation/token": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/issues": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation. */\n filter?: \"assigned\" | \"created\" | \"mentioned\" | \"subscribed\" | \"repos\" | \"all\", \n/** Indicates the state of the issues to return. */\n state?: \"open\" | \"closed\" | \"all\", \n/** A list of comma separated label names. Example: `bug,ui,@high` */\n labels?: string, \n/** What to sort results by. */\n sort?: \"created\" | \"updated\" | \"comments\", \n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\", \n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string,  collab?: boolean,  orgs?: boolean,  owned?: boolean,  pulls?: boolean, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.filter": {
        "rendered": "\n/** Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation. */\n filter?: \"assigned\" | \"created\" | \"mentioned\" | \"subscribed\" | \"repos\" | \"all\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.state": {
        "rendered": "\n/** Indicates the state of the issues to return. */\n state?: \"open\" | \"closed\" | \"all\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.labels": {
        "rendered": "\n/** A list of comma separated label names. Example: `bug,ui,@high` */\n labels?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** What to sort results by. */\n sort?: \"created\" | \"updated\" | \"comments\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.since": {
        "rendered": "\n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.collab": {
        "rendered": " collab?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.orgs": {
        "rendered": " orgs?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.owned": {
        "rendered": " owned?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pulls": {
        "rendered": " pulls?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Issue)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/licenses": {
    "query": {
      ".query": {
        "rendered": " query: {  featured?: boolean, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.featured": {
        "rendered": " featured?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(LicenseSimple)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/licenses/{license}": {
    "query": {},
    "body": {},
    "path": {
      ".license": {
        "rendered": " license: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "License",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/markdown": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "AlertCreatedAt",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/markdown/raw": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "AlertCreatedAt",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/marketplace_listing/accounts/{account_id}": {
    "query": {},
    "body": {},
    "path": {
      ".accountId": {
        "rendered": "\n/** account_id parameter */\n accountId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "MarketplacePurchase",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/marketplace_listing/plans": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(MarketplaceListingPlan)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/marketplace_listing/plans/{plan_id}/accounts": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to. */\n sort?: \"created\" | \"updated\", \n/** To return the oldest accounts first, set to `asc`. Ignored without the `sort` parameter. */\n direction?: \"asc\" | \"desc\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to. */\n sort?: \"created\" | \"updated\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.direction": {
        "rendered": "\n/** To return the oldest accounts first, set to `asc`. Ignored without the `sort` parameter. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".planId": {
        "rendered": "\n/** The unique identifier of the plan. */\n planId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(MarketplacePurchase)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/marketplace_listing/stubbed/accounts/{account_id}": {
    "query": {},
    "body": {},
    "path": {
      ".accountId": {
        "rendered": " accountId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "MarketplacePurchase",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/marketplace_listing/stubbed/plans": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(MarketplaceListingPlan)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/marketplace_listing/stubbed/plans/{plan_id}/accounts": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to. */\n sort?: \"created\" | \"updated\", \n/** To return the oldest accounts first, set to `asc`. Ignored without the `sort` parameter. */\n direction?: \"asc\" | \"desc\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to. */\n sort?: \"created\" | \"updated\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.direction": {
        "rendered": "\n/** To return the oldest accounts first, set to `asc`. Ignored without the `sort` parameter. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".planId": {
        "rendered": " planId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(MarketplacePurchase)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/meta": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "ApiOverview",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/networks/{owner}/{repo}/events": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": "\n/** The account owner of the repository. The name is not case sensitive. */\n owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": "\n/** The name of the repository. The name is not case sensitive. */\n repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Event)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/notifications": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** If `true`, show notifications marked as read. */\n all?: boolean, \n/** If `true`, only shows notifications in which the user is directly participating or mentioned. */\n participating?: boolean, \n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string, \n/** Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n before?: string, \n/** Page number of the results to fetch. */\n page?: number, \n/** The number of results per page (max 50). */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.all": {
        "rendered": "\n/** If `true`, show notifications marked as read. */\n all?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.participating": {
        "rendered": "\n/** If `true`, only shows notifications in which the user is directly participating or mentioned. */\n participating?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.since": {
        "rendered": "\n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.before": {
        "rendered": "\n/** Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 50). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Thread)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/notifications": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    message?: string,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/notifications/threads/{thread_id}": {
    "query": {},
    "body": {},
    "path": {
      ".threadId": {
        "rendered": "\n/** The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user)). */\n threadId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Thread",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/notifications/threads/{thread_id}": {
    "query": {},
    "body": {},
    "path": {
      ".threadId": {
        "rendered": " threadId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/notifications/threads/{thread_id}/subscription": {
    "query": {},
    "body": {},
    "path": {
      ".threadId": {
        "rendered": " threadId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/notifications/threads/{thread_id}/subscription": {
    "query": {},
    "body": {},
    "path": {
      ".threadId": {
        "rendered": " threadId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ThreadSubscription",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/notifications/threads/{thread_id}/subscription": {
    "query": {},
    "body": {},
    "path": {
      ".threadId": {
        "rendered": " threadId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ThreadSubscription",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/octocat": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The words to show in Octocat's speech bubble */\n s?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.s": {
        "rendered": "\n/** The words to show in Octocat's speech bubble */\n s?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "AlertCreatedAt",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/organizations": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** An organization ID. Only return organizations with an ID greater than this ID. */\n since?: number, \n/** The number of results per page (max 100). */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.since": {
        "rendered": "\n/** An organization ID. Only return organizations with an ID greater than this ID. */\n since?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(OrganizationSimple)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": "\n/** The organization name. The name is not case sensitive. */\n org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OrganizationFull",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/orgs/{org}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OrganizationFull",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/actions/cache/usage": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ActionsCacheUsageOrgEnterprise",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/actions/cache/usage-by-repository": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    repository_cache_usages: (ActionsCacheUsageByRepository)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/actions/oidc/customization/sub": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OidcCustomSub",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/orgs/{org}/actions/oidc/customization/sub": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/actions/permissions": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ActionsOrganizationPermissions",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/orgs/{org}/actions/permissions": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/actions/permissions/repositories": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    repositories: (Repository)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/orgs/{org}/actions/permissions/repositories": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/orgs/{org}/actions/permissions/repositories/{repository_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repositoryId": {
        "rendered": "\n/** The unique identifier of the repository. */\n repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/orgs/{org}/actions/permissions/repositories/{repository_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/actions/permissions/selected-actions": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "SelectedActions",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/orgs/{org}/actions/permissions/selected-actions": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/actions/permissions/workflow": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ActionsGetDefaultWorkflowPermissions",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/orgs/{org}/actions/permissions/workflow": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/actions/required_workflows": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    required_workflows: (RequiredWorkflow)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/orgs/{org}/actions/required_workflows": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "RequiredWorkflow",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/orgs/{org}/actions/required_workflows/{required_workflow_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".requiredWorkflowId": {
        "rendered": "\n/** The unique identifier of the required workflow. */\n requiredWorkflowId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/actions/required_workflows/{required_workflow_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".requiredWorkflowId": {
        "rendered": " requiredWorkflowId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "RequiredWorkflow",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/orgs/{org}/actions/required_workflows/{required_workflow_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".requiredWorkflowId": {
        "rendered": " requiredWorkflowId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "RequiredWorkflow",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".requiredWorkflowId": {
        "rendered": " requiredWorkflowId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    repositories: (Repository)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".requiredWorkflowId": {
        "rendered": " requiredWorkflowId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories/{repository_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".requiredWorkflowId": {
        "rendered": " requiredWorkflowId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories/{repository_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".requiredWorkflowId": {
        "rendered": " requiredWorkflowId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/actions/runners": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    runners: (Runner)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/actions/runners/downloads": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(RunnerApplication)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/orgs/{org}/actions/runners/registration-token": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "AuthenticationToken",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/orgs/{org}/actions/runners/remove-token": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "AuthenticationToken",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/orgs/{org}/actions/runners/{runner_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runnerId": {
        "rendered": "\n/** Unique identifier of the self-hosted runner. */\n runnerId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/actions/runners/{runner_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runnerId": {
        "rendered": " runnerId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Runner",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/orgs/{org}/actions/runners/{runner_id}/labels": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runnerId": {
        "rendered": " runnerId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    labels: (RunnerLabel)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/actions/runners/{runner_id}/labels": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runnerId": {
        "rendered": " runnerId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    labels: (RunnerLabel)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/orgs/{org}/actions/runners/{runner_id}/labels": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runnerId": {
        "rendered": " runnerId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    labels: (RunnerLabel)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/orgs/{org}/actions/runners/{runner_id}/labels": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runnerId": {
        "rendered": " runnerId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    labels: (RunnerLabel)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/orgs/{org}/actions/runners/{runner_id}/labels/{name}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runnerId": {
        "rendered": " runnerId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".name": {
        "rendered": "\n/** The name of a self-hosted runner's custom label. */\n name: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    labels: (RunnerLabel)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/actions/secrets": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    secrets: (OrganizationActionsSecret)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/actions/secrets/public-key": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ActionsPublicKey",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/orgs/{org}/actions/secrets/{secret_name}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": "\n/** The name of the secret. */\n secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/actions/secrets/{secret_name}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OrganizationActionsSecret",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/orgs/{org}/actions/secrets/{secret_name}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/actions/secrets/{secret_name}/repositories": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Page number of the results to fetch. */\n page?: number, \n/** The number of results per page (max 100). */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    repositories: (MinimalRepository)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/orgs/{org}/actions/secrets/{secret_name}/repositories": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/actions/variables": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 30). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 30). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    total_count: number,\n    variables: (OrganizationActionsVariable)[],\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/orgs/{org}/actions/variables": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/orgs/{org}/actions/variables/{name}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".name": {
        "rendered": "\n/** The name of the variable. */\n name: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/actions/variables/{name}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".name": {
        "rendered": " name: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OrganizationActionsVariable",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/orgs/{org}/actions/variables/{name}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".name": {
        "rendered": " name: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/actions/variables/{name}/repositories": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Page number of the results to fetch. */\n page?: number, \n/** The number of results per page (max 100). */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".name": {
        "rendered": " name: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    repositories: (MinimalRepository)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/orgs/{org}/actions/variables/{name}/repositories": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".name": {
        "rendered": " name: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/orgs/{org}/actions/variables/{name}/repositories/{repository_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".name": {
        "rendered": " name: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/orgs/{org}/actions/variables/{name}/repositories/{repository_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".name": {
        "rendered": " name: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/blocks": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(SimpleUser)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/blocks/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": "\n/** The handle for the GitHub user account. */\n username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/blocks/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/orgs/{org}/blocks/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/code-scanning/alerts": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both. */\n tool_name?: CodeScanningAnalysisToolName, \n/** The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both. */\n tool_guid?: CodeScanningAnalysisToolGuid, \n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor. */\n before?: string, \n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor. */\n after?: string, \n/** Page number of the results to fetch. */\n page?: number, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\", \n/** If specified, only code scanning alerts with this state will be returned. */\n state?: CodeScanningAlertState, \n/** The property by which to sort the results. */\n sort?: \"created\" | \"updated\", \n/** If specified, only code scanning alerts with this severity will be returned. */\n severity?: CodeScanningAlertSeverity, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.tool_name": {
        "rendered": "\n/** The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both. */\n tool_name?: CodeScanningAnalysisToolName,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.tool_guid": {
        "rendered": "\n/** The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both. */\n tool_guid?: CodeScanningAnalysisToolGuid,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.before": {
        "rendered": "\n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor. */\n before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.after": {
        "rendered": "\n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor. */\n after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.state": {
        "rendered": "\n/** If specified, only code scanning alerts with this state will be returned. */\n state?: CodeScanningAlertState,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The property by which to sort the results. */\n sort?: \"created\" | \"updated\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.severity": {
        "rendered": "\n/** If specified, only code scanning alerts with this severity will be returned. */\n severity?: CodeScanningAlertSeverity,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(CodeScanningOrganizationAlertItems)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/codespaces": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    codespaces: (Codespace)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/orgs/{org}/codespaces/billing": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/orgs/{org}/codespaces/billing/selected_users": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/orgs/{org}/codespaces/billing/selected_users": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/codespaces/secrets": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    secrets: (CodespacesOrgSecret)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/codespaces/secrets/public-key": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CodespacesPublicKey",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/orgs/{org}/codespaces/secrets/{secret_name}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/codespaces/secrets/{secret_name}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CodespacesOrgSecret",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/orgs/{org}/codespaces/secrets/{secret_name}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/codespaces/secrets/{secret_name}/repositories": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Page number of the results to fetch. */\n page?: number, \n/** The number of results per page (max 100). */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    repositories: (MinimalRepository)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/orgs/{org}/codespaces/secrets/{secret_name}/repositories": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/dependabot/alerts": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A comma-separated list of states. If specified, only alerts with these states will be returned.\n\nCan be: `dismissed`, `fixed`, `open` */\n state?: string, \n/** A comma-separated list of severities. If specified, only alerts with these severities will be returned.\n\nCan be: `low`, `medium`, `high`, `critical` */\n severity?: string, \n/** A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.\n\nCan be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust` */\n ecosystem?: string, \n/** A comma-separated list of package names. If specified, only alerts for these packages will be returned. */\n package?: string, \n/** The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned. */\n scope?: \"development\" | \"runtime\", \n/** The property by which to sort the results.\n`created` means when the alert was created.\n`updated` means when the alert's state last changed. */\n sort?: \"created\" | \"updated\", \n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\", \n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor. */\n before?: string, \n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor. */\n after?: string, \n/** **Deprecated**. The number of results per page (max 100), starting from the first matching result.\nThis parameter must not be used in combination with `last`.\nInstead, use `per_page` in combination with `after` to fetch the first page of results. */\n first?: number, \n/** **Deprecated**. The number of results per page (max 100), starting from the last matching result.\nThis parameter must not be used in combination with `first`.\nInstead, use `per_page` in combination with `before` to fetch the last page of results. */\n last?: number, \n/** The number of results per page (max 100). */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.state": {
        "rendered": "\n/** A comma-separated list of states. If specified, only alerts with these states will be returned.\n\nCan be: `dismissed`, `fixed`, `open` */\n state?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.severity": {
        "rendered": "\n/** A comma-separated list of severities. If specified, only alerts with these severities will be returned.\n\nCan be: `low`, `medium`, `high`, `critical` */\n severity?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ecosystem": {
        "rendered": "\n/** A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.\n\nCan be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust` */\n ecosystem?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.package": {
        "rendered": "\n/** A comma-separated list of package names. If specified, only alerts for these packages will be returned. */\n package?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.scope": {
        "rendered": "\n/** The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned. */\n scope?: \"development\" | \"runtime\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The property by which to sort the results.\n`created` means when the alert was created.\n`updated` means when the alert's state last changed. */\n sort?: \"created\" | \"updated\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.before": {
        "rendered": "\n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor. */\n before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.after": {
        "rendered": "\n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor. */\n after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.first": {
        "rendered": "\n/** **Deprecated**. The number of results per page (max 100), starting from the first matching result.\nThis parameter must not be used in combination with `last`.\nInstead, use `per_page` in combination with `after` to fetch the first page of results. */\n first?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.last": {
        "rendered": "\n/** **Deprecated**. The number of results per page (max 100), starting from the last matching result.\nThis parameter must not be used in combination with `first`.\nInstead, use `per_page` in combination with `before` to fetch the last page of results. */\n last?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(DependabotAlertWithRepository)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/dependabot/secrets": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    secrets: (OrganizationDependabotSecret)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/dependabot/secrets/public-key": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "DependabotPublicKey",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/orgs/{org}/dependabot/secrets/{secret_name}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/dependabot/secrets/{secret_name}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OrganizationDependabotSecret",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/orgs/{org}/dependabot/secrets/{secret_name}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/dependabot/secrets/{secret_name}/repositories": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Page number of the results to fetch. */\n page?: number, \n/** The number of results per page (max 100). */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    repositories: (MinimalRepository)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/orgs/{org}/dependabot/secrets/{secret_name}/repositories": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/events": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Event)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/failed_invitations": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(OrganizationInvitation)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/hooks": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(OrgHook)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/orgs/{org}/hooks": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OrgHook",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/orgs/{org}/hooks/{hook_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".hookId": {
        "rendered": "\n/** The unique identifier of the hook. */\n hookId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/hooks/{hook_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".hookId": {
        "rendered": " hookId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OrgHook",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/orgs/{org}/hooks/{hook_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".hookId": {
        "rendered": " hookId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OrgHook",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/hooks/{hook_id}/config": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".hookId": {
        "rendered": " hookId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "WebhookConfig",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/orgs/{org}/hooks/{hook_id}/config": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".hookId": {
        "rendered": " hookId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "WebhookConfig",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/hooks/{hook_id}/deliveries": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors. */\n cursor?: string,  redelivery?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cursor": {
        "rendered": "\n/** Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors. */\n cursor?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.redelivery": {
        "rendered": " redelivery?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".hookId": {
        "rendered": " hookId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(HookDeliveryItem)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".hookId": {
        "rendered": " hookId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".deliveryId": {
        "rendered": " deliveryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "HookDelivery",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".hookId": {
        "rendered": " hookId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".deliveryId": {
        "rendered": " deliveryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/orgs/{org}/hooks/{hook_id}/pings": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".hookId": {
        "rendered": " hookId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/installation": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Installation",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/installations": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    installations: (Installation)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/interaction-limits": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/interaction-limits": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(InteractionLimitResponse | hasuraSdk.JSONValue)",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/orgs/{org}/interaction-limits": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "InteractionLimitResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/invitations": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, \n/** Filter invitations by their member role. */\n role?: \"all\" | \"admin\" | \"direct_member\" | \"billing_manager\" | \"hiring_manager\", \n/** Filter invitations by their invitation source. */\n invitation_source?: \"all\" | \"member\" | \"scim\", },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.role": {
        "rendered": "\n/** Filter invitations by their member role. */\n role?: \"all\" | \"admin\" | \"direct_member\" | \"billing_manager\" | \"hiring_manager\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invitation_source": {
        "rendered": "\n/** Filter invitations by their invitation source. */\n invitation_source?: \"all\" | \"member\" | \"scim\",",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(OrganizationInvitation)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/orgs/{org}/invitations": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OrganizationInvitation",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/orgs/{org}/invitations/{invitation_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".invitationId": {
        "rendered": "\n/** The unique identifier of the invitation. */\n invitationId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/invitations/{invitation_id}/teams": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".invitationId": {
        "rendered": " invitationId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Team)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/issues": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation. */\n filter?: \"assigned\" | \"created\" | \"mentioned\" | \"subscribed\" | \"repos\" | \"all\", \n/** Indicates the state of the issues to return. */\n state?: \"open\" | \"closed\" | \"all\", \n/** A list of comma separated label names. Example: `bug,ui,@high` */\n labels?: string, \n/** What to sort results by. */\n sort?: \"created\" | \"updated\" | \"comments\", \n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\", \n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.filter": {
        "rendered": "\n/** Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation. */\n filter?: \"assigned\" | \"created\" | \"mentioned\" | \"subscribed\" | \"repos\" | \"all\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.state": {
        "rendered": "\n/** Indicates the state of the issues to return. */\n state?: \"open\" | \"closed\" | \"all\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.labels": {
        "rendered": "\n/** A list of comma separated label names. Example: `bug,ui,@high` */\n labels?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** What to sort results by. */\n sort?: \"created\" | \"updated\" | \"comments\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.since": {
        "rendered": "\n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Issue)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/members": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Filter members returned in the list. `2fa_disabled` means that only members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned. This options is only available for organization owners. */\n filter?: \"2fa_disabled\" | \"all\", \n/** Filter members returned by their role. */\n role?: \"all\" | \"admin\" | \"member\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.filter": {
        "rendered": "\n/** Filter members returned in the list. `2fa_disabled` means that only members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned. This options is only available for organization owners. */\n filter?: \"2fa_disabled\" | \"all\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.role": {
        "rendered": "\n/** Filter members returned by their role. */\n role?: \"all\" | \"admin\" | \"member\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(SimpleUser)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/members/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/members/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/members/{username}/codespaces": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    codespaces: (Codespace)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/members/{username}/codespaces/{codespace_name}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".codespaceName": {
        "rendered": "\n/** The name of the codespace. */\n codespaceName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/orgs/{org}/members/{username}/codespaces/{codespace_name}/stop": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".codespaceName": {
        "rendered": " codespaceName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Codespace",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/orgs/{org}/memberships/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/memberships/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OrgMembership",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/orgs/{org}/memberships/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OrgMembership",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/migrations": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, \n/** Exclude attributes from the API response to improve performance */\n exclude?: (\"repositories\")[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.exclude": {
        "rendered": "\n/** Exclude attributes from the API response to improve performance */\n exclude?: (\"repositories\")[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.exclude.__no_name": {
        "rendered": "\"repositories\"",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Migration)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/orgs/{org}/migrations": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Migration",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/migrations/{migration_id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Exclude attributes from the API response to improve performance */\n exclude?: (\"repositories\")[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.exclude": {
        "rendered": "\n/** Exclude attributes from the API response to improve performance */\n exclude?: (\"repositories\")[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.exclude.__no_name": {
        "rendered": "\"repositories\"",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".migrationId": {
        "rendered": "\n/** The unique identifier of the migration. */\n migrationId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Migration",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/orgs/{org}/migrations/{migration_id}/archive": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".migrationId": {
        "rendered": " migrationId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/migrations/{migration_id}/archive": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".migrationId": {
        "rendered": " migrationId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".migrationId": {
        "rendered": " migrationId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repoName": {
        "rendered": "\n/** repo_name parameter */\n repoName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/migrations/{migration_id}/repositories": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".migrationId": {
        "rendered": " migrationId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(MinimalRepository)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/outside_collaborators": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Filter the list of outside collaborators. `2fa_disabled` means that only outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned. */\n filter?: \"2fa_disabled\" | \"all\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.filter": {
        "rendered": "\n/** Filter the list of outside collaborators. `2fa_disabled` means that only outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned. */\n filter?: \"2fa_disabled\" | \"all\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(SimpleUser)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/outside_collaborators/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/orgs/{org}/outside_collaborators/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/packages": {
    "query": {
      ".query": {
        "rendered": " query?: { \n/** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */\n package_type: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\", \n/** The selected visibility of the packages.  This parameter is optional and only filters an existing result set.\n\nThe `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.\nFor the list of GitHub Packages registries that support granular permissions, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\" */\n visibility?: \"public\" | \"private\" | \"internal\", \n/** Page number of the results to fetch. */\n page?: number, \n/** The number of results per page (max 100). */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.package_type": {
        "rendered": "\n/** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */\n package_type: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.visibility": {
        "rendered": "\n/** The selected visibility of the packages.  This parameter is optional and only filters an existing result set.\n\nThe `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.\nFor the list of GitHub Packages registries that support granular permissions, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\" */\n visibility?: \"public\" | \"private\" | \"internal\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Package)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/packages/{package_type}/{package_name}": {
    "query": {},
    "body": {},
    "path": {
      ".packageType": {
        "rendered": "\n/** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */\n packageType: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".packageName": {
        "rendered": "\n/** The name of the package. */\n packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/packages/{package_type}/{package_name}": {
    "query": {},
    "body": {},
    "path": {
      ".packageType": {
        "rendered": " packageType: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".packageName": {
        "rendered": " packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Package",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/orgs/{org}/packages/{package_type}/{package_name}/restore": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** package token */\n token?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** package token */\n token?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".packageType": {
        "rendered": " packageType: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".packageName": {
        "rendered": " packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/packages/{package_type}/{package_name}/versions": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Page number of the results to fetch. */\n page?: number, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** The state of the package, either active or deleted. */\n state?: \"active\" | \"deleted\", },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.state": {
        "rendered": "\n/** The state of the package, either active or deleted. */\n state?: \"active\" | \"deleted\",",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".packageType": {
        "rendered": " packageType: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".packageName": {
        "rendered": " packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(PackageVersion)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}": {
    "query": {},
    "body": {},
    "path": {
      ".packageType": {
        "rendered": " packageType: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".packageName": {
        "rendered": " packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".packageVersionId": {
        "rendered": "\n/** Unique identifier of the package version. */\n packageVersionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}": {
    "query": {},
    "body": {},
    "path": {
      ".packageType": {
        "rendered": " packageType: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".packageName": {
        "rendered": " packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".packageVersionId": {
        "rendered": " packageVersionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PackageVersion",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore": {
    "query": {},
    "body": {},
    "path": {
      ".packageType": {
        "rendered": " packageType: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".packageName": {
        "rendered": " packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".packageVersionId": {
        "rendered": " packageVersionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/projects": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Indicates the state of the projects to return. */\n state?: \"open\" | \"closed\" | \"all\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.state": {
        "rendered": "\n/** Indicates the state of the projects to return. */\n state?: \"open\" | \"closed\" | \"all\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Project)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/orgs/{org}/projects": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Project",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/public_members": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(SimpleUser)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/public_members/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/public_members/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/orgs/{org}/public_members/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/repos": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies the types of repositories you want returned. */\n type?: \"all\" | \"public\" | \"private\" | \"forks\" | \"sources\" | \"member\", \n/** The property to sort the results by. */\n sort?: \"created\" | \"updated\" | \"pushed\" | \"full_name\", \n/** The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`. */\n direction?: \"asc\" | \"desc\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.type": {
        "rendered": "\n/** Specifies the types of repositories you want returned. */\n type?: \"all\" | \"public\" | \"private\" | \"forks\" | \"sources\" | \"member\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The property to sort the results by. */\n sort?: \"created\" | \"updated\" | \"pushed\" | \"full_name\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.direction": {
        "rendered": "\n/** The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(MinimalRepository)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/orgs/{org}/repos": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Repository",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/secret-scanning/alerts": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Set to `open` or `resolved` to only list secret scanning alerts in a specific state. */\n state?: \"open\" | \"resolved\", \n/** A comma-separated list of secret types to return. By default all secret types are returned.\nSee \"[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)\"\nfor a complete list of secret types. */\n secret_type?: string, \n/** A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`. */\n resolution?: string, \n/** The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved. */\n sort?: \"created\" | \"updated\", \n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\", \n/** Page number of the results to fetch. */\n page?: number, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty \"before\" query string. */\n before?: string, \n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty \"after\" query string. */\n after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.state": {
        "rendered": "\n/** Set to `open` or `resolved` to only list secret scanning alerts in a specific state. */\n state?: \"open\" | \"resolved\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.secret_type": {
        "rendered": "\n/** A comma-separated list of secret types to return. By default all secret types are returned.\nSee \"[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)\"\nfor a complete list of secret types. */\n secret_type?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.resolution": {
        "rendered": "\n/** A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`. */\n resolution?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved. */\n sort?: \"created\" | \"updated\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.before": {
        "rendered": "\n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty \"before\" query string. */\n before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.after": {
        "rendered": "\n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty \"after\" query string. */\n after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(OrganizationSecretScanningAlert)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/security-managers": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(TeamSimple)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/security-managers/teams/{team_slug}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": "\n/** The slug of the team name. */\n teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/orgs/{org}/security-managers/teams/{team_slug}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/settings/billing/actions": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ActionsBillingUsage",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/settings/billing/packages": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PackagesBillingUsage",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/settings/billing/shared-storage": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CombinedBillingUsage",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/teams": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Team)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/orgs/{org}/teams": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamFull",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/orgs/{org}/teams/{team_slug}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/teams/{team_slug}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamFull",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/orgs/{org}/teams/{team_slug}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamFull",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/teams/{team_slug}/discussions": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, \n/** Pinned discussions only filter */\n pinned?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pinned": {
        "rendered": "\n/** Pinned discussions only filter */\n pinned?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(TeamDiscussion)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/orgs/{org}/teams/{team_slug}/discussions": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamDiscussion",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": "\n/** The number that identifies the discussion. */\n discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamDiscussion",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamDiscussion",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(TeamDiscussionComment)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamDiscussionComment",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentNumber": {
        "rendered": "\n/** The number that identifies the comment. */\n commentNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentNumber": {
        "rendered": " commentNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamDiscussionComment",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentNumber": {
        "rendered": " commentNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamDiscussionComment",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment. */\n content?: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.content": {
        "rendered": "\n/** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment. */\n content?: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentNumber": {
        "rendered": " commentNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Reaction)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentNumber": {
        "rendered": " commentNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Reaction",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentNumber": {
        "rendered": " commentNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".reactionId": {
        "rendered": "\n/** The unique identifier of the reaction. */\n reactionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion. */\n content?: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.content": {
        "rendered": "\n/** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion. */\n content?: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Reaction)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Reaction",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".reactionId": {
        "rendered": " reactionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/teams/{team_slug}/invitations": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(OrganizationInvitation)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/orgs/{org}/teams/{team_slug}/members": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Filters members returned by their role in the team. */\n role?: \"member\" | \"maintainer\" | \"all\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.role": {
        "rendered": "\n/** Filters members returned by their role in the team. */\n role?: \"member\" | \"maintainer\" | \"all\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(SimpleUser)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/teams/{team_slug}/memberships/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/teams/{team_slug}/memberships/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamMembership",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/orgs/{org}/teams/{team_slug}/memberships/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamMembership",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/teams/{team_slug}/projects": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(TeamProject)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/teams/{team_slug}/projects/{project_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".projectId": {
        "rendered": "\n/** The unique identifier of the project. */\n projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/teams/{team_slug}/projects/{project_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".projectId": {
        "rendered": " projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamProject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/orgs/{org}/teams/{team_slug}/projects/{project_id}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".projectId": {
        "rendered": " projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/teams/{team_slug}/repos": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(MinimalRepository)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamRepository",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/orgs/{org}/teams/{team_slug}/teams": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".teamSlug": {
        "rendered": " teamSlug: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Team)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/orgs/{org}/{security_product}/{enablement}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".securityProduct": {
        "rendered": "\n/** The security feature to enable or disable. */\n securityProduct: \"dependency_graph\" | \"dependabot_alerts\" | \"dependabot_security_updates\" | \"advanced_security\" | \"secret_scanning\" | \"secret_scanning_push_protection\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".enablement": {
        "rendered": "\n/** The action to take.\n\n`enable_all` means to enable the specified security feature for all repositories in the organization.\n`disable_all` means to disable the specified security feature for all repositories in the organization. */\n enablement: \"enable_all\" | \"disable_all\",",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/projects/columns/cards/{card_id}": {
    "query": {},
    "body": {},
    "path": {
      ".cardId": {
        "rendered": "\n/** The unique identifier of the card. */\n cardId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/projects/columns/cards/{card_id}": {
    "query": {},
    "body": {},
    "path": {
      ".cardId": {
        "rendered": " cardId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProjectCard",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/projects/columns/cards/{card_id}": {
    "query": {},
    "body": {},
    "path": {
      ".cardId": {
        "rendered": " cardId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProjectCard",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/projects/columns/cards/{card_id}/moves": {
    "query": {},
    "body": {},
    "path": {
      ".cardId": {
        "rendered": " cardId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/projects/columns/{column_id}": {
    "query": {},
    "body": {},
    "path": {
      ".columnId": {
        "rendered": "\n/** The unique identifier of the column. */\n columnId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/projects/columns/{column_id}": {
    "query": {},
    "body": {},
    "path": {
      ".columnId": {
        "rendered": " columnId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProjectColumn",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/projects/columns/{column_id}": {
    "query": {},
    "body": {},
    "path": {
      ".columnId": {
        "rendered": " columnId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProjectColumn",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/projects/columns/{column_id}/cards": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Filters the project cards that are returned by the card's state. */\n archived_state?: \"all\" | \"archived\" | \"not_archived\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.archived_state": {
        "rendered": "\n/** Filters the project cards that are returned by the card's state. */\n archived_state?: \"all\" | \"archived\" | \"not_archived\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".columnId": {
        "rendered": " columnId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(ProjectCard)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/projects/columns/{column_id}/cards": {
    "query": {},
    "body": {},
    "path": {
      ".columnId": {
        "rendered": " columnId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProjectCard",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/projects/columns/{column_id}/moves": {
    "query": {},
    "body": {},
    "path": {
      ".columnId": {
        "rendered": " columnId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/projects/{project_id}": {
    "query": {},
    "body": {},
    "path": {
      ".projectId": {
        "rendered": " projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/projects/{project_id}": {
    "query": {},
    "body": {},
    "path": {
      ".projectId": {
        "rendered": " projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Project",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/projects/{project_id}": {
    "query": {},
    "body": {},
    "path": {
      ".projectId": {
        "rendered": " projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Project",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/projects/{project_id}/collaborators": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Filters the collaborators by their affiliation. `outside` means outside collaborators of a project that are not a member of the project's organization. `direct` means collaborators with permissions to a project, regardless of organization membership status. `all` means all collaborators the authenticated user can see. */\n affiliation?: \"outside\" | \"direct\" | \"all\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.affiliation": {
        "rendered": "\n/** Filters the collaborators by their affiliation. `outside` means outside collaborators of a project that are not a member of the project's organization. `direct` means collaborators with permissions to a project, regardless of organization membership status. `all` means all collaborators the authenticated user can see. */\n affiliation?: \"outside\" | \"direct\" | \"all\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".projectId": {
        "rendered": " projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(SimpleUser)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/projects/{project_id}/collaborators/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".projectId": {
        "rendered": " projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/projects/{project_id}/collaborators/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".projectId": {
        "rendered": " projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/projects/{project_id}/collaborators/{username}/permission": {
    "query": {},
    "body": {},
    "path": {
      ".projectId": {
        "rendered": " projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProjectCollaboratorPermission",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/projects/{project_id}/columns": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".projectId": {
        "rendered": " projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(ProjectColumn)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/projects/{project_id}/columns": {
    "query": {},
    "body": {},
    "path": {
      ".projectId": {
        "rendered": " projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProjectColumn",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/rate_limit": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "RateLimitOverview",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{org}/{repo}/actions/required_workflows": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    required_workflows: (RepoRequiredWorkflow)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{org}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".requiredWorkflowIdForRepo": {
        "rendered": "\n/** The ID of the required workflow that has run at least once in a repository. */\n requiredWorkflowIdForRepo: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "RepoRequiredWorkflow",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{org}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}/timing": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".requiredWorkflowIdForRepo": {
        "rendered": " requiredWorkflowIdForRepo: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "WorkflowUsage",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repos/{owner}/{repo}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "FullRepository",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/repos/{owner}/{repo}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "FullRepository",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/actions/artifacts": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, \n/** Filters artifacts by exact match on their name field. */\n name?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.name": {
        "rendered": "\n/** Filters artifacts by exact match on their name field. */\n name?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    artifacts: (Artifact)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/actions/artifacts/{artifact_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".artifactId": {
        "rendered": "\n/** The unique identifier of the artifact. */\n artifactId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/actions/artifacts/{artifact_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".artifactId": {
        "rendered": " artifactId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Artifact",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".artifactId": {
        "rendered": " artifactId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".archiveFormat": {
        "rendered": " archiveFormat: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/actions/cache/usage": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ActionsCacheUsageByRepository",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repos/{owner}/{repo}/actions/caches": {
    "query": {
      ".query": {
        "rendered": " query?: { \n/** A key for identifying the cache. */\n key: string, \n/** The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */\n ref?: CodeScanningRef, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** A key for identifying the cache. */\n key: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ref": {
        "rendered": "\n/** The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */\n ref?: CodeScanningRef,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ActionsCacheList",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/actions/caches": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, \n/** The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */\n ref?: CodeScanningRef, \n/** An explicit key or prefix for identifying the cache */\n key?: string, \n/** The property to sort the results by. `created_at` means when the cache was created. `last_accessed_at` means when the cache was last accessed. `size_in_bytes` is the size of the cache in bytes. */\n sort?: \"created_at\" | \"last_accessed_at\" | \"size_in_bytes\", \n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\", },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ref": {
        "rendered": "\n/** The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */\n ref?: CodeScanningRef,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.key": {
        "rendered": "\n/** An explicit key or prefix for identifying the cache */\n key?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The property to sort the results by. `created_at` means when the cache was created. `last_accessed_at` means when the cache was last accessed. `size_in_bytes` is the size of the cache in bytes. */\n sort?: \"created_at\" | \"last_accessed_at\" | \"size_in_bytes\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ActionsCacheList",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repos/{owner}/{repo}/actions/caches/{cache_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".cacheId": {
        "rendered": "\n/** The unique identifier of the GitHub Actions cache. */\n cacheId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/actions/jobs/{job_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".jobId": {
        "rendered": "\n/** The unique identifier of the job. */\n jobId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Job",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/actions/jobs/{job_id}/logs": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".jobId": {
        "rendered": " jobId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".jobId": {
        "rendered": " jobId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/actions/oidc/customization/sub": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OidcCustomSubRepo",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/repos/{owner}/{repo}/actions/oidc/customization/sub": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/actions/permissions": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ActionsRepositoryPermissions",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/repos/{owner}/{repo}/actions/permissions": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/actions/permissions/access": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ActionsWorkflowAccessToRepository",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/repos/{owner}/{repo}/actions/permissions/access": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/actions/permissions/selected-actions": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "SelectedActions",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/repos/{owner}/{repo}/actions/permissions/selected-actions": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/actions/permissions/workflow": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ActionsGetDefaultWorkflowPermissions",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/repos/{owner}/{repo}/actions/permissions/workflow": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}/runs": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run. */\n actor?: string, \n/** Returns workflow runs associated with a branch. Use the name of the branch of the `push`. */\n branch?: string, \n/** Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \"[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\" */\n event?: string, \n/** Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. */\n status?: \"completed\" | \"action_required\" | \"cancelled\" | \"failure\" | \"neutral\" | \"skipped\" | \"stale\" | \"success\" | \"timed_out\" | \"in_progress\" | \"queued\" | \"requested\" | \"waiting\" | \"pending\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, \n/** Returns workflow runs created within the given date-time range. For more information on the syntax, see \"[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\" */\n created?: string, \n/** If `true` pull requests are omitted from the response (empty array). */\n exclude_pull_requests?: boolean, \n/** Returns workflow runs with the `check_suite_id` that you specify. */\n check_suite_id?: number, \n/** Only returns workflow runs that are associated with the specified `head_sha`. */\n head_sha?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.actor": {
        "rendered": "\n/** Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run. */\n actor?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.branch": {
        "rendered": "\n/** Returns workflow runs associated with a branch. Use the name of the branch of the `push`. */\n branch?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.event": {
        "rendered": "\n/** Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \"[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\" */\n event?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.status": {
        "rendered": "\n/** Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. */\n status?: \"completed\" | \"action_required\" | \"cancelled\" | \"failure\" | \"neutral\" | \"skipped\" | \"stale\" | \"success\" | \"timed_out\" | \"in_progress\" | \"queued\" | \"requested\" | \"waiting\" | \"pending\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": "\n/** Returns workflow runs created within the given date-time range. For more information on the syntax, see \"[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\" */\n created?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.exclude_pull_requests": {
        "rendered": "\n/** If `true` pull requests are omitted from the response (empty array). */\n exclude_pull_requests?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.check_suite_id": {
        "rendered": "\n/** Returns workflow runs with the `check_suite_id` that you specify. */\n check_suite_id?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.head_sha": {
        "rendered": "\n/** Only returns workflow runs that are associated with the specified `head_sha`. */\n head_sha?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".requiredWorkflowIdForRepo": {
        "rendered": " requiredWorkflowIdForRepo: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    total_count: number,\n    workflow_runs: (WorkflowRun)[],\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/runners": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    runners: (Runner)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/runners/downloads": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(RunnerApplication)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/actions/runners/registration-token": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "AuthenticationToken",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/repos/{owner}/{repo}/actions/runners/remove-token": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "AuthenticationToken",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repos/{owner}/{repo}/actions/runners/{runner_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runnerId": {
        "rendered": " runnerId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/actions/runners/{runner_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runnerId": {
        "rendered": " runnerId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Runner",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repos/{owner}/{repo}/actions/runners/{runner_id}/labels": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runnerId": {
        "rendered": " runnerId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    labels: (RunnerLabel)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/actions/runners/{runner_id}/labels": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runnerId": {
        "rendered": " runnerId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    labels: (RunnerLabel)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/repos/{owner}/{repo}/actions/runners/{runner_id}/labels": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runnerId": {
        "rendered": " runnerId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    labels: (RunnerLabel)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/repos/{owner}/{repo}/actions/runners/{runner_id}/labels": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runnerId": {
        "rendered": " runnerId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    labels: (RunnerLabel)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runnerId": {
        "rendered": " runnerId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".name": {
        "rendered": " name: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    labels: (RunnerLabel)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/actions/runs": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run. */\n actor?: string, \n/** Returns workflow runs associated with a branch. Use the name of the branch of the `push`. */\n branch?: string, \n/** Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \"[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\" */\n event?: string, \n/** Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. */\n status?: \"completed\" | \"action_required\" | \"cancelled\" | \"failure\" | \"neutral\" | \"skipped\" | \"stale\" | \"success\" | \"timed_out\" | \"in_progress\" | \"queued\" | \"requested\" | \"waiting\" | \"pending\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, \n/** Returns workflow runs created within the given date-time range. For more information on the syntax, see \"[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\" */\n created?: string, \n/** If `true` pull requests are omitted from the response (empty array). */\n exclude_pull_requests?: boolean, \n/** Returns workflow runs with the `check_suite_id` that you specify. */\n check_suite_id?: number, \n/** Only returns workflow runs that are associated with the specified `head_sha`. */\n head_sha?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.actor": {
        "rendered": "\n/** Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run. */\n actor?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.branch": {
        "rendered": "\n/** Returns workflow runs associated with a branch. Use the name of the branch of the `push`. */\n branch?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.event": {
        "rendered": "\n/** Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \"[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\" */\n event?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.status": {
        "rendered": "\n/** Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. */\n status?: \"completed\" | \"action_required\" | \"cancelled\" | \"failure\" | \"neutral\" | \"skipped\" | \"stale\" | \"success\" | \"timed_out\" | \"in_progress\" | \"queued\" | \"requested\" | \"waiting\" | \"pending\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": "\n/** Returns workflow runs created within the given date-time range. For more information on the syntax, see \"[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\" */\n created?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.exclude_pull_requests": {
        "rendered": "\n/** If `true` pull requests are omitted from the response (empty array). */\n exclude_pull_requests?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.check_suite_id": {
        "rendered": "\n/** Returns workflow runs with the `check_suite_id` that you specify. */\n check_suite_id?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.head_sha": {
        "rendered": "\n/** Only returns workflow runs that are associated with the specified `head_sha`. */\n head_sha?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    total_count: number,\n    workflow_runs: (WorkflowRun)[],\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/actions/runs/{run_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runId": {
        "rendered": "\n/** The unique identifier of the workflow run. */\n runId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/actions/runs/{run_id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** If `true` pull requests are omitted from the response (empty array). */\n exclude_pull_requests?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.exclude_pull_requests": {
        "rendered": "\n/** If `true` pull requests are omitted from the response (empty array). */\n exclude_pull_requests?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runId": {
        "rendered": " runId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "WorkflowRun",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/actions/runs/{run_id}/approvals": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runId": {
        "rendered": " runId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(EnvironmentApprovals)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/actions/runs/{run_id}/approve": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runId": {
        "rendered": " runId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runId": {
        "rendered": " runId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    artifacts: (Artifact)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** If `true` pull requests are omitted from the response (empty array). */\n exclude_pull_requests?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.exclude_pull_requests": {
        "rendered": "\n/** If `true` pull requests are omitted from the response (empty array). */\n exclude_pull_requests?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runId": {
        "rendered": " runId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".attemptNumber": {
        "rendered": "\n/** The attempt number of the workflow run. */\n attemptNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "WorkflowRun",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runId": {
        "rendered": " runId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".attemptNumber": {
        "rendered": " attemptNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    jobs: (Job)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runId": {
        "rendered": " runId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".attemptNumber": {
        "rendered": " attemptNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/repos/{owner}/{repo}/actions/runs/{run_id}/cancel": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runId": {
        "rendered": " runId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/actions/runs/{run_id}/jobs": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Filters jobs by their `completed_at` timestamp. `latest` returns jobs from the most recent execution of the workflow run. `all` returns all jobs for a workflow run, including from old executions of the workflow run. */\n filter?: \"latest\" | \"all\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.filter": {
        "rendered": "\n/** Filters jobs by their `completed_at` timestamp. `latest` returns jobs from the most recent execution of the workflow run. `all` returns all jobs for a workflow run, including from old executions of the workflow run. */\n filter?: \"latest\" | \"all\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runId": {
        "rendered": " runId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    jobs: (Job)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/actions/runs/{run_id}/logs": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runId": {
        "rendered": " runId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/actions/runs/{run_id}/logs": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runId": {
        "rendered": " runId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runId": {
        "rendered": " runId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(PendingDeployment)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runId": {
        "rendered": " runId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Deployment)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/actions/runs/{run_id}/rerun": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runId": {
        "rendered": " runId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runId": {
        "rendered": " runId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/actions/runs/{run_id}/timing": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".runId": {
        "rendered": " runId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "WorkflowRunUsage",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/actions/secrets": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    secrets: (ActionsSecret)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/secrets/public-key": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ActionsPublicKey",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repos/{owner}/{repo}/actions/secrets/{secret_name}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/actions/secrets/{secret_name}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ActionsSecret",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/repos/{owner}/{repo}/actions/secrets/{secret_name}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/actions/variables": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 30). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 30). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    total_count: number,\n    variables: (ActionsVariable)[],\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/actions/variables": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repos/{owner}/{repo}/actions/variables/{name}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".name": {
        "rendered": " name: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/actions/variables/{name}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".name": {
        "rendered": " name: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ActionsVariable",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/repos/{owner}/{repo}/actions/variables/{name}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".name": {
        "rendered": " name: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/actions/workflows": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    total_count: number,\n    workflows: (Workflow)[],\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/workflows/{workflow_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".workflowId": {
        "rendered": "\n/** The ID of the workflow. You can also pass the workflow file name as a string. */\n workflowId: number | string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Workflow",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".workflowId": {
        "rendered": " workflowId: number | string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".workflowId": {
        "rendered": " workflowId: number | string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".workflowId": {
        "rendered": " workflowId: number | string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run. */\n actor?: string, \n/** Returns workflow runs associated with a branch. Use the name of the branch of the `push`. */\n branch?: string, \n/** Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \"[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\" */\n event?: string, \n/** Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. */\n status?: \"completed\" | \"action_required\" | \"cancelled\" | \"failure\" | \"neutral\" | \"skipped\" | \"stale\" | \"success\" | \"timed_out\" | \"in_progress\" | \"queued\" | \"requested\" | \"waiting\" | \"pending\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, \n/** Returns workflow runs created within the given date-time range. For more information on the syntax, see \"[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\" */\n created?: string, \n/** If `true` pull requests are omitted from the response (empty array). */\n exclude_pull_requests?: boolean, \n/** Returns workflow runs with the `check_suite_id` that you specify. */\n check_suite_id?: number, \n/** Only returns workflow runs that are associated with the specified `head_sha`. */\n head_sha?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.actor": {
        "rendered": "\n/** Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run. */\n actor?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.branch": {
        "rendered": "\n/** Returns workflow runs associated with a branch. Use the name of the branch of the `push`. */\n branch?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.event": {
        "rendered": "\n/** Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \"[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\" */\n event?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.status": {
        "rendered": "\n/** Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. */\n status?: \"completed\" | \"action_required\" | \"cancelled\" | \"failure\" | \"neutral\" | \"skipped\" | \"stale\" | \"success\" | \"timed_out\" | \"in_progress\" | \"queued\" | \"requested\" | \"waiting\" | \"pending\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": "\n/** Returns workflow runs created within the given date-time range. For more information on the syntax, see \"[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\" */\n created?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.exclude_pull_requests": {
        "rendered": "\n/** If `true` pull requests are omitted from the response (empty array). */\n exclude_pull_requests?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.check_suite_id": {
        "rendered": "\n/** Returns workflow runs with the `check_suite_id` that you specify. */\n check_suite_id?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.head_sha": {
        "rendered": "\n/** Only returns workflow runs that are associated with the specified `head_sha`. */\n head_sha?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".workflowId": {
        "rendered": " workflowId: number | string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    total_count: number,\n    workflow_runs: (WorkflowRun)[],\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".workflowId": {
        "rendered": " workflowId: number | string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "WorkflowUsage",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/assignees": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(SimpleUser)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/assignees/{assignee}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".assignee": {
        "rendered": " assignee: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/autolinks": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Autolink)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/autolinks": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Autolink",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repos/{owner}/{repo}/autolinks/{autolink_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".autolinkId": {
        "rendered": "\n/** The unique identifier of the autolink. */\n autolinkId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/autolinks/{autolink_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".autolinkId": {
        "rendered": " autolinkId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Autolink",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repos/{owner}/{repo}/automated-security-fixes": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/repos/{owner}/{repo}/automated-security-fixes": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/branches": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Setting to `true` returns only protected branches. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches. */\n protected?: boolean, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.protected": {
        "rendered": "\n/** Setting to `true` returns only protected branches. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches. */\n protected?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(ShortBranch)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/branches/{branch}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": "\n/** The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). */\n branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "BranchWithProtection",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repos/{owner}/{repo}/branches/{branch}/protection": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/branches/{branch}/protection": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "BranchProtection",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/repos/{owner}/{repo}/branches/{branch}/protection": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProtectedBranch",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProtectedBranchAdminEnforced",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProtectedBranchAdminEnforced",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProtectedBranchPullRequestReview",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProtectedBranchPullRequestReview",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProtectedBranchAdminEnforced",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ProtectedBranchAdminEnforced",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "StatusCheckPolicy",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "StatusCheckPolicy",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(string)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(string)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(string)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(string)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/branches/{branch}/protection/restrictions": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/branches/{branch}/protection/restrictions": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "BranchRestrictionPolicy",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Integration)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Integration)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Integration)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Integration)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Team)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Team)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Team)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Team)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(SimpleUser)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(SimpleUser)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(SimpleUser)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(SimpleUser)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/branches/{branch}/rename": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branch": {
        "rendered": " branch: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "BranchWithProtection",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/repos/{owner}/{repo}/check-runs": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CheckRun",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/check-runs/{check_run_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".checkRunId": {
        "rendered": "\n/** The unique identifier of the check run. */\n checkRunId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CheckRun",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/repos/{owner}/{repo}/check-runs/{check_run_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".checkRunId": {
        "rendered": " checkRunId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CheckRun",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".checkRunId": {
        "rendered": " checkRunId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(CheckAnnotation)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".checkRunId": {
        "rendered": " checkRunId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/repos/{owner}/{repo}/check-suites": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CheckSuite",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/repos/{owner}/{repo}/check-suites/preferences": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CheckSuitePreference",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/check-suites/{check_suite_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".checkSuiteId": {
        "rendered": "\n/** The unique identifier of the check suite. */\n checkSuiteId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CheckSuite",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Returns check runs with the specified `name`. */\n check_name?: string, \n/** Returns check runs with the specified `status`. */\n status?: \"queued\" | \"in_progress\" | \"completed\", \n/** Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs. */\n filter?: \"latest\" | \"all\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.check_name": {
        "rendered": "\n/** Returns check runs with the specified `name`. */\n check_name?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.status": {
        "rendered": "\n/** Returns check runs with the specified `status`. */\n status?: \"queued\" | \"in_progress\" | \"completed\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.filter": {
        "rendered": "\n/** Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs. */\n filter?: \"latest\" | \"all\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".checkSuiteId": {
        "rendered": " checkSuiteId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    check_runs: (CheckRun)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".checkSuiteId": {
        "rendered": " checkSuiteId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/code-scanning/alerts": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both. */\n tool_name?: CodeScanningAnalysisToolName, \n/** The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both. */\n tool_guid?: CodeScanningAnalysisToolGuid, \n/** Page number of the results to fetch. */\n page?: number, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */\n ref?: CodeScanningRef, \n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\", \n/** The property by which to sort the results. */\n sort?: \"created\" | \"updated\", \n/** If specified, only code scanning alerts with this state will be returned. */\n state?: CodeScanningAlertState, \n/** If specified, only code scanning alerts with this severity will be returned. */\n severity?: CodeScanningAlertSeverity, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.tool_name": {
        "rendered": "\n/** The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both. */\n tool_name?: CodeScanningAnalysisToolName,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.tool_guid": {
        "rendered": "\n/** The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both. */\n tool_guid?: CodeScanningAnalysisToolGuid,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ref": {
        "rendered": "\n/** The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */\n ref?: CodeScanningRef,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The property by which to sort the results. */\n sort?: \"created\" | \"updated\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.state": {
        "rendered": "\n/** If specified, only code scanning alerts with this state will be returned. */\n state?: CodeScanningAlertState,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.severity": {
        "rendered": "\n/** If specified, only code scanning alerts with this severity will be returned. */\n severity?: CodeScanningAlertSeverity,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(CodeScanningAlertItems)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".alertNumber": {
        "rendered": "\n/** The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. */\n alertNumber: AlertNumber,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CodeScanningAlert",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".alertNumber": {
        "rendered": " alertNumber: AlertNumber,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CodeScanningAlert",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Page number of the results to fetch. */\n page?: number, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */\n ref?: CodeScanningRef, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ref": {
        "rendered": "\n/** The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */\n ref?: CodeScanningRef,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".alertNumber": {
        "rendered": " alertNumber: AlertNumber,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(CodeScanningAlertInstance)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/code-scanning/analyses": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both. */\n tool_name?: CodeScanningAnalysisToolName, \n/** The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both. */\n tool_guid?: CodeScanningAnalysisToolGuid, \n/** Page number of the results to fetch. */\n page?: number, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** The Git reference for the analyses you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */\n ref?: CodeScanningRef, \n/** Filter analyses belonging to the same SARIF upload. */\n sarif_id?: CodeScanningAnalysisSarifId, \n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\", \n/** The property by which to sort the results. */\n sort?: \"created\", },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.tool_name": {
        "rendered": "\n/** The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both. */\n tool_name?: CodeScanningAnalysisToolName,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.tool_guid": {
        "rendered": "\n/** The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both. */\n tool_guid?: CodeScanningAnalysisToolGuid,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ref": {
        "rendered": "\n/** The Git reference for the analyses you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */\n ref?: CodeScanningRef,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sarif_id": {
        "rendered": "\n/** Filter analyses belonging to the same SARIF upload. */\n sarif_id?: CodeScanningAnalysisSarifId,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The property by which to sort the results. */\n sort?: \"created\",",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(CodeScanningAnalysis)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Allow deletion if the specified analysis is the last in a set. If you attempt to delete the final analysis in a set without setting this parameter to `true`, you'll get a 400 response with the message: `Analysis is last of its type and deletion may result in the loss of historical alert data. Please specify confirm_delete.` */\n confirm_delete?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.confirm_delete": {
        "rendered": "\n/** Allow deletion if the specified analysis is the last in a set. If you attempt to delete the final analysis in a set without setting this parameter to `true`, you'll get a 400 response with the message: `Analysis is last of its type and deletion may result in the loss of historical alert data. Please specify confirm_delete.` */\n confirm_delete?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".analysisId": {
        "rendered": "\n/** The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation. */\n analysisId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CodeScanningAnalysisDeletion",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".analysisId": {
        "rendered": "\n/** The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation. */\n analysisId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CodeScanningAnalysis",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/code-scanning/codeql/databases": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(CodeScanningCodeqlDatabase)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/code-scanning/codeql/databases/{language}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".language": {
        "rendered": "\n/** The language of the CodeQL database. */\n language: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CodeScanningCodeqlDatabase",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/repos/{owner}/{repo}/code-scanning/sarifs": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CodeScanningSarifsReceipt",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".sarifId": {
        "rendered": "\n/** The SARIF ID obtained after uploading. */\n sarifId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CodeScanningSarifsStatus",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/codeowners/errors": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A branch, tag or commit name used to determine which version of the CODEOWNERS file to use. Default: the repository's default branch (e.g. `main`) */\n ref?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ref": {
        "rendered": "\n/** A branch, tag or commit name used to determine which version of the CODEOWNERS file to use. Default: the repository's default branch (e.g. `main`) */\n ref?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CodeownersErrors",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/codespaces": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    codespaces: (Codespace)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/codespaces": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Codespace",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/codespaces/devcontainers": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    devcontainers: ({\n    name?: string,\n    path: string,\n\n})[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/codespaces/machines": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The location to check for available machines. Assigned by IP if not provided. */\n location?: string, \n/** IP for location auto-detection when proxying a request */\n client_ip?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.location": {
        "rendered": "\n/** The location to check for available machines. Assigned by IP if not provided. */\n location?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.client_ip": {
        "rendered": "\n/** IP for location auto-detection when proxying a request */\n client_ip?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    machines: (CodespaceMachine)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/codespaces/new": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The branch or commit to check for a default devcontainer path. If not specified, the default branch will be checked. */\n ref?: string, \n/** An alternative IP for default location auto-detection, such as when proxying a request. */\n client_ip?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ref": {
        "rendered": "\n/** The branch or commit to check for a default devcontainer path. If not specified, the default branch will be checked. */\n ref?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.client_ip": {
        "rendered": "\n/** An alternative IP for default location auto-detection, such as when proxying a request. */\n client_ip?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** A GitHub user. */\n    billable_owner?: SimpleUser,\n    defaults?: {\n    devcontainer_path: string | null,\n    location: string,\n\n},\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/codespaces/secrets": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    secrets: (RepoCodespacesSecret)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/codespaces/secrets/public-key": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CodespacesPublicKey",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repos/{owner}/{repo}/codespaces/secrets/{secret_name}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/codespaces/secrets/{secret_name}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "RepoCodespacesSecret",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/repos/{owner}/{repo}/codespaces/secrets/{secret_name}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/collaborators": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Filter collaborators returned by their affiliation. `outside` means all outside collaborators of an organization-owned repository. `direct` means all collaborators with permissions to an organization-owned repository, regardless of organization membership status. `all` means all collaborators the authenticated user can see. */\n affiliation?: \"outside\" | \"direct\" | \"all\", \n/** Filter collaborators by the permissions they have on the repository. If not specified, all collaborators will be returned. */\n permission?: \"pull\" | \"triage\" | \"push\" | \"maintain\" | \"admin\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.affiliation": {
        "rendered": "\n/** Filter collaborators returned by their affiliation. `outside` means all outside collaborators of an organization-owned repository. `direct` means all collaborators with permissions to an organization-owned repository, regardless of organization membership status. `all` means all collaborators the authenticated user can see. */\n affiliation?: \"outside\" | \"direct\" | \"all\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.permission": {
        "rendered": "\n/** Filter collaborators by the permissions they have on the repository. If not specified, all collaborators will be returned. */\n permission?: \"pull\" | \"triage\" | \"push\" | \"maintain\" | \"admin\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Collaborator)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/collaborators/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/collaborators/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/repos/{owner}/{repo}/collaborators/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "RepositoryInvitation",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/collaborators/{username}/permission": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "RepositoryCollaboratorPermission",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/comments": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(CommitComment)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/comments/{comment_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": " commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/comments/{comment_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": " commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CommitComment",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/repos/{owner}/{repo}/comments/{comment_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": " commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CommitComment",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/comments/{comment_id}/reactions": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a commit comment. */\n content?: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.content": {
        "rendered": "\n/** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a commit comment. */\n content?: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": " commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Reaction)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/comments/{comment_id}/reactions": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": " commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Reaction",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": " commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".reactionId": {
        "rendered": " reactionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/commits": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** SHA or branch to start listing commits from. Default: the repository’s default branch (usually `main`). */\n sha?: string, \n/** Only commits containing this file path will be returned. */\n path?: string, \n/** GitHub login or email address by which to filter by commit author. */\n author?: string, \n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string, \n/** Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n until?: string, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sha": {
        "rendered": "\n/** SHA or branch to start listing commits from. Default: the repository’s default branch (usually `main`). */\n sha?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.path": {
        "rendered": "\n/** Only commits containing this file path will be returned. */\n path?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.author": {
        "rendered": "\n/** GitHub login or email address by which to filter by commit author. */\n author?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.since": {
        "rendered": "\n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.until": {
        "rendered": "\n/** Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n until?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Commit)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commitSha": {
        "rendered": "\n/** The SHA of the commit. */\n commitSha: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(BranchShort)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/commits/{commit_sha}/comments": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commitSha": {
        "rendered": " commitSha: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(CommitComment)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/commits/{commit_sha}/comments": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commitSha": {
        "rendered": " commitSha: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CommitComment",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/commits/{commit_sha}/pulls": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commitSha": {
        "rendered": " commitSha: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(PullRequestSimple)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/commits/{ref}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Page number of the results to fetch. */\n page?: number, \n/** The number of results per page (max 100). */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".ref": {
        "rendered": "\n/** ref parameter */\n ref: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Commit",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/commits/{ref}/check-runs": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Returns check runs with the specified `name`. */\n check_name?: string, \n/** Returns check runs with the specified `status`. */\n status?: \"queued\" | \"in_progress\" | \"completed\", \n/** Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs. */\n filter?: \"latest\" | \"all\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number,  app_id?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.check_name": {
        "rendered": "\n/** Returns check runs with the specified `name`. */\n check_name?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.status": {
        "rendered": "\n/** Returns check runs with the specified `status`. */\n status?: \"queued\" | \"in_progress\" | \"completed\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.filter": {
        "rendered": "\n/** Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs. */\n filter?: \"latest\" | \"all\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.app_id": {
        "rendered": " app_id?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".ref": {
        "rendered": "\n/** ref parameter */\n ref: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    check_runs: (CheckRun)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/commits/{ref}/check-suites": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Filters check suites by GitHub App `id`. */\n app_id?: number, \n/** Returns check runs with the specified `name`. */\n check_name?: string, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.app_id": {
        "rendered": "\n/** Filters check suites by GitHub App `id`. */\n app_id?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.check_name": {
        "rendered": "\n/** Returns check runs with the specified `name`. */\n check_name?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".ref": {
        "rendered": "\n/** ref parameter */\n ref: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    check_suites: (CheckSuite)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/commits/{ref}/status": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".ref": {
        "rendered": "\n/** ref parameter */\n ref: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CombinedCommitStatus",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/commits/{ref}/statuses": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".ref": {
        "rendered": "\n/** ref parameter */\n ref: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Status)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/community/profile": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CommunityProfile",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/compare/{basehead}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Page number of the results to fetch. */\n page?: number, \n/** The number of results per page (max 100). */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".basehead": {
        "rendered": "\n/** The base branch and head branch to compare. This parameter expects the format `BASE...HEAD`. Both must be branch names in `repo`. To compare with a branch that exists in a different repository in the same network as `repo`, the `basehead` parameter expects the format `USERNAME:BASE...USERNAME:HEAD`. */\n basehead: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CommitComparison",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repos/{owner}/{repo}/contents/{path}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".path": {
        "rendered": "\n/** path parameter */\n path: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "FileCommit",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/contents/{path}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`) */\n ref?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ref": {
        "rendered": "\n/** The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`) */\n ref?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".path": {
        "rendered": "\n/** path parameter */\n path: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(ContentDirectory | ContentFile | ContentSymlink | ContentSubmodule)",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/repos/{owner}/{repo}/contents/{path}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".path": {
        "rendered": "\n/** path parameter */\n path: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "FileCommit",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/contributors": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Set to `1` or `true` to include anonymous contributors in results. */\n anon?: string, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.anon": {
        "rendered": "\n/** Set to `1` or `true` to include anonymous contributors in results. */\n anon?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Contributor)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/dependabot/alerts": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A comma-separated list of states. If specified, only alerts with these states will be returned.\n\nCan be: `dismissed`, `fixed`, `open` */\n state?: string, \n/** A comma-separated list of severities. If specified, only alerts with these severities will be returned.\n\nCan be: `low`, `medium`, `high`, `critical` */\n severity?: string, \n/** A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.\n\nCan be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust` */\n ecosystem?: string, \n/** A comma-separated list of package names. If specified, only alerts for these packages will be returned. */\n package?: string, \n/** A comma-separated list of full manifest paths. If specified, only alerts for these manifests will be returned. */\n manifest?: string, \n/** The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned. */\n scope?: \"development\" | \"runtime\", \n/** The property by which to sort the results.\n`created` means when the alert was created.\n`updated` means when the alert's state last changed. */\n sort?: \"created\" | \"updated\", \n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\", \n/** **Deprecated**. Page number of the results to fetch. Use cursor-based pagination with `before` or `after` instead. */\n page?: number, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor. */\n before?: string, \n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor. */\n after?: string, \n/** **Deprecated**. The number of results per page (max 100), starting from the first matching result.\nThis parameter must not be used in combination with `last`.\nInstead, use `per_page` in combination with `after` to fetch the first page of results. */\n first?: number, \n/** **Deprecated**. The number of results per page (max 100), starting from the last matching result.\nThis parameter must not be used in combination with `first`.\nInstead, use `per_page` in combination with `before` to fetch the last page of results. */\n last?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.state": {
        "rendered": "\n/** A comma-separated list of states. If specified, only alerts with these states will be returned.\n\nCan be: `dismissed`, `fixed`, `open` */\n state?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.severity": {
        "rendered": "\n/** A comma-separated list of severities. If specified, only alerts with these severities will be returned.\n\nCan be: `low`, `medium`, `high`, `critical` */\n severity?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ecosystem": {
        "rendered": "\n/** A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.\n\nCan be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust` */\n ecosystem?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.package": {
        "rendered": "\n/** A comma-separated list of package names. If specified, only alerts for these packages will be returned. */\n package?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.manifest": {
        "rendered": "\n/** A comma-separated list of full manifest paths. If specified, only alerts for these manifests will be returned. */\n manifest?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.scope": {
        "rendered": "\n/** The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned. */\n scope?: \"development\" | \"runtime\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The property by which to sort the results.\n`created` means when the alert was created.\n`updated` means when the alert's state last changed. */\n sort?: \"created\" | \"updated\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** **Deprecated**. Page number of the results to fetch. Use cursor-based pagination with `before` or `after` instead. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.before": {
        "rendered": "\n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor. */\n before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.after": {
        "rendered": "\n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor. */\n after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.first": {
        "rendered": "\n/** **Deprecated**. The number of results per page (max 100), starting from the first matching result.\nThis parameter must not be used in combination with `last`.\nInstead, use `per_page` in combination with `after` to fetch the first page of results. */\n first?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.last": {
        "rendered": "\n/** **Deprecated**. The number of results per page (max 100), starting from the last matching result.\nThis parameter must not be used in combination with `first`.\nInstead, use `per_page` in combination with `before` to fetch the last page of results. */\n last?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(DependabotAlert)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/dependabot/alerts/{alert_number}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".alertNumber": {
        "rendered": "\n/** The number that identifies a Dependabot alert in its repository.\nYou can find this at the end of the URL for a Dependabot alert within GitHub,\nor in `number` fields in the response from the\n`GET /repos/{owner}/{repo}/dependabot/alerts` operation. */\n alertNumber: AlertNumber,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "DependabotAlert",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/repos/{owner}/{repo}/dependabot/alerts/{alert_number}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".alertNumber": {
        "rendered": " alertNumber: AlertNumber,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "DependabotAlert",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/dependabot/secrets": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    secrets: (DependabotSecret)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/dependabot/secrets/public-key": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "DependabotPublicKey",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repos/{owner}/{repo}/dependabot/secrets/{secret_name}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/dependabot/secrets/{secret_name}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "DependabotSecret",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/repos/{owner}/{repo}/dependabot/secrets/{secret_name}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/dependency-graph/compare/{basehead}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The full path, relative to the repository root, of the dependency manifest file. */\n name?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.name": {
        "rendered": "\n/** The full path, relative to the repository root, of the dependency manifest file. */\n name?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".basehead": {
        "rendered": "\n/** The base and head Git revisions to compare. The Git revisions will be resolved to commit SHAs. Named revisions will be resolved to their corresponding HEAD commits, and an appropriate merge base will be determined. This parameter expects the format `{base}...{head}`. */\n basehead: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "DependencyGraphDiff",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/repos/{owner}/{repo}/dependency-graph/snapshots": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** The time at which the snapshot was created. */\n    created_at: string,\n  /** ID of the created snapshot. */\n    id: number,\n  /** A message providing further details about the result, such as why the dependencies were not updated. */\n    message: string,\n  /** Either \"SUCCESS\", \"ACCEPTED\", or \"INVALID\". \"SUCCESS\" indicates that the snapshot was successfully created and the repository's dependencies were updated. \"ACCEPTED\" indicates that the snapshot was successfully created, but the repository's dependencies were not updated. \"INVALID\" indicates that the snapshot was malformed. */\n    result: string,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/deployments": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The SHA recorded at creation time. */\n sha?: string, \n/** The name of the ref. This can be a branch, tag, or SHA. */\n ref?: string, \n/** The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`). */\n task?: string, \n/** The name of the environment that was deployed to (e.g., `staging` or `production`). */\n environment?: string, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sha": {
        "rendered": "\n/** The SHA recorded at creation time. */\n sha?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ref": {
        "rendered": "\n/** The name of the ref. This can be a branch, tag, or SHA. */\n ref?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.task": {
        "rendered": "\n/** The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`). */\n task?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.environment": {
        "rendered": "\n/** The name of the environment that was deployed to (e.g., `staging` or `production`). */\n environment?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Deployment)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/deployments": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Deployment",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repos/{owner}/{repo}/deployments/{deployment_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".deploymentId": {
        "rendered": "\n/** deployment_id parameter */\n deploymentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/deployments/{deployment_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".deploymentId": {
        "rendered": " deploymentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Deployment",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/deployments/{deployment_id}/statuses": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".deploymentId": {
        "rendered": " deploymentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(DeploymentStatus)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/deployments/{deployment_id}/statuses": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".deploymentId": {
        "rendered": " deploymentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "DeploymentStatus",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".deploymentId": {
        "rendered": " deploymentId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".statusId": {
        "rendered": " statusId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "DeploymentStatus",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/repos/{owner}/{repo}/dispatches": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/environments": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    environments?: (Environment)[],\n  /**\n   * The number of environments in this repository\n   * @example 5\n   */\n    total_count?: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/environments/{environment_name}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".environmentName": {
        "rendered": "\n/** The name of the environment. */\n environmentName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/environments/{environment_name}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".environmentName": {
        "rendered": " environmentName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Environment",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/repos/{owner}/{repo}/environments/{environment_name}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".environmentName": {
        "rendered": " environmentName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Environment",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".environmentName": {
        "rendered": " environmentName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    branch_policies: (DeploymentBranchPolicy)[],\n  /**\n   * The number of deployment branch policies for the environment.\n   * @example 2\n   */\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".environmentName": {
        "rendered": " environmentName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "DeploymentBranchPolicy",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".environmentName": {
        "rendered": " environmentName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branchPolicyId": {
        "rendered": "\n/** The unique identifier of the branch policy. */\n branchPolicyId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".environmentName": {
        "rendered": " environmentName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branchPolicyId": {
        "rendered": " branchPolicyId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "DeploymentBranchPolicy",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".environmentName": {
        "rendered": " environmentName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".branchPolicyId": {
        "rendered": " branchPolicyId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "DeploymentBranchPolicy",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/events": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Event)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/forks": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The sort order. `stargazers` will sort by star count. */\n sort?: \"newest\" | \"oldest\" | \"stargazers\" | \"watchers\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The sort order. `stargazers` will sort by star count. */\n sort?: \"newest\" | \"oldest\" | \"stargazers\" | \"watchers\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(MinimalRepository)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/forks": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "FullRepository",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/repos/{owner}/{repo}/git/blobs": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ShortBlob",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/git/blobs/{file_sha}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".fileSha": {
        "rendered": " fileSha: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Blob",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/repos/{owner}/{repo}/git/commits": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GitCommit",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/git/commits/{commit_sha}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commitSha": {
        "rendered": " commitSha: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GitCommit",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/git/matching-refs/{ref}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".ref": {
        "rendered": "\n/** ref parameter */\n ref: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(GitRef)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/git/ref/{ref}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".ref": {
        "rendered": "\n/** ref parameter */\n ref: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GitRef",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/repos/{owner}/{repo}/git/refs": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GitRef",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repos/{owner}/{repo}/git/refs/{ref}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".ref": {
        "rendered": "\n/** ref parameter */\n ref: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/repos/{owner}/{repo}/git/refs/{ref}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".ref": {
        "rendered": "\n/** The name of the fully qualified reference to update. For example, `refs/heads/master`. If the value doesn't start with `refs` and have at least two slashes, it will be rejected. */\n ref: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GitRef",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/repos/{owner}/{repo}/git/tags": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GitTag",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/git/tags/{tag_sha}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".tagSha": {
        "rendered": " tagSha: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GitTag",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/repos/{owner}/{repo}/git/trees": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GitTree",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/git/trees/{tree_sha}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Setting this parameter to any value returns the objects or subtrees referenced by the tree specified in `:tree_sha`. For example, setting `recursive` to any of the following will enable returning objects or subtrees: `0`, `1`, `\"true\"`, and `\"false\"`. Omit this parameter to prevent recursively returning objects or subtrees. */\n recursive?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.recursive": {
        "rendered": "\n/** Setting this parameter to any value returns the objects or subtrees referenced by the tree specified in `:tree_sha`. For example, setting `recursive` to any of the following will enable returning objects or subtrees: `0`, `1`, `\"true\"`, and `\"false\"`. Omit this parameter to prevent recursively returning objects or subtrees. */\n recursive?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".treeSha": {
        "rendered": " treeSha: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GitTree",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/hooks": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Hook)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/hooks": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Hook",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repos/{owner}/{repo}/hooks/{hook_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".hookId": {
        "rendered": " hookId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/hooks/{hook_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".hookId": {
        "rendered": " hookId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Hook",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/repos/{owner}/{repo}/hooks/{hook_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".hookId": {
        "rendered": " hookId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Hook",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/hooks/{hook_id}/config": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".hookId": {
        "rendered": " hookId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "WebhookConfig",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/repos/{owner}/{repo}/hooks/{hook_id}/config": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".hookId": {
        "rendered": " hookId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "WebhookConfig",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/hooks/{hook_id}/deliveries": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors. */\n cursor?: string,  redelivery?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cursor": {
        "rendered": "\n/** Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors. */\n cursor?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.redelivery": {
        "rendered": " redelivery?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".hookId": {
        "rendered": " hookId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(HookDeliveryItem)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".hookId": {
        "rendered": " hookId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".deliveryId": {
        "rendered": " deliveryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "HookDelivery",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".hookId": {
        "rendered": " hookId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".deliveryId": {
        "rendered": " deliveryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/repos/{owner}/{repo}/hooks/{hook_id}/pings": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".hookId": {
        "rendered": " hookId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/repos/{owner}/{repo}/hooks/{hook_id}/tests": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".hookId": {
        "rendered": " hookId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repos/{owner}/{repo}/import": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/import": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Import",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/repos/{owner}/{repo}/import": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Import",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/repos/{owner}/{repo}/import": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Import",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/import/authors": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A user ID. Only return users with an ID greater than this ID. */\n since?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.since": {
        "rendered": "\n/** A user ID. Only return users with an ID greater than this ID. */\n since?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(PorterAuthor)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/repos/{owner}/{repo}/import/authors/{author_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".authorId": {
        "rendered": " authorId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PorterAuthor",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/import/large_files": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(PorterLargeFile)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "patch__/repos/{owner}/{repo}/import/lfs": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Import",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/installation": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Installation",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repos/{owner}/{repo}/interaction-limits": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/interaction-limits": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(InteractionLimitResponse | hasuraSdk.JSONValue)",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/repos/{owner}/{repo}/interaction-limits": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "InteractionLimitResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/invitations": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(RepositoryInvitation)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/invitations/{invitation_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".invitationId": {
        "rendered": " invitationId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/repos/{owner}/{repo}/invitations/{invitation_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".invitationId": {
        "rendered": " invitationId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "RepositoryInvitation",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/issues": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned. */\n milestone?: string, \n/** Indicates the state of the issues to return. */\n state?: \"open\" | \"closed\" | \"all\", \n/** Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user. */\n assignee?: string, \n/** The user that created the issue. */\n creator?: string, \n/** A user that's mentioned in the issue. */\n mentioned?: string, \n/** A list of comma separated label names. Example: `bug,ui,@high` */\n labels?: string, \n/** What to sort results by. */\n sort?: \"created\" | \"updated\" | \"comments\", \n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\", \n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.milestone": {
        "rendered": "\n/** If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned. */\n milestone?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.state": {
        "rendered": "\n/** Indicates the state of the issues to return. */\n state?: \"open\" | \"closed\" | \"all\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.assignee": {
        "rendered": "\n/** Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user. */\n assignee?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.creator": {
        "rendered": "\n/** The user that created the issue. */\n creator?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.mentioned": {
        "rendered": "\n/** A user that's mentioned in the issue. */\n mentioned?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.labels": {
        "rendered": "\n/** A list of comma separated label names. Example: `bug,ui,@high` */\n labels?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** What to sort results by. */\n sort?: \"created\" | \"updated\" | \"comments\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.since": {
        "rendered": "\n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Issue)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/issues": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Issue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/issues/comments": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to. */\n sort?: \"created\" | \"updated\", \n/** Either `asc` or `desc`. Ignored without the `sort` parameter. */\n direction?: \"asc\" | \"desc\", \n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to. */\n sort?: \"created\" | \"updated\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.direction": {
        "rendered": "\n/** Either `asc` or `desc`. Ignored without the `sort` parameter. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.since": {
        "rendered": "\n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(IssueComment)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/issues/comments/{comment_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": " commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/issues/comments/{comment_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": " commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "IssueComment",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/repos/{owner}/{repo}/issues/comments/{comment_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": " commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "IssueComment",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue comment. */\n content?: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.content": {
        "rendered": "\n/** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue comment. */\n content?: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": " commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Reaction)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": " commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Reaction",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": " commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".reactionId": {
        "rendered": " reactionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/issues/events": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(IssueEvent)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/issues/events/{event_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".eventId": {
        "rendered": " eventId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "IssueEvent",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/issues/{issue_number}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueNumber": {
        "rendered": "\n/** The number that identifies the issue. */\n issueNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Issue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/repos/{owner}/{repo}/issues/{issue_number}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueNumber": {
        "rendered": " issueNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Issue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repos/{owner}/{repo}/issues/{issue_number}/assignees": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueNumber": {
        "rendered": " issueNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Issue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/repos/{owner}/{repo}/issues/{issue_number}/assignees": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueNumber": {
        "rendered": " issueNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Issue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueNumber": {
        "rendered": " issueNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".assignee": {
        "rendered": " assignee: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/issues/{issue_number}/comments": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.since": {
        "rendered": "\n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueNumber": {
        "rendered": " issueNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(IssueComment)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/issues/{issue_number}/comments": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueNumber": {
        "rendered": " issueNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "IssueComment",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/issues/{issue_number}/events": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueNumber": {
        "rendered": " issueNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(IssueEventForIssue)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/issues/{issue_number}/labels": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueNumber": {
        "rendered": " issueNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/issues/{issue_number}/labels": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueNumber": {
        "rendered": " issueNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Label)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/issues/{issue_number}/labels": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueNumber": {
        "rendered": " issueNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Label)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/repos/{owner}/{repo}/issues/{issue_number}/labels": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueNumber": {
        "rendered": " issueNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Label)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueNumber": {
        "rendered": " issueNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".name": {
        "rendered": " name: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Label)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/issues/{issue_number}/lock": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueNumber": {
        "rendered": " issueNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/repos/{owner}/{repo}/issues/{issue_number}/lock": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueNumber": {
        "rendered": " issueNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/issues/{issue_number}/reactions": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue. */\n content?: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.content": {
        "rendered": "\n/** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue. */\n content?: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueNumber": {
        "rendered": " issueNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Reaction)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/issues/{issue_number}/reactions": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueNumber": {
        "rendered": " issueNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Reaction",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueNumber": {
        "rendered": " issueNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".reactionId": {
        "rendered": " reactionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/issues/{issue_number}/timeline": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".issueNumber": {
        "rendered": " issueNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(TimelineIssueEvents)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/keys": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(DeployKey)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/keys": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "DeployKey",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repos/{owner}/{repo}/keys/{key_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".keyId": {
        "rendered": "\n/** The unique identifier of the key. */\n keyId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/keys/{key_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".keyId": {
        "rendered": " keyId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "DeployKey",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/labels": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Label)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/labels": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Label",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repos/{owner}/{repo}/labels/{name}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".name": {
        "rendered": " name: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/labels/{name}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".name": {
        "rendered": " name: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Label",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/repos/{owner}/{repo}/labels/{name}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".name": {
        "rendered": " name: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Label",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/languages": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Language",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repos/{owner}/{repo}/lfs": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/repos/{owner}/{repo}/lfs": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/license": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "LicenseContent",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/repos/{owner}/{repo}/merge-upstream": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "MergedUpstream",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/repos/{owner}/{repo}/merges": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Commit",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/milestones": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The state of the milestone. Either `open`, `closed`, or `all`. */\n state?: \"open\" | \"closed\" | \"all\", \n/** What to sort results by. Either `due_on` or `completeness`. */\n sort?: \"due_on\" | \"completeness\", \n/** The direction of the sort. Either `asc` or `desc`. */\n direction?: \"asc\" | \"desc\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.state": {
        "rendered": "\n/** The state of the milestone. Either `open`, `closed`, or `all`. */\n state?: \"open\" | \"closed\" | \"all\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** What to sort results by. Either `due_on` or `completeness`. */\n sort?: \"due_on\" | \"completeness\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.direction": {
        "rendered": "\n/** The direction of the sort. Either `asc` or `desc`. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Milestone)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/milestones": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Milestone",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repos/{owner}/{repo}/milestones/{milestone_number}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".milestoneNumber": {
        "rendered": "\n/** The number that identifies the milestone. */\n milestoneNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/milestones/{milestone_number}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".milestoneNumber": {
        "rendered": " milestoneNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Milestone",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/repos/{owner}/{repo}/milestones/{milestone_number}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".milestoneNumber": {
        "rendered": " milestoneNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Milestone",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/milestones/{milestone_number}/labels": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".milestoneNumber": {
        "rendered": " milestoneNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Label)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/notifications": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** If `true`, show notifications marked as read. */\n all?: boolean, \n/** If `true`, only shows notifications in which the user is directly participating or mentioned. */\n participating?: boolean, \n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string, \n/** Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n before?: string, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.all": {
        "rendered": "\n/** If `true`, show notifications marked as read. */\n all?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.participating": {
        "rendered": "\n/** If `true`, only shows notifications in which the user is directly participating or mentioned. */\n participating?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.since": {
        "rendered": "\n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.before": {
        "rendered": "\n/** Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Thread)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/repos/{owner}/{repo}/notifications": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    message?: string,\n    url?: string,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/pages": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/pages": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Page",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/repos/{owner}/{repo}/pages": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Page",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/repos/{owner}/{repo}/pages": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/pages/builds": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(PageBuild)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/pages/builds": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PageBuildStatus",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/pages/builds/latest": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PageBuild",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/pages/builds/{build_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".buildId": {
        "rendered": " buildId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PageBuild",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/repos/{owner}/{repo}/pages/deployment": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PageDeployment",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/pages/health": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PagesHealthCheck",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/projects": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Indicates the state of the projects to return. */\n state?: \"open\" | \"closed\" | \"all\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.state": {
        "rendered": "\n/** Indicates the state of the projects to return. */\n state?: \"open\" | \"closed\" | \"all\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Project)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/projects": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Project",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/pulls": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Either `open`, `closed`, or `all` to filter by state. */\n state?: \"open\" | \"closed\" | \"all\", \n/** Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`. */\n head?: string, \n/** Filter pulls by base branch name. Example: `gh-pages`. */\n base?: string, \n/** What to sort results by. `popularity` will sort by the number of comments. `long-running` will sort by date created and will limit the results to pull requests that have been open for more than a month and have had activity within the past month. */\n sort?: \"created\" | \"updated\" | \"popularity\" | \"long-running\", \n/** The direction of the sort. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`. */\n direction?: \"asc\" | \"desc\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.state": {
        "rendered": "\n/** Either `open`, `closed`, or `all` to filter by state. */\n state?: \"open\" | \"closed\" | \"all\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.head": {
        "rendered": "\n/** Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`. */\n head?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.base": {
        "rendered": "\n/** Filter pulls by base branch name. Example: `gh-pages`. */\n base?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** What to sort results by. `popularity` will sort by the number of comments. `long-running` will sort by date created and will limit the results to pull requests that have been open for more than a month and have had activity within the past month. */\n sort?: \"created\" | \"updated\" | \"popularity\" | \"long-running\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.direction": {
        "rendered": "\n/** The direction of the sort. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(PullRequestSimple)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/pulls": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PullRequest",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/pulls/comments": {
    "query": {
      ".query": {
        "rendered": " query: {  sort?: \"created\" | \"updated\" | \"created_at\", \n/** The direction to sort results. Ignored without `sort` parameter. */\n direction?: \"asc\" | \"desc\", \n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": " sort?: \"created\" | \"updated\" | \"created_at\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort results. Ignored without `sort` parameter. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.since": {
        "rendered": "\n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(PullRequestReviewComment)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/pulls/comments/{comment_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": " commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/pulls/comments/{comment_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": " commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PullRequestReviewComment",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/repos/{owner}/{repo}/pulls/comments/{comment_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": " commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PullRequestReviewComment",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a pull request review comment. */\n content?: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.content": {
        "rendered": "\n/** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a pull request review comment. */\n content?: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": " commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Reaction)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": " commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Reaction",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": " commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".reactionId": {
        "rendered": " reactionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/pulls/{pull_number}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": "\n/** The number that identifies the pull request. */\n pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PullRequest",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/repos/{owner}/{repo}/pulls/{pull_number}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": " pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PullRequest",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/repos/{owner}/{repo}/pulls/{pull_number}/codespaces": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": " pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Codespace",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/pulls/{pull_number}/comments": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to. */\n sort?: \"created\" | \"updated\", \n/** The direction to sort results. Ignored without `sort` parameter. */\n direction?: \"asc\" | \"desc\", \n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to. */\n sort?: \"created\" | \"updated\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort results. Ignored without `sort` parameter. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.since": {
        "rendered": "\n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": " pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(PullRequestReviewComment)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/pulls/{pull_number}/comments": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": " pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PullRequestReviewComment",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": " pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentId": {
        "rendered": " commentId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PullRequestReviewComment",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/pulls/{pull_number}/commits": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": " pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Commit)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/pulls/{pull_number}/files": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": " pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(DiffEntry)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/pulls/{pull_number}/merge": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": " pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/repos/{owner}/{repo}/pulls/{pull_number}/merge": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": " pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PullRequestMergeResult",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": " pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PullRequestSimple",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": " pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PullRequestReviewRequest",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": " pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PullRequestSimple",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/pulls/{pull_number}/reviews": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": " pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(PullRequestReview)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/pulls/{pull_number}/reviews": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": " pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PullRequestReview",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": " pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".reviewId": {
        "rendered": "\n/** The unique identifier of the review. */\n reviewId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PullRequestReview",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": " pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".reviewId": {
        "rendered": " reviewId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PullRequestReview",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": " pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".reviewId": {
        "rendered": " reviewId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PullRequestReview",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": " pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".reviewId": {
        "rendered": " reviewId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(ReviewComment)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": " pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".reviewId": {
        "rendered": " reviewId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PullRequestReview",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": " pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".reviewId": {
        "rendered": " reviewId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PullRequestReview",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/repos/{owner}/{repo}/pulls/{pull_number}/update-branch": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".pullNumber": {
        "rendered": " pullNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    message?: string,\n    url?: string,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/readme": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`) */\n ref?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ref": {
        "rendered": "\n/** The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`) */\n ref?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ContentFile",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/readme/{dir}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`) */\n ref?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ref": {
        "rendered": "\n/** The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`) */\n ref?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".dir": {
        "rendered": "\n/** The alternate path to look for a README file */\n dir: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ContentFile",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/releases": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Release)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/releases": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Release",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repos/{owner}/{repo}/releases/assets/{asset_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".assetId": {
        "rendered": "\n/** The unique identifier of the asset. */\n assetId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/releases/assets/{asset_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".assetId": {
        "rendered": " assetId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ReleaseAsset",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/repos/{owner}/{repo}/releases/assets/{asset_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".assetId": {
        "rendered": " assetId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ReleaseAsset",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/repos/{owner}/{repo}/releases/generate-notes": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ReleaseNotesContent",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/releases/latest": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Release",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/releases/tags/{tag}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".tag": {
        "rendered": "\n/** tag parameter */\n tag: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Release",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repos/{owner}/{repo}/releases/{release_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".releaseId": {
        "rendered": "\n/** The unique identifier of the release. */\n releaseId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/releases/{release_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".releaseId": {
        "rendered": " releaseId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Release",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/repos/{owner}/{repo}/releases/{release_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".releaseId": {
        "rendered": " releaseId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Release",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/releases/{release_id}/assets": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".releaseId": {
        "rendered": " releaseId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(ReleaseAsset)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/releases/{release_id}/assets": {
    "query": {
      ".query": {
        "rendered": " query?: {  name: string,  label?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.name": {
        "rendered": " name: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.label": {
        "rendered": " label?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".releaseId": {
        "rendered": " releaseId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ReleaseAsset",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/releases/{release_id}/reactions": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a release. */\n content?: \"+1\" | \"laugh\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.content": {
        "rendered": "\n/** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a release. */\n content?: \"+1\" | \"laugh\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".releaseId": {
        "rendered": " releaseId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Reaction)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/releases/{release_id}/reactions": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".releaseId": {
        "rendered": " releaseId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Reaction",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".releaseId": {
        "rendered": " releaseId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".reactionId": {
        "rendered": " reactionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/secret-scanning/alerts": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Set to `open` or `resolved` to only list secret scanning alerts in a specific state. */\n state?: \"open\" | \"resolved\", \n/** A comma-separated list of secret types to return. By default all secret types are returned.\nSee \"[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)\"\nfor a complete list of secret types. */\n secret_type?: string, \n/** A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`. */\n resolution?: string, \n/** The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved. */\n sort?: \"created\" | \"updated\", \n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\", \n/** Page number of the results to fetch. */\n page?: number, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty \"before\" query string. */\n before?: string, \n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty \"after\" query string. */\n after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.state": {
        "rendered": "\n/** Set to `open` or `resolved` to only list secret scanning alerts in a specific state. */\n state?: \"open\" | \"resolved\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.secret_type": {
        "rendered": "\n/** A comma-separated list of secret types to return. By default all secret types are returned.\nSee \"[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)\"\nfor a complete list of secret types. */\n secret_type?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.resolution": {
        "rendered": "\n/** A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`. */\n resolution?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved. */\n sort?: \"created\" | \"updated\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.before": {
        "rendered": "\n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty \"before\" query string. */\n before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.after": {
        "rendered": "\n/** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty \"after\" query string. */\n after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(SecretScanningAlert)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".alertNumber": {
        "rendered": " alertNumber: AlertNumber,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "SecretScanningAlert",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".alertNumber": {
        "rendered": " alertNumber: AlertNumber,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "SecretScanningAlert",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Page number of the results to fetch. */\n page?: number, \n/** The number of results per page (max 100). */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".alertNumber": {
        "rendered": " alertNumber: AlertNumber,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(SecretScanningLocation)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/stargazers": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "((SimpleUser)[] | (Stargazer)[])",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/stats/code_frequency": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(CodeFrequencyStat)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/stats/commit_activity": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(CommitActivity)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/stats/contributors": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(ContributorActivity)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/stats/participation": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ParticipationStats",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/stats/punch_card": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(CodeFrequencyStat)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/statuses/{sha}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".sha": {
        "rendered": " sha: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Status",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/subscribers": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(SimpleUser)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/repos/{owner}/{repo}/subscription": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/subscription": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "RepositorySubscription",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/repos/{owner}/{repo}/subscription": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "RepositorySubscription",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/tags": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Tag)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/tags/protection": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(TagProtection)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repos/{owner}/{repo}/tags/protection": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TagProtection",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repos/{owner}/{repo}/tags/protection/{tag_protection_id}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".tagProtectionId": {
        "rendered": "\n/** The unique identifier of the tag protection. */\n tagProtectionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/tarball/{ref}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".ref": {
        "rendered": " ref: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/teams": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Team)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/topics": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Page number of the results to fetch. */\n page?: number, \n/** The number of results per page (max 100). */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Topic",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/repos/{owner}/{repo}/topics": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Topic",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/traffic/clones": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The time frame to display results for. */\n per?: \"day\" | \"week\", },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per": {
        "rendered": "\n/** The time frame to display results for. */\n per?: \"day\" | \"week\",",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CloneTraffic",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/traffic/popular/paths": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(ContentTraffic)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/traffic/popular/referrers": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(ReferrerTraffic)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repos/{owner}/{repo}/traffic/views": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The time frame to display results for. */\n per?: \"day\" | \"week\", },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per": {
        "rendered": "\n/** The time frame to display results for. */\n per?: \"day\" | \"week\",",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ViewTraffic",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/repos/{owner}/{repo}/transfer": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "MinimalRepository",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repos/{owner}/{repo}/vulnerability-alerts": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/vulnerability-alerts": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/repos/{owner}/{repo}/vulnerability-alerts": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repos/{owner}/{repo}/zipball/{ref}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".ref": {
        "rendered": " ref: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/repos/{template_owner}/{template_repo}/generate": {
    "query": {},
    "body": {},
    "path": {
      ".templateOwner": {
        "rendered": " templateOwner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".templateRepo": {
        "rendered": " templateRepo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Repository",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repositories": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A repository ID. Only return repositories with an ID greater than this ID. */\n since?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.since": {
        "rendered": "\n/** A repository ID. Only return repositories with an ID greater than this ID. */\n since?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(MinimalRepository)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repositories/{repository_id}/environments/{environment_name}/secrets": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".environmentName": {
        "rendered": " environmentName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    secrets: (ActionsSecret)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/repositories/{repository_id}/environments/{environment_name}/secrets/public-key": {
    "query": {},
    "body": {},
    "path": {
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".environmentName": {
        "rendered": " environmentName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ActionsPublicKey",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}": {
    "query": {},
    "body": {},
    "path": {
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".environmentName": {
        "rendered": " environmentName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}": {
    "query": {},
    "body": {},
    "path": {
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".environmentName": {
        "rendered": " environmentName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ActionsSecret",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}": {
    "query": {},
    "body": {},
    "path": {
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".environmentName": {
        "rendered": " environmentName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repositories/{repository_id}/environments/{environment_name}/variables": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 30). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 30). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".environmentName": {
        "rendered": " environmentName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    total_count: number,\n    variables: (ActionsVariable)[],\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/repositories/{repository_id}/environments/{environment_name}/variables": {
    "query": {},
    "body": {},
    "path": {
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".environmentName": {
        "rendered": " environmentName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/repositories/{repository_id}/environments/{environment_name}/variables/{name}": {
    "query": {},
    "body": {},
    "path": {
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".name": {
        "rendered": " name: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".environmentName": {
        "rendered": " environmentName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/repositories/{repository_id}/environments/{environment_name}/variables/{name}": {
    "query": {},
    "body": {},
    "path": {
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".environmentName": {
        "rendered": " environmentName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".name": {
        "rendered": " name: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ActionsVariable",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/repositories/{repository_id}/environments/{environment_name}/variables/{name}": {
    "query": {},
    "body": {},
    "path": {
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".name": {
        "rendered": " name: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".environmentName": {
        "rendered": " environmentName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/search/code": {
    "query": {
      ".query": {
        "rendered": " query?: { \n/** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See \"[Searching code](https://docs.github.com/search-github/searching-on-github/searching-code)\" for a detailed list of qualifiers. */\n q: string, \n/** Sorts the results of your query. Can only be `indexed`, which indicates how recently a file has been indexed by the GitHub search infrastructure. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */\n sort?: \"indexed\", \n/** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */\n order?: \"desc\" | \"asc\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.q": {
        "rendered": "\n/** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See \"[Searching code](https://docs.github.com/search-github/searching-on-github/searching-code)\" for a detailed list of qualifiers. */\n q: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** Sorts the results of your query. Can only be `indexed`, which indicates how recently a file has been indexed by the GitHub search infrastructure. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */\n sort?: \"indexed\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.order": {
        "rendered": "\n/** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */\n order?: \"desc\" | \"asc\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    incomplete_results: boolean,\n    items: (CodeSearchResultItem)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/search/commits": {
    "query": {
      ".query": {
        "rendered": " query?: { \n/** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See \"[Searching commits](https://docs.github.com/search-github/searching-on-github/searching-commits)\" for a detailed list of qualifiers. */\n q: string, \n/** Sorts the results of your query by `author-date` or `committer-date`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */\n sort?: \"author-date\" | \"committer-date\", \n/** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */\n order?: \"desc\" | \"asc\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.q": {
        "rendered": "\n/** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See \"[Searching commits](https://docs.github.com/search-github/searching-on-github/searching-commits)\" for a detailed list of qualifiers. */\n q: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** Sorts the results of your query by `author-date` or `committer-date`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */\n sort?: \"author-date\" | \"committer-date\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.order": {
        "rendered": "\n/** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */\n order?: \"desc\" | \"asc\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    incomplete_results: boolean,\n    items: (CommitSearchResultItem)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/search/issues": {
    "query": {
      ".query": {
        "rendered": " query?: { \n/** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See \"[Searching issues and pull requests](https://docs.github.com/search-github/searching-on-github/searching-issues-and-pull-requests)\" for a detailed list of qualifiers. */\n q: string, \n/** Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`, Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */\n sort?: \"comments\" | \"reactions\" | \"reactions-+1\" | \"reactions--1\" | \"reactions-smile\" | \"reactions-thinking_face\" | \"reactions-heart\" | \"reactions-tada\" | \"interactions\" | \"created\" | \"updated\", \n/** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */\n order?: \"desc\" | \"asc\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.q": {
        "rendered": "\n/** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See \"[Searching issues and pull requests](https://docs.github.com/search-github/searching-on-github/searching-issues-and-pull-requests)\" for a detailed list of qualifiers. */\n q: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`, Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */\n sort?: \"comments\" | \"reactions\" | \"reactions-+1\" | \"reactions--1\" | \"reactions-smile\" | \"reactions-thinking_face\" | \"reactions-heart\" | \"reactions-tada\" | \"interactions\" | \"created\" | \"updated\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.order": {
        "rendered": "\n/** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */\n order?: \"desc\" | \"asc\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    incomplete_results: boolean,\n    items: (IssueSearchResultItem)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/search/labels": {
    "query": {
      ".query": {
        "rendered": " query?: { \n/** The id of the repository. */\n repository_id: number, \n/** The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). */\n q: string, \n/** Sorts the results of your query by when the label was `created` or `updated`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */\n sort?: \"created\" | \"updated\", \n/** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */\n order?: \"desc\" | \"asc\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.repository_id": {
        "rendered": "\n/** The id of the repository. */\n repository_id: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.q": {
        "rendered": "\n/** The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). */\n q: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** Sorts the results of your query by when the label was `created` or `updated`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */\n sort?: \"created\" | \"updated\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.order": {
        "rendered": "\n/** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */\n order?: \"desc\" | \"asc\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    incomplete_results: boolean,\n    items: (LabelSearchResultItem)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/search/repositories": {
    "query": {
      ".query": {
        "rendered": " query?: { \n/** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See \"[Searching for repositories](https://docs.github.com/articles/searching-for-repositories/)\" for a detailed list of qualifiers. */\n q: string, \n/** Sorts the results of your query by number of `stars`, `forks`, or `help-wanted-issues` or how recently the items were `updated`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */\n sort?: \"stars\" | \"forks\" | \"help-wanted-issues\" | \"updated\", \n/** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */\n order?: \"desc\" | \"asc\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.q": {
        "rendered": "\n/** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See \"[Searching for repositories](https://docs.github.com/articles/searching-for-repositories/)\" for a detailed list of qualifiers. */\n q: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** Sorts the results of your query by number of `stars`, `forks`, or `help-wanted-issues` or how recently the items were `updated`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */\n sort?: \"stars\" | \"forks\" | \"help-wanted-issues\" | \"updated\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.order": {
        "rendered": "\n/** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */\n order?: \"desc\" | \"asc\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    incomplete_results: boolean,\n    items: (RepoSearchResultItem)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/search/topics": {
    "query": {
      ".query": {
        "rendered": " query?: { \n/** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). */\n q: string, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.q": {
        "rendered": "\n/** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). */\n q: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    incomplete_results: boolean,\n    items: (TopicSearchResultItem)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/search/users": {
    "query": {
      ".query": {
        "rendered": " query?: { \n/** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See \"[Searching users](https://docs.github.com/search-github/searching-on-github/searching-users)\" for a detailed list of qualifiers. */\n q: string, \n/** Sorts the results of your query by number of `followers` or `repositories`, or when the person `joined` GitHub. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */\n sort?: \"followers\" | \"repositories\" | \"joined\", \n/** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */\n order?: \"desc\" | \"asc\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.q": {
        "rendered": "\n/** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See \"[Searching users](https://docs.github.com/search-github/searching-on-github/searching-users)\" for a detailed list of qualifiers. */\n q: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** Sorts the results of your query by number of `followers` or `repositories`, or when the person `joined` GitHub. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */\n sort?: \"followers\" | \"repositories\" | \"joined\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.order": {
        "rendered": "\n/** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */\n order?: \"desc\" | \"asc\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    incomplete_results: boolean,\n    items: (UserSearchResultItem)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/teams/{team_id}": {
    "query": {},
    "body": {},
    "path": {
      ".teamId": {
        "rendered": "\n/** The unique identifier of the team. */\n teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/teams/{team_id}": {
    "query": {},
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamFull",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/teams/{team_id}": {
    "query": {},
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamFull",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/teams/{team_id}/discussions": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(TeamDiscussion)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/teams/{team_id}/discussions": {
    "query": {},
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamDiscussion",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/teams/{team_id}/discussions/{discussion_number}": {
    "query": {},
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/teams/{team_id}/discussions/{discussion_number}": {
    "query": {},
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamDiscussion",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/teams/{team_id}/discussions/{discussion_number}": {
    "query": {},
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamDiscussion",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/teams/{team_id}/discussions/{discussion_number}/comments": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(TeamDiscussionComment)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/teams/{team_id}/discussions/{discussion_number}/comments": {
    "query": {},
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamDiscussionComment",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}": {
    "query": {},
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentNumber": {
        "rendered": " commentNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}": {
    "query": {},
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentNumber": {
        "rendered": " commentNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamDiscussionComment",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}": {
    "query": {},
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentNumber": {
        "rendered": " commentNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamDiscussionComment",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment. */\n content?: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.content": {
        "rendered": "\n/** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment. */\n content?: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentNumber": {
        "rendered": " commentNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Reaction)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions": {
    "query": {},
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".commentNumber": {
        "rendered": " commentNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Reaction",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/teams/{team_id}/discussions/{discussion_number}/reactions": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion. */\n content?: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.content": {
        "rendered": "\n/** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion. */\n content?: \"+1\" | \"-1\" | \"laugh\" | \"confused\" | \"heart\" | \"hooray\" | \"rocket\" | \"eyes\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Reaction)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/teams/{team_id}/discussions/{discussion_number}/reactions": {
    "query": {},
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".discussionNumber": {
        "rendered": " discussionNumber: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Reaction",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/teams/{team_id}/invitations": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(OrganizationInvitation)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/teams/{team_id}/members": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Filters members returned by their role in the team. */\n role?: \"member\" | \"maintainer\" | \"all\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.role": {
        "rendered": "\n/** Filters members returned by their role in the team. */\n role?: \"member\" | \"maintainer\" | \"all\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(SimpleUser)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/teams/{team_id}/members/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/teams/{team_id}/members/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/teams/{team_id}/members/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/teams/{team_id}/memberships/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/teams/{team_id}/memberships/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamMembership",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/teams/{team_id}/memberships/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamMembership",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/teams/{team_id}/projects": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(TeamProject)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/teams/{team_id}/projects/{project_id}": {
    "query": {},
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".projectId": {
        "rendered": " projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/teams/{team_id}/projects/{project_id}": {
    "query": {},
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".projectId": {
        "rendered": " projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamProject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/teams/{team_id}/projects/{project_id}": {
    "query": {},
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".projectId": {
        "rendered": " projectId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/teams/{team_id}/repos": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(MinimalRepository)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/teams/{team_id}/repos/{owner}/{repo}": {
    "query": {},
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/teams/{team_id}/repos/{owner}/{repo}": {
    "query": {},
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "TeamRepository",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/teams/{team_id}/repos/{owner}/{repo}": {
    "query": {},
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/teams/{team_id}/teams": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".teamId": {
        "rendered": " teamId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Team)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(PrivateUser | PublicUser)",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/user": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "PrivateUser",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/user/blocks": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(SimpleUser)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/user/blocks/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/user/blocks/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/user/blocks/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/user/codespaces": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, \n/** ID of the Repository to filter on */\n repository_id?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.repository_id": {
        "rendered": "\n/** ID of the Repository to filter on */\n repository_id?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    codespaces: (Codespace)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/user/codespaces": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "Codespace",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/user/codespaces/secrets": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    secrets: (CodespacesSecret)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/codespaces/secrets/public-key": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "CodespacesUserPublicKey",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/user/codespaces/secrets/{secret_name}": {
    "query": {},
    "body": {},
    "path": {
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/user/codespaces/secrets/{secret_name}": {
    "query": {},
    "body": {},
    "path": {
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CodespacesSecret",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/user/codespaces/secrets/{secret_name}": {
    "query": {},
    "body": {},
    "path": {
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "EmptyObject",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/user/codespaces/secrets/{secret_name}/repositories": {
    "query": {},
    "body": {},
    "path": {
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    repositories: (MinimalRepository)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "put__/user/codespaces/secrets/{secret_name}/repositories": {
    "query": {},
    "body": {},
    "path": {
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/user/codespaces/secrets/{secret_name}/repositories/{repository_id}": {
    "query": {},
    "body": {},
    "path": {
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/user/codespaces/secrets/{secret_name}/repositories/{repository_id}": {
    "query": {},
    "body": {},
    "path": {
      ".secretName": {
        "rendered": " secretName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/user/codespaces/{codespace_name}": {
    "query": {},
    "body": {},
    "path": {
      ".codespaceName": {
        "rendered": " codespaceName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/user/codespaces/{codespace_name}": {
    "query": {},
    "body": {},
    "path": {
      ".codespaceName": {
        "rendered": " codespaceName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Codespace",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/user/codespaces/{codespace_name}": {
    "query": {},
    "body": {},
    "path": {
      ".codespaceName": {
        "rendered": " codespaceName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Codespace",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/user/codespaces/{codespace_name}/exports": {
    "query": {},
    "body": {},
    "path": {
      ".codespaceName": {
        "rendered": " codespaceName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CodespaceExportDetails",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/user/codespaces/{codespace_name}/exports/{export_id}": {
    "query": {},
    "body": {},
    "path": {
      ".codespaceName": {
        "rendered": " codespaceName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".exportId": {
        "rendered": "\n/** The ID of the export operation, or `latest`. Currently only `latest` is currently supported. */\n exportId: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CodespaceExportDetails",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/user/codespaces/{codespace_name}/machines": {
    "query": {},
    "body": {},
    "path": {
      ".codespaceName": {
        "rendered": " codespaceName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    machines: (CodespaceMachine)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/user/codespaces/{codespace_name}/publish": {
    "query": {},
    "body": {},
    "path": {
      ".codespaceName": {
        "rendered": " codespaceName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CodespaceWithFullRepository",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/user/codespaces/{codespace_name}/start": {
    "query": {},
    "body": {},
    "path": {
      ".codespaceName": {
        "rendered": " codespaceName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Codespace",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/user/codespaces/{codespace_name}/stop": {
    "query": {},
    "body": {},
    "path": {
      ".codespaceName": {
        "rendered": " codespaceName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Codespace",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/user/email/visibility": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Email)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/user/emails": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/user/emails": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Email)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/user/emails": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Email)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/followers": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(SimpleUser)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/following": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(SimpleUser)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/user/following/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/user/following/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/user/following/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/user/gpg_keys": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(GpgKey)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/user/gpg_keys": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "GpgKey",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/user/gpg_keys/{gpg_key_id}": {
    "query": {},
    "body": {},
    "path": {
      ".gpgKeyId": {
        "rendered": "\n/** The unique identifier of the GPG key. */\n gpgKeyId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/user/gpg_keys/{gpg_key_id}": {
    "query": {},
    "body": {},
    "path": {
      ".gpgKeyId": {
        "rendered": " gpgKeyId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "GpgKey",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/user/installations": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    installations: (Installation)[],\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/installations/{installation_id}/repositories": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".installationId": {
        "rendered": " installationId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "{\n    repositories: (Repository)[],\n    repository_selection?: string,\n    total_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/user/installations/{installation_id}/repositories/{repository_id}": {
    "query": {},
    "body": {},
    "path": {
      ".installationId": {
        "rendered": " installationId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/user/installations/{installation_id}/repositories/{repository_id}": {
    "query": {},
    "body": {},
    "path": {
      ".installationId": {
        "rendered": " installationId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repositoryId": {
        "rendered": " repositoryId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/user/interaction-limits": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/user/interaction-limits": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(InteractionLimitResponse | hasuraSdk.JSONValue)",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/user/interaction-limits": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "InteractionLimitResponse",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/user/issues": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation. */\n filter?: \"assigned\" | \"created\" | \"mentioned\" | \"subscribed\" | \"repos\" | \"all\", \n/** Indicates the state of the issues to return. */\n state?: \"open\" | \"closed\" | \"all\", \n/** A list of comma separated label names. Example: `bug,ui,@high` */\n labels?: string, \n/** What to sort results by. */\n sort?: \"created\" | \"updated\" | \"comments\", \n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\", \n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.filter": {
        "rendered": "\n/** Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation. */\n filter?: \"assigned\" | \"created\" | \"mentioned\" | \"subscribed\" | \"repos\" | \"all\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.state": {
        "rendered": "\n/** Indicates the state of the issues to return. */\n state?: \"open\" | \"closed\" | \"all\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.labels": {
        "rendered": "\n/** A list of comma separated label names. Example: `bug,ui,@high` */\n labels?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** What to sort results by. */\n sort?: \"created\" | \"updated\" | \"comments\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.since": {
        "rendered": "\n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Issue)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/keys": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Key)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/user/keys": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "Key",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/user/keys/{key_id}": {
    "query": {},
    "body": {},
    "path": {
      ".keyId": {
        "rendered": " keyId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/user/keys/{key_id}": {
    "query": {},
    "body": {},
    "path": {
      ".keyId": {
        "rendered": " keyId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Key",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/user/marketplace_purchases": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(UserMarketplacePurchase)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/marketplace_purchases/stubbed": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(UserMarketplacePurchase)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/memberships/orgs": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Indicates the state of the memberships to return. If not specified, the API returns both active and pending memberships. */\n state?: \"active\" | \"pending\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.state": {
        "rendered": "\n/** Indicates the state of the memberships to return. If not specified, the API returns both active and pending memberships. */\n state?: \"active\" | \"pending\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(OrgMembership)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/memberships/orgs/{org}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OrgMembership",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/user/memberships/orgs/{org}": {
    "query": {},
    "body": {},
    "path": {
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "OrgMembership",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/user/migrations": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Migration)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/user/migrations": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "Migration",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/user/migrations/{migration_id}": {
    "query": {
      ".query": {
        "rendered": " query: {  exclude?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.exclude": {
        "rendered": " exclude?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.exclude.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".migrationId": {
        "rendered": " migrationId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Migration",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/user/migrations/{migration_id}/archive": {
    "query": {},
    "body": {},
    "path": {
      ".migrationId": {
        "rendered": " migrationId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/user/migrations/{migration_id}/archive": {
    "query": {},
    "body": {},
    "path": {
      ".migrationId": {
        "rendered": " migrationId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/user/migrations/{migration_id}/repos/{repo_name}/lock": {
    "query": {},
    "body": {},
    "path": {
      ".migrationId": {
        "rendered": " migrationId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repoName": {
        "rendered": " repoName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/user/migrations/{migration_id}/repositories": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".migrationId": {
        "rendered": " migrationId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(MinimalRepository)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/orgs": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(OrganizationSimple)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/packages": {
    "query": {
      ".query": {
        "rendered": " query?: { \n/** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */\n package_type: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\", \n/** The selected visibility of the packages.  This parameter is optional and only filters an existing result set.\n\nThe `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.\nFor the list of GitHub Packages registries that support granular permissions, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\" */\n visibility?: \"public\" | \"private\" | \"internal\", },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.package_type": {
        "rendered": "\n/** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */\n package_type: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.visibility": {
        "rendered": "\n/** The selected visibility of the packages.  This parameter is optional and only filters an existing result set.\n\nThe `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.\nFor the list of GitHub Packages registries that support granular permissions, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\" */\n visibility?: \"public\" | \"private\" | \"internal\",",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Package)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/user/packages/{package_type}/{package_name}": {
    "query": {},
    "body": {},
    "path": {
      ".packageType": {
        "rendered": " packageType: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".packageName": {
        "rendered": " packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/user/packages/{package_type}/{package_name}": {
    "query": {},
    "body": {},
    "path": {
      ".packageType": {
        "rendered": " packageType: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".packageName": {
        "rendered": " packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Package",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/user/packages/{package_type}/{package_name}/restore": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** package token */\n token?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** package token */\n token?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".packageType": {
        "rendered": " packageType: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".packageName": {
        "rendered": " packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/user/packages/{package_type}/{package_name}/versions": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Page number of the results to fetch. */\n page?: number, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** The state of the package, either active or deleted. */\n state?: \"active\" | \"deleted\", },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.state": {
        "rendered": "\n/** The state of the package, either active or deleted. */\n state?: \"active\" | \"deleted\",",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".packageType": {
        "rendered": " packageType: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".packageName": {
        "rendered": " packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(PackageVersion)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/user/packages/{package_type}/{package_name}/versions/{package_version_id}": {
    "query": {},
    "body": {},
    "path": {
      ".packageType": {
        "rendered": " packageType: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".packageName": {
        "rendered": " packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".packageVersionId": {
        "rendered": " packageVersionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/user/packages/{package_type}/{package_name}/versions/{package_version_id}": {
    "query": {},
    "body": {},
    "path": {
      ".packageType": {
        "rendered": " packageType: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".packageName": {
        "rendered": " packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".packageVersionId": {
        "rendered": " packageVersionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PackageVersion",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore": {
    "query": {},
    "body": {},
    "path": {
      ".packageType": {
        "rendered": " packageType: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".packageName": {
        "rendered": " packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".packageVersionId": {
        "rendered": " packageVersionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/user/projects": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "Project",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/user/public_emails": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Email)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/repos": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Limit results to repositories with the specified visibility. */\n visibility?: \"all\" | \"public\" | \"private\", \n/** Comma-separated list of values. Can include:  \n * `owner`: Repositories that are owned by the authenticated user.  \n * `collaborator`: Repositories that the user has been added to as a collaborator.  \n * `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on. */\n affiliation?: string, \n/** Limit results to repositories of the specified type. Will cause a `422` error if used in the same request as **visibility** or **affiliation**. */\n type?: \"all\" | \"owner\" | \"public\" | \"private\" | \"member\", \n/** The property to sort the results by. */\n sort?: \"created\" | \"updated\" | \"pushed\" | \"full_name\", \n/** The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`. */\n direction?: \"asc\" | \"desc\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, \n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string, \n/** Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n before?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.visibility": {
        "rendered": "\n/** Limit results to repositories with the specified visibility. */\n visibility?: \"all\" | \"public\" | \"private\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.affiliation": {
        "rendered": "\n/** Comma-separated list of values. Can include:  \n * `owner`: Repositories that are owned by the authenticated user.  \n * `collaborator`: Repositories that the user has been added to as a collaborator.  \n * `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on. */\n affiliation?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.type": {
        "rendered": "\n/** Limit results to repositories of the specified type. Will cause a `422` error if used in the same request as **visibility** or **affiliation**. */\n type?: \"all\" | \"owner\" | \"public\" | \"private\" | \"member\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The property to sort the results by. */\n sort?: \"created\" | \"updated\" | \"pushed\" | \"full_name\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.direction": {
        "rendered": "\n/** The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.since": {
        "rendered": "\n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.before": {
        "rendered": "\n/** Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n before?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Repository)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/user/repos": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "Repository",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/user/repository_invitations": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(RepositoryInvitation)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/user/repository_invitations/{invitation_id}": {
    "query": {},
    "body": {},
    "path": {
      ".invitationId": {
        "rendered": " invitationId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "patch__/user/repository_invitations/{invitation_id}": {
    "query": {},
    "body": {},
    "path": {
      ".invitationId": {
        "rendered": " invitationId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/user/ssh_signing_keys": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(SshSigningKey)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/user/ssh_signing_keys": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "SshSigningKey",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "delete__/user/ssh_signing_keys/{ssh_signing_key_id}": {
    "query": {},
    "body": {},
    "path": {
      ".sshSigningKeyId": {
        "rendered": "\n/** The unique identifier of the SSH signing key. */\n sshSigningKeyId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/user/ssh_signing_keys/{ssh_signing_key_id}": {
    "query": {},
    "body": {},
    "path": {
      ".sshSigningKeyId": {
        "rendered": " sshSigningKeyId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "SshSigningKey",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/user/starred": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to. */\n sort?: \"created\" | \"updated\", \n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to. */\n sort?: \"created\" | \"updated\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(Repository)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/user/starred/{owner}/{repo}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/user/starred/{owner}/{repo}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "put__/user/starred/{owner}/{repo}": {
    "query": {},
    "body": {},
    "path": {
      ".owner": {
        "rendered": " owner: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".repo": {
        "rendered": " repo: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/user/subscriptions": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(MinimalRepository)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/user/teams": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(TeamFull)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A user ID. Only return users with an ID greater than this ID. */\n since?: number, \n/** The number of results per page (max 100). */\n per_page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.since": {
        "rendered": "\n/** A user ID. Only return users with an ID greater than this ID. */\n since?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(SimpleUser)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{username}": {
    "query": {},
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(PrivateUser | PublicUser)",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/users/{username}/events": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Event)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{username}/events/orgs/{org}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".org": {
        "rendered": " org: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Event)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{username}/events/public": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Event)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{username}/followers": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(SimpleUser)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{username}/following": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(SimpleUser)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{username}/following/{target_user}": {
    "query": {},
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".targetUser": {
        "rendered": " targetUser: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/users/{username}/gists": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string, \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.since": {
        "rendered": "\n/** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */\n since?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(BaseGist)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{username}/gpg_keys": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(GpgKey)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{username}/hovercard": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Identifies which additional information you'd like to receive about the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`. */\n subject_type?: \"organization\" | \"repository\" | \"issue\" | \"pull_request\", \n/** Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`. */\n subject_id?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subject_type": {
        "rendered": "\n/** Identifies which additional information you'd like to receive about the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`. */\n subject_type?: \"organization\" | \"repository\" | \"issue\" | \"pull_request\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subject_id": {
        "rendered": "\n/** Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`. */\n subject_id?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Hovercard",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/users/{username}/installation": {
    "query": {},
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Installation",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/users/{username}/keys": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(KeySimple)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{username}/orgs": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(OrganizationSimple)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{username}/packages": {
    "query": {
      ".query": {
        "rendered": " query?: { \n/** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */\n package_type: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\", \n/** The selected visibility of the packages.  This parameter is optional and only filters an existing result set.\n\nThe `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.\nFor the list of GitHub Packages registries that support granular permissions, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\" */\n visibility?: \"public\" | \"private\" | \"internal\", },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.package_type": {
        "rendered": "\n/** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */\n package_type: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.visibility": {
        "rendered": "\n/** The selected visibility of the packages.  This parameter is optional and only filters an existing result set.\n\nThe `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.\nFor the list of GitHub Packages registries that support granular permissions, see \"[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\" */\n visibility?: \"public\" | \"private\" | \"internal\",",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Package)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/users/{username}/packages/{package_type}/{package_name}": {
    "query": {},
    "body": {},
    "path": {
      ".packageType": {
        "rendered": " packageType: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".packageName": {
        "rendered": " packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/users/{username}/packages/{package_type}/{package_name}": {
    "query": {},
    "body": {},
    "path": {
      ".packageType": {
        "rendered": " packageType: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".packageName": {
        "rendered": " packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "Package",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/users/{username}/packages/{package_type}/{package_name}/restore": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** package token */\n token?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** package token */\n token?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".packageType": {
        "rendered": " packageType: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".packageName": {
        "rendered": " packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/users/{username}/packages/{package_type}/{package_name}/versions": {
    "query": {},
    "body": {},
    "path": {
      ".packageType": {
        "rendered": " packageType: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".packageName": {
        "rendered": " packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(PackageVersion)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "delete__/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}": {
    "query": {},
    "body": {},
    "path": {
      ".packageType": {
        "rendered": " packageType: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".packageName": {
        "rendered": " packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".packageVersionId": {
        "rendered": " packageVersionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}": {
    "query": {},
    "body": {},
    "path": {
      ".packageType": {
        "rendered": " packageType: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".packageName": {
        "rendered": " packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".packageVersionId": {
        "rendered": " packageVersionId: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PackageVersion",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "post__/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore": {
    "query": {},
    "body": {},
    "path": {
      ".packageType": {
        "rendered": " packageType: \"npm\" | \"maven\" | \"rubygems\" | \"docker\" | \"nuget\" | \"container\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".packageName": {
        "rendered": " packageName: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".packageVersionId": {
        "rendered": " packageVersionId: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "hasuraSdk.JSONValue",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/users/{username}/projects": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Indicates the state of the projects to return. */\n state?: \"open\" | \"closed\" | \"all\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.state": {
        "rendered": "\n/** Indicates the state of the projects to return. */\n state?: \"open\" | \"closed\" | \"all\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Project)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{username}/received_events": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Event)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{username}/received_events/public": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(Event)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{username}/repos": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Limit results to repositories of the specified type. */\n type?: \"all\" | \"owner\" | \"member\", \n/** The property to sort the results by. */\n sort?: \"created\" | \"updated\" | \"pushed\" | \"full_name\", \n/** The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`. */\n direction?: \"asc\" | \"desc\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.type": {
        "rendered": "\n/** Limit results to repositories of the specified type. */\n type?: \"all\" | \"owner\" | \"member\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The property to sort the results by. */\n sort?: \"created\" | \"updated\" | \"pushed\" | \"full_name\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.direction": {
        "rendered": "\n/** The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(MinimalRepository)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{username}/settings/billing/actions": {
    "query": {},
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "ActionsBillingUsage",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/users/{username}/settings/billing/packages": {
    "query": {},
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "PackagesBillingUsage",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/users/{username}/settings/billing/shared-storage": {
    "query": {},
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "CombinedBillingUsage",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/users/{username}/ssh_signing_keys": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(SshSigningKey)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users/{username}/starred": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to. */\n sort?: \"created\" | \"updated\", \n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\", \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to. */\n sort?: \"created\" | \"updated\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.direction": {
        "rendered": "\n/** The direction to sort the results by. */\n direction?: \"asc\" | \"desc\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "((StarredRepository)[] | (Repository)[])",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  },
  "get__/users/{username}/subscriptions": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The number of results per page (max 100). */\n per_page?: number, \n/** Page number of the results to fetch. */\n page?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.per_page": {
        "rendered": "\n/** The number of results per page (max 100). */\n per_page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** Page number of the results to fetch. */\n page?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {
      ".username": {
        "rendered": " username: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "response": {
      ".__no_name": {
        "rendered": "(MinimalRepository)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/versions": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(string)[]",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false },
      ".__no_name.__no_name.__no_name": {
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/zen": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "AlertCreatedAt",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": { "requiresRelaxedTypeAnnotation": false }
    }
  }
}
