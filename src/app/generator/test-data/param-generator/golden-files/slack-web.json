{
  "post__/admin.apps.approve": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The id of the app to approve. */\n    app_id?: string,\n  /** The id of the request to approve. */\n    request_id?: string,\n    team_id?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/admin.apps.approved.list": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `admin.apps:read` */\n token: string, \n/** The maximum number of items to return. Must be between 1 - 1000 both inclusive. */\n limit?: number, \n/** Set `cursor` to `next_cursor` returned by the previous call to list items in the next page */\n cursor?: string,  team_id?: string,  enterprise_id?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `admin.apps:read` */\n token: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** The maximum number of items to return. Must be between 1 - 1000 both inclusive. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cursor": {
        "rendered": "\n/** Set `cursor` to `next_cursor` returned by the previous call to list items in the next page */\n cursor?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.team_id": {
        "rendered": " team_id?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.enterprise_id": {
        "rendered": " enterprise_id?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/admin.apps.requests.list": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `admin.apps:read` */\n token: string, \n/** The maximum number of items to return. Must be between 1 - 1000 both inclusive. */\n limit?: number, \n/** Set `cursor` to `next_cursor` returned by the previous call to list items in the next page */\n cursor?: string,  team_id?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `admin.apps:read` */\n token: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** The maximum number of items to return. Must be between 1 - 1000 both inclusive. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cursor": {
        "rendered": "\n/** Set `cursor` to `next_cursor` returned by the previous call to list items in the next page */\n cursor?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.team_id": {
        "rendered": " team_id?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/admin.apps.restrict": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The id of the app to restrict. */\n    app_id?: string,\n  /** The id of the request to restrict. */\n    request_id?: string,\n    team_id?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/admin.apps.restricted.list": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `admin.apps:read` */\n token: string, \n/** The maximum number of items to return. Must be between 1 - 1000 both inclusive. */\n limit?: number, \n/** Set `cursor` to `next_cursor` returned by the previous call to list items in the next page */\n cursor?: string,  team_id?: string,  enterprise_id?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `admin.apps:read` */\n token: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** The maximum number of items to return. Must be between 1 - 1000 both inclusive. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cursor": {
        "rendered": "\n/** Set `cursor` to `next_cursor` returned by the previous call to list items in the next page */\n cursor?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.team_id": {
        "rendered": " team_id?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.enterprise_id": {
        "rendered": " enterprise_id?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/admin.conversations.archive": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The channel to archive. */\n    channel_id: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/admin.conversations.convertToPrivate": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The channel to convert to private. */\n    channel_id: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/admin.conversations.create": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Description of the public or private channel to create. */\n    description?: string,\n  /** When `true`, creates a private channel instead of a public channel */\n    is_private: boolean,\n  /** Name of the public or private channel to create. */\n    name: string,\n  /** When `true`, the channel will be available org-wide. Note: if the channel is not `org_wide=true`, you must specify a `team_id` for this channel */\n    org_wide?: boolean,\n  /** The workspace to create the channel in. Note: this argument is required unless you set `org_wide=true`. */\n    team_id?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    channel_id?: DefsChannelId,\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/admin.conversations.delete": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The channel to delete. */\n    channel_id: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/admin.conversations.disconnectShared": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The channel to be disconnected from some workspaces. */\n    channel_id: string,\n  /** The team to be removed from the channel. Currently only a single team id can be specified. */\n    leaving_team_ids?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/admin.conversations.ekm.listOriginalConnectedChannelInfo": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `admin.conversations:read` */\n token: string, \n/** A comma-separated list of channels to filter to. */\n channel_ids?: string, \n/** A comma-separated list of the workspaces to which the channels you would like returned belong. */\n team_ids?: string, \n/** The maximum number of items to return. Must be between 1 - 1000 both inclusive. */\n limit?: number, \n/** Set `cursor` to `next_cursor` returned by the previous call to list items in the next page. */\n cursor?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `admin.conversations:read` */\n token: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.channel_ids": {
        "rendered": "\n/** A comma-separated list of channels to filter to. */\n channel_ids?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.team_ids": {
        "rendered": "\n/** A comma-separated list of the workspaces to which the channels you would like returned belong. */\n team_ids?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** The maximum number of items to return. Must be between 1 - 1000 both inclusive. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cursor": {
        "rendered": "\n/** Set `cursor` to `next_cursor` returned by the previous call to list items in the next page. */\n cursor?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/admin.conversations.getConversationPrefs": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The channel to get preferences for. */\n channel_id: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.channel_id": {
        "rendered": "\n/** The channel to get preferences for. */\n channel_id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    prefs?: {\n    can_thread?: {\n    type?: (string)[],\n    user?: (string)[],\n\n},\n    who_can_post?: {\n    type?: (string)[],\n    user?: (string)[],\n\n},\n\n},\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/admin.conversations.getTeams": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The channel to determine connected workspaces within the organization for. */\n channel_id: string, \n/** Set `cursor` to `next_cursor` returned by the previous call to list items in the next page */\n cursor?: string, \n/** The maximum number of items to return. Must be between 1 - 1000 both inclusive. */\n limit?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.channel_id": {
        "rendered": "\n/** The channel to determine connected workspaces within the organization for. */\n channel_id: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cursor": {
        "rendered": "\n/** Set `cursor` to `next_cursor` returned by the previous call to list items in the next page */\n cursor?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** The maximum number of items to return. Must be between 1 - 1000 both inclusive. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    response_metadata?: {\n    next_cursor: string,\n\n},\n    team_ids: (DefsTeam)[],\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/admin.conversations.invite": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The channel that the users will be invited to. */\n    channel_id: string,\n  /** The users to invite. */\n    user_ids: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/admin.conversations.rename": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The channel to rename. */\n    channel_id: string,\n    name: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/admin.conversations.restrictAccess.addGroup": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The channel to link this group to. */\n    channel_id: string,\n  /** The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to be an allowlist for the private channel. */\n    group_id: string,\n  /** The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization. */\n    team_id?: string,\n  /** Authentication token. Requires scope: `admin.conversations:write` */\n    token: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/admin.conversations.restrictAccess.listGroups": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `admin.conversations:read` */\n token: string,  channel_id: string, \n/** The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization. */\n team_id?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `admin.conversations:read` */\n token: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.channel_id": {
        "rendered": " channel_id: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.team_id": {
        "rendered": "\n/** The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization. */\n team_id?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/admin.conversations.restrictAccess.removeGroup": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The channel to remove the linked group from. */\n    channel_id: string,\n  /** The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to remove from the private channel. */\n    group_id: string,\n  /** The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization. */\n    team_id: string,\n  /** Authentication token. Requires scope: `admin.conversations:write` */\n    token: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/admin.conversations.search": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Comma separated string of team IDs, signifying the workspaces to search through. */\n team_ids?: string, \n/** Name of the the channel to query by. */\n query?: string, \n/** Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10. */\n limit?: number, \n/** Set `cursor` to `next_cursor` returned by the previous call to list items in the next page. */\n cursor?: string, \n/** The type of channel to include or exclude in the search. For example `private` will search private channels, while `private_exclude` will exclude them. For a full list of types, check the [Types section](#types). */\n search_channel_types?: string, \n/** Possible values are `relevant` (search ranking based on what we think is closest), `name` (alphabetical), `member_count` (number of users in the channel), and `created` (date channel was created). You can optionally pair this with the `sort_dir` arg to change how it is sorted  */\n sort?: string, \n/** Sort direction. Possible values are `asc` for ascending order like (1, 2, 3) or (a, b, c), and `desc` for descending order like (3, 2, 1) or (c, b, a) */\n sort_dir?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.team_ids": {
        "rendered": "\n/** Comma separated string of team IDs, signifying the workspaces to search through. */\n team_ids?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** Name of the the channel to query by. */\n query?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cursor": {
        "rendered": "\n/** Set `cursor` to `next_cursor` returned by the previous call to list items in the next page. */\n cursor?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.search_channel_types": {
        "rendered": "\n/** The type of channel to include or exclude in the search. For example `private` will search private channels, while `private_exclude` will exclude them. For a full list of types, check the [Types section](#types). */\n search_channel_types?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** Possible values are `relevant` (search ranking based on what we think is closest), `name` (alphabetical), `member_count` (number of users in the channel), and `created` (date channel was created). You can optionally pair this with the `sort_dir` arg to change how it is sorted  */\n sort?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort_dir": {
        "rendered": "\n/** Sort direction. Possible values are `asc` for ascending order like (1, 2, 3) or (a, b, c), and `desc` for descending order like (3, 2, 1) or (c, b, a) */\n sort_dir?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    channels: (ObjsChannel)[],\n    next_cursor: string,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/admin.conversations.setConversationPrefs": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The channel to set the prefs for */\n    channel_id: string,\n  /** The prefs for this channel in a stringified JSON format. */\n    prefs: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/admin.conversations.setTeams": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The encoded `channel_id` to add or remove to workspaces. */\n    channel_id: string,\n  /** True if channel has to be converted to an org channel */\n    org_channel?: boolean,\n  /** A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide. */\n    target_team_ids?: string,\n  /** The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel. */\n    team_id?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/admin.conversations.unarchive": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The channel to unarchive. */\n    channel_id: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/admin.emoji.add": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included. */\n    name: string,\n  /** Authentication token. Requires scope: `admin.teams:write` */\n    token: string,\n  /** The URL of a file to use as an image for the emoji. Square images under 128KB and with transparent backgrounds work best. */\n    url: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/admin.emoji.addAlias": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The alias of the emoji. */\n    alias_for: string,\n  /** The name of the emoji to be aliased. Colons (`:myemoji:`) around the value are not required, although they may be included. */\n    name: string,\n  /** Authentication token. Requires scope: `admin.teams:write` */\n    token: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/admin.emoji.list": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `admin.teams:read` */\n token: string, \n/** Set `cursor` to `next_cursor` returned by the previous call to list items in the next page */\n cursor?: string, \n/** The maximum number of items to return. Must be between 1 - 1000 both inclusive. */\n limit?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `admin.teams:read` */\n token: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cursor": {
        "rendered": "\n/** Set `cursor` to `next_cursor` returned by the previous call to list items in the next page */\n cursor?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** The maximum number of items to return. Must be between 1 - 1000 both inclusive. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/admin.emoji.remove": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included. */\n    name: string,\n  /** Authentication token. Requires scope: `admin.teams:write` */\n    token: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/admin.emoji.rename": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The name of the emoji to be renamed. Colons (`:myemoji:`) around the value are not required, although they may be included. */\n    name: string,\n  /** The new name of the emoji. */\n    new_name: string,\n  /** Authentication token. Requires scope: `admin.teams:write` */\n    token: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/admin.inviteRequests.approve": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** ID of the request to invite. */\n    invite_request_id: string,\n  /** ID for the workspace where the invite request was made. */\n    team_id?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/admin.inviteRequests.approved.list": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** ID for the workspace where the invite requests were made. */\n team_id?: string, \n/** Value of the `next_cursor` field sent as part of the previous API response */\n cursor?: string, \n/** The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive */\n limit?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.team_id": {
        "rendered": "\n/** ID for the workspace where the invite requests were made. */\n team_id?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cursor": {
        "rendered": "\n/** Value of the `next_cursor` field sent as part of the previous API response */\n cursor?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/admin.inviteRequests.denied.list": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** ID for the workspace where the invite requests were made. */\n team_id?: string, \n/** Value of the `next_cursor` field sent as part of the previous api response */\n cursor?: string, \n/** The number of results that will be returned by the API on each invocation. Must be between 1 - 1000 both inclusive */\n limit?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.team_id": {
        "rendered": "\n/** ID for the workspace where the invite requests were made. */\n team_id?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cursor": {
        "rendered": "\n/** Value of the `next_cursor` field sent as part of the previous api response */\n cursor?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** The number of results that will be returned by the API on each invocation. Must be between 1 - 1000 both inclusive */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/admin.inviteRequests.deny": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** ID of the request to invite. */\n    invite_request_id: string,\n  /** ID for the workspace where the invite request was made. */\n    team_id?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/admin.inviteRequests.list": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** ID for the workspace where the invite requests were made. */\n team_id?: string, \n/** Value of the `next_cursor` field sent as part of the previous API response */\n cursor?: string, \n/** The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive */\n limit?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.team_id": {
        "rendered": "\n/** ID for the workspace where the invite requests were made. */\n team_id?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cursor": {
        "rendered": "\n/** Value of the `next_cursor` field sent as part of the previous API response */\n cursor?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/admin.teams.admins.list": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `admin.teams:read` */\n token: string, \n/** The maximum number of items to return. */\n limit?: number, \n/** Set `cursor` to `next_cursor` returned by the previous call to list items in the next page. */\n cursor?: string,  team_id: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `admin.teams:read` */\n token: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** The maximum number of items to return. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cursor": {
        "rendered": "\n/** Set `cursor` to `next_cursor` returned by the previous call to list items in the next page. */\n cursor?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.team_id": {
        "rendered": " team_id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/admin.teams.create": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Description for the team. */\n    team_description?: string,\n  /** Who can join the team. A team's discoverability can be `open`, `closed`, `invite_only`, or `unlisted`. */\n    team_discoverability?: string,\n  /** Team domain (for example, slacksoftballteam). */\n    team_domain: string,\n  /** Team name (for example, Slack Softball Team). */\n    team_name: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/admin.teams.list": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The maximum number of items to return. Must be between 1 - 100 both inclusive. */\n limit?: number, \n/** Set `cursor` to `next_cursor` returned by the previous call to list items in the next page. */\n cursor?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** The maximum number of items to return. Must be between 1 - 100 both inclusive. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cursor": {
        "rendered": "\n/** Set `cursor` to `next_cursor` returned by the previous call to list items in the next page. */\n cursor?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/admin.teams.owners.list": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `admin.teams:read` */\n token: string,  team_id: string, \n/** The maximum number of items to return. Must be between 1 - 1000 both inclusive. */\n limit?: number, \n/** Set `cursor` to `next_cursor` returned by the previous call to list items in the next page. */\n cursor?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `admin.teams:read` */\n token: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.team_id": {
        "rendered": " team_id: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** The maximum number of items to return. Must be between 1 - 1000 both inclusive. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cursor": {
        "rendered": "\n/** Set `cursor` to `next_cursor` returned by the previous call to list items in the next page. */\n cursor?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/admin.teams.settings.info": {
    "query": {
      ".query": {
        "rendered": " query: {  team_id: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.team_id": {
        "rendered": " team_id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/admin.teams.settings.setDefaultChannels": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** An array of channel IDs. */\n    channel_ids: string,\n  /** ID for the workspace to set the default channel for. */\n    team_id: string,\n  /** Authentication token. Requires scope: `admin.teams:write` */\n    token: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/admin.teams.settings.setDescription": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The new description for the workspace. */\n    description: string,\n  /** ID for the workspace to set the description for. */\n    team_id: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/admin.teams.settings.setDiscoverability": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** This workspace's discovery setting. It must be set to one of `open`, `invite_only`, `closed`, or `unlisted`. */\n    discoverability: string,\n  /** The ID of the workspace to set discoverability on. */\n    team_id: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/admin.teams.settings.setIcon": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Image URL for the icon */\n    image_url: string,\n  /** ID for the workspace to set the icon for. */\n    team_id: string,\n  /** Authentication token. Requires scope: `admin.teams:write` */\n    token: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/admin.teams.settings.setName": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The new name of the workspace. */\n    name: string,\n  /** ID for the workspace to set the name for. */\n    team_id: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/admin.usergroups.addChannels": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Comma separated string of channel IDs. */\n    channel_ids: string,\n  /** The workspace to add default channels in. */\n    team_id?: string,\n  /** ID of the IDP group to add default channels for. */\n    usergroup_id: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/admin.usergroups.addTeams": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** When `true`, this method automatically creates new workspace accounts for the IDP group members. */\n    auto_provision?: boolean,\n  /** A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token. */\n    team_ids: string,\n  /** An encoded usergroup (IDP Group) ID. */\n    usergroup_id: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/admin.usergroups.listChannels": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** ID of the IDP group to list default channels for. */\n usergroup_id: string, \n/** ID of the the workspace. */\n team_id?: string, \n/** Flag to include or exclude the count of members per channel. */\n include_num_members?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.usergroup_id": {
        "rendered": "\n/** ID of the IDP group to list default channels for. */\n usergroup_id: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.team_id": {
        "rendered": "\n/** ID of the the workspace. */\n team_id?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.include_num_members": {
        "rendered": "\n/** Flag to include or exclude the count of members per channel. */\n include_num_members?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/admin.usergroups.removeChannels": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Comma-separated string of channel IDs */\n    channel_ids: string,\n  /** ID of the IDP Group */\n    usergroup_id: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/admin.users.assign": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Comma separated values of channel IDs to add user in the new workspace. */\n    channel_ids?: string,\n  /** True if user should be added to the workspace as a guest. */\n    is_restricted?: boolean,\n  /** True if user should be added to the workspace as a single-channel guest. */\n    is_ultra_restricted?: boolean,\n  /** The ID (`T1234`) of the workspace. */\n    team_id: string,\n  /** The ID of the user to add to the workspace. */\n    user_id: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/admin.users.invite": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** A comma-separated list of `channel_id`s for this user to join. At least one channel is required. */\n    channel_ids: string,\n  /** An optional message to send to the user in the invite email. */\n    custom_message?: string,\n  /** The email address of the person to invite. */\n    email: string,\n  /** Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date. */\n    guest_expiration_ts?: string,\n  /** Is this user a multi-channel guest user? (default: false) */\n    is_restricted?: boolean,\n  /** Is this user a single channel guest user? (default: false) */\n    is_ultra_restricted?: boolean,\n  /** Full name of the user. */\n    real_name?: string,\n  /** Allow this invite to be resent in the future if a user has not signed up yet. (default: false) */\n    resend?: boolean,\n  /** The ID (`T1234`) of the workspace. */\n    team_id: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/admin.users.list": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The ID (`T1234`) of the workspace. */\n team_id: string, \n/** Set `cursor` to `next_cursor` returned by the previous call to list items in the next page. */\n cursor?: string, \n/** Limit for how many users to be retrieved per page */\n limit?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.team_id": {
        "rendered": "\n/** The ID (`T1234`) of the workspace. */\n team_id: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cursor": {
        "rendered": "\n/** Set `cursor` to `next_cursor` returned by the previous call to list items in the next page. */\n cursor?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** Limit for how many users to be retrieved per page */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/admin.users.remove": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The ID (`T1234`) of the workspace. */\n    team_id: string,\n  /** The ID of the user to remove. */\n    user_id: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/admin.users.session.invalidate": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n    session_id: number,\n  /** ID of the team that the session belongs to */\n    team_id: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/admin.users.session.reset": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Only expire mobile sessions (default: false) */\n    mobile_only?: boolean,\n  /** The ID of the user to wipe sessions for */\n    user_id: string,\n  /** Only expire web sessions (default: false) */\n    web_only?: boolean,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/admin.users.setAdmin": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The ID (`T1234`) of the workspace. */\n    team_id: string,\n  /** The ID of the user to designate as an admin. */\n    user_id: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/admin.users.setExpiration": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Timestamp when guest account should be disabled. */\n    expiration_ts: number,\n  /** The ID (`T1234`) of the workspace. */\n    team_id: string,\n  /** The ID of the user to set an expiration for. */\n    user_id: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/admin.users.setOwner": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The ID (`T1234`) of the workspace. */\n    team_id: string,\n  /** Id of the user to promote to owner. */\n    user_id: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/admin.users.setRegular": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The ID (`T1234`) of the workspace. */\n    team_id: string,\n  /** The ID of the user to designate as a regular user. */\n    user_id: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/api.test": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Error response to return */\n error?: string, \n/** example property to return */\n foo?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.error": {
        "rendered": "\n/** Error response to return */\n error?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.foo": {
        "rendered": "\n/** example property to return */\n foo?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/apps.event.authorizations.list": {
    "query": {
      ".query": {
        "rendered": " query: {  event_context: string,  cursor?: string,  limit?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.event_context": {
        "rendered": " event_context: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cursor": {
        "rendered": " cursor?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": " limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/apps.permissions.info": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `none` */\n token?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `none` */\n token?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    info: {\n    app_home: {\n    resources?: ObjsResources,\n    scopes?: ObjsScopes,\n\n},\n    channel: {\n    resources?: ObjsResources,\n    scopes?: ObjsScopes,\n\n},\n    group: {\n    resources?: ObjsResources,\n    scopes?: ObjsScopes,\n\n},\n    im: {\n    resources?: ObjsResources,\n    scopes?: ObjsScopes,\n\n},\n    mpim: {\n    resources?: ObjsResources,\n    scopes?: ObjsScopes,\n\n},\n    team: {\n    resources: ObjsResources,\n    scopes: ObjsScopes,\n\n},\n\n},\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/apps.permissions.request": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `none` */\n token: string, \n/** A comma separated list of scopes to request for */\n scopes: string, \n/** Token used to trigger the permissions API */\n trigger_id: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `none` */\n token: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.scopes": {
        "rendered": "\n/** A comma separated list of scopes to request for */\n scopes: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.trigger_id": {
        "rendered": "\n/** Token used to trigger the permissions API */\n trigger_id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/apps.permissions.resources.list": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `none` */\n token: string, \n/** Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail. */\n cursor?: string, \n/** The maximum number of items to return. */\n limit?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `none` */\n token: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cursor": {
        "rendered": "\n/** Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail. */\n cursor?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** The maximum number of items to return. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    resources: ({\n  /** An ID for a resource */\n    id?: string,\n  /** The type of resource the `id` corresponds to */\n    type?: string,\n\n})[],\n    response_metadata?: {\n    next_cursor: string,\n\n},\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/apps.permissions.scopes.list": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `none` */\n token: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `none` */\n token: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    scopes: {\n    app_home?: ObjsScopes,\n    channel?: ObjsScopes,\n    group?: ObjsScopes,\n    im?: ObjsScopes,\n    mpim?: ObjsScopes,\n    team?: ObjsScopes,\n    user?: ObjsScopes,\n    [key: string]: any,\n\n},\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/apps.permissions.users.list": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `none` */\n token: string, \n/** Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail. */\n cursor?: string, \n/** The maximum number of items to return. */\n limit?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `none` */\n token: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cursor": {
        "rendered": "\n/** Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail. */\n cursor?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** The maximum number of items to return. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/apps.permissions.users.request": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `none` */\n token: string, \n/** A comma separated list of user scopes to request for */\n scopes: string, \n/** Token used to trigger the request */\n trigger_id: string, \n/** The user this scope is being requested for */\n user: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `none` */\n token: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.scopes": {
        "rendered": "\n/** A comma separated list of user scopes to request for */\n scopes: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.trigger_id": {
        "rendered": "\n/** Token used to trigger the request */\n trigger_id: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.user": {
        "rendered": "\n/** The user this scope is being requested for */\n user: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/apps.uninstall": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `none` */\n token?: string, \n/** Issued when you created your application. */\n client_id?: string, \n/** Issued when you created your application. */\n client_secret?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `none` */\n token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.client_id": {
        "rendered": "\n/** Issued when you created your application. */\n client_id?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.client_secret": {
        "rendered": "\n/** Issued when you created your application. */\n client_secret?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/auth.revoke": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `none` */\n token: string, \n/** Setting this parameter to `1` triggers a _testing mode_ where the specified token will not actually be revoked. */\n test?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `none` */\n token: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.test": {
        "rendered": "\n/** Setting this parameter to `1` triggers a _testing mode_ where the specified token will not actually be revoked. */\n test?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    revoked: boolean,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/auth.test": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    bot_id?: DefsBotId,\n    is_enterprise_install?: boolean,\n    ok: DefsOkTrue,\n    team: string,\n    team_id: DefsTeam,\n    url: string,\n    user: string,\n    user_id: DefsUserId,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/bots.info": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `users:read` */\n token: string, \n/** Bot user to get info on */\n bot?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `users:read` */\n token: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.bot": {
        "rendered": "\n/** Bot user to get info on */\n bot?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    bot: {\n    app_id: DefsAppId,\n    deleted: boolean,\n    icons: {\n  /** @format uri */\n    \"image_36\": string,\n  /** @format uri */\n    \"image_48\": string,\n  /** @format uri */\n    \"image_72\": string,\n\n},\n    id: DefsBotId,\n    name: string,\n    updated: number,\n    user_id?: DefsUserId,\n\n},\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/calls.add": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The valid Slack user ID of the user who created this Call. When this method is called with a user token, the `created_by` field is optional and defaults to the authed user of the token. Otherwise, the field is required. */\n    created_by?: string,\n  /** Call start time in UTC UNIX timestamp format */\n    date_start?: number,\n  /** When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL. */\n    desktop_app_join_url?: string,\n  /** An optional, human-readable ID supplied by the 3rd-party Call provider. If supplied, this ID will be displayed in the Call object. */\n    external_display_id?: string,\n  /** An ID supplied by the 3rd-party Call provider. It must be unique across all Calls from that service. */\n    external_unique_id: string,\n  /** The URL required for a client to join the Call. */\n    join_url: string,\n  /** The name of the Call. */\n    title?: string,\n  /** The list of users to register as participants in the Call. [Read more on how to specify users here](/apis/calls#users). */\n    users?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/calls.end": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Call duration in seconds */\n    duration?: number,\n  /** `id` returned when registering the call using the [`calls.add`](/methods/calls.add) method. */\n    id: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/calls.info": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** `id` of the Call returned by the [`calls.add`](/methods/calls.add) method. */\n id: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.id": {
        "rendered": "\n/** `id` of the Call returned by the [`calls.add`](/methods/calls.add) method. */\n id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/calls.participants.add": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** `id` returned by the [`calls.add`](/methods/calls.add) method. */\n    id: string,\n  /** The list of users to add as participants in the Call. [Read more on how to specify users here](/apis/calls#users). */\n    users: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/calls.participants.remove": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** `id` returned by the [`calls.add`](/methods/calls.add) method. */\n    id: string,\n  /** The list of users to remove as participants in the Call. [Read more on how to specify users here](/apis/calls#users). */\n    users: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/calls.update": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL. */\n    desktop_app_join_url?: string,\n  /** `id` returned by the [`calls.add`](/methods/calls.add) method. */\n    id: string,\n  /** The URL required for a client to join the Call. */\n    join_url?: string,\n  /** The name of the Call. */\n    title?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/chat.delete": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope. */\n    as_user?: boolean,\n  /** Channel containing the message to be deleted. */\n    channel?: string,\n  /** Timestamp of the message to be deleted. */\n    ts?: number,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    channel: DefsChannel,\n    ok: DefsOkTrue,\n    ts: DefsTs,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/chat.deleteScheduledMessage": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope. */\n    as_user?: boolean,\n  /** The channel the scheduled_message is posting to */\n    channel: string,\n  /** `scheduled_message_id` returned from call to chat.scheduleMessage */\n    scheduled_message_id: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/chat.getPermalink": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `none` */\n token: string, \n/** The ID of the conversation or channel containing the message */\n channel: string, \n/** A message's `ts` value, uniquely identifying it within a channel */\n message_ts: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `none` */\n token: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.channel": {
        "rendered": "\n/** The ID of the conversation or channel containing the message */\n channel: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.message_ts": {
        "rendered": "\n/** A message's `ts` value, uniquely identifying it within a channel */\n message_ts: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    channel: DefsChannel,\n    ok: DefsOkTrue,\n  /** @format uri */\n    permalink: string,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/chat.meMessage": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name. */\n    channel?: string,\n  /** Text of the message to send. */\n    text?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    channel?: DefsChannel,\n    ok: DefsOkTrue,\n    ts?: DefsTs,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/chat.postEphemeral": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Pass true to post the message as the authed user. Defaults to true if the chat:write:bot scope is not included. Otherwise, defaults to false. */\n    as_user?: boolean,\n  /** A JSON-based array of structured attachments, presented as a URL-encoded string. */\n    attachments?: string,\n  /** A JSON-based array of structured blocks, presented as a URL-encoded string. */\n    blocks?: string,\n  /** Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. */\n    channel: string,\n  /** Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](#authorship) below. */\n    icon_emoji?: string,\n  /** URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below. */\n    icon_url?: string,\n  /** Find and link channel names and usernames. */\n    link_names?: boolean,\n  /** Change how messages are treated. Defaults to `none`. See [below](#formatting). */\n    parse?: string,\n  /** How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. */\n    text?: string,\n  /** Provide another message's `ts` value to post this message in a thread. Avoid using a reply's `ts` value; use its parent's value instead. Ephemeral messages in threads are only shown if there is already an active thread. */\n    thread_ts?: string,\n  /** `id` of the user who will receive the ephemeral message. The user should be in the channel specified by the `channel` argument. */\n    user: string,\n  /** Set your bot's user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below. */\n    username?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    message_ts: DefsTs,\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/chat.postMessage": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](#authorship) below. */\n    as_user?: string,\n  /** A JSON-based array of structured attachments, presented as a URL-encoded string. */\n    attachments?: string,\n  /** A JSON-based array of structured blocks, presented as a URL-encoded string. */\n    blocks?: string,\n  /** Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details. */\n    channel: string,\n  /** Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](#authorship) below. */\n    icon_emoji?: string,\n  /** URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below. */\n    icon_url?: string,\n  /** Find and link channel names and usernames. */\n    link_names?: boolean,\n  /** Disable Slack markup parsing by setting to `false`. Enabled by default. */\n    mrkdwn?: boolean,\n  /** Change how messages are treated. Defaults to `none`. See [below](#formatting). */\n    parse?: string,\n  /** Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`. */\n    reply_broadcast?: boolean,\n  /** How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. */\n    text?: string,\n  /** Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead. */\n    thread_ts?: string,\n  /** Pass true to enable unfurling of primarily text-based content. */\n    unfurl_links?: boolean,\n  /** Pass false to disable unfurling of media content. */\n    unfurl_media?: boolean,\n  /** Set your bot's user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below. */\n    username?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    channel: DefsChannel,\n    message: ObjsMessage,\n    ok: DefsOkTrue,\n    ts: DefsTs,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/chat.scheduleMessage": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [chat.postMessage](chat.postMessage#authorship). */\n    as_user?: boolean,\n  /** A JSON-based array of structured attachments, presented as a URL-encoded string. */\n    attachments?: string,\n  /** A JSON-based array of structured blocks, presented as a URL-encoded string. */\n    blocks?: string,\n  /** Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details. */\n    channel?: string,\n  /** Find and link channel names and usernames. */\n    link_names?: boolean,\n  /** Change how messages are treated. Defaults to `none`. See [chat.postMessage](chat.postMessage#formatting). */\n    parse?: string,\n  /** Unix EPOCH timestamp of time in future to send the message. */\n    post_at?: string,\n  /** Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`. */\n    reply_broadcast?: boolean,\n  /** How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. */\n    text?: string,\n  /** Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead. */\n    thread_ts?: number,\n  /** Pass true to enable unfurling of primarily text-based content. */\n    unfurl_links?: boolean,\n  /** Pass false to disable unfurling of media content. */\n    unfurl_media?: boolean,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    channel: DefsChannel,\n    message: {\n    bot_id: DefsBotId,\n    bot_profile?: ObjsBotProfile,\n    team: DefsTeam,\n    text: string,\n    type: string,\n    user: DefsUserId,\n    username?: string,\n\n},\n    ok: DefsOkTrue,\n  /** @pattern ^\\d{10}$ */\n    post_at: number,\n  /**\n   * Scheduled Message ID\n   * @pattern ^[Q][A-Z0-9]{8,}$\n   */\n    scheduled_message_id: string,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/chat.scheduledMessages.list": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The channel of the scheduled messages */\n channel?: string, \n/** A UNIX timestamp of the latest value in the time range */\n latest?: number, \n/** A UNIX timestamp of the oldest value in the time range */\n oldest?: number, \n/** Maximum number of original entries to return. */\n limit?: number, \n/** For pagination purposes, this is the `cursor` value returned from a previous call to `chat.scheduledmessages.list` indicating where you want to start this call from. */\n cursor?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.channel": {
        "rendered": "\n/** The channel of the scheduled messages */\n channel?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.latest": {
        "rendered": "\n/** A UNIX timestamp of the latest value in the time range */\n latest?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oldest": {
        "rendered": "\n/** A UNIX timestamp of the oldest value in the time range */\n oldest?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** Maximum number of original entries to return. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cursor": {
        "rendered": "\n/** For pagination purposes, this is the `cursor` value returned from a previous call to `chat.scheduledmessages.list` indicating where you want to start this call from. */\n cursor?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    response_metadata: {\n    next_cursor: string,\n\n},\n    scheduled_messages: ({\n    channel_id: DefsChannelId,\n  /** @pattern ^\\d{10}$ */\n    date_created: number,\n  /** @pattern ^[Q][A-Z0-9]{8,}$ */\n    id: string,\n  /** @pattern ^\\d{10}$ */\n    post_at: number,\n    text?: string,\n\n})[],\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/chat.unfurl": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Channel ID of the message */\n    channel: string,\n  /** Timestamp of the message to add unfurl behavior to. */\n    ts: string,\n  /** URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl blocks or message attachments. */\n    unfurls?: string,\n  /** Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior */\n    user_auth_message?: string,\n  /** Set to `true` or `1` to indicate the user must install your Slack app to trigger unfurls for this domain */\n    user_auth_required?: boolean,\n  /** Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded. */\n    user_auth_url?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/chat.update": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Pass true to update the message as the authed user. [Bot users](/bot-users) in this context are considered authed users. */\n    as_user?: string,\n  /** A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting `text`. If you don't include this field, the message's previous `attachments` will be retained. To remove previous `attachments`, include an empty array for this field. */\n    attachments?: string,\n  /** A JSON-based array of [structured blocks](/block-kit/building), presented as a URL-encoded string. If you don't include this field, the message's previous `blocks` will be retained. To remove previous `blocks`, include an empty array for this field. */\n    blocks?: string,\n  /** Channel containing the message to be updated. */\n    channel: string,\n  /** Find and link channel names and usernames. Defaults to `none`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `none`. */\n    link_names?: string,\n  /** Change how messages are treated. Defaults to `client`, unlike `chat.postMessage`. Accepts either `none` or `full`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `client`. */\n    parse?: string,\n  /** New text for the message, using the [default formatting rules](/reference/surfaces/formatting). It's not required when presenting `blocks` or `attachments`. */\n    text?: string,\n  /** Timestamp of the message to be updated. */\n    ts: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    channel: string,\n  /** Message object */\n    message: {\n    attachments?: (hasuraSdk.JSONValue)[],\n    blocks?: hasuraSdk.JSONValue,\n    text: string,\n\n},\n    ok: DefsOkTrue,\n    text: string,\n    ts: string,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/conversations.archive": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** ID of conversation to archive */\n    channel?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/conversations.close": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Conversation to close. */\n    channel?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    already_closed?: boolean,\n    no_op?: boolean,\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/conversations.create": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Create a private channel instead of a public one */\n    is_private?: boolean,\n  /** Name of the public or private channel to create */\n    name?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    channel: ObjsConversation,\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/conversations.history": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `conversations:history` */\n token?: string, \n/** Conversation ID to fetch history for. */\n channel?: string, \n/** End of time range of messages to include in results. */\n latest?: number, \n/** Start of time range of messages to include in results. */\n oldest?: number, \n/** Include messages with latest or oldest timestamp in results only when either timestamp is specified. */\n inclusive?: boolean, \n/** The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached. */\n limit?: number, \n/** Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail. */\n cursor?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `conversations:history` */\n token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.channel": {
        "rendered": "\n/** Conversation ID to fetch history for. */\n channel?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.latest": {
        "rendered": "\n/** End of time range of messages to include in results. */\n latest?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oldest": {
        "rendered": "\n/** Start of time range of messages to include in results. */\n oldest?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.inclusive": {
        "rendered": "\n/** Include messages with latest or oldest timestamp in results only when either timestamp is specified. */\n inclusive?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cursor": {
        "rendered": "\n/** Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail. */\n cursor?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    channel_actions_count: number,\n    channel_actions_ts: ((number))[],\n    has_more: boolean,\n  /**\n   * @minItems 1\n   * @uniqueItems true\n   */\n    messages: (ObjsMessage)[],\n    ok: DefsOkTrue,\n    pin_count: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/conversations.info": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `conversations:read` */\n token?: string, \n/** Conversation ID to learn more about */\n channel?: string, \n/** Set this to `true` to receive the locale for this conversation. Defaults to `false` */\n include_locale?: boolean, \n/** Set to `true` to include the member count for the specified conversation. Defaults to `false` */\n include_num_members?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `conversations:read` */\n token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.channel": {
        "rendered": "\n/** Conversation ID to learn more about */\n channel?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.include_locale": {
        "rendered": "\n/** Set this to `true` to receive the locale for this conversation. Defaults to `false` */\n include_locale?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.include_num_members": {
        "rendered": "\n/** Set to `true` to include the member count for the specified conversation. Defaults to `false` */\n include_num_members?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    channel: ObjsConversation,\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/conversations.invite": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The ID of the public or private channel to invite user(s) to. */\n    channel?: string,\n  /** A comma separated list of user IDs. Up to 1000 users may be listed. */\n    users?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    channel: ObjsConversation,\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/conversations.join": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** ID of conversation to join */\n    channel?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    channel: ObjsConversation,\n    ok: DefsOkTrue,\n  /** Response metadata */\n    response_metadata?: {\n  /**\n   * @minItems 1\n   * @uniqueItems true\n   */\n    warnings?: (string)[],\n\n},\n    warning?: string,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/conversations.kick": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** ID of conversation to remove user from. */\n    channel?: string,\n  /** User ID to be removed. */\n    user?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/conversations.leave": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Conversation to leave */\n    channel?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    not_in_channel?: true,\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/conversations.list": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `conversations:read` */\n token?: string, \n/** Set to `true` to exclude archived channels from the list */\n exclude_archived?: boolean, \n/** Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im` */\n types?: string, \n/** The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. Must be an integer no larger than 1000. */\n limit?: number, \n/** Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail. */\n cursor?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `conversations:read` */\n token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.exclude_archived": {
        "rendered": "\n/** Set to `true` to exclude archived channels from the list */\n exclude_archived?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.types": {
        "rendered": "\n/** Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im` */\n types?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. Must be an integer no larger than 1000. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cursor": {
        "rendered": "\n/** Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail. */\n cursor?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** @uniqueItems true */\n    channels: (ObjsConversation)[],\n    ok: DefsOkTrue,\n    response_metadata?: {\n    next_cursor: string,\n\n},\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/conversations.mark": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Channel or conversation to set the read cursor for. */\n    channel?: string,\n  /** Unique identifier of message you want marked as most recently seen in this conversation. */\n    ts?: number,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/conversations.members": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `conversations:read` */\n token?: string, \n/** ID of the conversation to retrieve members for */\n channel?: string, \n/** The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached. */\n limit?: number, \n/** Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail. */\n cursor?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `conversations:read` */\n token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.channel": {
        "rendered": "\n/** ID of the conversation to retrieve members for */\n channel?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cursor": {
        "rendered": "\n/** Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail. */\n cursor?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n  /**\n   * @minItems 1\n   * @uniqueItems true\n   */\n    members: (DefsUserId)[],\n    ok: DefsOkTrue,\n    response_metadata: {\n    next_cursor: string,\n\n},\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/conversations.open": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Resume a conversation by supplying an `im` or `mpim`'s ID. Or provide the `users` field instead. */\n    channel?: string,\n  /** Boolean, indicates you want the full IM channel definition in the response. */\n    return_im?: boolean,\n  /** Comma separated lists of users. If only one user is included, this creates a 1:1 DM.  The ordering of the users is preserved whenever a multi-person direct message is returned. Supply a `channel` when not supplying `users`. */\n    users?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    already_open?: boolean,\n    channel: ((ObjsConversation | {\n    created?: string,\n    id: DefsDmId,\n    is_im?: boolean,\n    is_open?: boolean,\n    last_read?: DefsTs,\n    latest?: ObjsMessage,\n    unread_count?: number,\n    unread_count_display?: number,\n    user?: DefsUserId,\n\n}))[],\n    no_op?: boolean,\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/conversations.rename": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** ID of conversation to rename */\n    channel?: string,\n  /** New name for conversation. */\n    name?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    channel: ObjsConversation,\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/conversations.replies": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `conversations:history` */\n token?: string, \n/** Conversation ID to fetch thread from. */\n channel?: string, \n/** Unique identifier of a thread's parent message. `ts` must be the timestamp of an existing message with 0 or more replies. If there are no replies then just the single message referenced by `ts` will return - it is just an ordinary, unthreaded message. */\n ts?: number, \n/** End of time range of messages to include in results. */\n latest?: number, \n/** Start of time range of messages to include in results. */\n oldest?: number, \n/** Include messages with latest or oldest timestamp in results only when either timestamp is specified. */\n inclusive?: boolean, \n/** The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached. */\n limit?: number, \n/** Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail. */\n cursor?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `conversations:history` */\n token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.channel": {
        "rendered": "\n/** Conversation ID to fetch thread from. */\n channel?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ts": {
        "rendered": "\n/** Unique identifier of a thread's parent message. `ts` must be the timestamp of an existing message with 0 or more replies. If there are no replies then just the single message referenced by `ts` will return - it is just an ordinary, unthreaded message. */\n ts?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.latest": {
        "rendered": "\n/** End of time range of messages to include in results. */\n latest?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.oldest": {
        "rendered": "\n/** Start of time range of messages to include in results. */\n oldest?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.inclusive": {
        "rendered": "\n/** Include messages with latest or oldest timestamp in results only when either timestamp is specified. */\n inclusive?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cursor": {
        "rendered": "\n/** Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail. */\n cursor?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    has_more?: boolean,\n    messages: ((({\n    last_read?: DefsTs,\n    latest_reply?: DefsTs,\n    reply_count: number,\n  /** @uniqueItems true */\n    reply_users?: (DefsUserId)[],\n    reply_users_count?: number,\n    source_team?: DefsTeam,\n    subscribed: boolean,\n    team?: DefsTeam,\n    text: string,\n    thread_ts: DefsTs,\n    ts: DefsTs,\n    type: string,\n    unread_count?: number,\n    user: DefsUserId,\n    user_profile?: ObjsUserProfileShort,\n    user_team?: DefsTeam,\n\n} | {\n    is_starred?: boolean,\n    parent_user_id: DefsUserId,\n    source_team?: DefsTeam,\n    team?: DefsTeam,\n    text: string,\n    thread_ts: DefsTs,\n    ts: DefsTs,\n    type: string,\n    user: DefsUserId,\n    user_profile?: ObjsUserProfileShort,\n    user_team?: DefsTeam,\n\n}))[])[],\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/conversations.setPurpose": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Conversation to set the purpose of */\n    channel?: string,\n  /** A new, specialer purpose */\n    purpose?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    channel: ObjsConversation,\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/conversations.setTopic": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Conversation to set the topic of */\n    channel?: string,\n  /** The new topic string. Does not support formatting or linkification. */\n    topic?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    channel: ObjsConversation,\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/conversations.unarchive": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** ID of conversation to unarchive */\n    channel?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/dialog.open": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The dialog definition. This must be a JSON-encoded string. */\n dialog: string, \n/** Exchange a trigger to post to the user. */\n trigger_id: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.dialog": {
        "rendered": "\n/** The dialog definition. This must be a JSON-encoded string. */\n dialog: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.trigger_id": {
        "rendered": "\n/** Exchange a trigger to post to the user. */\n trigger_id: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/dnd.endDnd": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/dnd.endSnooze": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    dnd_enabled: boolean,\n    next_dnd_end_ts: number,\n    next_dnd_start_ts: number,\n    ok: DefsOkTrue,\n    snooze_enabled: boolean,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/dnd.info": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `dnd:read` */\n token?: string, \n/** User to fetch status for (defaults to current user) */\n user?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `dnd:read` */\n token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.user": {
        "rendered": "\n/** User to fetch status for (defaults to current user) */\n user?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    dnd_enabled: boolean,\n    next_dnd_end_ts: number,\n    next_dnd_start_ts: number,\n    ok: DefsOkTrue,\n    snooze_enabled?: boolean,\n    snooze_endtime?: number,\n    snooze_remaining?: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/dnd.setSnooze": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Number of minutes, from now, to snooze until. */\n    num_minutes: string,\n  /** Authentication token. Requires scope: `dnd:write` */\n    token: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    snooze_enabled: boolean,\n    snooze_endtime: number,\n    snooze_remaining: number,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/dnd.teamInfo": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `dnd:read` */\n token?: string, \n/** Comma-separated list of users to fetch Do Not Disturb status for */\n users?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `dnd:read` */\n token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.users": {
        "rendered": "\n/** Comma-separated list of users to fetch Do Not Disturb status for */\n users?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/emoji.list": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `emoji:read` */\n token: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `emoji:read` */\n token: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/files.comments.delete": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** File to delete a comment from. */\n    file?: string,\n  /** The comment to delete. */\n    id?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/files.delete": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** ID of file to delete. */\n    file?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/files.info": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `files:read` */\n token?: string, \n/** Specify a file by providing its ID. */\n file?: string,  count?: string,  page?: string, \n/** The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. */\n limit?: number, \n/** Parameter for pagination. File comments are paginated for a single file. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection of comments. See [pagination](/docs/pagination) for more details. */\n cursor?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `files:read` */\n token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.file": {
        "rendered": "\n/** Specify a file by providing its ID. */\n file?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.count": {
        "rendered": " count?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": " page?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cursor": {
        "rendered": "\n/** Parameter for pagination. File comments are paginated for a single file. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection of comments. See [pagination](/docs/pagination) for more details. */\n cursor?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    comments: ObjsComments,\n    content_html?: any,\n    editor?: DefsUserId,\n    file: ObjsFile,\n    ok: DefsOkTrue,\n    paging?: ObjsPaging,\n    response_metadata?: ObjsResponseMetadata,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/files.list": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `files:read` */\n token?: string, \n/** Filter files created by a single user. */\n user?: string, \n/** Filter files appearing in a specific channel, indicated by its ID. */\n channel?: string, \n/** Filter files created after this timestamp (inclusive). */\n ts_from?: number, \n/** Filter files created before this timestamp (inclusive). */\n ts_to?: number, \n/** Filter files by type ([see below](#file_types)). You can pass multiple values in the types argument, like `types=spaces,snippets`.The default value is `all`, which does not filter the list. */\n types?: string,  count?: string,  page?: string, \n/** Show truncated file info for files hidden due to being too old, and the team who owns the file being over the file limit. */\n show_files_hidden_by_limit?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `files:read` */\n token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.user": {
        "rendered": "\n/** Filter files created by a single user. */\n user?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.channel": {
        "rendered": "\n/** Filter files appearing in a specific channel, indicated by its ID. */\n channel?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ts_from": {
        "rendered": "\n/** Filter files created after this timestamp (inclusive). */\n ts_from?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ts_to": {
        "rendered": "\n/** Filter files created before this timestamp (inclusive). */\n ts_to?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.types": {
        "rendered": "\n/** Filter files by type ([see below](#file_types)). You can pass multiple values in the types argument, like `types=spaces,snippets`.The default value is `all`, which does not filter the list. */\n types?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.count": {
        "rendered": " count?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": " page?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.show_files_hidden_by_limit": {
        "rendered": "\n/** Show truncated file info for files hidden due to being too old, and the team who owns the file being over the file limit. */\n show_files_hidden_by_limit?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n  /**\n   * @minItems 0\n   * @uniqueItems true\n   */\n    files: (ObjsFile)[],\n    ok: DefsOkTrue,\n    paging: ObjsPaging,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/files.remote.add": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Creator defined GUID for the file. */\n    external_id?: string,\n  /** URL of the remote file. */\n    external_url?: string,\n  /** type of file */\n    filetype?: string,\n  /** A text file (txt, pdf, doc, etc.) containing textual search terms that are used to improve discovery of the remote file. */\n    indexable_file_contents?: string,\n  /** Preview of the document via `multipart/form-data`. */\n    preview_image?: string,\n  /** Title of the file being shared. */\n    title?: string,\n  /** Authentication token. Requires scope: `remote_files:write` */\n    token?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/files.remote.info": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `remote_files:read` */\n token?: string, \n/** Specify a file by providing its ID. */\n file?: string, \n/** Creator defined GUID for the file. */\n external_id?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `remote_files:read` */\n token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.file": {
        "rendered": "\n/** Specify a file by providing its ID. */\n file?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.external_id": {
        "rendered": "\n/** Creator defined GUID for the file. */\n external_id?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/files.remote.list": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `remote_files:read` */\n token?: string, \n/** Filter files appearing in a specific channel, indicated by its ID. */\n channel?: string, \n/** Filter files created after this timestamp (inclusive). */\n ts_from?: number, \n/** Filter files created before this timestamp (inclusive). */\n ts_to?: number, \n/** The maximum number of items to return. */\n limit?: number, \n/** Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail. */\n cursor?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `remote_files:read` */\n token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.channel": {
        "rendered": "\n/** Filter files appearing in a specific channel, indicated by its ID. */\n channel?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ts_from": {
        "rendered": "\n/** Filter files created after this timestamp (inclusive). */\n ts_from?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ts_to": {
        "rendered": "\n/** Filter files created before this timestamp (inclusive). */\n ts_to?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** The maximum number of items to return. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cursor": {
        "rendered": "\n/** Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail. */\n cursor?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/files.remote.remove": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Creator defined GUID for the file. */\n    external_id?: string,\n  /** Specify a file by providing its ID. */\n    file?: string,\n  /** Authentication token. Requires scope: `remote_files:write` */\n    token?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/files.remote.share": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `remote_files:share` */\n token?: string, \n/** Specify a file registered with Slack by providing its ID. Either this field or `external_id` or both are required. */\n file?: string, \n/** The globally unique identifier (GUID) for the file, as set by the app registering the file with Slack.  Either this field or `file` or both are required. */\n external_id?: string, \n/** Comma-separated list of channel IDs where the file will be shared. */\n channels?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `remote_files:share` */\n token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.file": {
        "rendered": "\n/** Specify a file registered with Slack by providing its ID. Either this field or `external_id` or both are required. */\n file?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.external_id": {
        "rendered": "\n/** The globally unique identifier (GUID) for the file, as set by the app registering the file with Slack.  Either this field or `file` or both are required. */\n external_id?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.channels": {
        "rendered": "\n/** Comma-separated list of channel IDs where the file will be shared. */\n channels?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/files.remote.update": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Creator defined GUID for the file. */\n    external_id?: string,\n  /** URL of the remote file. */\n    external_url?: string,\n  /** Specify a file by providing its ID. */\n    file?: string,\n  /** type of file */\n    filetype?: string,\n  /** File containing contents that can be used to improve searchability for the remote file. */\n    indexable_file_contents?: string,\n  /** Preview of the document via `multipart/form-data`. */\n    preview_image?: string,\n  /** Title of the file being shared. */\n    title?: string,\n  /** Authentication token. Requires scope: `remote_files:write` */\n    token?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/files.revokePublicURL": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** File to revoke */\n    file?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    file: ObjsFile,\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/files.sharedPublicURL": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** File to share */\n    file?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    file: ObjsFile,\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/files.upload": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Comma-separated list of channel names or IDs where the file will be shared. */\n    channels?: string,\n  /** File contents via a POST variable. If omitting this parameter, you must provide a `file`. */\n    content?: string,\n  /** File contents via `multipart/form-data`. If omitting this parameter, you must submit `content`. */\n    file?: string,\n  /** Filename of file. */\n    filename?: string,\n  /** A [file type](/types/file#file_types) identifier. */\n    filetype?: string,\n  /** The message text introducing the file in specified `channels`. */\n    initial_comment?: string,\n  /** Provide another message's `ts` value to upload this file as a reply. Never use a reply's `ts` value; use its parent instead. */\n    thread_ts?: number,\n  /** Title of file. */\n    title?: string,\n  /** Authentication token. Requires scope: `files:write:user` */\n    token?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    file: ObjsFile,\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/migration.exchange": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `tokens.basic` */\n token: string, \n/** A comma-separated list of user ids, up to 400 per request */\n users: string, \n/** Specify team_id starts with `T` in case of Org Token */\n team_id?: string, \n/** Specify `true` to convert `W` global user IDs to workspace-specific `U` IDs. Defaults to `false`. */\n to_old?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `tokens.basic` */\n token: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.users": {
        "rendered": "\n/** A comma-separated list of user ids, up to 400 per request */\n users: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.team_id": {
        "rendered": "\n/** Specify team_id starts with `T` in case of Org Token */\n team_id?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.to_old": {
        "rendered": "\n/** Specify `true` to convert `W` global user IDs to workspace-specific `U` IDs. Defaults to `false`. */\n to_old?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** The enterprise grid organization ID containing the workspace/team. */\n    enterprise_id: string,\n  /** A list of User IDs that cannot be mapped or found */\n    invalid_user_ids?: (string)[],\n    ok: DefsOkTrue,\n    team_id: DefsTeam,\n  /** A mapping of provided user IDs with mapped user IDs */\n    user_id_map?: hasuraSdk.JSONValue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/oauth.access": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Issued when you created your application. */\n client_id?: string, \n/** Issued when you created your application. */\n client_secret?: string, \n/** The `code` param returned via the OAuth callback. */\n code?: string, \n/** This must match the originally submitted URI (if one was sent). */\n redirect_uri?: string, \n/** Request the user to add your app only to a single channel. Only valid with a [legacy workspace app](https://api.slack.com/legacy-workspace-apps). */\n single_channel?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.client_id": {
        "rendered": "\n/** Issued when you created your application. */\n client_id?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.client_secret": {
        "rendered": "\n/** Issued when you created your application. */\n client_secret?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.code": {
        "rendered": "\n/** The `code` param returned via the OAuth callback. */\n code?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.redirect_uri": {
        "rendered": "\n/** This must match the originally submitted URI (if one was sent). */\n redirect_uri?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.single_channel": {
        "rendered": "\n/** Request the user to add your app only to a single channel. Only valid with a [legacy workspace app](https://api.slack.com/legacy-workspace-apps). */\n single_channel?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/oauth.token": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Issued when you created your application. */\n client_id?: string, \n/** Issued when you created your application. */\n client_secret?: string, \n/** The `code` param returned via the OAuth callback. */\n code?: string, \n/** This must match the originally submitted URI (if one was sent). */\n redirect_uri?: string, \n/** Request the user to add your app only to a single channel. */\n single_channel?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.client_id": {
        "rendered": "\n/** Issued when you created your application. */\n client_id?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.client_secret": {
        "rendered": "\n/** Issued when you created your application. */\n client_secret?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.code": {
        "rendered": "\n/** The `code` param returned via the OAuth callback. */\n code?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.redirect_uri": {
        "rendered": "\n/** This must match the originally submitted URI (if one was sent). */\n redirect_uri?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.single_channel": {
        "rendered": "\n/** Request the user to add your app only to a single channel. */\n single_channel?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/oauth.v2.access": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Issued when you created your application. */\n client_id?: string, \n/** Issued when you created your application. */\n client_secret?: string, \n/** The `code` param returned via the OAuth callback. */\n code: string, \n/** This must match the originally submitted URI (if one was sent). */\n redirect_uri?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.client_id": {
        "rendered": "\n/** Issued when you created your application. */\n client_id?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.client_secret": {
        "rendered": "\n/** Issued when you created your application. */\n client_secret?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.code": {
        "rendered": "\n/** The `code` param returned via the OAuth callback. */\n code: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.redirect_uri": {
        "rendered": "\n/** This must match the originally submitted URI (if one was sent). */\n redirect_uri?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/pins.add": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Channel to pin the item in. */\n    channel: string,\n  /** Timestamp of the message to pin. */\n    timestamp?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/pins.list": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `pins:read` */\n token: string, \n/** Channel to get pinned items for. */\n channel: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `pins:read` */\n token: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.channel": {
        "rendered": "\n/** Channel to get pinned items for. */\n channel: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(({\n  /** @uniqueItems true */\n    items: (({\n    created?: number,\n    created_by?: DefsUserId,\n    file?: ObjsFile,\n    type?: \"file\",\n\n} | {\n    channel?: DefsChannel,\n    created?: number,\n    created_by?: DefsUserId,\n    message?: ObjsMessage,\n    type?: \"message\",\n\n}))[],\n    ok: DefsOkTrue,\n\n} | {\n    count: number,\n    ok: DefsOkTrue,\n\n}))[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/pins.remove": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Channel where the item is pinned to. */\n    channel: string,\n  /** Timestamp of the message to un-pin. */\n    timestamp?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/reactions.add": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Channel where the message to add reaction to was posted. */\n    channel: string,\n  /** Reaction (emoji) name. */\n    name: string,\n  /** Timestamp of the message to add reaction to. */\n    timestamp: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/reactions.get": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `reactions:read` */\n token: string, \n/** Channel where the message to get reactions for was posted. */\n channel?: string, \n/** File to get reactions for. */\n file?: string, \n/** File comment to get reactions for. */\n file_comment?: string, \n/** If true always return the complete reaction list. */\n full?: boolean, \n/** Timestamp of the message to get reactions for. */\n timestamp?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `reactions:read` */\n token: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.channel": {
        "rendered": "\n/** Channel where the message to get reactions for was posted. */\n channel?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.file": {
        "rendered": "\n/** File to get reactions for. */\n file?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.file_comment": {
        "rendered": "\n/** File comment to get reactions for. */\n file_comment?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.full": {
        "rendered": "\n/** If true always return the complete reaction list. */\n full?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.timestamp": {
        "rendered": "\n/** Timestamp of the message to get reactions for. */\n timestamp?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "DefsPinnedInfo",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/reactions.list": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `reactions:read` */\n token: string, \n/** Show reactions made by this user. Defaults to the authed user. */\n user?: string, \n/** If true always return the complete reaction list. */\n full?: boolean,  count?: number,  page?: number, \n/** Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more details. */\n cursor?: string, \n/** The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. */\n limit?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `reactions:read` */\n token: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.user": {
        "rendered": "\n/** Show reactions made by this user. Defaults to the authed user. */\n user?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.full": {
        "rendered": "\n/** If true always return the complete reaction list. */\n full?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.count": {
        "rendered": " count?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": " page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cursor": {
        "rendered": "\n/** Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more details. */\n cursor?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    items: ((({\n    channel: DefsChannel,\n    message: ObjsMessage,\n    type: \"message\",\n\n} | {\n    file: ObjsFile,\n    type: \"file\",\n\n} | {\n    comment: ObjsComment,\n    file: ObjsFile,\n    type: \"file_comment\",\n\n}))[])[],\n    ok: DefsOkTrue,\n    paging?: ObjsPaging,\n    response_metadata?: ObjsResponseMetadata,\n\n}",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/reactions.remove": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Channel where the message to remove reaction from was posted. */\n    channel?: string,\n  /** File to remove reaction from. */\n    file?: string,\n  /** File comment to remove reaction from. */\n    file_comment?: string,\n  /** Reaction (emoji) name. */\n    name: string,\n  /** Timestamp of the message to remove reaction from. */\n    timestamp?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/reminders.add": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The content of the reminder */\n    text: string,\n  /** When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within 24 hours), or a natural language description (Ex. \"in 15 minutes,\" or \"every Thursday\") */\n    time: string,\n  /** The user who will receive the reminder. If no user is specified, the reminder will go to user who created it. */\n    user?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    reminder: ObjsReminder,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/reminders.complete": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The ID of the reminder to be marked as complete */\n    reminder?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/reminders.delete": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** The ID of the reminder */\n    reminder?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/reminders.info": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `reminders:read` */\n token?: string, \n/** The ID of the reminder */\n reminder?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `reminders:read` */\n token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.reminder": {
        "rendered": "\n/** The ID of the reminder */\n reminder?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    reminder: ObjsReminder,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/reminders.list": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `reminders:read` */\n token?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `reminders:read` */\n token?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    reminders: (ObjsReminder)[],\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/rtm.connect": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `rtm:stream` */\n token: string, \n/** Batch presence deliveries via subscription. Enabling changes the shape of `presence_change` events. See [batch presence](/docs/presence-and-status#batching). */\n batch_presence_aware?: boolean, \n/** Only deliver presence events when requested by subscription. See [presence subscriptions](/docs/presence-and-status#subscriptions). */\n presence_sub?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `rtm:stream` */\n token: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.batch_presence_aware": {
        "rendered": "\n/** Batch presence deliveries via subscription. Enabling changes the shape of `presence_change` events. See [batch presence](/docs/presence-and-status#batching). */\n batch_presence_aware?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.presence_sub": {
        "rendered": "\n/** Only deliver presence events when requested by subscription. See [presence subscriptions](/docs/presence-and-status#subscriptions). */\n presence_sub?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    self: {\n    id: DefsUserId,\n    name: string,\n\n},\n    team: {\n    domain: string,\n    id: DefsTeam,\n    name: string,\n\n},\n  /** @format uri */\n    url: string,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/search.messages": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `search:read` */\n token: string, \n/** Pass the number of results you want per \"page\". Maximum of `100`. */\n count?: number, \n/** Pass a value of `true` to enable query highlight markers (see below). */\n highlight?: boolean,  page?: number, \n/** Search query. */\n query: string, \n/** Return matches sorted by either `score` or `timestamp`. */\n sort?: string, \n/** Change sort direction to ascending (`asc`) or descending (`desc`). */\n sort_dir?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `search:read` */\n token: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.count": {
        "rendered": "\n/** Pass the number of results you want per \"page\". Maximum of `100`. */\n count?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.highlight": {
        "rendered": "\n/** Pass a value of `true` to enable query highlight markers (see below). */\n highlight?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": " page?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** Search query. */\n query: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** Return matches sorted by either `score` or `timestamp`. */\n sort?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort_dir": {
        "rendered": "\n/** Change sort direction to ascending (`asc`) or descending (`desc`). */\n sort_dir?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/stars.add": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Channel to add star to, or channel where the message to add star to was posted (used with `timestamp`). */\n    channel?: string,\n  /** File to add star to. */\n    file?: string,\n  /** File comment to add star to. */\n    file_comment?: string,\n  /** Timestamp of the message to add star to. */\n    timestamp?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/stars.list": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `stars:read` */\n token?: string,  count?: string,  page?: string, \n/** Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more details. */\n cursor?: string, \n/** The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. */\n limit?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `stars:read` */\n token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.count": {
        "rendered": " count?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": " page?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cursor": {
        "rendered": "\n/** Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more details. */\n cursor?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    items: ((({\n    channel: DefsChannel,\n    date_create: number,\n    message: ObjsMessage,\n    type: \"message\",\n\n} | {\n    date_create: number,\n    file: ObjsFile,\n    type: \"file\",\n\n} | {\n    comment: ObjsComment,\n    date_create: number,\n    file: ObjsFile,\n    type: \"file_comment\",\n\n} | {\n    channel: DefsChannel,\n    date_create: number,\n    type: \"channel\",\n\n} | {\n    channel: DefsDmId,\n    date_create: number,\n    type: \"im\",\n\n} | {\n    channel: DefsGroupId,\n    date_create: number,\n    type: \"group\",\n\n}))[])[],\n    ok: DefsOkTrue,\n    paging?: ObjsPaging,\n\n}",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/stars.remove": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Channel to remove star from, or channel where the message to remove star from was posted (used with `timestamp`). */\n    channel?: string,\n  /** File to remove star from. */\n    file?: string,\n  /** File comment to remove star from. */\n    file_comment?: string,\n  /** Timestamp of the message to remove star from. */\n    timestamp?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/team.accessLogs": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `admin` */\n token: string, \n/** End of time range of logs to include in results (inclusive). */\n before?: string,  count?: string,  page?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `admin` */\n token: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.before": {
        "rendered": "\n/** End of time range of logs to include in results (inclusive). */\n before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.count": {
        "rendered": " count?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": " page?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n  /**\n   * @minItems 1\n   * @uniqueItems true\n   */\n    logins: ({\n    count: number,\n    country: string | null,\n    date_first: number,\n    date_last: number,\n    ip: string | null,\n    isp: string | null,\n    region: string | null,\n    user_agent: string,\n    user_id: DefsUserId,\n    username: string,\n\n})[],\n    ok: DefsOkTrue,\n    paging: ObjsPaging,\n\n}",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/team.billableInfo": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `admin` */\n token: string, \n/** A user to retrieve the billable information for. Defaults to all users. */\n user?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `admin` */\n token: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.user": {
        "rendered": "\n/** A user to retrieve the billable information for. Defaults to all users. */\n user?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/team.info": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `team:read` */\n token: string, \n/** Team to get info on, if omitted, will return information about the current team. Will only return team that the authenticated token is allowed to see through external shared channels */\n team?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `team:read` */\n token: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.team": {
        "rendered": "\n/** Team to get info on, if omitted, will return information about the current team. Will only return team that the authenticated token is allowed to see through external shared channels */\n team?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    team: ObjsTeam,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/team.integrationLogs": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `admin` */\n token: string, \n/** Filter logs to this Slack app. Defaults to all logs. */\n app_id?: string, \n/** Filter logs with this change type. Defaults to all logs. */\n change_type?: string,  count?: string,  page?: string, \n/** Filter logs to this service. Defaults to all logs. */\n service_id?: string, \n/** Filter logs generated by this user’s actions. Defaults to all logs. */\n user?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `admin` */\n token: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.app_id": {
        "rendered": "\n/** Filter logs to this Slack app. Defaults to all logs. */\n app_id?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.change_type": {
        "rendered": "\n/** Filter logs with this change type. Defaults to all logs. */\n change_type?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.count": {
        "rendered": " count?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": " page?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.service_id": {
        "rendered": "\n/** Filter logs to this service. Defaults to all logs. */\n service_id?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.user": {
        "rendered": "\n/** Filter logs generated by this user’s actions. Defaults to all logs. */\n user?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n  /**\n   * @minItems 1\n   * @uniqueItems true\n   */\n    logs: ({\n    admin_app_id?: DefsAppId,\n    app_id: DefsAppId,\n    app_type: string,\n    change_type: string,\n    channel?: DefsChannel,\n    date: string,\n    scope: string,\n    service_id?: string,\n    service_type?: string,\n    user_id: DefsUserId,\n    user_name: string,\n\n})[],\n    ok: DefsOkTrue,\n    paging: ObjsPaging,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/team.profile.get": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `users.profile:read` */\n token: string, \n/** Filter by visibility. */\n visibility?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `users.profile:read` */\n token: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.visibility": {
        "rendered": "\n/** Filter by visibility. */\n visibility?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    profile: {\n  /** @uniqueItems true */\n    fields: (ObjsTeamProfileField)[],\n\n},\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/usergroups.create": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** A comma separated string of encoded channel IDs for which the User Group uses as a default. */\n    channels?: string,\n  /** A short description of the User Group. */\n    description?: string,\n  /** A mention handle. Must be unique among channels, users and User Groups. */\n    handle?: string,\n  /** Include the number of users in each User Group. */\n    include_count?: boolean,\n  /** A name for the User Group. Must be unique among User Groups. */\n    name: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    usergroup: ObjsSubteam,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/usergroups.disable": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Include the number of users in the User Group. */\n    include_count?: boolean,\n  /** The encoded ID of the User Group to disable. */\n    usergroup: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    usergroup: ObjsSubteam,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/usergroups.enable": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Include the number of users in the User Group. */\n    include_count?: boolean,\n  /** The encoded ID of the User Group to enable. */\n    usergroup: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    usergroup: ObjsSubteam,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/usergroups.list": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Include the list of users for each User Group. */\n include_users?: boolean, \n/** Authentication token. Requires scope: `usergroups:read` */\n token: string, \n/** Include the number of users in each User Group. */\n include_count?: boolean, \n/** Include disabled User Groups. */\n include_disabled?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.include_users": {
        "rendered": "\n/** Include the list of users for each User Group. */\n include_users?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `usergroups:read` */\n token: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.include_count": {
        "rendered": "\n/** Include the number of users in each User Group. */\n include_count?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.include_disabled": {
        "rendered": "\n/** Include disabled User Groups. */\n include_disabled?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    usergroups: (ObjsSubteam)[],\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/usergroups.update": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** A comma separated string of encoded channel IDs for which the User Group uses as a default. */\n    channels?: string,\n  /** A short description of the User Group. */\n    description?: string,\n  /** A mention handle. Must be unique among channels, users and User Groups. */\n    handle?: string,\n  /** Include the number of users in the User Group. */\n    include_count?: boolean,\n  /** A name for the User Group. Must be unique among User Groups. */\n    name?: string,\n  /** The encoded ID of the User Group to update. */\n    usergroup: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    usergroup: ObjsSubteam,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/usergroups.users.list": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `usergroups:read` */\n token: string, \n/** Allow results that involve disabled User Groups. */\n include_disabled?: boolean, \n/** The encoded ID of the User Group to update. */\n usergroup: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `usergroups:read` */\n token: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.include_disabled": {
        "rendered": "\n/** Allow results that involve disabled User Groups. */\n include_disabled?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.usergroup": {
        "rendered": "\n/** The encoded ID of the User Group to update. */\n usergroup: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    users: (DefsUserId)[],\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/usergroups.users.update": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Include the number of users in the User Group. */\n    include_count?: boolean,\n  /** The encoded ID of the User Group to update. */\n    usergroup: string,\n  /** A comma separated string of encoded user IDs that represent the entire list of users for the User Group. */\n    users: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    usergroup: ObjsSubteam,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users.conversations": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `conversations:read` */\n token?: string, \n/** Browse conversations by a specific user ID's membership. Non-public channels are restricted to those where the calling user shares membership. */\n user?: string, \n/** Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im` */\n types?: string, \n/** Set to `true` to exclude archived channels from the list */\n exclude_archived?: boolean, \n/** The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. Must be an integer no larger than 1000. */\n limit?: number, \n/** Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail. */\n cursor?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `conversations:read` */\n token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.user": {
        "rendered": "\n/** Browse conversations by a specific user ID's membership. Non-public channels are restricted to those where the calling user shares membership. */\n user?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.types": {
        "rendered": "\n/** Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im` */\n types?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.exclude_archived": {
        "rendered": "\n/** Set to `true` to exclude archived channels from the list */\n exclude_archived?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. Must be an integer no larger than 1000. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cursor": {
        "rendered": "\n/** Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail. */\n cursor?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** @uniqueItems true */\n    channels: (ObjsConversation)[],\n    ok: DefsOkTrue,\n    response_metadata?: {\n    next_cursor: string,\n\n},\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/users.deletePhoto": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Authentication token. Requires scope: `users.profile:write` */\n    token: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users.getPresence": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `users:read` */\n token: string, \n/** User to get presence info on. Defaults to the authed user. */\n user?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `users:read` */\n token: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.user": {
        "rendered": "\n/** User to get presence info on. Defaults to the authed user. */\n user?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    auto_away?: boolean,\n    connection_count?: number,\n    last_activity?: number,\n    manual_away?: boolean,\n    ok: DefsOkTrue,\n    online?: boolean,\n    presence: string,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users.identity": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `identity.basic` */\n token?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `identity.basic` */\n token?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "(({\n    ok: DefsOkTrue,\n    team: {\n    id: DefsTeam,\n\n},\n    user: {\n    id: DefsUserId,\n    name: string,\n\n},\n\n} | {\n    ok: DefsOkTrue,\n    team: {\n    id: DefsTeam,\n\n},\n    user: {\n  /** @format email */\n    email: string,\n    id: DefsUserId,\n    name: string,\n\n},\n\n} | {\n    ok: DefsOkTrue,\n    team: {\n    id: DefsTeam,\n\n},\n    user: {\n    id: DefsUserId,\n  /** @format url */\n    \"image_192\": string,\n  /** @format url */\n    \"image_24\": string,\n  /** @format url */\n    \"image_32\": string,\n  /** @format url */\n    \"image_48\": string,\n  /** @format url */\n    \"image_512\": string,\n  /** @format url */\n    \"image_72\": string,\n    name: string,\n\n},\n\n} | {\n    ok: DefsOkTrue,\n    team: {\n    domain: string,\n    id: DefsTeam,\n  /** @format url */\n    \"image_102\": string,\n  /** @format url */\n    \"image_132\": string,\n  /** @format url */\n    \"image_230\": string,\n  /** @format url */\n    \"image_34\": string,\n  /** @format url */\n    \"image_44\": string,\n  /** @format url */\n    \"image_68\": string,\n  /** @format url */\n    \"image_88\": string,\n    image_default: boolean,\n    name: string,\n\n},\n    user: {\n    id: DefsUserId,\n    name: string,\n\n},\n\n}))[]",
        "requiresRelaxedTypeAnnotation": true
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users.info": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `users:read` */\n token: string, \n/** Set this to `true` to receive the locale for this user. Defaults to `false` */\n include_locale?: boolean, \n/** User to get info on */\n user?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `users:read` */\n token: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.include_locale": {
        "rendered": "\n/** Set this to `true` to receive the locale for this user. Defaults to `false` */\n include_locale?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.user": {
        "rendered": "\n/** User to get info on */\n user?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    user: ObjsUser,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users.list": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `users:read` */\n token?: string, \n/** The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached. Providing no `limit` value will result in Slack attempting to deliver you the entire result set. If the collection is too large you may experience `limit_required` or HTTP 500 errors. */\n limit?: number, \n/** Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail. */\n cursor?: string, \n/** Set this to `true` to receive the locale for users. Defaults to `false` */\n include_locale?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `users:read` */\n token?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached. Providing no `limit` value will result in Slack attempting to deliver you the entire result set. If the collection is too large you may experience `limit_required` or HTTP 500 errors. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cursor": {
        "rendered": "\n/** Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail. */\n cursor?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.include_locale": {
        "rendered": "\n/** Set this to `true` to receive the locale for users. Defaults to `false` */\n include_locale?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    cache_ts: number,\n  /**\n   * @minItems 1\n   * @uniqueItems true\n   */\n    members: (ObjsUser)[],\n    ok: DefsOkTrue,\n    response_metadata?: ObjsResponseMetadata,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users.lookupByEmail": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `users:read.email` */\n token: string, \n/** An email address belonging to a user in the workspace */\n email: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `users:read.email` */\n token: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.email": {
        "rendered": "\n/** An email address belonging to a user in the workspace */\n email: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    user: ObjsUser,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/users.profile.get": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Authentication token. Requires scope: `users.profile:read` */\n token: string, \n/** Include labels for each ID in custom profile fields */\n include_labels?: boolean, \n/** User to retrieve profile info for */\n user?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.token": {
        "rendered": "\n/** Authentication token. Requires scope: `users.profile:read` */\n token: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.include_labels": {
        "rendered": "\n/** Include labels for each ID in custom profile fields */\n include_labels?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.user": {
        "rendered": "\n/** User to retrieve profile info for */\n user?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    profile: ObjsUserProfile,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/users.profile.set": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Name of a single key to set. Usable only if `profile` is not passed. */\n    name?: string,\n  /** Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is limited to 255 characters. */\n    profile?: string,\n  /** ID of user to change. This argument may only be specified by team admins on paid teams. */\n    user?: string,\n  /** Value to set a single key to. Usable only if `profile` is not passed. */\n    value?: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n  /** @format email */\n    email_pending?: string,\n    ok: DefsOkTrue,\n    profile: ObjsUserProfile,\n    username: string,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/users.setActive": {
    "query": {},
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/users.setPhoto": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Width/height of crop box (always square) */\n    crop_w?: string,\n  /** X coordinate of top-left corner of crop box */\n    crop_x?: string,\n  /** Y coordinate of top-left corner of crop box */\n    crop_y?: string,\n  /** File contents via `multipart/form-data`. */\n    image?: string,\n  /** Authentication token. Requires scope: `users.profile:write` */\n    token: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    profile: {\n  /** @pattern ^[0-9a-f]{12}$ */\n    avatar_hash: string,\n  /** @format uri */\n    \"image_1024\": string,\n  /** @format uri */\n    \"image_192\": string,\n  /** @format uri */\n    \"image_24\": string,\n  /** @format uri */\n    \"image_32\": string,\n  /** @format uri */\n    \"image_48\": string,\n  /** @format uri */\n    \"image_512\": string,\n  /** @format uri */\n    \"image_72\": string,\n  /** @format uri */\n    image_original: string,\n\n},\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "post__/users.setPresence": {
    "query": {},
    "body": {
      ".data": {
        "rendered": "\n/** Request body */\n data: {\n  /** Either `auto` or `away` */\n    presence: string,\n\n},",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".data.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/views.open": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Exchange a trigger to post to the user. */\n trigger_id: string, \n/** A [view payload](/reference/surfaces/views). This must be a JSON-encoded string. */\n view: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.trigger_id": {
        "rendered": "\n/** Exchange a trigger to post to the user. */\n trigger_id: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.view": {
        "rendered": "\n/** A [view payload](/reference/surfaces/views). This must be a JSON-encoded string. */\n view: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/views.publish": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** `id` of the user you want publish a view to. */\n user_id: string, \n/** A [view payload](/reference/surfaces/views). This must be a JSON-encoded string. */\n view: string, \n/** A string that represents view state to protect against possible race conditions. */\n hash?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.user_id": {
        "rendered": "\n/** `id` of the user you want publish a view to. */\n user_id: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.view": {
        "rendered": "\n/** A [view payload](/reference/surfaces/views). This must be a JSON-encoded string. */\n view: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.hash": {
        "rendered": "\n/** A string that represents view state to protect against possible race conditions. */\n hash?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/views.push": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Exchange a trigger to post to the user. */\n trigger_id: string, \n/** A [view payload](/reference/surfaces/views). This must be a JSON-encoded string. */\n view: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.trigger_id": {
        "rendered": "\n/** Exchange a trigger to post to the user. */\n trigger_id: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.view": {
        "rendered": "\n/** A [view payload](/reference/surfaces/views). This must be a JSON-encoded string. */\n view: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/views.update": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A unique identifier of the view to be updated. Either `view_id` or `external_id` is required. */\n view_id?: string, \n/** A unique identifier of the view set by the developer. Must be unique for all views on a team. Max length of 255 characters. Either `view_id` or `external_id` is required. */\n external_id?: string, \n/** A [view object](/reference/surfaces/views). This must be a JSON-encoded string. */\n view?: string, \n/** A string that represents view state to protect against possible race conditions. */\n hash?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.view_id": {
        "rendered": "\n/** A unique identifier of the view to be updated. Either `view_id` or `external_id` is required. */\n view_id?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.external_id": {
        "rendered": "\n/** A unique identifier of the view set by the developer. Must be unique for all views on a team. Max length of 255 characters. Either `view_id` or `external_id` is required. */\n external_id?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.view": {
        "rendered": "\n/** A [view object](/reference/surfaces/views). This must be a JSON-encoded string. */\n view?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.hash": {
        "rendered": "\n/** A string that represents view state to protect against possible race conditions. */\n hash?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/workflows.stepCompleted": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Context identifier that maps to the correct workflow step execution. */\n workflow_step_execute_id: string, \n/** Key-value object of outputs from your step. Keys of this object reflect the configured `key` properties of your [`outputs`](/reference/workflows/workflow_step#output) array from your `workflow_step` object. */\n outputs?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.workflow_step_execute_id": {
        "rendered": "\n/** Context identifier that maps to the correct workflow step execution. */\n workflow_step_execute_id: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.outputs": {
        "rendered": "\n/** Key-value object of outputs from your step. Keys of this object reflect the configured `key` properties of your [`outputs`](/reference/workflows/workflow_step#output) array from your `workflow_step` object. */\n outputs?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/workflows.stepFailed": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Context identifier that maps to the correct workflow step execution. */\n workflow_step_execute_id: string, \n/** A JSON-based object with a `message` property that should contain a human readable error message. */\n error: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.workflow_step_execute_id": {
        "rendered": "\n/** Context identifier that maps to the correct workflow step execution. */\n workflow_step_execute_id: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.error": {
        "rendered": "\n/** A JSON-based object with a `message` property that should contain a human readable error message. */\n error: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  },
  "get__/workflows.updateStep": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A context identifier provided with `view_submission` payloads used to call back to `workflows.updateStep`. */\n workflow_step_edit_id: string, \n/** A JSON key-value map of inputs required from a user during configuration. This is the data your app expects to receive when the workflow step starts. **Please note**: the embedded variable format is set and replaced by the workflow system. You cannot create custom variables that will be replaced at runtime. [Read more about variables in workflow steps here](/workflows/steps#variables). */\n inputs?: string, \n/** An JSON array of output objects used during step execution. This is the data your app agrees to provide when your workflow step was executed. */\n outputs?: string, \n/** An optional field that can be used to override the step name that is shown in the Workflow Builder. */\n step_name?: string, \n/** An optional field that can be used to override app image that is shown in the Workflow Builder. */\n step_image_url?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.workflow_step_edit_id": {
        "rendered": "\n/** A context identifier provided with `view_submission` payloads used to call back to `workflows.updateStep`. */\n workflow_step_edit_id: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.inputs": {
        "rendered": "\n/** A JSON key-value map of inputs required from a user during configuration. This is the data your app expects to receive when the workflow step starts. **Please note**: the embedded variable format is set and replaced by the workflow system. You cannot create custom variables that will be replaced at runtime. [Read more about variables in workflow steps here](/workflows/steps#variables). */\n inputs?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.outputs": {
        "rendered": "\n/** An JSON array of output objects used during step execution. This is the data your app agrees to provide when your workflow step was executed. */\n outputs?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.step_name": {
        "rendered": "\n/** An optional field that can be used to override the step name that is shown in the Workflow Builder. */\n step_name?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.step_image_url": {
        "rendered": "\n/** An optional field that can be used to override app image that is shown in the Workflow Builder. */\n step_image_url?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {
      ".__no_name": {
        "rendered": "{\n    ok: DefsOkTrue,\n    [key: string]: any,\n\n}",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      },
      ".__no_name.__no_name.__no_name": {
        "rendered": "__undefined",
        "requiresRelaxedTypeAnnotation": false
      }
    }
  }
}
