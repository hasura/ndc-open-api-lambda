{
  "get__/aliases/v2": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** An alias type */\n type?: string, \n/** Filter for aliases external IDs */\n externalId?: string, \n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string, \n/** The number of items to return per page. */\n count?: number, \n/** Milliseconds elapsed since 1 January 1970 00:00:00 UTC.\nThe accepted range is from 0 to the current time.\n */\n after?: number, \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.type": {
        "rendered": "\n/** An alias type */\n type?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.externalId": {
        "rendered": "\n/** Filter for aliases external IDs */\n externalId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.count": {
        "rendered": "\n/** The number of items to return per page. */\n count?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.after": {
        "rendered": "\n/** Milliseconds elapsed since 1 January 1970 00:00:00 UTC.\nThe accepted range is from 0 to the current time.\n */\n after?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/aliases/v2/health": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/aliases/v2/trackingId": {
    "query": {
      ".query": {
        "rendered": " query?: { \n/** An alias type */\n type: string, \n/** An external ID. An externalId and type pair uniquely identifies an alias. */\n externalId: string, \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.type": {
        "rendered": "\n/** An alias type */\n type: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.externalId": {
        "rendered": "\n/** An external ID. An externalId and type pair uniquely identifies an alias. */\n externalId: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/aliases/v2/version": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/aliases/v2/{trackingId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/aliases/v2/{trackingId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, \n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string, \n/** The number of items to return per page. */\n count?: number, \n/** An alias type */\n type?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.count": {
        "rendered": "\n/** The number of items to return per page. */\n count?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.type": {
        "rendered": "\n/** An alias type */\n type?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "put__/aliases/v2/{trackingId}/batch": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/aliases/v2/{trackingId}/{type}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/aliases/v2/{trackingId}/{type}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, \n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string, \n/** The number of items to return per page. */\n count?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.count": {
        "rendered": "\n/** The number of items to return per page. */\n count?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/aliases/v2/{trackingId}/{type}/{externalId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "put__/aliases/v2/{trackingId}/{type}/{externalId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "put__/associations/v3/devices/batchUpdate": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/associations/v3/devices/{trackingId}/batchCreate": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/associations/v3/devices/{trackingId}/batchDelete": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/associations/v3/geofences/{geofenceId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string, \n/** The number of items to return per page. */\n count?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.count": {
        "rendered": "\n/** The number of items to return per page. */\n count?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/associations/v3/health": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/associations/v3/rules/{ruleId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string, \n/** The number of items to return per page. */\n count?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.count": {
        "rendered": "\n/** The number of items to return per page. */\n count?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/associations/v3/sensors/{sensorRuleId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string, \n/** The number of items to return per page. */\n count?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.count": {
        "rendered": "\n/** The number of items to return per page. */\n count?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/associations/v3/version": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/associations/v3/{trackingId}/geofences": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, \n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string, \n/** The number of items to return per page. */\n count?: number, \n/** Type of a geofence */\n type?: (\"circle\" | \"polygon\" | \"poi\")[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.count": {
        "rendered": "\n/** The number of items to return per page. */\n count?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.type": {
        "rendered": "\n/** Type of a geofence */\n type?: (\"circle\" | \"polygon\" | \"poi\")[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.type.__no_name": {
        "rendered": "\"circle\" | \"polygon\" | \"poi\"",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/associations/v3/{trackingId}/geofences/{geofenceId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "put__/associations/v3/{trackingId}/geofences/{geofenceId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/associations/v3/{trackingId}/rules": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, \n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string, \n/** The number of items to return per page. */\n count?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.count": {
        "rendered": "\n/** The number of items to return per page. */\n count?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/associations/v3/{trackingId}/rules/{ruleId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "put__/associations/v3/{trackingId}/rules/{ruleId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/associations/v3/{trackingId}/sensors": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, \n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string, \n/** The number of items to return per page. */\n count?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.count": {
        "rendered": "\n/** The number of items to return per page. */\n count?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/associations/v3/{trackingId}/sensors/{sensorRuleId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "put__/associations/v3/{trackingId}/sensors/{sensorRuleId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/bulkjobs/v4/deviceUploads": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string, \n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string, \n/** The number of items to return per page */\n limit?: number, \n/** Type of bulk job (either `create` or `delete`) */\n type?: \"create\" | \"delete\",  },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** The number of items to return per page */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.type": {
        "rendered": "\n/** Type of bulk job (either `create` or `delete`) */\n type?: \"create\" | \"delete\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.status": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/bulkjobs/v4/deviceUploads": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string, \n/** The name of the upload file. */\n fileName?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fileName": {
        "rendered": "\n/** The name of the upload file. */\n fileName?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "patch__/bulkjobs/v4/deviceUploads/{jobId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/bulkjobs/v4/deviceUploads/{jobId}/results": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string, \n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string, \n/** The number of items to return per page */\n limit?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** The number of items to return per page */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/bulkjobs/v4/deviceUploads/{jobId}/status": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/bulkjobs/v4/health": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/bulkjobs/v4/version": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/c2c/v4/callback": {
    "query": {
      ".query": {
        "rendered": " query?: { \n/** API Key */\n apiKey: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.apiKey": {
        "rendered": "\n/** API Key */\n apiKey: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/c2c/v4/connectors": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string, \n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string, \n/** The number of items to return per page */\n limit?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** The number of items to return per page */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/c2c/v4/connectors": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/c2c/v4/connectors/ext-devices/{externalDeviceId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/c2c/v4/connectors/{connectorId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Unclaim and unprovision devices */\n deleteDevices?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.deleteDevices": {
        "rendered": "\n/** Unclaim and unprovision devices */\n deleteDevices?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/c2c/v4/connectors/{connectorId}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "put__/c2c/v4/connectors/{connectorId}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/c2c/v4/connectors/{connectorId}/ext-devices": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string, \n/** The number of items to return per page */\n limit?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** The number of items to return per page */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/c2c/v4/connectors/{connectorId}/ext-devices": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/c2c/v4/connectors/{connectorId}/ext-devices-batch": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/c2c/v4/connectors/{connectorId}/ext-devices/{externalDeviceId}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/c2c/v4/drivers": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string, \n/** The number of items to return per page */\n limit?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** The number of items to return per page */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/c2c/v4/drivers/{driverId}/verify": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/c2c/v4/health": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/c2c/v4/version": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/device-associations/v2/health": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/device-associations/v2/version": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/device-associations/v2/{trackingId}/geofences": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string, \n/** The number of items to return per page. */\n count?: number, \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.count": {
        "rendered": "\n/** The number of items to return per page. */\n count?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/events/v3": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string, \n/** Milliseconds elapsed since 1 January 1970 00:00:00 UTC.\nThe accepted range is from 1 to the current time.\n */\n before?: number, \n/** Milliseconds elapsed since 1 January 1970 00:00:00 UTC.\nThe accepted range is from 0 to the current time.\n */\n after?: number,    \n/** Events with the `initialState` property set as `true` are generated when the rule is \nevaluated for the first time. It indicates the fact that this is the initial evaluation \nstate, which would serve as a starting point for the subsequent rule evaluations.\nThe rest of the rule events would represent a transition of a device or a shipment or \na geofence from one state to another and their `initialState` property will be set to `false`.\n */\n initialState?: boolean, \n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string, \n/** The number of items to return per page. */\n count?: number, \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.before": {
        "rendered": "\n/** Milliseconds elapsed since 1 January 1970 00:00:00 UTC.\nThe accepted range is from 1 to the current time.\n */\n before?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.after": {
        "rendered": "\n/** Milliseconds elapsed since 1 January 1970 00:00:00 UTC.\nThe accepted range is from 0 to the current time.\n */\n after?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.eventSource": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.eventType": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ruleId": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.initialState": {
        "rendered": "\n/** Events with the `initialState` property set as `true` are generated when the rule is \nevaluated for the first time. It indicates the fact that this is the initial evaluation \nstate, which would serve as a starting point for the subsequent rule evaluations.\nThe rest of the rule events would represent a transition of a device or a shipment or \na geofence from one state to another and their `initialState` property will be set to `false`.\n */\n initialState?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.count": {
        "rendered": "\n/** The number of items to return per page. */\n count?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/events/v3/health": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/events/v3/statuses": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,      \n/** If `true`, the results will be limited to shipment event statuses only.\nIf `false`, the results will be limited to device event statuses only.\nIf not specified, the results will include both device and shipments event statuses.\n */\n shipments?: boolean, \n/** Milliseconds elapsed since 1 January 1970 00:00:00 UTC.\nThe accepted range is from 1 to the current time.\n */\n before?: number, \n/** Milliseconds elapsed since 1 January 1970 00:00:00 UTC.\nThe accepted range is from 0 to the current time.\n */\n after?: number, \n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string, \n/** The number of items to return per page. */\n count?: number, \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.eventSource": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.eventType": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.trackingId": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ruleId": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.geofenceId": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.shipments": {
        "rendered": "\n/** If `true`, the results will be limited to shipment event statuses only.\nIf `false`, the results will be limited to device event statuses only.\nIf not specified, the results will include both device and shipments event statuses.\n */\n shipments?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.before": {
        "rendered": "\n/** Milliseconds elapsed since 1 January 1970 00:00:00 UTC.\nThe accepted range is from 1 to the current time.\n */\n before?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.after": {
        "rendered": "\n/** Milliseconds elapsed since 1 January 1970 00:00:00 UTC.\nThe accepted range is from 0 to the current time.\n */\n after?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.count": {
        "rendered": "\n/** The number of items to return per page. */\n count?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/events/v3/statuses/deviceCounts": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string, \n/** Define whether the number of devices and shipments in each event state is calculated per rule ID or per rule type.\n */\n groupBy?: \"ruleId\" | \"eventSource\",     \n/** If `true`, the results will be limited to shipment event statuses only.\nIf `false`, the results will be limited to device event statuses only.\nIf not specified, the results will include both device and shipments event statuses.\n */\n shipments?: boolean, \n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string, \n/** The number of items to return per page. */\n count?: number, \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.groupBy": {
        "rendered": "\n/** Define whether the number of devices and shipments in each event state is calculated per rule ID or per rule type.\n */\n groupBy?: \"ruleId\" | \"eventSource\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.eventSource": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.trackingId": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ruleId": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.geofenceId": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.shipments": {
        "rendered": "\n/** If `true`, the results will be limited to shipment event statuses only.\nIf `false`, the results will be limited to device event statuses only.\nIf not specified, the results will include both device and shipments event statuses.\n */\n shipments?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.count": {
        "rendered": "\n/** The number of items to return per page. */\n count?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/events/v3/version": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/events/v3/{trackingId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Milliseconds elapsed since 1 January 1970 00:00:00 UTC.\nThe accepted range is from 1 to the current time.\n */\n before?: number, \n/** Milliseconds elapsed since 1 January 1970 00:00:00 UTC.\nThe accepted range is from 0 to the current time.\n */\n after?: number,    \n/** Events with the `initialState` property set as `true` are generated when the rule is \nevaluated for the first time. It indicates the fact that this is the initial evaluation \nstate, which would serve as a starting point for the subsequent rule evaluations.\nThe rest of the rule events would represent a transition of a device or a shipment or \na geofence from one state to another and their `initialState` property will be set to `false`.\n */\n initialState?: boolean, \n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string, \n/** The number of items to return per page. */\n count?: number, \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.before": {
        "rendered": "\n/** Milliseconds elapsed since 1 January 1970 00:00:00 UTC.\nThe accepted range is from 1 to the current time.\n */\n before?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.after": {
        "rendered": "\n/** Milliseconds elapsed since 1 January 1970 00:00:00 UTC.\nThe accepted range is from 0 to the current time.\n */\n after?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.eventSource": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.eventType": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ruleId": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.initialState": {
        "rendered": "\n/** Events with the `initialState` property set as `true` are generated when the rule is \nevaluated for the first time. It indicates the fact that this is the initial evaluation \nstate, which would serve as a starting point for the subsequent rule evaluations.\nThe rest of the rule events would represent a transition of a device or a shipment or \na geofence from one state to another and their `initialState` property will be set to `false`.\n */\n initialState?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.count": {
        "rendered": "\n/** The number of items to return per page. */\n count?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/geofence-associations/v2/health": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/geofence-associations/v2/version": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/geofence-associations/v2/{geofenceId}/devices": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string, \n/** The number of items to return per page. */\n count?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.count": {
        "rendered": "\n/** The number of items to return per page. */\n count?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/geofence-associations/v2/{geofenceId}/{trackingId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "put__/geofence-associations/v2/{geofenceId}/{trackingId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/geofences/v2": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/geofences/v2": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string, \n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string, \n/** The number of items to return per page. */\n count?: number,  \n/** Type of a geofence */\n type?: (\"circle\" | \"polygon\" | \"poi\")[], \n/** Limit search to geofences intersecting the given bounding box. */\n bbox?: (number)[], \n/** Field names to filter a result object.\n */\n fields?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.count": {
        "rendered": "\n/** The number of items to return per page. */\n count?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.floor": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.type": {
        "rendered": "\n/** Type of a geofence */\n type?: (\"circle\" | \"polygon\" | \"poi\")[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.type.__no_name": {
        "rendered": "\"circle\" | \"polygon\" | \"poi\"",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.bbox": {
        "rendered": "\n/** Limit search to geofences intersecting the given bounding box. */\n bbox?: (number)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.bbox.__no_name": {
        "rendered": "number",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Field names to filter a result object.\n */\n fields?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/geofences/v2": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/geofences/v2/health": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/geofences/v2/trainingTest": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/geofences/v2/version": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/geofences/v2/{geofenceId}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/geofences/v2/{geofenceId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Field names to filter a result object.\n */\n fields?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Field names to filter a result object.\n */\n fields?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "put__/geofences/v2/{geofenceId}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/geofences/v2/{geofenceId}/poiTraining": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/labels/v4/health": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/labels/v4/version": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/labels/v4/{resourceType}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,  \n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string, \n/** The number of items to return per page */\n limit?: number, \n/** Field names to filter a result object.\n */\n fields?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.labels": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** The number of items to return per page */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Field names to filter a result object.\n */\n fields?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/labels/v4/{resourceType}/keys": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/labels/v4/{resourceType}/keys/{key}/values": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/labels/v4/{resourceType}/{resourceId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/labels/v4/{resourceType}/{resourceId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, \n/** Field names to filter a result object.\n */\n fields?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields": {
        "rendered": "\n/** Field names to filter a result object.\n */\n fields?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.fields.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "put__/labels/v4/{resourceType}/{resourceId}/batch": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/labels/v4/{resourceType}/{resourceId}/{key}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/labels/v4/{resourceType}/{resourceId}/{key}/{value}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "put__/labels/v4/{resourceType}/{resourceId}/{key}/{value}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/largedata/v4": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/largedata/v4/devices/{trackingId}/metadata": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string, \n/** The number of items to return per page */\n limit?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** The number of items to return per page */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/largedata/v4/health": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/largedata/v4/version": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/largedata/v4/{dataId}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/largedata/v4/{dataId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Flag telling if the data upload should be aborted */\n abort?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.abort": {
        "rendered": "\n/** Flag telling if the data upload should be aborted */\n abort?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/largedata/v4/{dataId}/data": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Byte offset to the data to be downloaded (inclusive, starts at zero) */\n offset?: number, \n/** Number of bytes of the data to download */\n count?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.offset": {
        "rendered": "\n/** Byte offset to the data to be downloaded (inclusive, starts at zero) */\n offset?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.count": {
        "rendered": "\n/** Number of bytes of the data to download */\n count?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/largedata/v4/{dataId}/metadata": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/largedata/v4/{dataId}/parts": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string, \n/** The number of items to return per page */\n limit?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** The number of items to return per page */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "put__/largedata/v4/{dataId}/parts/{partNumber}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** MD5 digest of the data (hexadecimal representation) */\n md5?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.md5": {
        "rendered": "\n/** MD5 digest of the data (hexadecimal representation) */\n md5?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/locations/v4": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/locations/v4": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string, \n/** The number of items to return per page */\n limit?: number, \n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string, \n/** Geofence ID */\n geofenceId?: string, \n/** Filter locations by name. Matching is case-insensitive.\nThe following wildcards can be used:\n'*' matches any number of any characters,\n'?' matches any single character.\n */\n name?: string, \n/** Filter locations by street address. Matching is case-insensitive.\nThe following wildcards can be used:\n'*' matches any number of any characters,\n'?' matches any single character.\n */\n street?: string, \n/** Filter locations by city. Matching is case-insensitive.\nThe following wildcards can be used:\n'*' matches any number of any characters,\n'?' matches any single character.\n */\n city?: string, \n/** Filter locations by postal code. Matching is case-insensitive.\nThe following wildcards can be used:\n'*' matches any number of any characters,\n'?' matches any single character.\n */\n postalCode?: string, \n/** Filter locations by state. Matching is case-insensitive.\nThe following wildcards can be used:\n'*' matches any number of any characters,\n'?' matches any single character.\n */\n state?: string, \n/** Filter locations by country. Matching is case-insensitive.\nThe following wildcards can be used:\n'*' matches any number of any characters,\n'?' matches any single character.\n */\n country?: string, \n/** Filter locations by locationId wildcard.\nThe following wildcards can be used:\n'*' matches any number of any characters,\n'?' matches any single character.\n */\n locationId?: string,  \n/** External location id in external cloud */\n externalLocationId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** The number of items to return per page */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.geofenceId": {
        "rendered": "\n/** Geofence ID */\n geofenceId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.name": {
        "rendered": "\n/** Filter locations by name. Matching is case-insensitive.\nThe following wildcards can be used:\n'*' matches any number of any characters,\n'?' matches any single character.\n */\n name?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.street": {
        "rendered": "\n/** Filter locations by street address. Matching is case-insensitive.\nThe following wildcards can be used:\n'*' matches any number of any characters,\n'?' matches any single character.\n */\n street?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.city": {
        "rendered": "\n/** Filter locations by city. Matching is case-insensitive.\nThe following wildcards can be used:\n'*' matches any number of any characters,\n'?' matches any single character.\n */\n city?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.postalCode": {
        "rendered": "\n/** Filter locations by postal code. Matching is case-insensitive.\nThe following wildcards can be used:\n'*' matches any number of any characters,\n'?' matches any single character.\n */\n postalCode?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.state": {
        "rendered": "\n/** Filter locations by state. Matching is case-insensitive.\nThe following wildcards can be used:\n'*' matches any number of any characters,\n'?' matches any single character.\n */\n state?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.country": {
        "rendered": "\n/** Filter locations by country. Matching is case-insensitive.\nThe following wildcards can be used:\n'*' matches any number of any characters,\n'?' matches any single character.\n */\n country?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.locationId": {
        "rendered": "\n/** Filter locations by locationId wildcard.\nThe following wildcards can be used:\n'*' matches any number of any characters,\n'?' matches any single character.\n */\n locationId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": { "rendered": "", "requiresRelaxedTypeAnnotation": false },
      ".query.externalLocationId": {
        "rendered": "\n/** External location id in external cloud */\n externalLocationId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/locations/v4": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/locations/v4/health": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/locations/v4/version": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/locations/v4/{locationId}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/locations/v4/{locationId}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "put__/locations/v4/{locationId}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/metadata/v2/devices/batch": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string, \n/** The number of items to return per page. */\n count?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.count": {
        "rendered": "\n/** The number of items to return per page. */\n count?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/metadata/v2/devices/{trackingId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/metadata/v2/devices/{trackingId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "put__/metadata/v2/devices/{trackingId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/metadata/v2/geofences/batch": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string, \n/** The number of items to return per page. */\n count?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.count": {
        "rendered": "\n/** The number of items to return per page. */\n count?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/metadata/v2/geofences/{geofenceId}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/metadata/v2/geofences/{geofenceId}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "put__/metadata/v2/geofences/{geofenceId}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/metadata/v2/health": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/metadata/v2/sensorRules/batch": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string, \n/** The number of items to return per page. */\n count?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.count": {
        "rendered": "\n/** The number of items to return per page. */\n count?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/metadata/v2/sensorRules/{sensorRuleId}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/metadata/v2/sensorRules/{sensorRuleId}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "put__/metadata/v2/sensorRules/{sensorRuleId}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/metadata/v2/version": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/notifications/v3/health": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/notifications/v3/registration/{channelId}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/notifications/v3/registration/{channelId}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "put__/notifications/v3/registration/{channelId}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/notifications/v3/registrations": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/notifications/v3/registrations": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string, \n/** The number of items to return per page. */\n count?: number, \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string, \n/** Filter result by channelType.\n\nExample: `channelType[]=webhook`, `channelType[]=browserPull,email`\n */\n channelType?: (\"webhook\" | \"email\" | \"browserPull\")[], \n/** The HERE Account ID of a user. */\n userId?: string, \n/** Filters by `emailBounce` property. When set to `true`, returns the email channels which are not active anymore\ndue to email bounce. When set to `false`, returns all the channels which are active (and not only email channels).\n */\n emailBounce?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.count": {
        "rendered": "\n/** The number of items to return per page. */\n count?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.channelType": {
        "rendered": "\n/** Filter result by channelType.\n\nExample: `channelType[]=webhook`, `channelType[]=browserPull,email`\n */\n channelType?: (\"webhook\" | \"email\" | \"browserPull\")[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.channelType.__no_name": {
        "rendered": "\"webhook\" | \"email\" | \"browserPull\"",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.userId": {
        "rendered": "\n/** The HERE Account ID of a user. */\n userId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.emailBounce": {
        "rendered": "\n/** Filters by `emailBounce` property. When set to `true`, returns the email channels which are not active anymore\ndue to email bounce. When set to `false`, returns all the channels which are active (and not only email channels).\n */\n emailBounce?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/notifications/v3/registrations": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string, \n/** The HERE Account ID of a user. */\n userId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.userId": {
        "rendered": "\n/** The HERE Account ID of a user. */\n userId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/notifications/v3/version": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/registry/v2/devices/{deviceOrExternalId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/registry/v2/devices/{deviceOrExternalId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "put__/registry/v2/devices/{deviceOrExternalId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/registry/v2/health": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/registry/v2/licenses": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Start of returned block from a list. Default 0. */\n startIndex?: number, \n/** End of returned block from a list. Default 100. */\n endIndex?: number,   },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startIndex": {
        "rendered": "\n/** Start of returned block from a list. Default 0. */\n startIndex?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.endIndex": {
        "rendered": "\n/** End of returned block from a list. Default 100. */\n endIndex?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectIds": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectTypes": {
        "rendered": "",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/registry/v2/version": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/registry/v2/{appId}/devices": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string, \n/** The number of items to return per page. */\n count?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.count": {
        "rendered": "\n/** The number of items to return per page. */\n count?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/registry/v2/{appId}/devices": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** If set to `true`, the licenses are created and devices are immediately claimed by the same user. Supported only with `deviceId` array in body, and not with the `count` parameter. */\n autoclaim?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.autoclaim": {
        "rendered": "\n/** If set to `true`, the licenses are created and devices are immediately claimed by the same user. Supported only with `deviceId` array in body, and not with the `count` parameter. */\n autoclaim?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/registry/v2/{appId}/licenseCount": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/registry/v2/{appId}/one-device": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** If set to `true`, the device license is created and the device is immediately claimed by the same user. */\n autoclaim?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.autoclaim": {
        "rendered": "\n/** If set to `true`, the device license is created and the device is immediately claimed by the same user. */\n autoclaim?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/registry/v2/{jobId}/results": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string, \n/** The number of items to return per page. */\n count?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.count": {
        "rendered": "\n/** The number of items to return per page. */\n count?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/registry/v2/{jobId}/status": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/registry/v2/{trackingId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/registry/v2/{trackingId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/registry/v4/resources/{resourceType}/find": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string, \n/** The number of items to return per page */\n limit?: number, \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** The number of items to return per page */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/reports/v4": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/reports/v4/health": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/reports/v4/version": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/reports/v4/{reportId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string, \n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string, \n/** The number of items to return per page */\n limit?: number, \n/** Defines the report metric to be calculated. \nThe metrics are always calculated over a time period, either over each interval specified \nby the `interval` parameter (for example, over a week) or over the whole time period of the report.\n\n* `duration`: duration of the event\n  * _\"The asset dwelled for 45 hours during week 2. It was in detention for 4 hours.\"_\n* `occurrence`: total number of the event occurrences\n  * _\"During week 3, the asset was in detention 2 times. During the past month it had 7 individual dwelling periods.\"_\n* `day`: the number of days the event lasted\n  * _\"The asset was utilized for 3 days during week 4.\"_\n* `asset`: the number of assets that generated the event\n  * _\"On Monday 5 assets were in detention. On Tuesday 16 assets were in detention.\"_\n */\n measure?: \"duration\" | \"occurrence\" | \"day\" | \"asset\", \n/** Defines an interval, which can be a day, a week or a month, that will be used to group \nthe report results.\n\nWhen the `interval` parameter is provided, the response will be an array of `timestamp`-`value` \npairs where the `timestamp` defines the beginning of the interval and the `value` is the specified \nreport metric's value calculated over the interval time.\n */\n interval?: \"day\" | \"week\" | \"month\", \n/** This is a unique ID associated with the device data in HERE Tracking. For physical devices the `trackingId` gets assigned to a device when the device is claimed by a user, and for virtual devices it is an external device ID along with the device project `appId`. */\n trackingId?: string, \n/** Geofence ID */\n geofenceId?: string, \n/** Defines whether the report metrics, such as cumulative or average, \nare calculated per asset or per geofence.\n\nThe parameter can have a value 'geofence' only with reports created for a dwelling rule.\n\nTo get a report on how many times on average assets were in detention during each time interval,\ncreate a request specifying the following:\n* `reportId`: ID of a report created for a detention rule\n* `groupBy`: 'asset'\n* `method`: 'average'\n* `measure`: 'occurrence'\n\nTo get a report on how long all assets dwelled inside each geofence during the report period,\ncreate a request specifying the following:\n* `reportId`: ID of a report created for a dwelling rule\n* `groupBy`: 'geofence'\n* `measure`: 'duration'\n\nTo get a report on how long each asset dwelled (inside any geofence) during the report period, \ncreate a request specifying the following:\n* `reportId`: ID of a report created for a dwelling rule\n* `groupBy`: 'asset'\n* `measure`: 'duration'\n */\n groupBy?: \"asset\" | \"geofence\", \n/** Defines the calculation method. \nThe parameter `method` can only be provided along with `interval`.\n\nThe parameter value can be `percentage` only when `measure` is 'asset'.\n\nFor example, to get a report on percentage of all assets that were in use during each week,\ncreate a request specifying the following:\n* `reportId`: ID of a report created for a utilization rule\n* `interval`: 'week'\n* `method`: 'percentage'\n* `measure`: 'asset'\n\nWhen `method` is set to 'cumulative' or 'average' and `measure` is set to 'duration' or 'occurrence',\nthe `groupBy` parameter needs to be provided also. \nFor example, to get a report on how long all assets dwelled in total in the specified geofence during\neach week, create a request specifying the following:\n* `reportId`: ID of a report created for a dwelling rule\n* `geofenceId`: ID of a geofence\n* `interval`: 'week'\n* `method`: 'cumulative'\n* `measure`: 'duration'\n* `groupBy`: 'asset'\n\nWhen `method` is set to 'cumulative' or 'average' and `measure` is set to 'day',\nthe `groupBy` parameter is automatically set to 'asset'. \nFor example, to get a report on how many days on average assets were in use during each month, \ncreate a request specifying the following:\n* `reportId`: ID of a report created for a utilization rule\n* `interval`: 'month'\n* `method`: 'average'\n* `measure`: 'day'\n* `groupBy`: 'asset'\n */\n method?: \"average\" | \"cumulative\" | \"percentage\", \n/** Defines how the items are sorted.\n* If `interval` is provided, the default is `sort`=`timestamp:asc`\n* If `interval` is not provided, the default is `sort`=`value:desc`\n */\n sort?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** The number of items to return per page */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.measure": {
        "rendered": "\n/** Defines the report metric to be calculated. \nThe metrics are always calculated over a time period, either over each interval specified \nby the `interval` parameter (for example, over a week) or over the whole time period of the report.\n\n* `duration`: duration of the event\n  * _\"The asset dwelled for 45 hours during week 2. It was in detention for 4 hours.\"_\n* `occurrence`: total number of the event occurrences\n  * _\"During week 3, the asset was in detention 2 times. During the past month it had 7 individual dwelling periods.\"_\n* `day`: the number of days the event lasted\n  * _\"The asset was utilized for 3 days during week 4.\"_\n* `asset`: the number of assets that generated the event\n  * _\"On Monday 5 assets were in detention. On Tuesday 16 assets were in detention.\"_\n */\n measure?: \"duration\" | \"occurrence\" | \"day\" | \"asset\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.interval": {
        "rendered": "\n/** Defines an interval, which can be a day, a week or a month, that will be used to group \nthe report results.\n\nWhen the `interval` parameter is provided, the response will be an array of `timestamp`-`value` \npairs where the `timestamp` defines the beginning of the interval and the `value` is the specified \nreport metric's value calculated over the interval time.\n */\n interval?: \"day\" | \"week\" | \"month\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.trackingId": {
        "rendered": "\n/** This is a unique ID associated with the device data in HERE Tracking. For physical devices the `trackingId` gets assigned to a device when the device is claimed by a user, and for virtual devices it is an external device ID along with the device project `appId`. */\n trackingId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.geofenceId": {
        "rendered": "\n/** Geofence ID */\n geofenceId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.groupBy": {
        "rendered": "\n/** Defines whether the report metrics, such as cumulative or average, \nare calculated per asset or per geofence.\n\nThe parameter can have a value 'geofence' only with reports created for a dwelling rule.\n\nTo get a report on how many times on average assets were in detention during each time interval,\ncreate a request specifying the following:\n* `reportId`: ID of a report created for a detention rule\n* `groupBy`: 'asset'\n* `method`: 'average'\n* `measure`: 'occurrence'\n\nTo get a report on how long all assets dwelled inside each geofence during the report period,\ncreate a request specifying the following:\n* `reportId`: ID of a report created for a dwelling rule\n* `groupBy`: 'geofence'\n* `measure`: 'duration'\n\nTo get a report on how long each asset dwelled (inside any geofence) during the report period, \ncreate a request specifying the following:\n* `reportId`: ID of a report created for a dwelling rule\n* `groupBy`: 'asset'\n* `measure`: 'duration'\n */\n groupBy?: \"asset\" | \"geofence\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.method": {
        "rendered": "\n/** Defines the calculation method. \nThe parameter `method` can only be provided along with `interval`.\n\nThe parameter value can be `percentage` only when `measure` is 'asset'.\n\nFor example, to get a report on percentage of all assets that were in use during each week,\ncreate a request specifying the following:\n* `reportId`: ID of a report created for a utilization rule\n* `interval`: 'week'\n* `method`: 'percentage'\n* `measure`: 'asset'\n\nWhen `method` is set to 'cumulative' or 'average' and `measure` is set to 'duration' or 'occurrence',\nthe `groupBy` parameter needs to be provided also. \nFor example, to get a report on how long all assets dwelled in total in the specified geofence during\neach week, create a request specifying the following:\n* `reportId`: ID of a report created for a dwelling rule\n* `geofenceId`: ID of a geofence\n* `interval`: 'week'\n* `method`: 'cumulative'\n* `measure`: 'duration'\n* `groupBy`: 'asset'\n\nWhen `method` is set to 'cumulative' or 'average' and `measure` is set to 'day',\nthe `groupBy` parameter is automatically set to 'asset'. \nFor example, to get a report on how many days on average assets were in use during each month, \ncreate a request specifying the following:\n* `reportId`: ID of a report created for a utilization rule\n* `interval`: 'month'\n* `method`: 'average'\n* `measure`: 'day'\n* `groupBy`: 'asset'\n */\n method?: \"average\" | \"cumulative\" | \"percentage\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** Defines how the items are sorted.\n* If `interval` is provided, the default is `sort`=`timestamp:asc`\n* If `interval` is not provided, the default is `sort`=`value:desc`\n */\n sort?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/rules/v4": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/rules/v4": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string, \n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string, \n/** The number of items to return per page */\n limit?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** The number of items to return per page */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/rules/v4": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/rules/v4/health": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/rules/v4/version": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/rules/v4/{ruleId}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/rules/v4/{ruleId}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "put__/rules/v4/{ruleId}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/sensors/v3": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/sensors/v3": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string, \n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string, \n/** The number of items to return per page. */\n count?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.count": {
        "rendered": "\n/** The number of items to return per page. */\n count?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/sensors/v3": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/sensors/v3/health": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/sensors/v3/version": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/sensors/v3/{sensorRuleId}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/sensors/v3/{sensorRuleId}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "put__/sensors/v3/{sensorRuleId}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/shadows/v2/batch": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Milliseconds elapsed since 1 January 1970 00:00:00 UTC.\nThe accepted range is from 0 to the current time.\n */\n after?: number, \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.after": {
        "rendered": "\n/** Milliseconds elapsed since 1 January 1970 00:00:00 UTC.\nThe accepted range is from 0 to the current time.\n */\n after?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/shadows/v2/health": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/shadows/v2/version": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/shadows/v2/{trackingId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, \n/** If `true`, all the values of the `desired` shadow will be cleared */\n desired?: boolean, \n/** If `true`, all the values of the `reported` shadow will be cleared */\n reported?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.desired": {
        "rendered": "\n/** If `true`, all the values of the `desired` shadow will be cleared */\n desired?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.reported": {
        "rendered": "\n/** If `true`, all the values of the `reported` shadow will be cleared */\n reported?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/shadows/v2/{trackingId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "put__/shadows/v2/{trackingId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/shadows/v2/{trackingId}/{state}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/shadows/v2/{trackingId}/{state}/{selector}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/shadows/v4": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string, \n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string, \n/** The number of items to return per page */\n limit?: number, \n/** If provided returns the shadows for which `reported.timestamp` is greater than given `after` parameter. */\n after?: string, \n/** Defines how the items are sorted.\nThe default sort is `sort=trackingId:asc`\n */\n sort?: string, \n/** Limit search to shadows, whose position intersects the given bounding box.\nThe `bbox` array consist of latitude and longitude of Northwest and Southeast corners.\n */\n bbox?: (number)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** The number of items to return per page */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.after": {
        "rendered": "\n/** If provided returns the shadows for which `reported.timestamp` is greater than given `after` parameter. */\n after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** Defines how the items are sorted.\nThe default sort is `sort=trackingId:asc`\n */\n sort?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.bbox": {
        "rendered": "\n/** Limit search to shadows, whose position intersects the given bounding box.\nThe `bbox` array consist of latitude and longitude of Northwest and Southeast corners.\n */\n bbox?: (number)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.bbox.__no_name": {
        "rendered": "number",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/shipment-reports/v4": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/shipment-reports/v4/health": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/shipment-reports/v4/version": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/shipment-reports/v4/{shipmentReportId}/status": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/shipment-reports/v4/{shipmentReportId}/summary": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/shipment-reports/v4/{shipmentReportId}/{metric}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string, \n/** The number of items to return per page */\n limit?: number, \n/** The response items can be sorted to ascending or descending order by their statistics properties. E.g for\n`shipmentPlanPunctualityAtOrigin` it could be `avg:desc`.\nDefault is ascending sort order.\n */\n sort?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** The number of items to return per page */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": {
        "rendered": "\n/** The response items can be sorted to ascending or descending order by their statistics properties. E.g for\n`shipmentPlanPunctualityAtOrigin` it could be `avg:desc`.\nDefault is ascending sort order.\n */\n sort?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/shipments/v4": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/shipments/v4": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string, \n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string, \n/** The number of items to return per page */\n limit?: number, \n/** Filter the results by shipment status */\n status?: \"pending\" | \"ongoing\" | \"completed\" | \"cancelled\", \n/** Return only shipments that started before the specified timestamp */\n startedBefore?: string, \n/** Return only shipments that started after the specified timestamp */\n startedAfter?: string, \n/** Return only shipments that ended before the specified timestamp */\n endedBefore?: string, \n/** Return only shipments that ended after the specified timestamp */\n endedAfter?: string, \n/** Filter shipments by name. Matching is case-insensitive.\nThe following wildcards can be used:\n'*' matches any number of any characters,\n'?' matches any single character.\n */\n name?: string, \n/** Shipment plan ID */\n shipmentPlanId?: string, \n/** Filter shipments by `shipmentId`\nMatching is case-insensitive.\nThe following wildcards can be used:\n'*' matches any number of any characters,\n'?' matches any single character.\n */\n shipmentId?: string, \n/** Returns only shipments marked as subShipments */\n isSubShipment?: boolean, \n/** Return only shipments that have been created before specified timestamp */\n createdBefore?: string, \n/** Return only shipments that have been created after specified timestamp */\n createdAfter?: string,  },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** The number of items to return per page */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.status": {
        "rendered": "\n/** Filter the results by shipment status */\n status?: \"pending\" | \"ongoing\" | \"completed\" | \"cancelled\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startedBefore": {
        "rendered": "\n/** Return only shipments that started before the specified timestamp */\n startedBefore?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.startedAfter": {
        "rendered": "\n/** Return only shipments that started after the specified timestamp */\n startedAfter?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.endedBefore": {
        "rendered": "\n/** Return only shipments that ended before the specified timestamp */\n endedBefore?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.endedAfter": {
        "rendered": "\n/** Return only shipments that ended after the specified timestamp */\n endedAfter?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.name": {
        "rendered": "\n/** Filter shipments by name. Matching is case-insensitive.\nThe following wildcards can be used:\n'*' matches any number of any characters,\n'?' matches any single character.\n */\n name?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.shipmentPlanId": {
        "rendered": "\n/** Shipment plan ID */\n shipmentPlanId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.shipmentId": {
        "rendered": "\n/** Filter shipments by `shipmentId`\nMatching is case-insensitive.\nThe following wildcards can be used:\n'*' matches any number of any characters,\n'?' matches any single character.\n */\n shipmentId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.isSubShipment": {
        "rendered": "\n/** Returns only shipments marked as subShipments */\n isSubShipment?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.createdBefore": {
        "rendered": "\n/** Return only shipments that have been created before specified timestamp */\n createdBefore?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.createdAfter": {
        "rendered": "\n/** Return only shipments that have been created after specified timestamp */\n createdAfter?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": { "rendered": "", "requiresRelaxedTypeAnnotation": false }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/shipments/v4": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/shipments/v4/health": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/shipments/v4/plans": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/shipments/v4/plans": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string, \n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string, \n/** The number of items to return per page */\n limit?: number, \n/** Filter shipments by name. Matching is case-insensitive.\nThe following wildcards can be used:\n'*' matches any number of any characters,\n'?' matches any single character.\n */\n name?: string, \n/** Return only shipment plans that have been instantiated from the specified `shipmentPlanId`\nMatching is case-insensitive.\nThe following wildcards can be used:\n'*' matches any number of any characters,\n'?' matches any single character.\n */\n shipmentPlanId?: string, \n/** Return only shipments that have been instantiated from the specified `locationId`\n */\n locationId?: string, \n/** Return only shipments that have been created before specified timestamp */\n createdBefore?: string, \n/** Return only shipments that have been created after specified timestamp */\n createdAfter?: string, \n/** Returns only shipments marked as subShipments */\n isSubShipment?: boolean,  },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** The number of items to return per page */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.name": {
        "rendered": "\n/** Filter shipments by name. Matching is case-insensitive.\nThe following wildcards can be used:\n'*' matches any number of any characters,\n'?' matches any single character.\n */\n name?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.shipmentPlanId": {
        "rendered": "\n/** Return only shipment plans that have been instantiated from the specified `shipmentPlanId`\nMatching is case-insensitive.\nThe following wildcards can be used:\n'*' matches any number of any characters,\n'?' matches any single character.\n */\n shipmentPlanId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.locationId": {
        "rendered": "\n/** Return only shipments that have been instantiated from the specified `locationId`\n */\n locationId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.createdBefore": {
        "rendered": "\n/** Return only shipments that have been created before specified timestamp */\n createdBefore?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.createdAfter": {
        "rendered": "\n/** Return only shipments that have been created after specified timestamp */\n createdAfter?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.isSubShipment": {
        "rendered": "\n/** Returns only shipments marked as subShipments */\n isSubShipment?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.sort": { "rendered": "", "requiresRelaxedTypeAnnotation": false }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/shipments/v4/plans": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/shipments/v4/plans/{shipmentPlanId}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/shipments/v4/plans/{shipmentPlanId}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "patch__/shipments/v4/plans/{shipmentPlanId}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/shipments/v4/plans/{shipmentPlanId}/{segmentPlanId}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "patch__/shipments/v4/plans/{shipmentPlanId}/{segmentPlanId}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/shipments/v4/version": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/shipments/v4/{shipmentId}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/shipments/v4/{shipmentId}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "patch__/shipments/v4/{shipmentId}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/shipments/v4/{shipmentId}/{segmentId}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "patch__/shipments/v4/{shipmentId}/{segmentId}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/shipments/v4/{trackingId}/segments": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string, \n/** The number of items to return per page */\n limit?: number, \n/** Filter the results by segment status */\n status?: \"pending\" | \"ongoing\" | \"completed\" | \"cancelled\", },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** The number of items to return per page */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.status": {
        "rendered": "\n/** Filter the results by segment status */\n status?: \"pending\" | \"ongoing\" | \"completed\" | \"cancelled\",",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/traces/v2/health": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/traces/v2/version": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/traces/v2/{trackingId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/traces/v2/{trackingId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, \n/** Milliseconds elapsed since 1 January 1970 00:00:00 UTC.\nThe accepted range is from 1 to the current time.\n */\n before?: number, \n/** Milliseconds elapsed since 1 January 1970 00:00:00 UTC.\nThe accepted range is from 0 to the current time.\n */\n after?: number, \n/** Flag specifying if only outliers (`true`) or only nonoutliers (`false`)\nare to be returned. If the parameter is not present both nonoutlier\nand outlier traces are returned.\n */\n outliers?: boolean, \n/** Tracker mode status of the device. When a tracker is in a normal mode, it\ncan send telemetry and, for example, use its GNSS receiver if it has one.\nA tracker switches into flight mode once it detects that it's in an\nairplane, and leaves that mode once airplane lands. Transport mode has to\nbe triggered by the user, and it's used, for example, during shipping from\ncontinent to another. Sleep mode is used when a tracker is stored in\na warehouse, and it's triggered by entering or leaving some defined\ngeofence.\n */\n mode?: \"unknown\" | \"normal\" | \"flight\" | \"transport\" | \"sleep\", \n/** Flag telling if smoothed traces (true) or non-smoothed (false)\ntraces should get returned. By default the traces are not smoothed.\n\nThe smoothing will have an effect on to the stationary trace points only.\n */\n smooth?: boolean, \n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string, \n/** The number of records per page. */\n count?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.before": {
        "rendered": "\n/** Milliseconds elapsed since 1 January 1970 00:00:00 UTC.\nThe accepted range is from 1 to the current time.\n */\n before?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.after": {
        "rendered": "\n/** Milliseconds elapsed since 1 January 1970 00:00:00 UTC.\nThe accepted range is from 0 to the current time.\n */\n after?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.outliers": {
        "rendered": "\n/** Flag specifying if only outliers (`true`) or only nonoutliers (`false`)\nare to be returned. If the parameter is not present both nonoutlier\nand outlier traces are returned.\n */\n outliers?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.mode": {
        "rendered": "\n/** Tracker mode status of the device. When a tracker is in a normal mode, it\ncan send telemetry and, for example, use its GNSS receiver if it has one.\nA tracker switches into flight mode once it detects that it's in an\nairplane, and leaves that mode once airplane lands. Transport mode has to\nbe triggered by the user, and it's used, for example, during shipping from\ncontinent to another. Sleep mode is used when a tracker is stored in\na warehouse, and it's triggered by entering or leaving some defined\ngeofence.\n */\n mode?: \"unknown\" | \"normal\" | \"flight\" | \"transport\" | \"sleep\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.smooth": {
        "rendered": "\n/** Flag telling if smoothed traces (true) or non-smoothed (false)\ntraces should get returned. By default the traces are not smoothed.\n\nThe smoothing will have an effect on to the stationary trace points only.\n */\n smooth?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.count": {
        "rendered": "\n/** The number of records per page. */\n count?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/transitions/v2/devices/{trackingId}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string, \n/** Milliseconds elapsed since 1 January 1970 00:00:00 UTC.\nThe accepted range is from 1 to the current time.\n */\n before?: number, \n/** Milliseconds elapsed since 1 January 1970 00:00:00 UTC.\nThe accepted range is from 0 to the current time.\n */\n after?: number, \n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string, \n/** The number of items to return per page. */\n count?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.appId": {
        "rendered": "\n/** Application identifier. Used together with an external ID to identify a virtual device. */\n appId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.before": {
        "rendered": "\n/** Milliseconds elapsed since 1 January 1970 00:00:00 UTC.\nThe accepted range is from 1 to the current time.\n */\n before?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.after": {
        "rendered": "\n/** Milliseconds elapsed since 1 January 1970 00:00:00 UTC.\nThe accepted range is from 0 to the current time.\n */\n after?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.count": {
        "rendered": "\n/** The number of items to return per page. */\n count?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/transitions/v2/health": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/transitions/v2/version": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/users/v2/devices": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string, \n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string, \n/** The number of items to return per page. */\n count?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.projectId": {
        "rendered": "\n/** Project ID.\nAny HERE Tracking user must be a member of a Tracking project.\nThe project ID can be implicitly resolved if the user calling the API is a member of a single project.\nIf the user is a member of multiple projects, the `projectId` query parameter needs to be specified explicitly.\n */\n projectId?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pageToken": {
        "rendered": "\n/** A token from the previously returned response to retrieve the specified page. */\n pageToken?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.count": {
        "rendered": "\n/** The number of items to return per page. */\n count?: number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/users/v2/health": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/users/v2/login": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/users/v2/refresh": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/users/v2/tokenExchange": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/users/v2/version": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v2/": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** If set to `true`, ingests the device data and responds immediately with an empty response body. */\n async?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.async": {
        "rendered": "\n/** If set to `true`, ingests the device data and responds immediately with an empty response body. */\n async?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v2/health": { "query": {}, "body": {}, "path": {}, "response": {} },
  "get__/v2/timestamp": { "query": {}, "body": {}, "path": {}, "response": {} },
  "post__/v2/token": { "query": {}, "body": {}, "path": {}, "response": {} },
  "get__/v2/version": { "query": {}, "body": {}, "path": {}, "response": {} },
  "post__/v3/": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** If set to `true`, ingests the device data and responds immediately with an empty response body. */\n async?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.async": {
        "rendered": "\n/** If set to `true`, ingests the device data and responds immediately with an empty response body. */\n async?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v3/batch": { "query": {}, "body": {}, "path": {}, "response": {} },
  "get__/v3/health": { "query": {}, "body": {}, "path": {}, "response": {} },
  "get__/v3/version": { "query": {}, "body": {}, "path": {}, "response": {} }
}
