{
  "get__/v1/account": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/account_links": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/accounts": {
    "query": {
      ".query": {
        "rendered": " query: {  created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": " created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/accounts": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/v1/accounts/{account}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/accounts/{account}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/accounts/{account}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/accounts/{account}/bank_accounts": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/v1/accounts/{account}/bank_accounts/{id}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/accounts/{account}/bank_accounts/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/accounts/{account}/bank_accounts/{id}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/accounts/{account}/capabilities": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/accounts/{account}/capabilities/{capability}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/accounts/{account}/capabilities/{capability}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/accounts/{account}/external_accounts": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/accounts/{account}/external_accounts": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/v1/accounts/{account}/external_accounts/{id}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/accounts/{account}/external_accounts/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/accounts/{account}/external_accounts/{id}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/accounts/{account}/login_links": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/accounts/{account}/people": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** Filters on the list of people returned based on the person's relationship to the account's company. */\n relationship?: {  director?: boolean,  executive?: boolean,  owner?: boolean,  representative?: boolean, }, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.relationship": {
        "rendered": "\n/** Filters on the list of people returned based on the person's relationship to the account's company. */\n relationship?: {  director?: boolean,  executive?: boolean,  owner?: boolean,  representative?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.relationship.director": {
        "rendered": " director?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.relationship.executive": {
        "rendered": " executive?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.relationship.owner": {
        "rendered": " owner?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.relationship.representative": {
        "rendered": " representative?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/accounts/{account}/people": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/v1/accounts/{account}/people/{person}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/accounts/{account}/people/{person}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/accounts/{account}/people/{person}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/accounts/{account}/persons": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** Filters on the list of people returned based on the person's relationship to the account's company. */\n relationship?: {  director?: boolean,  executive?: boolean,  owner?: boolean,  representative?: boolean, }, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.relationship": {
        "rendered": "\n/** Filters on the list of people returned based on the person's relationship to the account's company. */\n relationship?: {  director?: boolean,  executive?: boolean,  owner?: boolean,  representative?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.relationship.director": {
        "rendered": " director?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.relationship.executive": {
        "rendered": " executive?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.relationship.owner": {
        "rendered": " owner?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.relationship.representative": {
        "rendered": " representative?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/accounts/{account}/persons": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/v1/accounts/{account}/persons/{person}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/accounts/{account}/persons/{person}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/accounts/{account}/persons/{person}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/accounts/{account}/reject": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/apple_pay/domains": {
    "query": {
      ".query": {
        "rendered": " query: {  domain_name?: string, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.domain_name": {
        "rendered": " domain_name?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/apple_pay/domains": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/v1/apple_pay/domains/{domain}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/apple_pay/domains/{domain}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/application_fees": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Only return application fees for the charge specified by this charge ID. */\n charge?: string,  created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.charge": {
        "rendered": "\n/** Only return application fees for the charge specified by this charge ID. */\n charge?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": " created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/application_fees/{fee}/refunds/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/application_fees/{fee}/refunds/{id}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/application_fees/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/application_fees/{id}/refund": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/application_fees/{id}/refunds": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/application_fees/{id}/refunds": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/apps/secrets": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user. */\n scope: {  type?: \"account\" | \"user\",  user?: string, }, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.scope": {
        "rendered": "\n/** Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user. */\n scope: {  type?: \"account\" | \"user\",  user?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.scope.type": {
        "rendered": " type?: \"account\" | \"user\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.scope.user": {
        "rendered": " user?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/apps/secrets": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/apps/secrets/delete": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/apps/secrets/find": {
    "query": {
      ".query": {
        "rendered": " query?: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A name for the secret that's unique within the scope. */\n name: string, \n/** Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user. */\n scope: {  type?: \"account\" | \"user\",  user?: string, }, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.name": {
        "rendered": "\n/** A name for the secret that's unique within the scope. */\n name: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.scope": {
        "rendered": "\n/** Specifies the scoping of the secret. Requests originating from UI extensions can only access account-scoped secrets or secrets scoped to their own user. */\n scope: {  type?: \"account\" | \"user\",  user?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.scope.type": {
        "rendered": " type?: \"account\" | \"user\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.scope.user": {
        "rendered": " user?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/balance": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/balance/history": {
    "query": {
      ".query": {
        "rendered": " query: {  created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** Only return transactions in a certain currency. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */\n currency?: string, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** For automatic Stripe payouts only, only returns transactions that were paid out on the specified payout ID. */\n payout?: string, \n/** Only returns the original transaction. */\n source?: string, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, \n/** Only returns transactions of the given type. One of: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `payment`, `payment_failure_refund`, `payment_refund`, `payout`, `payout_cancel`, `payout_failure`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`. */\n type?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": " created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.currency": {
        "rendered": "\n/** Only return transactions in a certain currency. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */\n currency?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.payout": {
        "rendered": "\n/** For automatic Stripe payouts only, only returns transactions that were paid out on the specified payout ID. */\n payout?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.source": {
        "rendered": "\n/** Only returns the original transaction. */\n source?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.type": {
        "rendered": "\n/** Only returns transactions of the given type. One of: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `payment`, `payment_failure_refund`, `payment_refund`, `payout`, `payout_cancel`, `payout_failure`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`. */\n type?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/balance/history/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/balance_transactions": {
    "query": {
      ".query": {
        "rendered": " query: {  created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** Only return transactions in a certain currency. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */\n currency?: string, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** For automatic Stripe payouts only, only returns transactions that were paid out on the specified payout ID. */\n payout?: string, \n/** Only returns the original transaction. */\n source?: string, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, \n/** Only returns transactions of the given type. One of: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `payment`, `payment_failure_refund`, `payment_refund`, `payout`, `payout_cancel`, `payout_failure`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`. */\n type?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": " created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.currency": {
        "rendered": "\n/** Only return transactions in a certain currency. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */\n currency?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.payout": {
        "rendered": "\n/** For automatic Stripe payouts only, only returns transactions that were paid out on the specified payout ID. */\n payout?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.source": {
        "rendered": "\n/** Only returns the original transaction. */\n source?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.type": {
        "rendered": "\n/** Only returns transactions of the given type. One of: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `payment`, `payment_failure_refund`, `payment_refund`, `payout`, `payout_cancel`, `payout_failure`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`. */\n type?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/balance_transactions/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/billing_portal/configurations": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Only return configurations that are active or inactive (e.g., pass `true` to only list active configurations). */\n active?: boolean, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** Only return the default or non-default configurations (e.g., pass `true` to only list the default configuration). */\n is_default?: boolean, \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.active": {
        "rendered": "\n/** Only return configurations that are active or inactive (e.g., pass `true` to only list active configurations). */\n active?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.is_default": {
        "rendered": "\n/** Only return the default or non-default configurations (e.g., pass `true` to only list the default configuration). */\n is_default?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/billing_portal/configurations": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/billing_portal/configurations/{configuration}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/billing_portal/configurations/{configuration}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/billing_portal/sessions": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/charges": {
    "query": {
      ".query": {
        "rendered": " query: {  created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** Only return charges for the customer specified by this customer ID. */\n customer?: string, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** Only return charges that were created by the PaymentIntent specified by this PaymentIntent ID. */\n payment_intent?: string, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, \n/** Only return charges for this transfer group. */\n transfer_group?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": " created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.customer": {
        "rendered": "\n/** Only return charges for the customer specified by this customer ID. */\n customer?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.payment_intent": {
        "rendered": "\n/** Only return charges that were created by the PaymentIntent specified by this PaymentIntent ID. */\n payment_intent?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.transfer_group": {
        "rendered": "\n/** Only return charges for this transfer group. */\n transfer_group?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/charges": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/charges/search": {
    "query": {
      ".query": {
        "rendered": " query?: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results. */\n page?: string, \n/** The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for charges](https://stripe.com/docs/search#query-fields-for-charges). */\n query: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results. */\n page?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for charges](https://stripe.com/docs/search#query-fields-for-charges). */\n query: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/charges/{charge}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/charges/{charge}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/charges/{charge}/capture": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/charges/{charge}/dispute": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/charges/{charge}/dispute": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/charges/{charge}/dispute/close": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/charges/{charge}/refund": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/charges/{charge}/refunds": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/charges/{charge}/refunds": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/charges/{charge}/refunds/{refund}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/charges/{charge}/refunds/{refund}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/checkout/sessions": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Only return the Checkout Sessions for the Customer specified. */\n customer?: string, \n/** Only return the Checkout Sessions for the Customer details specified. */\n customer_details: {  email?: string, }, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** Only return the Checkout Session for the PaymentIntent specified. */\n payment_intent?: string, \n/** Only return the Checkout Sessions for the Payment Link specified. */\n payment_link?: string, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, \n/** Only return the Checkout Session for the subscription specified. */\n subscription?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.customer": {
        "rendered": "\n/** Only return the Checkout Sessions for the Customer specified. */\n customer?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.customer_details": {
        "rendered": "\n/** Only return the Checkout Sessions for the Customer details specified. */\n customer_details: {  email?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.customer_details.email": {
        "rendered": " email?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.payment_intent": {
        "rendered": "\n/** Only return the Checkout Session for the PaymentIntent specified. */\n payment_intent?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.payment_link": {
        "rendered": "\n/** Only return the Checkout Sessions for the Payment Link specified. */\n payment_link?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription": {
        "rendered": "\n/** Only return the Checkout Session for the subscription specified. */\n subscription?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/checkout/sessions": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/checkout/sessions/{session}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/checkout/sessions/{session}/expire": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/checkout/sessions/{session}/line_items": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/country_specs": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/country_specs/{country}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/coupons": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */\n created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": "\n/** A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */\n created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/coupons": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/v1/coupons/{coupon}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/coupons/{coupon}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/coupons/{coupon}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/credit_notes": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Only return credit notes for the customer specified by this customer ID. */\n customer?: string, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** Only return credit notes for the invoice specified by this invoice ID. */\n invoice?: string, \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.customer": {
        "rendered": "\n/** Only return credit notes for the customer specified by this customer ID. */\n customer?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice": {
        "rendered": "\n/** Only return credit notes for the invoice specified by this invoice ID. */\n invoice?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/credit_notes": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/credit_notes/preview": {
    "query": {
      ".query": {
        "rendered": " query?: { \n/** The integer amount in cents (or local equivalent) representing the total amount of the credit note. */\n amount?: number, \n/** The integer amount in cents (or local equivalent) representing the amount to credit the customer's balance, which will be automatically applied to their next invoice. */\n credit_amount?: number, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** ID of the invoice. */\n invoice: string, \n/** Line items that make up the credit note. */\n lines?: ({  amount?: number,  description?: string,  invoice_line_item?: string,  quantity?: number,  tax_rates?: | (string)[] | \"\",  type?: \"custom_line_item\" | \"invoice_line_item\",  unit_amount?: number,  unit_amount_decimal?: string, })[], \n/** The credit note's memo appears on the credit note PDF. */\n memo?: string, \n/** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */\n metadata?: object, \n/** The integer amount in cents (or local equivalent) representing the amount that is credited outside of Stripe. */\n out_of_band_amount?: number, \n/** Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory` */\n reason?: \"duplicate\" | \"fraudulent\" | \"order_change\" | \"product_unsatisfactory\", \n/** ID of an existing refund to link this credit note to. */\n refund?: string, \n/** The integer amount in cents (or local equivalent) representing the amount to refund. If set, a refund will be created for the charge associated with the invoice. */\n refund_amount?: number, \n/** When shipping_cost contains the shipping_rate from the invoice, the shipping_cost is included in the credit note. */\n shipping_cost?: {  shipping_rate?: string, }, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.amount": {
        "rendered": "\n/** The integer amount in cents (or local equivalent) representing the total amount of the credit note. */\n amount?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.credit_amount": {
        "rendered": "\n/** The integer amount in cents (or local equivalent) representing the amount to credit the customer's balance, which will be automatically applied to their next invoice. */\n credit_amount?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice": {
        "rendered": "\n/** ID of the invoice. */\n invoice: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.lines": {
        "rendered": "\n/** Line items that make up the credit note. */\n lines?: ({  amount?: number,  description?: string,  invoice_line_item?: string,  quantity?: number,  tax_rates?: | (string)[] | \"\",  type?: \"custom_line_item\" | \"invoice_line_item\",  unit_amount?: number,  unit_amount_decimal?: string, })[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.lines.__no_name": {
        "rendered": "{  amount?: number,  description?: string,  invoice_line_item?: string,  quantity?: number,  tax_rates?: | (string)[] | \"\",  type?: \"custom_line_item\" | \"invoice_line_item\",  unit_amount?: number,  unit_amount_decimal?: string, }",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.lines.__no_name.amount": {
        "rendered": " amount?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.lines.__no_name.description": {
        "rendered": " description?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.lines.__no_name.invoice_line_item": {
        "rendered": " invoice_line_item?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.lines.__no_name.quantity": {
        "rendered": " quantity?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.lines.__no_name.tax_rates": {
        "rendered": " tax_rates?: | (string)[] | \"\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.lines.__no_name.type": {
        "rendered": " type?: \"custom_line_item\" | \"invoice_line_item\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.lines.__no_name.unit_amount": {
        "rendered": " unit_amount?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.lines.__no_name.unit_amount_decimal": {
        "rendered": " unit_amount_decimal?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.memo": {
        "rendered": "\n/** The credit note's memo appears on the credit note PDF. */\n memo?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.metadata": {
        "rendered": "\n/** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */\n metadata?: object,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.out_of_band_amount": {
        "rendered": "\n/** The integer amount in cents (or local equivalent) representing the amount that is credited outside of Stripe. */\n out_of_band_amount?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.reason": {
        "rendered": "\n/** Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory` */\n reason?: \"duplicate\" | \"fraudulent\" | \"order_change\" | \"product_unsatisfactory\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.refund": {
        "rendered": "\n/** ID of an existing refund to link this credit note to. */\n refund?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.refund_amount": {
        "rendered": "\n/** The integer amount in cents (or local equivalent) representing the amount to refund. If set, a refund will be created for the charge associated with the invoice. */\n refund_amount?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.shipping_cost": {
        "rendered": "\n/** When shipping_cost contains the shipping_rate from the invoice, the shipping_cost is included in the credit note. */\n shipping_cost?: {  shipping_rate?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.shipping_cost.shipping_rate": {
        "rendered": " shipping_rate?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/credit_notes/preview/lines": {
    "query": {
      ".query": {
        "rendered": " query?: { \n/** The integer amount in cents (or local equivalent) representing the total amount of the credit note. */\n amount?: number, \n/** The integer amount in cents (or local equivalent) representing the amount to credit the customer's balance, which will be automatically applied to their next invoice. */\n credit_amount?: number, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** ID of the invoice. */\n invoice: string, \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** Line items that make up the credit note. */\n lines?: ({  amount?: number,  description?: string,  invoice_line_item?: string,  quantity?: number,  tax_rates?: | (string)[] | \"\",  type?: \"custom_line_item\" | \"invoice_line_item\",  unit_amount?: number,  unit_amount_decimal?: string, })[], \n/** The credit note's memo appears on the credit note PDF. */\n memo?: string, \n/** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */\n metadata?: object, \n/** The integer amount in cents (or local equivalent) representing the amount that is credited outside of Stripe. */\n out_of_band_amount?: number, \n/** Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory` */\n reason?: \"duplicate\" | \"fraudulent\" | \"order_change\" | \"product_unsatisfactory\", \n/** ID of an existing refund to link this credit note to. */\n refund?: string, \n/** The integer amount in cents (or local equivalent) representing the amount to refund. If set, a refund will be created for the charge associated with the invoice. */\n refund_amount?: number, \n/** When shipping_cost contains the shipping_rate from the invoice, the shipping_cost is included in the credit note. */\n shipping_cost?: {  shipping_rate?: string, }, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.amount": {
        "rendered": "\n/** The integer amount in cents (or local equivalent) representing the total amount of the credit note. */\n amount?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.credit_amount": {
        "rendered": "\n/** The integer amount in cents (or local equivalent) representing the amount to credit the customer's balance, which will be automatically applied to their next invoice. */\n credit_amount?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice": {
        "rendered": "\n/** ID of the invoice. */\n invoice: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.lines": {
        "rendered": "\n/** Line items that make up the credit note. */\n lines?: ({  amount?: number,  description?: string,  invoice_line_item?: string,  quantity?: number,  tax_rates?: | (string)[] | \"\",  type?: \"custom_line_item\" | \"invoice_line_item\",  unit_amount?: number,  unit_amount_decimal?: string, })[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.lines.__no_name": {
        "rendered": "{  amount?: number,  description?: string,  invoice_line_item?: string,  quantity?: number,  tax_rates?: | (string)[] | \"\",  type?: \"custom_line_item\" | \"invoice_line_item\",  unit_amount?: number,  unit_amount_decimal?: string, }",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.lines.__no_name.amount": {
        "rendered": " amount?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.lines.__no_name.description": {
        "rendered": " description?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.lines.__no_name.invoice_line_item": {
        "rendered": " invoice_line_item?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.lines.__no_name.quantity": {
        "rendered": " quantity?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.lines.__no_name.tax_rates": {
        "rendered": " tax_rates?: | (string)[] | \"\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.lines.__no_name.type": {
        "rendered": " type?: \"custom_line_item\" | \"invoice_line_item\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.lines.__no_name.unit_amount": {
        "rendered": " unit_amount?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.lines.__no_name.unit_amount_decimal": {
        "rendered": " unit_amount_decimal?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.memo": {
        "rendered": "\n/** The credit note's memo appears on the credit note PDF. */\n memo?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.metadata": {
        "rendered": "\n/** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */\n metadata?: object,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.out_of_band_amount": {
        "rendered": "\n/** The integer amount in cents (or local equivalent) representing the amount that is credited outside of Stripe. */\n out_of_band_amount?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.reason": {
        "rendered": "\n/** Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory` */\n reason?: \"duplicate\" | \"fraudulent\" | \"order_change\" | \"product_unsatisfactory\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.refund": {
        "rendered": "\n/** ID of an existing refund to link this credit note to. */\n refund?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.refund_amount": {
        "rendered": "\n/** The integer amount in cents (or local equivalent) representing the amount to refund. If set, a refund will be created for the charge associated with the invoice. */\n refund_amount?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.shipping_cost": {
        "rendered": "\n/** When shipping_cost contains the shipping_rate from the invoice, the shipping_cost is included in the credit note. */\n shipping_cost?: {  shipping_rate?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.shipping_cost.shipping_rate": {
        "rendered": " shipping_rate?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/credit_notes/{credit_note}/lines": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/credit_notes/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/credit_notes/{id}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/credit_notes/{id}/void": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/customers": {
    "query": {
      ".query": {
        "rendered": " query: {  created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** A case-sensitive filter on the list based on the customer's `email` field. The value must be a string. */\n email?: string, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, \n/** Provides a list of customers that are associated with the specified test clock. The response will not include customers with test clocks if this parameter is not set. */\n test_clock?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": " created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.email": {
        "rendered": "\n/** A case-sensitive filter on the list based on the customer's `email` field. The value must be a string. */\n email?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.test_clock": {
        "rendered": "\n/** Provides a list of customers that are associated with the specified test clock. The response will not include customers with test clocks if this parameter is not set. */\n test_clock?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/customers": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/customers/search": {
    "query": {
      ".query": {
        "rendered": " query?: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results. */\n page?: string, \n/** The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for customers](https://stripe.com/docs/search#query-fields-for-customers). */\n query: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results. */\n page?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for customers](https://stripe.com/docs/search#query-fields-for-customers). */\n query: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/v1/customers/{customer}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/customers/{customer}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/customers/{customer}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/customers/{customer}/balance_transactions": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/customers/{customer}/balance_transactions": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/customers/{customer}/balance_transactions/{transaction}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/customers/{customer}/balance_transactions/{transaction}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/customers/{customer}/bank_accounts": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/customers/{customer}/bank_accounts": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/v1/customers/{customer}/bank_accounts/{id}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/customers/{customer}/bank_accounts/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/customers/{customer}/bank_accounts/{id}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/customers/{customer}/bank_accounts/{id}/verify": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/customers/{customer}/cards": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/customers/{customer}/cards": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/v1/customers/{customer}/cards/{id}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/customers/{customer}/cards/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/customers/{customer}/cards/{id}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/customers/{customer}/cash_balance": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/customers/{customer}/cash_balance": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/customers/{customer}/cash_balance_transactions": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/customers/{customer}/cash_balance_transactions/{transaction}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/v1/customers/{customer}/discount": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/customers/{customer}/discount": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/customers/{customer}/funding_instructions": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/customers/{customer}/payment_methods": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, \n/** An optional filter on the list, based on the object `type` field. Without the filter, the list includes all current and future payment method types. If your integration expects only one type of payment method in the response, make sure to provide a type value in the request. */\n type?: \"acss_debit\" | \"affirm\" | \"afterpay_clearpay\" | \"alipay\" | \"au_becs_debit\" | \"bacs_debit\" | \"bancontact\" | \"blik\" | \"boleto\" | \"card\" | \"customer_balance\" | \"eps\" | \"fpx\" | \"giropay\" | \"grabpay\" | \"ideal\" | \"klarna\" | \"konbini\" | \"link\" | \"oxxo\" | \"p24\" | \"paynow\" | \"pix\" | \"promptpay\" | \"sepa_debit\" | \"sofort\" | \"us_bank_account\" | \"wechat_pay\", },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.type": {
        "rendered": "\n/** An optional filter on the list, based on the object `type` field. Without the filter, the list includes all current and future payment method types. If your integration expects only one type of payment method in the response, make sure to provide a type value in the request. */\n type?: \"acss_debit\" | \"affirm\" | \"afterpay_clearpay\" | \"alipay\" | \"au_becs_debit\" | \"bacs_debit\" | \"bancontact\" | \"blik\" | \"boleto\" | \"card\" | \"customer_balance\" | \"eps\" | \"fpx\" | \"giropay\" | \"grabpay\" | \"ideal\" | \"klarna\" | \"konbini\" | \"link\" | \"oxxo\" | \"p24\" | \"paynow\" | \"pix\" | \"promptpay\" | \"sepa_debit\" | \"sofort\" | \"us_bank_account\" | \"wechat_pay\",",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/customers/{customer}/payment_methods/{payment_method}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/customers/{customer}/sources": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** Filter sources according to a particular object type. */\n object?: string, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.object": {
        "rendered": "\n/** Filter sources according to a particular object type. */\n object?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/customers/{customer}/sources": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/v1/customers/{customer}/sources/{id}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/customers/{customer}/sources/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/customers/{customer}/sources/{id}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/customers/{customer}/sources/{id}/verify": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/customers/{customer}/subscriptions": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/customers/{customer}/subscriptions": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/v1/customers/{customer}/subscriptions/{subscription_exposed_id}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/customers/{customer}/subscriptions/{subscription_exposed_id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/customers/{customer}/subscriptions/{subscription_exposed_id}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/v1/customers/{customer}/subscriptions/{subscription_exposed_id}/discount": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/customers/{customer}/subscriptions/{subscription_exposed_id}/discount": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/customers/{customer}/tax_ids": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/customers/{customer}/tax_ids": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/v1/customers/{customer}/tax_ids/{id}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/customers/{customer}/tax_ids/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/disputes": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Only return disputes associated to the charge specified by this charge ID. */\n charge?: string,  created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** Only return disputes associated to the PaymentIntent specified by this PaymentIntent ID. */\n payment_intent?: string, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.charge": {
        "rendered": "\n/** Only return disputes associated to the charge specified by this charge ID. */\n charge?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": " created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.payment_intent": {
        "rendered": "\n/** Only return disputes associated to the PaymentIntent specified by this PaymentIntent ID. */\n payment_intent?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/disputes/{dispute}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/disputes/{dispute}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/disputes/{dispute}/close": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/ephemeral_keys": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/v1/ephemeral_keys/{key}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/events": {
    "query": {
      ".query": {
        "rendered": " query: {  created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** Filter events by whether all webhooks were successfully delivered. If false, events which are still pending or have failed all delivery attempts to a webhook endpoint will be returned. */\n delivery_success?: boolean, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, \n/** A string containing a specific event name, or group of events using * as a wildcard. The list will be filtered to include only events with a matching event property. */\n type?: string, \n/** An array of up to 20 strings containing specific event names. The list will be filtered to include only events with a matching event property. You may pass either `type` or `types`, but not both. */\n types?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": " created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.delivery_success": {
        "rendered": "\n/** Filter events by whether all webhooks were successfully delivered. If false, events which are still pending or have failed all delivery attempts to a webhook endpoint will be returned. */\n delivery_success?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.type": {
        "rendered": "\n/** A string containing a specific event name, or group of events using * as a wildcard. The list will be filtered to include only events with a matching event property. */\n type?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.types": {
        "rendered": "\n/** An array of up to 20 strings containing specific event names. The list will be filtered to include only events with a matching event property. You may pass either `type` or `types`, but not both. */\n types?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.types.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/events/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/exchange_rates": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A cursor for use in pagination. `ending_before` is the currency that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with the exchange rate for currency X your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and total number of supported payout currencies, and the default is the max. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is the currency that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with the exchange rate for currency X, your subsequent call can include `starting_after=X` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is the currency that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with the exchange rate for currency X your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and total number of supported payout currencies, and the default is the max. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is the currency that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with the exchange rate for currency X, your subsequent call can include `starting_after=X` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/exchange_rates/{rate_id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/file_links": {
    "query": {
      ".query": {
        "rendered": " query: {  created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** Filter links by their expiration status. By default, all links are returned. */\n expired?: boolean, \n/** Only return links for the given file. */\n file?: string, \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": " created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expired": {
        "rendered": "\n/** Filter links by their expiration status. By default, all links are returned. */\n expired?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.file": {
        "rendered": "\n/** Only return links for the given file. */\n file?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/file_links": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/file_links/{link}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/file_links/{link}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/files": {
    "query": {
      ".query": {
        "rendered": " query: {  created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** The file purpose to filter queries by. If none is provided, files will not be filtered by purpose. */\n purpose?: \"account_requirement\" | \"additional_verification\" | \"business_icon\" | \"business_logo\" | \"customer_signature\" | \"dispute_evidence\" | \"document_provider_identity_document\" | \"finance_report_run\" | \"identity_document\" | \"identity_document_downloadable\" | \"pci_document\" | \"selfie\" | \"sigma_scheduled_query\" | \"tax_document_user_upload\" | \"terminal_reader_splashscreen\", \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": " created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.purpose": {
        "rendered": "\n/** The file purpose to filter queries by. If none is provided, files will not be filtered by purpose. */\n purpose?: \"account_requirement\" | \"additional_verification\" | \"business_icon\" | \"business_logo\" | \"customer_signature\" | \"dispute_evidence\" | \"document_provider_identity_document\" | \"finance_report_run\" | \"identity_document\" | \"identity_document_downloadable\" | \"pci_document\" | \"selfie\" | \"sigma_scheduled_query\" | \"tax_document_user_upload\" | \"terminal_reader_splashscreen\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/files": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/files/{file}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/financial_connections/accounts": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** If present, only return accounts that belong to the specified account holder. `account_holder[customer]` and `account_holder[account]` are mutually exclusive. */\n account_holder?: {  account?: string,  customer?: string, }, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** If present, only return accounts that were collected as part of the given session. */\n session?: string, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.account_holder": {
        "rendered": "\n/** If present, only return accounts that belong to the specified account holder. `account_holder[customer]` and `account_holder[account]` are mutually exclusive. */\n account_holder?: {  account?: string,  customer?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.account_holder.account": {
        "rendered": " account?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.account_holder.customer": {
        "rendered": " customer?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.session": {
        "rendered": "\n/** If present, only return accounts that were collected as part of the given session. */\n session?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/financial_connections/accounts/{account}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/financial_connections/accounts/{account}/disconnect": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/financial_connections/accounts/{account}/owners": {
    "query": {
      ".query": {
        "rendered": " query?: { \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** The ID of the ownership object to fetch owners from. */\n ownership: string, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ownership": {
        "rendered": "\n/** The ID of the ownership object to fetch owners from. */\n ownership: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/financial_connections/accounts/{account}/refresh": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/financial_connections/sessions": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/financial_connections/sessions/{session}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/identity/verification_reports": {
    "query": {
      ".query": {
        "rendered": " query: {  created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, \n/** Only return VerificationReports of this type */\n type?: \"document\" | \"id_number\", \n/** Only return VerificationReports created by this VerificationSession ID. It is allowed to provide a VerificationIntent ID. */\n verification_session?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": " created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.type": {
        "rendered": "\n/** Only return VerificationReports of this type */\n type?: \"document\" | \"id_number\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.verification_session": {
        "rendered": "\n/** Only return VerificationReports created by this VerificationSession ID. It is allowed to provide a VerificationIntent ID. */\n verification_session?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/identity/verification_reports/{report}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/identity/verification_sessions": {
    "query": {
      ".query": {
        "rendered": " query: {  created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, \n/** Only return VerificationSessions with this status. [Learn more about the lifecycle of sessions](https://stripe.com/docs/identity/how-sessions-work). */\n status?: \"canceled\" | \"processing\" | \"requires_input\" | \"verified\", },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": " created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.status": {
        "rendered": "\n/** Only return VerificationSessions with this status. [Learn more about the lifecycle of sessions](https://stripe.com/docs/identity/how-sessions-work). */\n status?: \"canceled\" | \"processing\" | \"requires_input\" | \"verified\",",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/identity/verification_sessions": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/identity/verification_sessions/{session}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/identity/verification_sessions/{session}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/identity/verification_sessions/{session}/cancel": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/identity/verification_sessions/{session}/redact": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/invoiceitems": {
    "query": {
      ".query": {
        "rendered": " query: {  created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** The identifier of the customer whose invoice items to return. If none is provided, all invoice items will be returned. */\n customer?: string, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** Only return invoice items belonging to this invoice. If none is provided, all invoice items will be returned. If specifying an invoice, no customer identifier is needed. */\n invoice?: string, \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** Set to `true` to only show pending invoice items, which are not yet attached to any invoices. Set to `false` to only show invoice items already attached to invoices. If unspecified, no filter is applied. */\n pending?: boolean, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": " created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.customer": {
        "rendered": "\n/** The identifier of the customer whose invoice items to return. If none is provided, all invoice items will be returned. */\n customer?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice": {
        "rendered": "\n/** Only return invoice items belonging to this invoice. If none is provided, all invoice items will be returned. If specifying an invoice, no customer identifier is needed. */\n invoice?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.pending": {
        "rendered": "\n/** Set to `true` to only show pending invoice items, which are not yet attached to any invoices. Set to `false` to only show invoice items already attached to invoices. If unspecified, no filter is applied. */\n pending?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/invoiceitems": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/v1/invoiceitems/{invoiceitem}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/invoiceitems/{invoiceitem}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/invoiceitems/{invoiceitem}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/invoices": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The collection method of the invoice to retrieve. Either `charge_automatically` or `send_invoice`. */\n collection_method?: \"charge_automatically\" | \"send_invoice\",  created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** Only return invoices for the customer specified by this customer ID. */\n customer?: string,  due_date?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, \n/** The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview) */\n status?: \"draft\" | \"open\" | \"paid\" | \"uncollectible\" | \"void\", \n/** Only return invoices for the subscription specified by this subscription ID. */\n subscription?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.collection_method": {
        "rendered": "\n/** The collection method of the invoice to retrieve. Either `charge_automatically` or `send_invoice`. */\n collection_method?: \"charge_automatically\" | \"send_invoice\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": " created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.customer": {
        "rendered": "\n/** Only return invoices for the customer specified by this customer ID. */\n customer?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.due_date": {
        "rendered": " due_date?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.status": {
        "rendered": "\n/** The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview) */\n status?: \"draft\" | \"open\" | \"paid\" | \"uncollectible\" | \"void\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription": {
        "rendered": "\n/** Only return invoices for the subscription specified by this subscription ID. */\n subscription?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/invoices": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/invoices/search": {
    "query": {
      ".query": {
        "rendered": " query?: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results. */\n page?: string, \n/** The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for invoices](https://stripe.com/docs/search#query-fields-for-invoices). */\n query: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results. */\n page?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for invoices](https://stripe.com/docs/search#query-fields-for-invoices). */\n query: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/invoices/upcoming": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Settings for automatic tax lookup for this invoice preview. */\n automatic_tax: {  enabled?: boolean, }, \n/** The code of the coupon to apply. If `subscription` or `subscription_items` is provided, the invoice returned will preview updating or creating a subscription with that coupon. Otherwise, it will preview applying that coupon to the customer for the next upcoming invoice from among the customer's subscriptions. The invoice can be previewed without a coupon by passing this value as an empty string. */\n coupon?: string, \n/** The currency to preview this invoice in. Defaults to that of `customer` if not specified. */\n currency?: string, \n/** The identifier of the customer whose upcoming invoice you'd like to retrieve. */\n customer?: string, \n/** Details about the customer you want to invoice or overrides for an existing customer. */\n customer_details?: {  address?: | {  city?: string,  country?: string,  line1?: string,  line2?: string,  postal_code?: string,  state?: string, } | \"\",  shipping?: | {  address?: {  city?: string,  country?: string,  line1?: string,  line2?: string,  postal_code?: string,  state?: string, },  name?: string,  phone?: string, } | \"\",  tax?: {  ip_address?: | string | \"\", },  tax_exempt?: \"\" | \"exempt\" | \"none\" | \"reverse\",  tax_ids?: ({  type?: \"ae_trn\" | \"au_abn\" | \"au_arn\" | \"bg_uic\" | \"br_cnpj\" | \"br_cpf\" | \"ca_bn\" | \"ca_gst_hst\" | \"ca_pst_bc\" | \"ca_pst_mb\" | \"ca_pst_sk\" | \"ca_qst\" | \"ch_vat\" | \"cl_tin\" | \"eg_tin\" | \"es_cif\" | \"eu_oss_vat\" | \"eu_vat\" | \"gb_vat\" | \"ge_vat\" | \"hk_br\" | \"hu_tin\" | \"id_npwp\" | \"il_vat\" | \"in_gst\" | \"is_vat\" | \"jp_cn\" | \"jp_rn\" | \"jp_trn\" | \"ke_pin\" | \"kr_brn\" | \"li_uid\" | \"mx_rfc\" | \"my_frp\" | \"my_itn\" | \"my_sst\" | \"no_vat\" | \"nz_gst\" | \"ph_tin\" | \"ru_inn\" | \"ru_kpp\" | \"sa_vat\" | \"sg_gst\" | \"sg_uen\" | \"si_tin\" | \"th_vat\" | \"tr_tin\" | \"tw_vat\" | \"ua_vat\" | \"us_ein\" | \"za_vat\",  value?: string, })[], }, \n/** The coupons to redeem into discounts for the invoice preview. If not specified, inherits the discount from the customer or subscription. This only works for coupons directly applied to the invoice. To apply a coupon to a subscription, you must use the `coupon` parameter instead. Pass an empty string to avoid inheriting any discounts. To preview the upcoming invoice for a subscription that hasn't been created, use `coupon` instead. */\n discounts?: | ({  coupon?: string,  discount?: string, })[] | \"\", \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** List of invoice items to add or update in the upcoming invoice preview. */\n invoice_items?: ({  amount?: number,  currency?: string,  description?: string,  discountable?: boolean,  discounts?: | ({  coupon?: string,  discount?: string, })[] | \"\",  invoiceitem?: string,  metadata?: | object | \"\",  period: {  end?: number,  start?: number, },  price?: string,  price_data: {  currency?: string,  product?: string,  tax_behavior?: \"exclusive\" | \"inclusive\" | \"unspecified\",  unit_amount?: number,  unit_amount_decimal?: string, },  quantity?: number,  tax_behavior?: \"exclusive\" | \"inclusive\" | \"unspecified\",  tax_code?: | string | \"\",  tax_rates?: | (string)[] | \"\",  unit_amount?: number,  unit_amount_decimal?: string, })[], \n/** The identifier of the unstarted schedule whose upcoming invoice you'd like to retrieve. Cannot be used with subscription or subscription fields. */\n schedule?: string, \n/** The identifier of the subscription for which you'd like to retrieve the upcoming invoice. If not provided, but a `subscription_items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_items` is provided, you will retrieve the next upcoming invoice from among the customer's subscriptions. */\n subscription?: string, \n/** For new subscriptions, a future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. For existing subscriptions, the value can only be set to `now` or `unchanged`. */\n subscription_billing_cycle_anchor?: | \"now\" | \"unchanged\" | number, \n/** Timestamp indicating when the subscription should be scheduled to cancel. Will prorate if within the current period and prorations have been enabled using `proration_behavior`. */\n subscription_cancel_at?: | number | \"\", \n/** Boolean indicating whether this subscription should cancel at the end of the current period. */\n subscription_cancel_at_period_end?: boolean, \n/** This simulates the subscription being canceled or expired immediately. */\n subscription_cancel_now?: boolean, \n/** If provided, the invoice returned will preview updating or creating a subscription with these default tax rates. The default tax rates will apply to any line item that does not have `tax_rates` set. */\n subscription_default_tax_rates?: | (string)[] | \"\", \n/** A list of up to 20 subscription items, each with an attached price. */\n subscription_items?: ({  billing_thresholds?: | {  usage_gte?: number, } | \"\",  clear_usage?: boolean,  deleted?: boolean,  id?: string,  metadata?: | object | \"\",  price?: string,  price_data: {  currency?: string,  product?: string,  recurring: {  interval?: \"day\" | \"month\" | \"week\" | \"year\",  interval_count?: number, },  tax_behavior?: \"exclusive\" | \"inclusive\" | \"unspecified\",  unit_amount?: number,  unit_amount_decimal?: string, },  quantity?: number,  tax_rates?: | (string)[] | \"\", })[], \n/** Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. The default value is `create_prorations`. */\n subscription_proration_behavior?: \"always_invoice\" | \"create_prorations\" | \"none\", \n/** If previewing an update to a subscription, and doing proration, `subscription_proration_date` forces the proration to be calculated as though the update was done at the specified time. The time given must be within the current subscription period and within the current phase of the schedule backing this subscription, if the schedule exists. If set, `subscription`, and one of `subscription_items`, or `subscription_trial_end` are required. Also, `subscription_proration_behavior` cannot be set to 'none'. */\n subscription_proration_date?: number, \n/** For paused subscriptions, setting `subscription_resume_at` to `now` will preview the invoice that will be generated if the subscription is resumed. */\n subscription_resume_at?: \"now\", \n/** Date a subscription is intended to start (can be future or past) */\n subscription_start_date?: number, \n/** If provided, the invoice returned will preview updating or creating a subscription with that trial end. If set, one of `subscription_items` or `subscription` is required. */\n subscription_trial_end?: | \"now\" | number, \n/** Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `subscription_trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `subscription_trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more. */\n subscription_trial_from_plan?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.automatic_tax": {
        "rendered": "\n/** Settings for automatic tax lookup for this invoice preview. */\n automatic_tax: {  enabled?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.automatic_tax.enabled": {
        "rendered": " enabled?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.coupon": {
        "rendered": "\n/** The code of the coupon to apply. If `subscription` or `subscription_items` is provided, the invoice returned will preview updating or creating a subscription with that coupon. Otherwise, it will preview applying that coupon to the customer for the next upcoming invoice from among the customer's subscriptions. The invoice can be previewed without a coupon by passing this value as an empty string. */\n coupon?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.currency": {
        "rendered": "\n/** The currency to preview this invoice in. Defaults to that of `customer` if not specified. */\n currency?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.customer": {
        "rendered": "\n/** The identifier of the customer whose upcoming invoice you'd like to retrieve. */\n customer?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.customer_details": {
        "rendered": "\n/** Details about the customer you want to invoice or overrides for an existing customer. */\n customer_details?: {  address?: | {  city?: string,  country?: string,  line1?: string,  line2?: string,  postal_code?: string,  state?: string, } | \"\",  shipping?: | {  address?: {  city?: string,  country?: string,  line1?: string,  line2?: string,  postal_code?: string,  state?: string, },  name?: string,  phone?: string, } | \"\",  tax?: {  ip_address?: | string | \"\", },  tax_exempt?: \"\" | \"exempt\" | \"none\" | \"reverse\",  tax_ids?: ({  type?: \"ae_trn\" | \"au_abn\" | \"au_arn\" | \"bg_uic\" | \"br_cnpj\" | \"br_cpf\" | \"ca_bn\" | \"ca_gst_hst\" | \"ca_pst_bc\" | \"ca_pst_mb\" | \"ca_pst_sk\" | \"ca_qst\" | \"ch_vat\" | \"cl_tin\" | \"eg_tin\" | \"es_cif\" | \"eu_oss_vat\" | \"eu_vat\" | \"gb_vat\" | \"ge_vat\" | \"hk_br\" | \"hu_tin\" | \"id_npwp\" | \"il_vat\" | \"in_gst\" | \"is_vat\" | \"jp_cn\" | \"jp_rn\" | \"jp_trn\" | \"ke_pin\" | \"kr_brn\" | \"li_uid\" | \"mx_rfc\" | \"my_frp\" | \"my_itn\" | \"my_sst\" | \"no_vat\" | \"nz_gst\" | \"ph_tin\" | \"ru_inn\" | \"ru_kpp\" | \"sa_vat\" | \"sg_gst\" | \"sg_uen\" | \"si_tin\" | \"th_vat\" | \"tr_tin\" | \"tw_vat\" | \"ua_vat\" | \"us_ein\" | \"za_vat\",  value?: string, })[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.customer_details.address": {
        "rendered": " address?: | {  city?: string,  country?: string,  line1?: string,  line2?: string,  postal_code?: string,  state?: string, } | \"\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.customer_details.shipping": {
        "rendered": " shipping?: | {  address?: {  city?: string,  country?: string,  line1?: string,  line2?: string,  postal_code?: string,  state?: string, },  name?: string,  phone?: string, } | \"\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.customer_details.tax": {
        "rendered": " tax?: {  ip_address?: | string | \"\", },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.customer_details.tax.ip_address": {
        "rendered": " ip_address?: | string | \"\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.customer_details.tax_exempt": {
        "rendered": " tax_exempt?: \"\" | \"exempt\" | \"none\" | \"reverse\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.customer_details.tax_ids": {
        "rendered": " tax_ids?: ({  type?: \"ae_trn\" | \"au_abn\" | \"au_arn\" | \"bg_uic\" | \"br_cnpj\" | \"br_cpf\" | \"ca_bn\" | \"ca_gst_hst\" | \"ca_pst_bc\" | \"ca_pst_mb\" | \"ca_pst_sk\" | \"ca_qst\" | \"ch_vat\" | \"cl_tin\" | \"eg_tin\" | \"es_cif\" | \"eu_oss_vat\" | \"eu_vat\" | \"gb_vat\" | \"ge_vat\" | \"hk_br\" | \"hu_tin\" | \"id_npwp\" | \"il_vat\" | \"in_gst\" | \"is_vat\" | \"jp_cn\" | \"jp_rn\" | \"jp_trn\" | \"ke_pin\" | \"kr_brn\" | \"li_uid\" | \"mx_rfc\" | \"my_frp\" | \"my_itn\" | \"my_sst\" | \"no_vat\" | \"nz_gst\" | \"ph_tin\" | \"ru_inn\" | \"ru_kpp\" | \"sa_vat\" | \"sg_gst\" | \"sg_uen\" | \"si_tin\" | \"th_vat\" | \"tr_tin\" | \"tw_vat\" | \"ua_vat\" | \"us_ein\" | \"za_vat\",  value?: string, })[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.customer_details.tax_ids.__no_name": {
        "rendered": "{  type?: \"ae_trn\" | \"au_abn\" | \"au_arn\" | \"bg_uic\" | \"br_cnpj\" | \"br_cpf\" | \"ca_bn\" | \"ca_gst_hst\" | \"ca_pst_bc\" | \"ca_pst_mb\" | \"ca_pst_sk\" | \"ca_qst\" | \"ch_vat\" | \"cl_tin\" | \"eg_tin\" | \"es_cif\" | \"eu_oss_vat\" | \"eu_vat\" | \"gb_vat\" | \"ge_vat\" | \"hk_br\" | \"hu_tin\" | \"id_npwp\" | \"il_vat\" | \"in_gst\" | \"is_vat\" | \"jp_cn\" | \"jp_rn\" | \"jp_trn\" | \"ke_pin\" | \"kr_brn\" | \"li_uid\" | \"mx_rfc\" | \"my_frp\" | \"my_itn\" | \"my_sst\" | \"no_vat\" | \"nz_gst\" | \"ph_tin\" | \"ru_inn\" | \"ru_kpp\" | \"sa_vat\" | \"sg_gst\" | \"sg_uen\" | \"si_tin\" | \"th_vat\" | \"tr_tin\" | \"tw_vat\" | \"ua_vat\" | \"us_ein\" | \"za_vat\",  value?: string, }",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.customer_details.tax_ids.__no_name.type": {
        "rendered": " type?: \"ae_trn\" | \"au_abn\" | \"au_arn\" | \"bg_uic\" | \"br_cnpj\" | \"br_cpf\" | \"ca_bn\" | \"ca_gst_hst\" | \"ca_pst_bc\" | \"ca_pst_mb\" | \"ca_pst_sk\" | \"ca_qst\" | \"ch_vat\" | \"cl_tin\" | \"eg_tin\" | \"es_cif\" | \"eu_oss_vat\" | \"eu_vat\" | \"gb_vat\" | \"ge_vat\" | \"hk_br\" | \"hu_tin\" | \"id_npwp\" | \"il_vat\" | \"in_gst\" | \"is_vat\" | \"jp_cn\" | \"jp_rn\" | \"jp_trn\" | \"ke_pin\" | \"kr_brn\" | \"li_uid\" | \"mx_rfc\" | \"my_frp\" | \"my_itn\" | \"my_sst\" | \"no_vat\" | \"nz_gst\" | \"ph_tin\" | \"ru_inn\" | \"ru_kpp\" | \"sa_vat\" | \"sg_gst\" | \"sg_uen\" | \"si_tin\" | \"th_vat\" | \"tr_tin\" | \"tw_vat\" | \"ua_vat\" | \"us_ein\" | \"za_vat\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.customer_details.tax_ids.__no_name.value": {
        "rendered": " value?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.discounts": {
        "rendered": "\n/** The coupons to redeem into discounts for the invoice preview. If not specified, inherits the discount from the customer or subscription. This only works for coupons directly applied to the invoice. To apply a coupon to a subscription, you must use the `coupon` parameter instead. Pass an empty string to avoid inheriting any discounts. To preview the upcoming invoice for a subscription that hasn't been created, use `coupon` instead. */\n discounts?: | ({  coupon?: string,  discount?: string, })[] | \"\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items": {
        "rendered": "\n/** List of invoice items to add or update in the upcoming invoice preview. */\n invoice_items?: ({  amount?: number,  currency?: string,  description?: string,  discountable?: boolean,  discounts?: | ({  coupon?: string,  discount?: string, })[] | \"\",  invoiceitem?: string,  metadata?: | object | \"\",  period: {  end?: number,  start?: number, },  price?: string,  price_data: {  currency?: string,  product?: string,  tax_behavior?: \"exclusive\" | \"inclusive\" | \"unspecified\",  unit_amount?: number,  unit_amount_decimal?: string, },  quantity?: number,  tax_behavior?: \"exclusive\" | \"inclusive\" | \"unspecified\",  tax_code?: | string | \"\",  tax_rates?: | (string)[] | \"\",  unit_amount?: number,  unit_amount_decimal?: string, })[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name": {
        "rendered": "{  amount?: number,  currency?: string,  description?: string,  discountable?: boolean,  discounts?: | ({  coupon?: string,  discount?: string, })[] | \"\",  invoiceitem?: string,  metadata?: | object | \"\",  period: {  end?: number,  start?: number, },  price?: string,  price_data: {  currency?: string,  product?: string,  tax_behavior?: \"exclusive\" | \"inclusive\" | \"unspecified\",  unit_amount?: number,  unit_amount_decimal?: string, },  quantity?: number,  tax_behavior?: \"exclusive\" | \"inclusive\" | \"unspecified\",  tax_code?: | string | \"\",  tax_rates?: | (string)[] | \"\",  unit_amount?: number,  unit_amount_decimal?: string, }",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.amount": {
        "rendered": " amount?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.currency": {
        "rendered": " currency?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.description": {
        "rendered": " description?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.discountable": {
        "rendered": " discountable?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.discounts": {
        "rendered": " discounts?: | ({  coupon?: string,  discount?: string, })[] | \"\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.invoiceitem": {
        "rendered": " invoiceitem?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.metadata": {
        "rendered": " metadata?: | object | \"\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.period": {
        "rendered": " period: {  end?: number,  start?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.period.end": {
        "rendered": " end?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.period.start": {
        "rendered": " start?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.price": {
        "rendered": " price?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.price_data": {
        "rendered": " price_data: {  currency?: string,  product?: string,  tax_behavior?: \"exclusive\" | \"inclusive\" | \"unspecified\",  unit_amount?: number,  unit_amount_decimal?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.price_data.currency": {
        "rendered": " currency?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.price_data.product": {
        "rendered": " product?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.price_data.tax_behavior": {
        "rendered": " tax_behavior?: \"exclusive\" | \"inclusive\" | \"unspecified\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.price_data.unit_amount": {
        "rendered": " unit_amount?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.price_data.unit_amount_decimal": {
        "rendered": " unit_amount_decimal?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.quantity": {
        "rendered": " quantity?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.tax_behavior": {
        "rendered": " tax_behavior?: \"exclusive\" | \"inclusive\" | \"unspecified\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.tax_code": {
        "rendered": " tax_code?: | string | \"\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.tax_rates": {
        "rendered": " tax_rates?: | (string)[] | \"\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.unit_amount": {
        "rendered": " unit_amount?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.unit_amount_decimal": {
        "rendered": " unit_amount_decimal?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.schedule": {
        "rendered": "\n/** The identifier of the unstarted schedule whose upcoming invoice you'd like to retrieve. Cannot be used with subscription or subscription fields. */\n schedule?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription": {
        "rendered": "\n/** The identifier of the subscription for which you'd like to retrieve the upcoming invoice. If not provided, but a `subscription_items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_items` is provided, you will retrieve the next upcoming invoice from among the customer's subscriptions. */\n subscription?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_billing_cycle_anchor": {
        "rendered": "\n/** For new subscriptions, a future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. For existing subscriptions, the value can only be set to `now` or `unchanged`. */\n subscription_billing_cycle_anchor?: | \"now\" | \"unchanged\" | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_cancel_at": {
        "rendered": "\n/** Timestamp indicating when the subscription should be scheduled to cancel. Will prorate if within the current period and prorations have been enabled using `proration_behavior`. */\n subscription_cancel_at?: | number | \"\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_cancel_at_period_end": {
        "rendered": "\n/** Boolean indicating whether this subscription should cancel at the end of the current period. */\n subscription_cancel_at_period_end?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_cancel_now": {
        "rendered": "\n/** This simulates the subscription being canceled or expired immediately. */\n subscription_cancel_now?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_default_tax_rates": {
        "rendered": "\n/** If provided, the invoice returned will preview updating or creating a subscription with these default tax rates. The default tax rates will apply to any line item that does not have `tax_rates` set. */\n subscription_default_tax_rates?: | (string)[] | \"\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_items": {
        "rendered": "\n/** A list of up to 20 subscription items, each with an attached price. */\n subscription_items?: ({  billing_thresholds?: | {  usage_gte?: number, } | \"\",  clear_usage?: boolean,  deleted?: boolean,  id?: string,  metadata?: | object | \"\",  price?: string,  price_data: {  currency?: string,  product?: string,  recurring: {  interval?: \"day\" | \"month\" | \"week\" | \"year\",  interval_count?: number, },  tax_behavior?: \"exclusive\" | \"inclusive\" | \"unspecified\",  unit_amount?: number,  unit_amount_decimal?: string, },  quantity?: number,  tax_rates?: | (string)[] | \"\", })[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_items.__no_name": {
        "rendered": "{  billing_thresholds?: | {  usage_gte?: number, } | \"\",  clear_usage?: boolean,  deleted?: boolean,  id?: string,  metadata?: | object | \"\",  price?: string,  price_data: {  currency?: string,  product?: string,  recurring: {  interval?: \"day\" | \"month\" | \"week\" | \"year\",  interval_count?: number, },  tax_behavior?: \"exclusive\" | \"inclusive\" | \"unspecified\",  unit_amount?: number,  unit_amount_decimal?: string, },  quantity?: number,  tax_rates?: | (string)[] | \"\", }",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_items.__no_name.billing_thresholds": {
        "rendered": " billing_thresholds?: | {  usage_gte?: number, } | \"\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_items.__no_name.clear_usage": {
        "rendered": " clear_usage?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_items.__no_name.deleted": {
        "rendered": " deleted?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_items.__no_name.id": {
        "rendered": " id?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_items.__no_name.metadata": {
        "rendered": " metadata?: | object | \"\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_items.__no_name.price": {
        "rendered": " price?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_items.__no_name.price_data": {
        "rendered": " price_data: {  currency?: string,  product?: string,  recurring: {  interval?: \"day\" | \"month\" | \"week\" | \"year\",  interval_count?: number, },  tax_behavior?: \"exclusive\" | \"inclusive\" | \"unspecified\",  unit_amount?: number,  unit_amount_decimal?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_items.__no_name.price_data.currency": {
        "rendered": " currency?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_items.__no_name.price_data.product": {
        "rendered": " product?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_items.__no_name.price_data.recurring": {
        "rendered": " recurring: {  interval?: \"day\" | \"month\" | \"week\" | \"year\",  interval_count?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_items.__no_name.price_data.recurring.interval": {
        "rendered": " interval?: \"day\" | \"month\" | \"week\" | \"year\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_items.__no_name.price_data.recurring.interval_count": {
        "rendered": " interval_count?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_items.__no_name.price_data.tax_behavior": {
        "rendered": " tax_behavior?: \"exclusive\" | \"inclusive\" | \"unspecified\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_items.__no_name.price_data.unit_amount": {
        "rendered": " unit_amount?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_items.__no_name.price_data.unit_amount_decimal": {
        "rendered": " unit_amount_decimal?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_items.__no_name.quantity": {
        "rendered": " quantity?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_items.__no_name.tax_rates": {
        "rendered": " tax_rates?: | (string)[] | \"\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_proration_behavior": {
        "rendered": "\n/** Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. The default value is `create_prorations`. */\n subscription_proration_behavior?: \"always_invoice\" | \"create_prorations\" | \"none\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_proration_date": {
        "rendered": "\n/** If previewing an update to a subscription, and doing proration, `subscription_proration_date` forces the proration to be calculated as though the update was done at the specified time. The time given must be within the current subscription period and within the current phase of the schedule backing this subscription, if the schedule exists. If set, `subscription`, and one of `subscription_items`, or `subscription_trial_end` are required. Also, `subscription_proration_behavior` cannot be set to 'none'. */\n subscription_proration_date?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_resume_at": {
        "rendered": "\n/** For paused subscriptions, setting `subscription_resume_at` to `now` will preview the invoice that will be generated if the subscription is resumed. */\n subscription_resume_at?: \"now\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_start_date": {
        "rendered": "\n/** Date a subscription is intended to start (can be future or past) */\n subscription_start_date?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_trial_end": {
        "rendered": "\n/** If provided, the invoice returned will preview updating or creating a subscription with that trial end. If set, one of `subscription_items` or `subscription` is required. */\n subscription_trial_end?: | \"now\" | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_trial_from_plan": {
        "rendered": "\n/** Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `subscription_trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `subscription_trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more. */\n subscription_trial_from_plan?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/invoices/upcoming/lines": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Settings for automatic tax lookup for this invoice preview. */\n automatic_tax: {  enabled?: boolean, }, \n/** The code of the coupon to apply. If `subscription` or `subscription_items` is provided, the invoice returned will preview updating or creating a subscription with that coupon. Otherwise, it will preview applying that coupon to the customer for the next upcoming invoice from among the customer's subscriptions. The invoice can be previewed without a coupon by passing this value as an empty string. */\n coupon?: string, \n/** The currency to preview this invoice in. Defaults to that of `customer` if not specified. */\n currency?: string, \n/** The identifier of the customer whose upcoming invoice you'd like to retrieve. */\n customer?: string, \n/** Details about the customer you want to invoice or overrides for an existing customer. */\n customer_details?: {  address?: | {  city?: string,  country?: string,  line1?: string,  line2?: string,  postal_code?: string,  state?: string, } | \"\",  shipping?: | {  address?: {  city?: string,  country?: string,  line1?: string,  line2?: string,  postal_code?: string,  state?: string, },  name?: string,  phone?: string, } | \"\",  tax?: {  ip_address?: | string | \"\", },  tax_exempt?: \"\" | \"exempt\" | \"none\" | \"reverse\",  tax_ids?: ({  type?: \"ae_trn\" | \"au_abn\" | \"au_arn\" | \"bg_uic\" | \"br_cnpj\" | \"br_cpf\" | \"ca_bn\" | \"ca_gst_hst\" | \"ca_pst_bc\" | \"ca_pst_mb\" | \"ca_pst_sk\" | \"ca_qst\" | \"ch_vat\" | \"cl_tin\" | \"eg_tin\" | \"es_cif\" | \"eu_oss_vat\" | \"eu_vat\" | \"gb_vat\" | \"ge_vat\" | \"hk_br\" | \"hu_tin\" | \"id_npwp\" | \"il_vat\" | \"in_gst\" | \"is_vat\" | \"jp_cn\" | \"jp_rn\" | \"jp_trn\" | \"ke_pin\" | \"kr_brn\" | \"li_uid\" | \"mx_rfc\" | \"my_frp\" | \"my_itn\" | \"my_sst\" | \"no_vat\" | \"nz_gst\" | \"ph_tin\" | \"ru_inn\" | \"ru_kpp\" | \"sa_vat\" | \"sg_gst\" | \"sg_uen\" | \"si_tin\" | \"th_vat\" | \"tr_tin\" | \"tw_vat\" | \"ua_vat\" | \"us_ein\" | \"za_vat\",  value?: string, })[], }, \n/** The coupons to redeem into discounts for the invoice preview. If not specified, inherits the discount from the customer or subscription. This only works for coupons directly applied to the invoice. To apply a coupon to a subscription, you must use the `coupon` parameter instead. Pass an empty string to avoid inheriting any discounts. To preview the upcoming invoice for a subscription that hasn't been created, use `coupon` instead. */\n discounts?: | ({  coupon?: string,  discount?: string, })[] | \"\", \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** List of invoice items to add or update in the upcoming invoice preview. */\n invoice_items?: ({  amount?: number,  currency?: string,  description?: string,  discountable?: boolean,  discounts?: | ({  coupon?: string,  discount?: string, })[] | \"\",  invoiceitem?: string,  metadata?: | object | \"\",  period: {  end?: number,  start?: number, },  price?: string,  price_data: {  currency?: string,  product?: string,  tax_behavior?: \"exclusive\" | \"inclusive\" | \"unspecified\",  unit_amount?: number,  unit_amount_decimal?: string, },  quantity?: number,  tax_behavior?: \"exclusive\" | \"inclusive\" | \"unspecified\",  tax_code?: | string | \"\",  tax_rates?: | (string)[] | \"\",  unit_amount?: number,  unit_amount_decimal?: string, })[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** The identifier of the unstarted schedule whose upcoming invoice you'd like to retrieve. Cannot be used with subscription or subscription fields. */\n schedule?: string, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, \n/** The identifier of the subscription for which you'd like to retrieve the upcoming invoice. If not provided, but a `subscription_items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_items` is provided, you will retrieve the next upcoming invoice from among the customer's subscriptions. */\n subscription?: string, \n/** For new subscriptions, a future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. For existing subscriptions, the value can only be set to `now` or `unchanged`. */\n subscription_billing_cycle_anchor?: | \"now\" | \"unchanged\" | number, \n/** Timestamp indicating when the subscription should be scheduled to cancel. Will prorate if within the current period and prorations have been enabled using `proration_behavior`. */\n subscription_cancel_at?: | number | \"\", \n/** Boolean indicating whether this subscription should cancel at the end of the current period. */\n subscription_cancel_at_period_end?: boolean, \n/** This simulates the subscription being canceled or expired immediately. */\n subscription_cancel_now?: boolean, \n/** If provided, the invoice returned will preview updating or creating a subscription with these default tax rates. The default tax rates will apply to any line item that does not have `tax_rates` set. */\n subscription_default_tax_rates?: | (string)[] | \"\", \n/** A list of up to 20 subscription items, each with an attached price. */\n subscription_items?: ({  billing_thresholds?: | {  usage_gte?: number, } | \"\",  clear_usage?: boolean,  deleted?: boolean,  id?: string,  metadata?: | object | \"\",  price?: string,  price_data: {  currency?: string,  product?: string,  recurring: {  interval?: \"day\" | \"month\" | \"week\" | \"year\",  interval_count?: number, },  tax_behavior?: \"exclusive\" | \"inclusive\" | \"unspecified\",  unit_amount?: number,  unit_amount_decimal?: string, },  quantity?: number,  tax_rates?: | (string)[] | \"\", })[], \n/** Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. The default value is `create_prorations`. */\n subscription_proration_behavior?: \"always_invoice\" | \"create_prorations\" | \"none\", \n/** If previewing an update to a subscription, and doing proration, `subscription_proration_date` forces the proration to be calculated as though the update was done at the specified time. The time given must be within the current subscription period and within the current phase of the schedule backing this subscription, if the schedule exists. If set, `subscription`, and one of `subscription_items`, or `subscription_trial_end` are required. Also, `subscription_proration_behavior` cannot be set to 'none'. */\n subscription_proration_date?: number, \n/** For paused subscriptions, setting `subscription_resume_at` to `now` will preview the invoice that will be generated if the subscription is resumed. */\n subscription_resume_at?: \"now\", \n/** Date a subscription is intended to start (can be future or past) */\n subscription_start_date?: number, \n/** If provided, the invoice returned will preview updating or creating a subscription with that trial end. If set, one of `subscription_items` or `subscription` is required. */\n subscription_trial_end?: | \"now\" | number, \n/** Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `subscription_trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `subscription_trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more. */\n subscription_trial_from_plan?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.automatic_tax": {
        "rendered": "\n/** Settings for automatic tax lookup for this invoice preview. */\n automatic_tax: {  enabled?: boolean, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.automatic_tax.enabled": {
        "rendered": " enabled?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.coupon": {
        "rendered": "\n/** The code of the coupon to apply. If `subscription` or `subscription_items` is provided, the invoice returned will preview updating or creating a subscription with that coupon. Otherwise, it will preview applying that coupon to the customer for the next upcoming invoice from among the customer's subscriptions. The invoice can be previewed without a coupon by passing this value as an empty string. */\n coupon?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.currency": {
        "rendered": "\n/** The currency to preview this invoice in. Defaults to that of `customer` if not specified. */\n currency?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.customer": {
        "rendered": "\n/** The identifier of the customer whose upcoming invoice you'd like to retrieve. */\n customer?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.customer_details": {
        "rendered": "\n/** Details about the customer you want to invoice or overrides for an existing customer. */\n customer_details?: {  address?: | {  city?: string,  country?: string,  line1?: string,  line2?: string,  postal_code?: string,  state?: string, } | \"\",  shipping?: | {  address?: {  city?: string,  country?: string,  line1?: string,  line2?: string,  postal_code?: string,  state?: string, },  name?: string,  phone?: string, } | \"\",  tax?: {  ip_address?: | string | \"\", },  tax_exempt?: \"\" | \"exempt\" | \"none\" | \"reverse\",  tax_ids?: ({  type?: \"ae_trn\" | \"au_abn\" | \"au_arn\" | \"bg_uic\" | \"br_cnpj\" | \"br_cpf\" | \"ca_bn\" | \"ca_gst_hst\" | \"ca_pst_bc\" | \"ca_pst_mb\" | \"ca_pst_sk\" | \"ca_qst\" | \"ch_vat\" | \"cl_tin\" | \"eg_tin\" | \"es_cif\" | \"eu_oss_vat\" | \"eu_vat\" | \"gb_vat\" | \"ge_vat\" | \"hk_br\" | \"hu_tin\" | \"id_npwp\" | \"il_vat\" | \"in_gst\" | \"is_vat\" | \"jp_cn\" | \"jp_rn\" | \"jp_trn\" | \"ke_pin\" | \"kr_brn\" | \"li_uid\" | \"mx_rfc\" | \"my_frp\" | \"my_itn\" | \"my_sst\" | \"no_vat\" | \"nz_gst\" | \"ph_tin\" | \"ru_inn\" | \"ru_kpp\" | \"sa_vat\" | \"sg_gst\" | \"sg_uen\" | \"si_tin\" | \"th_vat\" | \"tr_tin\" | \"tw_vat\" | \"ua_vat\" | \"us_ein\" | \"za_vat\",  value?: string, })[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.customer_details.address": {
        "rendered": " address?: | {  city?: string,  country?: string,  line1?: string,  line2?: string,  postal_code?: string,  state?: string, } | \"\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.customer_details.shipping": {
        "rendered": " shipping?: | {  address?: {  city?: string,  country?: string,  line1?: string,  line2?: string,  postal_code?: string,  state?: string, },  name?: string,  phone?: string, } | \"\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.customer_details.tax": {
        "rendered": " tax?: {  ip_address?: | string | \"\", },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.customer_details.tax.ip_address": {
        "rendered": " ip_address?: | string | \"\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.customer_details.tax_exempt": {
        "rendered": " tax_exempt?: \"\" | \"exempt\" | \"none\" | \"reverse\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.customer_details.tax_ids": {
        "rendered": " tax_ids?: ({  type?: \"ae_trn\" | \"au_abn\" | \"au_arn\" | \"bg_uic\" | \"br_cnpj\" | \"br_cpf\" | \"ca_bn\" | \"ca_gst_hst\" | \"ca_pst_bc\" | \"ca_pst_mb\" | \"ca_pst_sk\" | \"ca_qst\" | \"ch_vat\" | \"cl_tin\" | \"eg_tin\" | \"es_cif\" | \"eu_oss_vat\" | \"eu_vat\" | \"gb_vat\" | \"ge_vat\" | \"hk_br\" | \"hu_tin\" | \"id_npwp\" | \"il_vat\" | \"in_gst\" | \"is_vat\" | \"jp_cn\" | \"jp_rn\" | \"jp_trn\" | \"ke_pin\" | \"kr_brn\" | \"li_uid\" | \"mx_rfc\" | \"my_frp\" | \"my_itn\" | \"my_sst\" | \"no_vat\" | \"nz_gst\" | \"ph_tin\" | \"ru_inn\" | \"ru_kpp\" | \"sa_vat\" | \"sg_gst\" | \"sg_uen\" | \"si_tin\" | \"th_vat\" | \"tr_tin\" | \"tw_vat\" | \"ua_vat\" | \"us_ein\" | \"za_vat\",  value?: string, })[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.customer_details.tax_ids.__no_name": {
        "rendered": "{  type?: \"ae_trn\" | \"au_abn\" | \"au_arn\" | \"bg_uic\" | \"br_cnpj\" | \"br_cpf\" | \"ca_bn\" | \"ca_gst_hst\" | \"ca_pst_bc\" | \"ca_pst_mb\" | \"ca_pst_sk\" | \"ca_qst\" | \"ch_vat\" | \"cl_tin\" | \"eg_tin\" | \"es_cif\" | \"eu_oss_vat\" | \"eu_vat\" | \"gb_vat\" | \"ge_vat\" | \"hk_br\" | \"hu_tin\" | \"id_npwp\" | \"il_vat\" | \"in_gst\" | \"is_vat\" | \"jp_cn\" | \"jp_rn\" | \"jp_trn\" | \"ke_pin\" | \"kr_brn\" | \"li_uid\" | \"mx_rfc\" | \"my_frp\" | \"my_itn\" | \"my_sst\" | \"no_vat\" | \"nz_gst\" | \"ph_tin\" | \"ru_inn\" | \"ru_kpp\" | \"sa_vat\" | \"sg_gst\" | \"sg_uen\" | \"si_tin\" | \"th_vat\" | \"tr_tin\" | \"tw_vat\" | \"ua_vat\" | \"us_ein\" | \"za_vat\",  value?: string, }",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.customer_details.tax_ids.__no_name.type": {
        "rendered": " type?: \"ae_trn\" | \"au_abn\" | \"au_arn\" | \"bg_uic\" | \"br_cnpj\" | \"br_cpf\" | \"ca_bn\" | \"ca_gst_hst\" | \"ca_pst_bc\" | \"ca_pst_mb\" | \"ca_pst_sk\" | \"ca_qst\" | \"ch_vat\" | \"cl_tin\" | \"eg_tin\" | \"es_cif\" | \"eu_oss_vat\" | \"eu_vat\" | \"gb_vat\" | \"ge_vat\" | \"hk_br\" | \"hu_tin\" | \"id_npwp\" | \"il_vat\" | \"in_gst\" | \"is_vat\" | \"jp_cn\" | \"jp_rn\" | \"jp_trn\" | \"ke_pin\" | \"kr_brn\" | \"li_uid\" | \"mx_rfc\" | \"my_frp\" | \"my_itn\" | \"my_sst\" | \"no_vat\" | \"nz_gst\" | \"ph_tin\" | \"ru_inn\" | \"ru_kpp\" | \"sa_vat\" | \"sg_gst\" | \"sg_uen\" | \"si_tin\" | \"th_vat\" | \"tr_tin\" | \"tw_vat\" | \"ua_vat\" | \"us_ein\" | \"za_vat\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.customer_details.tax_ids.__no_name.value": {
        "rendered": " value?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.discounts": {
        "rendered": "\n/** The coupons to redeem into discounts for the invoice preview. If not specified, inherits the discount from the customer or subscription. This only works for coupons directly applied to the invoice. To apply a coupon to a subscription, you must use the `coupon` parameter instead. Pass an empty string to avoid inheriting any discounts. To preview the upcoming invoice for a subscription that hasn't been created, use `coupon` instead. */\n discounts?: | ({  coupon?: string,  discount?: string, })[] | \"\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items": {
        "rendered": "\n/** List of invoice items to add or update in the upcoming invoice preview. */\n invoice_items?: ({  amount?: number,  currency?: string,  description?: string,  discountable?: boolean,  discounts?: | ({  coupon?: string,  discount?: string, })[] | \"\",  invoiceitem?: string,  metadata?: | object | \"\",  period: {  end?: number,  start?: number, },  price?: string,  price_data: {  currency?: string,  product?: string,  tax_behavior?: \"exclusive\" | \"inclusive\" | \"unspecified\",  unit_amount?: number,  unit_amount_decimal?: string, },  quantity?: number,  tax_behavior?: \"exclusive\" | \"inclusive\" | \"unspecified\",  tax_code?: | string | \"\",  tax_rates?: | (string)[] | \"\",  unit_amount?: number,  unit_amount_decimal?: string, })[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name": {
        "rendered": "{  amount?: number,  currency?: string,  description?: string,  discountable?: boolean,  discounts?: | ({  coupon?: string,  discount?: string, })[] | \"\",  invoiceitem?: string,  metadata?: | object | \"\",  period: {  end?: number,  start?: number, },  price?: string,  price_data: {  currency?: string,  product?: string,  tax_behavior?: \"exclusive\" | \"inclusive\" | \"unspecified\",  unit_amount?: number,  unit_amount_decimal?: string, },  quantity?: number,  tax_behavior?: \"exclusive\" | \"inclusive\" | \"unspecified\",  tax_code?: | string | \"\",  tax_rates?: | (string)[] | \"\",  unit_amount?: number,  unit_amount_decimal?: string, }",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.amount": {
        "rendered": " amount?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.currency": {
        "rendered": " currency?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.description": {
        "rendered": " description?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.discountable": {
        "rendered": " discountable?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.discounts": {
        "rendered": " discounts?: | ({  coupon?: string,  discount?: string, })[] | \"\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.invoiceitem": {
        "rendered": " invoiceitem?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.metadata": {
        "rendered": " metadata?: | object | \"\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.period": {
        "rendered": " period: {  end?: number,  start?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.period.end": {
        "rendered": " end?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.period.start": {
        "rendered": " start?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.price": {
        "rendered": " price?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.price_data": {
        "rendered": " price_data: {  currency?: string,  product?: string,  tax_behavior?: \"exclusive\" | \"inclusive\" | \"unspecified\",  unit_amount?: number,  unit_amount_decimal?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.price_data.currency": {
        "rendered": " currency?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.price_data.product": {
        "rendered": " product?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.price_data.tax_behavior": {
        "rendered": " tax_behavior?: \"exclusive\" | \"inclusive\" | \"unspecified\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.price_data.unit_amount": {
        "rendered": " unit_amount?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.price_data.unit_amount_decimal": {
        "rendered": " unit_amount_decimal?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.quantity": {
        "rendered": " quantity?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.tax_behavior": {
        "rendered": " tax_behavior?: \"exclusive\" | \"inclusive\" | \"unspecified\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.tax_code": {
        "rendered": " tax_code?: | string | \"\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.tax_rates": {
        "rendered": " tax_rates?: | (string)[] | \"\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.unit_amount": {
        "rendered": " unit_amount?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.invoice_items.__no_name.unit_amount_decimal": {
        "rendered": " unit_amount_decimal?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.schedule": {
        "rendered": "\n/** The identifier of the unstarted schedule whose upcoming invoice you'd like to retrieve. Cannot be used with subscription or subscription fields. */\n schedule?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription": {
        "rendered": "\n/** The identifier of the subscription for which you'd like to retrieve the upcoming invoice. If not provided, but a `subscription_items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_items` is provided, you will retrieve the next upcoming invoice from among the customer's subscriptions. */\n subscription?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_billing_cycle_anchor": {
        "rendered": "\n/** For new subscriptions, a future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. For existing subscriptions, the value can only be set to `now` or `unchanged`. */\n subscription_billing_cycle_anchor?: | \"now\" | \"unchanged\" | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_cancel_at": {
        "rendered": "\n/** Timestamp indicating when the subscription should be scheduled to cancel. Will prorate if within the current period and prorations have been enabled using `proration_behavior`. */\n subscription_cancel_at?: | number | \"\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_cancel_at_period_end": {
        "rendered": "\n/** Boolean indicating whether this subscription should cancel at the end of the current period. */\n subscription_cancel_at_period_end?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_cancel_now": {
        "rendered": "\n/** This simulates the subscription being canceled or expired immediately. */\n subscription_cancel_now?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_default_tax_rates": {
        "rendered": "\n/** If provided, the invoice returned will preview updating or creating a subscription with these default tax rates. The default tax rates will apply to any line item that does not have `tax_rates` set. */\n subscription_default_tax_rates?: | (string)[] | \"\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_items": {
        "rendered": "\n/** A list of up to 20 subscription items, each with an attached price. */\n subscription_items?: ({  billing_thresholds?: | {  usage_gte?: number, } | \"\",  clear_usage?: boolean,  deleted?: boolean,  id?: string,  metadata?: | object | \"\",  price?: string,  price_data: {  currency?: string,  product?: string,  recurring: {  interval?: \"day\" | \"month\" | \"week\" | \"year\",  interval_count?: number, },  tax_behavior?: \"exclusive\" | \"inclusive\" | \"unspecified\",  unit_amount?: number,  unit_amount_decimal?: string, },  quantity?: number,  tax_rates?: | (string)[] | \"\", })[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_items.__no_name": {
        "rendered": "{  billing_thresholds?: | {  usage_gte?: number, } | \"\",  clear_usage?: boolean,  deleted?: boolean,  id?: string,  metadata?: | object | \"\",  price?: string,  price_data: {  currency?: string,  product?: string,  recurring: {  interval?: \"day\" | \"month\" | \"week\" | \"year\",  interval_count?: number, },  tax_behavior?: \"exclusive\" | \"inclusive\" | \"unspecified\",  unit_amount?: number,  unit_amount_decimal?: string, },  quantity?: number,  tax_rates?: | (string)[] | \"\", }",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_items.__no_name.billing_thresholds": {
        "rendered": " billing_thresholds?: | {  usage_gte?: number, } | \"\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_items.__no_name.clear_usage": {
        "rendered": " clear_usage?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_items.__no_name.deleted": {
        "rendered": " deleted?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_items.__no_name.id": {
        "rendered": " id?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_items.__no_name.metadata": {
        "rendered": " metadata?: | object | \"\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_items.__no_name.price": {
        "rendered": " price?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_items.__no_name.price_data": {
        "rendered": " price_data: {  currency?: string,  product?: string,  recurring: {  interval?: \"day\" | \"month\" | \"week\" | \"year\",  interval_count?: number, },  tax_behavior?: \"exclusive\" | \"inclusive\" | \"unspecified\",  unit_amount?: number,  unit_amount_decimal?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_items.__no_name.price_data.currency": {
        "rendered": " currency?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_items.__no_name.price_data.product": {
        "rendered": " product?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_items.__no_name.price_data.recurring": {
        "rendered": " recurring: {  interval?: \"day\" | \"month\" | \"week\" | \"year\",  interval_count?: number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_items.__no_name.price_data.recurring.interval": {
        "rendered": " interval?: \"day\" | \"month\" | \"week\" | \"year\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_items.__no_name.price_data.recurring.interval_count": {
        "rendered": " interval_count?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_items.__no_name.price_data.tax_behavior": {
        "rendered": " tax_behavior?: \"exclusive\" | \"inclusive\" | \"unspecified\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_items.__no_name.price_data.unit_amount": {
        "rendered": " unit_amount?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_items.__no_name.price_data.unit_amount_decimal": {
        "rendered": " unit_amount_decimal?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_items.__no_name.quantity": {
        "rendered": " quantity?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_items.__no_name.tax_rates": {
        "rendered": " tax_rates?: | (string)[] | \"\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_proration_behavior": {
        "rendered": "\n/** Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. The default value is `create_prorations`. */\n subscription_proration_behavior?: \"always_invoice\" | \"create_prorations\" | \"none\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_proration_date": {
        "rendered": "\n/** If previewing an update to a subscription, and doing proration, `subscription_proration_date` forces the proration to be calculated as though the update was done at the specified time. The time given must be within the current subscription period and within the current phase of the schedule backing this subscription, if the schedule exists. If set, `subscription`, and one of `subscription_items`, or `subscription_trial_end` are required. Also, `subscription_proration_behavior` cannot be set to 'none'. */\n subscription_proration_date?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_resume_at": {
        "rendered": "\n/** For paused subscriptions, setting `subscription_resume_at` to `now` will preview the invoice that will be generated if the subscription is resumed. */\n subscription_resume_at?: \"now\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_start_date": {
        "rendered": "\n/** Date a subscription is intended to start (can be future or past) */\n subscription_start_date?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_trial_end": {
        "rendered": "\n/** If provided, the invoice returned will preview updating or creating a subscription with that trial end. If set, one of `subscription_items` or `subscription` is required. */\n subscription_trial_end?: | \"now\" | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription_trial_from_plan": {
        "rendered": "\n/** Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `subscription_trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `subscription_trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more. */\n subscription_trial_from_plan?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/v1/invoices/{invoice}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/invoices/{invoice}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/invoices/{invoice}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/invoices/{invoice}/finalize": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/invoices/{invoice}/lines": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/invoices/{invoice}/mark_uncollectible": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/invoices/{invoice}/pay": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/invoices/{invoice}/send": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/invoices/{invoice}/void": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/issuing/authorizations": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Only return authorizations that belong to the given card. */\n card?: string, \n/** Only return authorizations that belong to the given cardholder. */\n cardholder?: string, \n/** Only return authorizations that were created during the given date interval. */\n created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, \n/** Only return authorizations with the given status. One of `pending`, `closed`, or `reversed`. */\n status?: \"closed\" | \"pending\" | \"reversed\", },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.card": {
        "rendered": "\n/** Only return authorizations that belong to the given card. */\n card?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cardholder": {
        "rendered": "\n/** Only return authorizations that belong to the given cardholder. */\n cardholder?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": "\n/** Only return authorizations that were created during the given date interval. */\n created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.status": {
        "rendered": "\n/** Only return authorizations with the given status. One of `pending`, `closed`, or `reversed`. */\n status?: \"closed\" | \"pending\" | \"reversed\",",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/issuing/authorizations/{authorization}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/issuing/authorizations/{authorization}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/issuing/authorizations/{authorization}/approve": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/issuing/authorizations/{authorization}/decline": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/issuing/cardholders": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Only return cardholders that were created during the given date interval. */\n created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** Only return cardholders that have the given email address. */\n email?: string, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** Only return cardholders that have the given phone number. */\n phone_number?: string, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, \n/** Only return cardholders that have the given status. One of `active`, `inactive`, or `blocked`. */\n status?: \"active\" | \"blocked\" | \"inactive\", \n/** Only return cardholders that have the given type. One of `individual` or `company`. */\n type?: \"company\" | \"individual\", },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": "\n/** Only return cardholders that were created during the given date interval. */\n created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.email": {
        "rendered": "\n/** Only return cardholders that have the given email address. */\n email?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.phone_number": {
        "rendered": "\n/** Only return cardholders that have the given phone number. */\n phone_number?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.status": {
        "rendered": "\n/** Only return cardholders that have the given status. One of `active`, `inactive`, or `blocked`. */\n status?: \"active\" | \"blocked\" | \"inactive\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.type": {
        "rendered": "\n/** Only return cardholders that have the given type. One of `individual` or `company`. */\n type?: \"company\" | \"individual\",",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/issuing/cardholders": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/issuing/cardholders/{cardholder}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/issuing/cardholders/{cardholder}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/issuing/cards": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Only return cards belonging to the Cardholder with the provided ID. */\n cardholder?: string, \n/** Only return cards that were issued during the given date interval. */\n created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Only return cards that have the given expiration month. */\n exp_month?: number, \n/** Only return cards that have the given expiration year. */\n exp_year?: number, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** Only return cards that have the given last four digits. */\n last4?: string, \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, \n/** Only return cards that have the given status. One of `active`, `inactive`, or `canceled`. */\n status?: \"active\" | \"canceled\" | \"inactive\", \n/** Only return cards that have the given type. One of `virtual` or `physical`. */\n type?: \"physical\" | \"virtual\", },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cardholder": {
        "rendered": "\n/** Only return cards belonging to the Cardholder with the provided ID. */\n cardholder?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": "\n/** Only return cards that were issued during the given date interval. */\n created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.exp_month": {
        "rendered": "\n/** Only return cards that have the given expiration month. */\n exp_month?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.exp_year": {
        "rendered": "\n/** Only return cards that have the given expiration year. */\n exp_year?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.last4": {
        "rendered": "\n/** Only return cards that have the given last four digits. */\n last4?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.status": {
        "rendered": "\n/** Only return cards that have the given status. One of `active`, `inactive`, or `canceled`. */\n status?: \"active\" | \"canceled\" | \"inactive\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.type": {
        "rendered": "\n/** Only return cards that have the given type. One of `virtual` or `physical`. */\n type?: \"physical\" | \"virtual\",",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/issuing/cards": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/issuing/cards/{card}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/issuing/cards/{card}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/issuing/disputes": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Select Issuing disputes that were created during the given date interval. */\n created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, \n/** Select Issuing disputes with the given status. */\n status?: \"expired\" | \"lost\" | \"submitted\" | \"unsubmitted\" | \"won\", \n/** Select the Issuing dispute for the given transaction. */\n transaction?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": "\n/** Select Issuing disputes that were created during the given date interval. */\n created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.status": {
        "rendered": "\n/** Select Issuing disputes with the given status. */\n status?: \"expired\" | \"lost\" | \"submitted\" | \"unsubmitted\" | \"won\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.transaction": {
        "rendered": "\n/** Select the Issuing dispute for the given transaction. */\n transaction?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/issuing/disputes": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/issuing/disputes/{dispute}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/issuing/disputes/{dispute}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/issuing/disputes/{dispute}/submit": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/issuing/settlements": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Only return issuing settlements that were created during the given date interval. */\n created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": "\n/** Only return issuing settlements that were created during the given date interval. */\n created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/issuing/settlements/{settlement}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/issuing/settlements/{settlement}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/issuing/transactions": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Only return transactions that belong to the given card. */\n card?: string, \n/** Only return transactions that belong to the given cardholder. */\n cardholder?: string, \n/** Only return transactions that were created during the given date interval. */\n created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, \n/** Only return transactions that have the given type. One of `capture` or `refund`. */\n type?: \"capture\" | \"refund\", },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.card": {
        "rendered": "\n/** Only return transactions that belong to the given card. */\n card?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.cardholder": {
        "rendered": "\n/** Only return transactions that belong to the given cardholder. */\n cardholder?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": "\n/** Only return transactions that were created during the given date interval. */\n created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.type": {
        "rendered": "\n/** Only return transactions that have the given type. One of `capture` or `refund`. */\n type?: \"capture\" | \"refund\",",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/issuing/transactions/{transaction}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/issuing/transactions/{transaction}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/link_account_sessions": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/link_account_sessions/{session}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/linked_accounts": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** If present, only return accounts that belong to the specified account holder. `account_holder[customer]` and `account_holder[account]` are mutually exclusive. */\n account_holder?: {  account?: string,  customer?: string, }, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** If present, only return accounts that were collected as part of the given session. */\n session?: string, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.account_holder": {
        "rendered": "\n/** If present, only return accounts that belong to the specified account holder. `account_holder[customer]` and `account_holder[account]` are mutually exclusive. */\n account_holder?: {  account?: string,  customer?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.account_holder.account": {
        "rendered": " account?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.account_holder.customer": {
        "rendered": " customer?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.session": {
        "rendered": "\n/** If present, only return accounts that were collected as part of the given session. */\n session?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/linked_accounts/{account}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/linked_accounts/{account}/disconnect": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/linked_accounts/{account}/owners": {
    "query": {
      ".query": {
        "rendered": " query?: { \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** The ID of the ownership object to fetch owners from. */\n ownership: string, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ownership": {
        "rendered": "\n/** The ID of the ownership object to fetch owners from. */\n ownership: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/linked_accounts/{account}/refresh": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/mandates/{mandate}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/payment_intents": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */\n created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** Only return PaymentIntents for the customer specified by this customer ID. */\n customer?: string, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": "\n/** A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */\n created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.customer": {
        "rendered": "\n/** Only return PaymentIntents for the customer specified by this customer ID. */\n customer?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/payment_intents": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/payment_intents/search": {
    "query": {
      ".query": {
        "rendered": " query?: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results. */\n page?: string, \n/** The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for payment intents](https://stripe.com/docs/search#query-fields-for-payment-intents). */\n query: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results. */\n page?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for payment intents](https://stripe.com/docs/search#query-fields-for-payment-intents). */\n query: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/payment_intents/{intent}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The client secret of the PaymentIntent. Required if a publishable key is used to retrieve the source. */\n client_secret?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.client_secret": {
        "rendered": "\n/** The client secret of the PaymentIntent. Required if a publishable key is used to retrieve the source. */\n client_secret?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/payment_intents/{intent}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/payment_intents/{intent}/apply_customer_balance": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/payment_intents/{intent}/cancel": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/payment_intents/{intent}/capture": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/payment_intents/{intent}/confirm": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/payment_intents/{intent}/increment_authorization": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/payment_intents/{intent}/verify_microdeposits": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/payment_links": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Only return payment links that are active or inactive (e.g., pass `false` to list all inactive payment links). */\n active?: boolean, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.active": {
        "rendered": "\n/** Only return payment links that are active or inactive (e.g., pass `false` to list all inactive payment links). */\n active?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/payment_links": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/payment_links/{payment_link}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/payment_links/{payment_link}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/payment_links/{payment_link}/line_items": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/payment_methods": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The ID of the customer whose PaymentMethods will be retrieved. */\n customer?: string, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, \n/** An optional filter on the list, based on the object `type` field. Without the filter, the list includes all current and future payment method types. If your integration expects only one type of payment method in the response, make sure to provide a type value in the request. */\n type?: \"acss_debit\" | \"affirm\" | \"afterpay_clearpay\" | \"alipay\" | \"au_becs_debit\" | \"bacs_debit\" | \"bancontact\" | \"blik\" | \"boleto\" | \"card\" | \"customer_balance\" | \"eps\" | \"fpx\" | \"giropay\" | \"grabpay\" | \"ideal\" | \"klarna\" | \"konbini\" | \"link\" | \"oxxo\" | \"p24\" | \"paynow\" | \"pix\" | \"promptpay\" | \"sepa_debit\" | \"sofort\" | \"us_bank_account\" | \"wechat_pay\", },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.customer": {
        "rendered": "\n/** The ID of the customer whose PaymentMethods will be retrieved. */\n customer?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.type": {
        "rendered": "\n/** An optional filter on the list, based on the object `type` field. Without the filter, the list includes all current and future payment method types. If your integration expects only one type of payment method in the response, make sure to provide a type value in the request. */\n type?: \"acss_debit\" | \"affirm\" | \"afterpay_clearpay\" | \"alipay\" | \"au_becs_debit\" | \"bacs_debit\" | \"bancontact\" | \"blik\" | \"boleto\" | \"card\" | \"customer_balance\" | \"eps\" | \"fpx\" | \"giropay\" | \"grabpay\" | \"ideal\" | \"klarna\" | \"konbini\" | \"link\" | \"oxxo\" | \"p24\" | \"paynow\" | \"pix\" | \"promptpay\" | \"sepa_debit\" | \"sofort\" | \"us_bank_account\" | \"wechat_pay\",",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/payment_methods": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/payment_methods/{payment_method}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/payment_methods/{payment_method}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/payment_methods/{payment_method}/attach": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/payment_methods/{payment_method}/detach": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/payouts": {
    "query": {
      ".query": {
        "rendered": " query: {  arrival_date?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,  created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** The ID of an external account - only return payouts sent to this external account. */\n destination?: string, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, \n/** Only return payouts that have the given status: `pending`, `paid`, `failed`, or `canceled`. */\n status?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.arrival_date": {
        "rendered": " arrival_date?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": " created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.destination": {
        "rendered": "\n/** The ID of an external account - only return payouts sent to this external account. */\n destination?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.status": {
        "rendered": "\n/** Only return payouts that have the given status: `pending`, `paid`, `failed`, or `canceled`. */\n status?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/payouts": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/payouts/{payout}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/payouts/{payout}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/payouts/{payout}/cancel": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/payouts/{payout}/reverse": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/plans": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Only return plans that are active or inactive (e.g., pass `false` to list all inactive plans). */\n active?: boolean, \n/** A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */\n created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** Only return plans for the given product. */\n product?: string, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.active": {
        "rendered": "\n/** Only return plans that are active or inactive (e.g., pass `false` to list all inactive plans). */\n active?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": "\n/** A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */\n created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.product": {
        "rendered": "\n/** Only return plans for the given product. */\n product?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/plans": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/v1/plans/{plan}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/plans/{plan}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/plans/{plan}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/prices": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Only return prices that are active or inactive (e.g., pass `false` to list all inactive prices). */\n active?: boolean, \n/** A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */\n created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** Only return prices for the given currency. */\n currency?: string, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** Only return the price with these lookup_keys, if any exist. */\n lookup_keys?: (string)[], \n/** Only return prices for the given product. */\n product?: string, \n/** Only return prices with these recurring fields. */\n recurring?: {  interval?: \"day\" | \"month\" | \"week\" | \"year\",  usage_type?: \"licensed\" | \"metered\", }, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, \n/** Only return prices of type `recurring` or `one_time`. */\n type?: \"one_time\" | \"recurring\", },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.active": {
        "rendered": "\n/** Only return prices that are active or inactive (e.g., pass `false` to list all inactive prices). */\n active?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": "\n/** A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */\n created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.currency": {
        "rendered": "\n/** Only return prices for the given currency. */\n currency?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.lookup_keys": {
        "rendered": "\n/** Only return the price with these lookup_keys, if any exist. */\n lookup_keys?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.lookup_keys.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.product": {
        "rendered": "\n/** Only return prices for the given product. */\n product?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.recurring": {
        "rendered": "\n/** Only return prices with these recurring fields. */\n recurring?: {  interval?: \"day\" | \"month\" | \"week\" | \"year\",  usage_type?: \"licensed\" | \"metered\", },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.recurring.interval": {
        "rendered": " interval?: \"day\" | \"month\" | \"week\" | \"year\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.recurring.usage_type": {
        "rendered": " usage_type?: \"licensed\" | \"metered\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.type": {
        "rendered": "\n/** Only return prices of type `recurring` or `one_time`. */\n type?: \"one_time\" | \"recurring\",",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/prices": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/prices/search": {
    "query": {
      ".query": {
        "rendered": " query?: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results. */\n page?: string, \n/** The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for prices](https://stripe.com/docs/search#query-fields-for-prices). */\n query: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results. */\n page?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for prices](https://stripe.com/docs/search#query-fields-for-prices). */\n query: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/prices/{price}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/prices/{price}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/products": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Only return products that are active or inactive (e.g., pass `false` to list all inactive products). */\n active?: boolean, \n/** Only return products that were created during the given date interval. */\n created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** Only return products with the given IDs. Cannot be used with [starting_after](https://stripe.com/docs/api#list_products-starting_after) or [ending_before](https://stripe.com/docs/api#list_products-ending_before). */\n ids?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** Only return products that can be shipped (i.e., physical, not digital products). */\n shippable?: boolean, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, \n/** Only return products with the given url. */\n url?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.active": {
        "rendered": "\n/** Only return products that are active or inactive (e.g., pass `false` to list all inactive products). */\n active?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": "\n/** Only return products that were created during the given date interval. */\n created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ids": {
        "rendered": "\n/** Only return products with the given IDs. Cannot be used with [starting_after](https://stripe.com/docs/api#list_products-starting_after) or [ending_before](https://stripe.com/docs/api#list_products-ending_before). */\n ids?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ids.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.shippable": {
        "rendered": "\n/** Only return products that can be shipped (i.e., physical, not digital products). */\n shippable?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.url": {
        "rendered": "\n/** Only return products with the given url. */\n url?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/products": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/products/search": {
    "query": {
      ".query": {
        "rendered": " query?: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results. */\n page?: string, \n/** The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for products](https://stripe.com/docs/search#query-fields-for-products). */\n query: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results. */\n page?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for products](https://stripe.com/docs/search#query-fields-for-products). */\n query: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/v1/products/{id}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/products/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/products/{id}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/promotion_codes": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Filter promotion codes by whether they are active. */\n active?: boolean, \n/** Only return promotion codes that have this case-insensitive code. */\n code?: string, \n/** Only return promotion codes for this coupon. */\n coupon?: string, \n/** A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */\n created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** Only return promotion codes that are restricted to this customer. */\n customer?: string, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.active": {
        "rendered": "\n/** Filter promotion codes by whether they are active. */\n active?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.code": {
        "rendered": "\n/** Only return promotion codes that have this case-insensitive code. */\n code?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.coupon": {
        "rendered": "\n/** Only return promotion codes for this coupon. */\n coupon?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": "\n/** A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */\n created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.customer": {
        "rendered": "\n/** Only return promotion codes that are restricted to this customer. */\n customer?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/promotion_codes": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/promotion_codes/{promotion_code}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/promotion_codes/{promotion_code}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/quotes": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The ID of the customer whose quotes will be retrieved. */\n customer?: string, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, \n/** The status of the quote. */\n status?: \"accepted\" | \"canceled\" | \"draft\" | \"open\", \n/** Provides a list of quotes that are associated with the specified test clock. The response will not include quotes with test clocks if this and the customer parameter is not set. */\n test_clock?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.customer": {
        "rendered": "\n/** The ID of the customer whose quotes will be retrieved. */\n customer?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.status": {
        "rendered": "\n/** The status of the quote. */\n status?: \"accepted\" | \"canceled\" | \"draft\" | \"open\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.test_clock": {
        "rendered": "\n/** Provides a list of quotes that are associated with the specified test clock. The response will not include quotes with test clocks if this and the customer parameter is not set. */\n test_clock?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/quotes": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/quotes/{quote}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/quotes/{quote}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/quotes/{quote}/accept": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/quotes/{quote}/cancel": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/quotes/{quote}/computed_upfront_line_items": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/quotes/{quote}/finalize": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/quotes/{quote}/line_items": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/quotes/{quote}/pdf": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/radar/early_fraud_warnings": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Only return early fraud warnings for the charge specified by this charge ID. */\n charge?: string, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** Only return early fraud warnings for charges that were created by the PaymentIntent specified by this PaymentIntent ID. */\n payment_intent?: string, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.charge": {
        "rendered": "\n/** Only return early fraud warnings for the charge specified by this charge ID. */\n charge?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.payment_intent": {
        "rendered": "\n/** Only return early fraud warnings for charges that were created by the PaymentIntent specified by this PaymentIntent ID. */\n payment_intent?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/radar/early_fraud_warnings/{early_fraud_warning}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/radar/value_list_items": {
    "query": {
      ".query": {
        "rendered": " query?: {  created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, \n/** Return items belonging to the parent list whose value matches the specified value (using an \"is like\" match). */\n value?: string, \n/** Identifier for the parent value list this item belongs to. */\n value_list: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": " created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.value": {
        "rendered": "\n/** Return items belonging to the parent list whose value matches the specified value (using an \"is like\" match). */\n value?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.value_list": {
        "rendered": "\n/** Identifier for the parent value list this item belongs to. */\n value_list: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/radar/value_list_items": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/v1/radar/value_list_items/{item}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/radar/value_list_items/{item}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/radar/value_lists": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The alias used to reference the value list when writing rules. */\n alias?: string, \n/** A value contained within a value list - returns all value lists containing this value. */\n contains?: string,  created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.alias": {
        "rendered": "\n/** The alias used to reference the value list when writing rules. */\n alias?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.contains": {
        "rendered": "\n/** A value contained within a value list - returns all value lists containing this value. */\n contains?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": " created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/radar/value_lists": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/v1/radar/value_lists/{value_list}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/radar/value_lists/{value_list}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/radar/value_lists/{value_list}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/refunds": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Only return refunds for the charge specified by this charge ID. */\n charge?: string,  created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** Only return refunds for the PaymentIntent specified by this ID. */\n payment_intent?: string, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.charge": {
        "rendered": "\n/** Only return refunds for the charge specified by this charge ID. */\n charge?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": " created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.payment_intent": {
        "rendered": "\n/** Only return refunds for the PaymentIntent specified by this ID. */\n payment_intent?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/refunds": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/refunds/{refund}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/refunds/{refund}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/refunds/{refund}/cancel": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/reporting/report_runs": {
    "query": {
      ".query": {
        "rendered": " query: {  created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": " created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/reporting/report_runs": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/reporting/report_runs/{report_run}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/reporting/report_types": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/reporting/report_types/{report_type}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/reviews": {
    "query": {
      ".query": {
        "rendered": " query: {  created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": " created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/reviews/{review}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/reviews/{review}/approve": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/setup_attempts": {
    "query": {
      ".query": {
        "rendered": " query?: { \n/** A filter on the list, based on the object `created` field. The value\ncan be a string with an integer Unix timestamp, or it can be a\ndictionary with a number of different query options. */\n created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** Only return SetupAttempts created by the SetupIntent specified by\nthis ID. */\n setup_intent: string, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": "\n/** A filter on the list, based on the object `created` field. The value\ncan be a string with an integer Unix timestamp, or it can be a\ndictionary with a number of different query options. */\n created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.setup_intent": {
        "rendered": "\n/** Only return SetupAttempts created by the SetupIntent specified by\nthis ID. */\n setup_intent: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/setup_intents": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.\n\nIt can only be used for this Stripe Account’s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer. */\n attach_to_self?: boolean, \n/** A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */\n created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** Only return SetupIntents for the customer specified by this customer ID. */\n customer?: string, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** Only return SetupIntents associated with the specified payment method. */\n payment_method?: string, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.attach_to_self": {
        "rendered": "\n/** If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.\n\nIt can only be used for this Stripe Account’s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer. */\n attach_to_self?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": "\n/** A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */\n created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.customer": {
        "rendered": "\n/** Only return SetupIntents for the customer specified by this customer ID. */\n customer?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.payment_method": {
        "rendered": "\n/** Only return SetupIntents associated with the specified payment method. */\n payment_method?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/setup_intents": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/setup_intents/{intent}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The client secret of the SetupIntent. Required if a publishable key is used to retrieve the SetupIntent. */\n client_secret?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.client_secret": {
        "rendered": "\n/** The client secret of the SetupIntent. Required if a publishable key is used to retrieve the SetupIntent. */\n client_secret?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/setup_intents/{intent}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/setup_intents/{intent}/cancel": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/setup_intents/{intent}/confirm": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/setup_intents/{intent}/verify_microdeposits": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/shipping_rates": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Only return shipping rates that are active or inactive. */\n active?: boolean, \n/** A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */\n created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** Only return shipping rates for the given currency. */\n currency?: string, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.active": {
        "rendered": "\n/** Only return shipping rates that are active or inactive. */\n active?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": "\n/** A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */\n created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.currency": {
        "rendered": "\n/** Only return shipping rates for the given currency. */\n currency?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/shipping_rates": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/shipping_rates/{shipping_rate_token}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/shipping_rates/{shipping_rate_token}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/sigma/scheduled_query_runs": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/sigma/scheduled_query_runs/{scheduled_query_run}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/sources": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/sources/{source}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The client secret of the source. Required if a publishable key is used to retrieve the source. */\n client_secret?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.client_secret": {
        "rendered": "\n/** The client secret of the source. Required if a publishable key is used to retrieve the source. */\n client_secret?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/sources/{source}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/sources/{source}/mandate_notifications/{mandate_notification}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/sources/{source}/source_transactions": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/sources/{source}/source_transactions/{source_transaction}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/sources/{source}/verify": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/subscription_items": {
    "query": {
      ".query": {
        "rendered": " query?: { \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, \n/** The ID of the subscription whose items will be retrieved. */\n subscription: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.subscription": {
        "rendered": "\n/** The ID of the subscription whose items will be retrieved. */\n subscription: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/subscription_items": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/v1/subscription_items/{item}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/subscription_items/{item}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/subscription_items/{item}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/subscription_items/{subscription_item}/usage_record_summaries": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/subscription_items/{subscription_item}/usage_records": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/subscription_schedules": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Only return subscription schedules that were created canceled the given date interval. */\n canceled_at?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** Only return subscription schedules that completed during the given date interval. */\n completed_at?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** Only return subscription schedules that were created during the given date interval. */\n created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** Only return subscription schedules for the given customer. */\n customer?: string, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** Only return subscription schedules that were released during the given date interval. */\n released_at?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** Only return subscription schedules that have not started yet. */\n scheduled?: boolean, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.canceled_at": {
        "rendered": "\n/** Only return subscription schedules that were created canceled the given date interval. */\n canceled_at?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.completed_at": {
        "rendered": "\n/** Only return subscription schedules that completed during the given date interval. */\n completed_at?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": "\n/** Only return subscription schedules that were created during the given date interval. */\n created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.customer": {
        "rendered": "\n/** Only return subscription schedules for the given customer. */\n customer?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.released_at": {
        "rendered": "\n/** Only return subscription schedules that were released during the given date interval. */\n released_at?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.scheduled": {
        "rendered": "\n/** Only return subscription schedules that have not started yet. */\n scheduled?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/subscription_schedules": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/subscription_schedules/{schedule}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/subscription_schedules/{schedule}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/subscription_schedules/{schedule}/cancel": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/subscription_schedules/{schedule}/release": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/subscriptions": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** The collection method of the subscriptions to retrieve. Either `charge_automatically` or `send_invoice`. */\n collection_method?: \"charge_automatically\" | \"send_invoice\",  created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,  current_period_end?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,  current_period_start?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** The ID of the customer whose subscriptions will be retrieved. */\n customer?: string, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** Filter for subscriptions that contain this recurring price ID. */\n price?: string, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, \n/** The status of the subscriptions to retrieve. Passing in a value of `canceled` will return all canceled subscriptions, including those belonging to deleted customers. Pass `ended` to find subscriptions that are canceled and subscriptions that are expired due to [incomplete payment](https://stripe.com/docs/billing/subscriptions/overview#subscription-statuses). Passing in a value of `all` will return subscriptions of all statuses. If no value is supplied, all subscriptions that have not been canceled are returned. */\n status?: \"active\" | \"all\" | \"canceled\" | \"ended\" | \"incomplete\" | \"incomplete_expired\" | \"past_due\" | \"paused\" | \"trialing\" | \"unpaid\", \n/** Filter for subscriptions that are associated with the specified test clock. The response will not include subscriptions with test clocks if this and the customer parameter is not set. */\n test_clock?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.collection_method": {
        "rendered": "\n/** The collection method of the subscriptions to retrieve. Either `charge_automatically` or `send_invoice`. */\n collection_method?: \"charge_automatically\" | \"send_invoice\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": " created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.current_period_end": {
        "rendered": " current_period_end?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.current_period_start": {
        "rendered": " current_period_start?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.customer": {
        "rendered": "\n/** The ID of the customer whose subscriptions will be retrieved. */\n customer?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.price": {
        "rendered": "\n/** Filter for subscriptions that contain this recurring price ID. */\n price?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.status": {
        "rendered": "\n/** The status of the subscriptions to retrieve. Passing in a value of `canceled` will return all canceled subscriptions, including those belonging to deleted customers. Pass `ended` to find subscriptions that are canceled and subscriptions that are expired due to [incomplete payment](https://stripe.com/docs/billing/subscriptions/overview#subscription-statuses). Passing in a value of `all` will return subscriptions of all statuses. If no value is supplied, all subscriptions that have not been canceled are returned. */\n status?: \"active\" | \"all\" | \"canceled\" | \"ended\" | \"incomplete\" | \"incomplete_expired\" | \"past_due\" | \"paused\" | \"trialing\" | \"unpaid\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.test_clock": {
        "rendered": "\n/** Filter for subscriptions that are associated with the specified test clock. The response will not include subscriptions with test clocks if this and the customer parameter is not set. */\n test_clock?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/subscriptions": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/subscriptions/search": {
    "query": {
      ".query": {
        "rendered": " query?: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results. */\n page?: string, \n/** The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for subscriptions](https://stripe.com/docs/search#query-fields-for-subscriptions). */\n query: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.page": {
        "rendered": "\n/** A cursor for pagination across multiple pages of results. Don't include this parameter on the first call. Use the next_page value returned in a previous response to request subsequent results. */\n page?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.query": {
        "rendered": "\n/** The search query string. See [search query language](https://stripe.com/docs/search#search-query-language) and the list of supported [query fields for subscriptions](https://stripe.com/docs/search#query-fields-for-subscriptions). */\n query: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/v1/subscriptions/{subscription_exposed_id}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/subscriptions/{subscription_exposed_id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/subscriptions/{subscription_exposed_id}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/v1/subscriptions/{subscription_exposed_id}/discount": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/subscriptions/{subscription}/resume": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/tax_codes": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/tax_codes/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/tax_rates": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Optional flag to filter by tax rates that are either active or inactive (archived). */\n active?: boolean, \n/** Optional range for filtering created date. */\n created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** Optional flag to filter by tax rates that are inclusive (or those that are not inclusive). */\n inclusive?: boolean, \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.active": {
        "rendered": "\n/** Optional flag to filter by tax rates that are either active or inactive (archived). */\n active?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": "\n/** Optional range for filtering created date. */\n created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.inclusive": {
        "rendered": "\n/** Optional flag to filter by tax rates that are inclusive (or those that are not inclusive). */\n inclusive?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/tax_rates": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/tax_rates/{tax_rate}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/tax_rates/{tax_rate}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/terminal/configurations": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** if present, only return the account default or non-default configurations. */\n is_account_default?: boolean, \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.is_account_default": {
        "rendered": "\n/** if present, only return the account default or non-default configurations. */\n is_account_default?: boolean,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/terminal/configurations": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/v1/terminal/configurations/{configuration}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/terminal/configurations/{configuration}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/terminal/configurations/{configuration}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/terminal/connection_tokens": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/terminal/locations": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/terminal/locations": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/v1/terminal/locations/{location}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/terminal/locations/{location}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/terminal/locations/{location}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/terminal/readers": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Filters readers by device type */\n device_type?: \"bbpos_chipper2x\" | \"bbpos_wisepad3\" | \"bbpos_wisepos_e\" | \"simulated_wisepos_e\" | \"stripe_m2\" | \"verifone_P400\", \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A location ID to filter the response list to only readers at the specific location */\n location?: string, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, \n/** A status filter to filter readers to only offline or online readers */\n status?: \"offline\" | \"online\", },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.device_type": {
        "rendered": "\n/** Filters readers by device type */\n device_type?: \"bbpos_chipper2x\" | \"bbpos_wisepad3\" | \"bbpos_wisepos_e\" | \"simulated_wisepos_e\" | \"stripe_m2\" | \"verifone_P400\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.location": {
        "rendered": "\n/** A location ID to filter the response list to only readers at the specific location */\n location?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.status": {
        "rendered": "\n/** A status filter to filter readers to only offline or online readers */\n status?: \"offline\" | \"online\",",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/terminal/readers": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/v1/terminal/readers/{reader}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/terminal/readers/{reader}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/terminal/readers/{reader}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/terminal/readers/{reader}/cancel_action": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/terminal/readers/{reader}/process_payment_intent": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/terminal/readers/{reader}/process_setup_intent": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/terminal/readers/{reader}/refund_payment": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/terminal/readers/{reader}/set_reader_display": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/test_helpers/customers/{customer}/fund_cash_balance": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/test_helpers/issuing/cards/{card}/shipping/deliver": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/test_helpers/issuing/cards/{card}/shipping/fail": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/test_helpers/issuing/cards/{card}/shipping/return": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/test_helpers/issuing/cards/{card}/shipping/ship": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/test_helpers/refunds/{refund}/expire": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/test_helpers/terminal/readers/{reader}/present_payment_method": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/test_helpers/test_clocks": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/test_helpers/test_clocks": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/v1/test_helpers/test_clocks/{test_clock}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/test_helpers/test_clocks/{test_clock}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/test_helpers/test_clocks/{test_clock}/advance": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/test_helpers/treasury/inbound_transfers/{id}/fail": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/test_helpers/treasury/inbound_transfers/{id}/return": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/test_helpers/treasury/inbound_transfers/{id}/succeed": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/test_helpers/treasury/outbound_payments/{id}/fail": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/test_helpers/treasury/outbound_payments/{id}/post": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/test_helpers/treasury/outbound_payments/{id}/return": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}/fail": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}/post": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}/return": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/test_helpers/treasury/received_credits": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/test_helpers/treasury/received_debits": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/tokens": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/tokens/{token}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/topups": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A positive integer representing how much to transfer. */\n amount?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */\n created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, \n/** Only return top-ups that have the given status. One of `canceled`, `failed`, `pending` or `succeeded`. */\n status?: \"canceled\" | \"failed\" | \"pending\" | \"succeeded\", },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.amount": {
        "rendered": "\n/** A positive integer representing how much to transfer. */\n amount?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": "\n/** A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */\n created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.status": {
        "rendered": "\n/** Only return top-ups that have the given status. One of `canceled`, `failed`, `pending` or `succeeded`. */\n status?: \"canceled\" | \"failed\" | \"pending\" | \"succeeded\",",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/topups": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/topups/{topup}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/topups/{topup}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/topups/{topup}/cancel": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/transfers": {
    "query": {
      ".query": {
        "rendered": " query: {  created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** Only return transfers for the destination specified by this account ID. */\n destination?: string, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, \n/** Only return transfers with the specified transfer group. */\n transfer_group?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": " created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.destination": {
        "rendered": "\n/** Only return transfers for the destination specified by this account ID. */\n destination?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.transfer_group": {
        "rendered": "\n/** Only return transfers with the specified transfer group. */\n transfer_group?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/transfers": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/transfers/{id}/reversals": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/transfers/{id}/reversals": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/transfers/{transfer}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/transfers/{transfer}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/transfers/{transfer}/reversals/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/transfers/{transfer}/reversals/{id}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/treasury/credit_reversals": {
    "query": {
      ".query": {
        "rendered": " query?: { \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** Returns objects associated with this FinancialAccount. */\n financial_account: string, \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** Only return CreditReversals for the ReceivedCredit ID. */\n received_credit?: string, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, \n/** Only return CreditReversals for a given status. */\n status?: \"canceled\" | \"posted\" | \"processing\", },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.financial_account": {
        "rendered": "\n/** Returns objects associated with this FinancialAccount. */\n financial_account: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.received_credit": {
        "rendered": "\n/** Only return CreditReversals for the ReceivedCredit ID. */\n received_credit?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.status": {
        "rendered": "\n/** Only return CreditReversals for a given status. */\n status?: \"canceled\" | \"posted\" | \"processing\",",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/treasury/credit_reversals": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/treasury/credit_reversals/{credit_reversal}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/treasury/debit_reversals": {
    "query": {
      ".query": {
        "rendered": " query?: { \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** Returns objects associated with this FinancialAccount. */\n financial_account: string, \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** Only return DebitReversals for the ReceivedDebit ID. */\n received_debit?: string, \n/** Only return DebitReversals for a given resolution. */\n resolution?: \"lost\" | \"won\", \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, \n/** Only return DebitReversals for a given status. */\n status?: \"canceled\" | \"completed\" | \"processing\", },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.financial_account": {
        "rendered": "\n/** Returns objects associated with this FinancialAccount. */\n financial_account: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.received_debit": {
        "rendered": "\n/** Only return DebitReversals for the ReceivedDebit ID. */\n received_debit?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.resolution": {
        "rendered": "\n/** Only return DebitReversals for a given resolution. */\n resolution?: \"lost\" | \"won\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.status": {
        "rendered": "\n/** Only return DebitReversals for a given status. */\n status?: \"canceled\" | \"completed\" | \"processing\",",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/treasury/debit_reversals": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/treasury/debit_reversals/{debit_reversal}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/treasury/financial_accounts": {
    "query": {
      ".query": {
        "rendered": " query: {  created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** An object ID cursor for use in pagination. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit ranging from 1 to 100 (defaults to 10). */\n limit?: number, \n/** An object ID cursor for use in pagination. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": " created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** An object ID cursor for use in pagination. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit ranging from 1 to 100 (defaults to 10). */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** An object ID cursor for use in pagination. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/treasury/financial_accounts": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/treasury/financial_accounts/{financial_account}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/treasury/financial_accounts/{financial_account}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/treasury/financial_accounts/{financial_account}/features": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/treasury/financial_accounts/{financial_account}/features": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/treasury/inbound_transfers": {
    "query": {
      ".query": {
        "rendered": " query?: { \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** Returns objects associated with this FinancialAccount. */\n financial_account: string, \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, \n/** Only return InboundTransfers that have the given status: `processing`, `succeeded`, `failed` or `canceled`. */\n status?: \"canceled\" | \"failed\" | \"processing\" | \"succeeded\", },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.financial_account": {
        "rendered": "\n/** Returns objects associated with this FinancialAccount. */\n financial_account: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.status": {
        "rendered": "\n/** Only return InboundTransfers that have the given status: `processing`, `succeeded`, `failed` or `canceled`. */\n status?: \"canceled\" | \"failed\" | \"processing\" | \"succeeded\",",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/treasury/inbound_transfers": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/treasury/inbound_transfers/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/treasury/inbound_transfers/{inbound_transfer}/cancel": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/treasury/outbound_payments": {
    "query": {
      ".query": {
        "rendered": " query?: { \n/** Only return OutboundPayments sent to this customer. */\n customer?: string, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** Returns objects associated with this FinancialAccount. */\n financial_account: string, \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, \n/** Only return OutboundPayments that have the given status: `processing`, `failed`, `posted`, `returned`, or `canceled`. */\n status?: \"canceled\" | \"failed\" | \"posted\" | \"processing\" | \"returned\", },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.customer": {
        "rendered": "\n/** Only return OutboundPayments sent to this customer. */\n customer?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.financial_account": {
        "rendered": "\n/** Returns objects associated with this FinancialAccount. */\n financial_account: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.status": {
        "rendered": "\n/** Only return OutboundPayments that have the given status: `processing`, `failed`, `posted`, `returned`, or `canceled`. */\n status?: \"canceled\" | \"failed\" | \"posted\" | \"processing\" | \"returned\",",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/treasury/outbound_payments": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/treasury/outbound_payments/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/treasury/outbound_payments/{id}/cancel": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/treasury/outbound_transfers": {
    "query": {
      ".query": {
        "rendered": " query?: { \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** Returns objects associated with this FinancialAccount. */\n financial_account: string, \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, \n/** Only return OutboundTransfers that have the given status: `processing`, `canceled`, `failed`, `posted`, or `returned`. */\n status?: \"canceled\" | \"failed\" | \"posted\" | \"processing\" | \"returned\", },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.financial_account": {
        "rendered": "\n/** Returns objects associated with this FinancialAccount. */\n financial_account: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.status": {
        "rendered": "\n/** Only return OutboundTransfers that have the given status: `processing`, `canceled`, `failed`, `posted`, or `returned`. */\n status?: \"canceled\" | \"failed\" | \"posted\" | \"processing\" | \"returned\",",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/treasury/outbound_transfers": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/treasury/outbound_transfers/{outbound_transfer}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/treasury/outbound_transfers/{outbound_transfer}/cancel": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/treasury/received_credits": {
    "query": {
      ".query": {
        "rendered": " query?: { \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** The FinancialAccount that received the funds. */\n financial_account: string, \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** Only return ReceivedCredits described by the flow. */\n linked_flows: {  source_flow_type?: \"credit_reversal\" | \"other\" | \"outbound_payment\" | \"payout\", }, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, \n/** Only return ReceivedCredits that have the given status: `succeeded` or `failed`. */\n status?: \"failed\" | \"succeeded\", },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.financial_account": {
        "rendered": "\n/** The FinancialAccount that received the funds. */\n financial_account: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.linked_flows": {
        "rendered": "\n/** Only return ReceivedCredits described by the flow. */\n linked_flows: {  source_flow_type?: \"credit_reversal\" | \"other\" | \"outbound_payment\" | \"payout\", },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.linked_flows.source_flow_type": {
        "rendered": " source_flow_type?: \"credit_reversal\" | \"other\" | \"outbound_payment\" | \"payout\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.status": {
        "rendered": "\n/** Only return ReceivedCredits that have the given status: `succeeded` or `failed`. */\n status?: \"failed\" | \"succeeded\",",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/treasury/received_credits/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/treasury/received_debits": {
    "query": {
      ".query": {
        "rendered": " query?: { \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** The FinancialAccount that funds were pulled from. */\n financial_account: string, \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, \n/** Only return ReceivedDebits that have the given status: `succeeded` or `failed`. */\n status?: \"failed\" | \"succeeded\", },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.financial_account": {
        "rendered": "\n/** The FinancialAccount that funds were pulled from. */\n financial_account: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.status": {
        "rendered": "\n/** Only return ReceivedDebits that have the given status: `succeeded` or `failed`. */\n status?: \"failed\" | \"succeeded\",",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/treasury/received_debits/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/treasury/transaction_entries": {
    "query": {
      ".query": {
        "rendered": " query?: {  created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,  effective_at?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** Returns objects associated with this FinancialAccount. */\n financial_account: string, \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** The results are in reverse chronological order by `created` or `effective_at`. The default is `created`. */\n order_by?: \"created\" | \"effective_at\", \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, \n/** Only return TransactionEntries associated with this Transaction. */\n transaction?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": " created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.effective_at": {
        "rendered": " effective_at?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.financial_account": {
        "rendered": "\n/** Returns objects associated with this FinancialAccount. */\n financial_account: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.order_by": {
        "rendered": "\n/** The results are in reverse chronological order by `created` or `effective_at`. The default is `created`. */\n order_by?: \"created\" | \"effective_at\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.transaction": {
        "rendered": "\n/** Only return TransactionEntries associated with this Transaction. */\n transaction?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/treasury/transaction_entries/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/treasury/transactions": {
    "query": {
      ".query": {
        "rendered": " query?: {  created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** Returns objects associated with this FinancialAccount. */\n financial_account: string, \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** The results are in reverse chronological order by `created` or `posted_at`. The default is `created`. */\n order_by?: \"created\" | \"posted_at\", \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, \n/** Only return Transactions that have the given status: `open`, `posted`, or `void`. */\n status?: \"open\" | \"posted\" | \"void\", \n/** A filter for the `status_transitions.posted_at` timestamp. When using this filter, `status=posted` and `order_by=posted_at` must also be specified. */\n status_transitions?: {  posted_at?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, }, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.created": {
        "rendered": " created?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.financial_account": {
        "rendered": "\n/** Returns objects associated with this FinancialAccount. */\n financial_account: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.order_by": {
        "rendered": "\n/** The results are in reverse chronological order by `created` or `posted_at`. The default is `created`. */\n order_by?: \"created\" | \"posted_at\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.status": {
        "rendered": "\n/** Only return Transactions that have the given status: `open`, `posted`, or `void`. */\n status?: \"open\" | \"posted\" | \"void\",",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.status_transitions": {
        "rendered": "\n/** A filter for the `status_transitions.posted_at` timestamp. When using this filter, `status=posted` and `order_by=posted_at` must also be specified. */\n status_transitions?: {  posted_at?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.status_transitions.posted_at": {
        "rendered": " posted_at?: | {  gt?: number,  gte?: number,  lt?: number,  lte?: number, } | number,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/treasury/transactions/{id}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/webhook_endpoints": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string, \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], \n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number, \n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string, },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.ending_before": {
        "rendered": "\n/** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */\n ending_before?: string,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.limit": {
        "rendered": "\n/** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */\n limit?: number,",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.starting_after": {
        "rendered": "\n/** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */\n starting_after?: string,",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/webhook_endpoints": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "delete__/v1/webhook_endpoints/{webhook_endpoint}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  },
  "get__/v1/webhook_endpoints/{webhook_endpoint}": {
    "query": {
      ".query": {
        "rendered": " query: { \n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[], },",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand": {
        "rendered": "\n/** Specifies which fields in the response should be expanded. */\n expand?: (string)[],",
        "requiresRelaxedTypeAnnotation": false
      },
      ".query.expand.__no_name": {
        "rendered": "string",
        "requiresRelaxedTypeAnnotation": false
      }
    },
    "body": {},
    "path": {},
    "response": {}
  },
  "post__/v1/webhook_endpoints/{webhook_endpoint}": {
    "query": {},
    "body": {},
    "path": {},
    "response": {}
  }
}
