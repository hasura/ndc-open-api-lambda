import { MainAuthor, MainBlog, MainBlogRequestDto, Api } from "./api";
import * as hasuraSdk from "@hasura/ndc-lambda-sdk";

const api = new Api({
  baseUrl: "http://mybaseurl/abc/def",
  baseApiParams: {
    headers: {
      auth: "some-token=1",
      type: "json",
    },
  },
});

/**
 * create author
 * @request POST :/author
 */
export async function postAuthorAuthorCreate(
  /** Request body */
  author: MainAuthor,
  headers?: hasuraSdk.JSONValue,
): Promise<MainAuthor> {
  const result = await api.author.authorCreate({
    author: author,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * delete author
 * @request DELETE :/author/{authorId}
 */
export async function deleteAuthorAuthorDelete(
  /**
   * delete author
   */
  authorId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<MainAuthor> {
  const result = await api.author.authorDelete({
    authorId: authorId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * get all authors
 * @request GET :/authors
 * @readonly
 */
export async function getAuthorsAuthorsList(
  headers?: hasuraSdk.JSONValue,
): Promise<MainAuthor[]> {
  const result = await api.authors.authorsList({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * update a  blog post
 * @request PUT :/blog/
 */
export async function putBlogBlogUpdate(
  /** Request body */
  blog: MainBlogRequestDto,
  headers?: hasuraSdk.JSONValue,
): Promise<MainBlog> {
  const result = await api.blog.blogUpdate({
    blog: blog,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * create a new blog post
 * @request POST :/blog/
 */
export async function postBlogBlogCreate(
  /** Request body */
  blog: MainBlogRequestDto,
  headers?: hasuraSdk.JSONValue,
): Promise<MainBlog> {
  const result = await api.blog.blogCreate({
    blog: blog,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * dislike a blog post
 * @request PATCH :/blog/dislike
 */
export async function patchBlogDislikePartialUpdate(
  query: {
    /**
     * blog to dislike
     */
    blogId: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<MainBlog> {
  const result = await api.blog.dislikePartialUpdate({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * like a blog post
 * @request PATCH :/blog/like
 */
export async function patchBlogLikePartialUpdate(
  query: {
    /**
     * blog to like
     */
    blogId: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<MainBlog> {
  const result = await api.blog.likePartialUpdate({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * delete a blog post
 * @request DELETE :/blog/{blogId}
 */
export async function deleteBlogBlogDelete(
  /**
   * blog to delete
   */
  blogId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<MainBlog> {
  const result = await api.blog.blogDelete({
    blogId: blogId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * update a blog post
 * @request PATCH :/blog/{blogId}
 */
export async function patchBlogBlogPartialUpdate(
  query: {
    /**
     * title to update
     */
    title?: string;
    /**
     * text to update
     */
    text?: string;
    /**
     * summary to update
     */
    summary?: string;
  },
  /**
   * blog to update
   */
  blogId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<MainBlog> {
  const result = await api.blog.blogPartialUpdate({
    query: query,
    blogId: blogId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * get blogs by author
 * @request GET :/blogs/
 * @readonly
 */
export async function getBlogsBlogsList(
  query: {
    /**
     * id of the author
     */
    authorId: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<MainBlog[]> {
  const result = await api.blogs.blogsList({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}
