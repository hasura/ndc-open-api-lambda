import * as hasuraSdk from "@hasura/ndc-lambda-sdk";
import {
  Actions,
  ActionsComments,
  ActionsText,
  Api,
  Boards,
  BoardsChecklists,
  BoardsClosed,
  BoardsDesc,
  BoardsIdOrganization,
  BoardsLabels,
  BoardsLists,
  BoardsMembers,
  BoardsMemberships,
  BoardsName,
  BoardsPowerUps,
  BoardsSubscribed,
  Cards,
  CardsActionsComments,
  CardsAttachments,
  CardsChecklistCheckItem,
  CardsChecklistCheckItemName,
  CardsChecklistCheckItemPos,
  CardsChecklistCheckItemState,
  CardsChecklistIdChecklistCurrentCheckItem,
  CardsChecklists,
  CardsClosed,
  CardsDesc,
  CardsDue,
  CardsIdAttachmentCover,
  CardsIdBoard,
  CardsIdLabels,
  CardsIdList,
  CardsIdMembers,
  CardsLabels,
  CardsMembersVoted,
  CardsName,
  CardsPos,
  CardsStickers,
  CardsSubscribed,
  Checklists,
  ChecklistsCheckItems,
  ChecklistsIdCard,
  ChecklistsName,
  ChecklistsPos,
  LabelNamesBlue,
  LabelNamesGreen,
  LabelNamesOrange,
  LabelNamesPurple,
  LabelNamesRed,
  LabelNamesYellow,
  Labels,
  LabelsColor,
  LabelsName,
  Lists,
  ListsCards,
  ListsClosed,
  ListsIdBoard,
  ListsMoveAllCards,
  ListsName,
  ListsPos,
  ListsSubscribed,
  Members,
  MembersAvatar,
  MembersAvatarSource,
  MembersBio,
  MembersBoardBackgrounds,
  MembersBoardStars,
  MembersBoardStarsIdBoard,
  MembersBoardStarsPos,
  MembersCustomBoardBackgrounds,
  MembersCustomEmoji,
  MembersCustomStickers,
  MembersFullName,
  MembersInitials,
  MembersOneTimeMessagesDismissed,
  MembersSavedSearches,
  MembersSavedSearchesName,
  MembersSavedSearchesPos,
  MembersSavedSearchesQuery,
  MembersUsername,
  MyPrefsEmailPosition,
  MyPrefsIdEmailList,
  MyPrefsShowListGuide,
  MyPrefsShowSidebar,
  MyPrefsShowSidebarActivity,
  MyPrefsShowSidebarBoardActions,
  MyPrefsShowSidebarMembers,
  Notifications,
  NotificationsUnread,
  Organizations,
  OrganizationsDesc,
  OrganizationsDisplayName,
  OrganizationsLogo,
  OrganizationsMembers,
  OrganizationsMembersDeactivated,
  OrganizationsMemberships,
  OrganizationsName,
  OrganizationsWebsite,
  PrefsAssociatedDomain,
  PrefsBackground,
  PrefsBoardVisibilityRestrict,
  PrefsCalendarFeedEnabled,
  PrefsCardAging,
  PrefsCardCovers,
  PrefsColorBlind,
  PrefsComments,
  PrefsExternalMembersDisabled,
  PrefsGoogleAppsVersion,
  PrefsInvitations,
  PrefsLocale,
  PrefsMinutesBetweenSummaries,
  PrefsOrgInviteRestrict,
  PrefsPermissionLevel,
  PrefsSelfJoin,
  PrefsVoting,
  Sessions,
  SessionsStatus,
  TokensWebhooks,
  Webhooks,
  WebhooksActive,
  WebhooksCallbackURL,
  WebhooksDescription,
  WebhooksIdModel,
} from "./api";

const api = new Api({
  baseUrl: "",
});

/**
 * deleteActionsByIdAction()
 * @request DELETE :/actions/{idAction}
 */
export async function deleteActionsDeleteActionsByIdAction(
  /** idAction */
  idAction: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.actions.deleteActionsByIdAction({
    idAction: idAction,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getActionsByIdAction()
 * @request GET :/actions/{idAction}
 * @readonly
 */
export async function getActionsGetActionsByIdAction(
  /** idAction */
  idAction: string,
  query: {
    /**  true or false */
    display?: string;
    /**  true or false */
    entities?: string;
    /** all or a comma-separated list of: data, date, idMemberCreator or type */
    fields?: string;
    /**  true or false */
    member?: string;
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    member_fields?: string;
    /**  true or false */
    memberCreator?: string;
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    memberCreator_fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.actions.getActionsByIdAction({
    idAction: idAction,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateActionsByIdAction()
 * @request PUT :/actions/{idAction}
 */
export async function putActionsUpdateActionsByIdAction(
  /** idAction */
  idAction: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: Actions,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.actions.updateActionsByIdAction({
    idAction: idAction,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getActionsBoardByIdAction()
 * @request GET :/actions/{idAction}/board
 * @readonly
 */
export async function getActionsGetActionsBoardByIdAction(
  /** idAction */
  idAction: string,
  query: {
    /** all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.actions.getActionsBoardByIdAction({
    idAction: idAction,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getActionsBoardByIdActionByField()
 * @request GET :/actions/{idAction}/board/{field}
 * @readonly
 */
export async function getActionsGetActionsBoardByIdActionByField(
  /** idAction */
  idAction: string,
  /** field */
  field: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.actions.getActionsBoardByIdActionByField({
    idAction: idAction,
    field: field,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getActionsCardByIdAction()
 * @request GET :/actions/{idAction}/card
 * @readonly
 */
export async function getActionsGetActionsCardByIdAction(
  /** idAction */
  idAction: string,
  query: {
    /** all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.actions.getActionsCardByIdAction({
    idAction: idAction,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getActionsCardByIdActionByField()
 * @request GET :/actions/{idAction}/card/{field}
 * @readonly
 */
export async function getActionsGetActionsCardByIdActionByField(
  /** idAction */
  idAction: string,
  /** field */
  field: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.actions.getActionsCardByIdActionByField({
    idAction: idAction,
    field: field,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getActionsDisplayByIdAction()
 * @request GET :/actions/{idAction}/display
 * @readonly
 */
export async function getActionsGetActionsDisplayByIdAction(
  /** idAction */
  idAction: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.actions.getActionsDisplayByIdAction({
    idAction: idAction,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getActionsEntitiesByIdAction()
 * @request GET :/actions/{idAction}/entities
 * @readonly
 */
export async function getActionsGetActionsEntitiesByIdAction(
  /** idAction */
  idAction: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.actions.getActionsEntitiesByIdAction({
    idAction: idAction,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getActionsListByIdAction()
 * @request GET :/actions/{idAction}/list
 * @readonly
 */
export async function getActionsGetActionsListByIdAction(
  /** idAction */
  idAction: string,
  query: {
    /** all or a comma-separated list of: closed, idBoard, name, pos or subscribed */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.actions.getActionsListByIdAction({
    idAction: idAction,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getActionsListByIdActionByField()
 * @request GET :/actions/{idAction}/list/{field}
 * @readonly
 */
export async function getActionsGetActionsListByIdActionByField(
  /** idAction */
  idAction: string,
  /** field */
  field: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.actions.getActionsListByIdActionByField({
    idAction: idAction,
    field: field,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getActionsMemberByIdAction()
 * @request GET :/actions/{idAction}/member
 * @readonly
 */
export async function getActionsGetActionsMemberByIdAction(
  /** idAction */
  idAction: string,
  query: {
    /** all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.actions.getActionsMemberByIdAction({
    idAction: idAction,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getActionsMemberByIdActionByField()
 * @request GET :/actions/{idAction}/member/{field}
 * @readonly
 */
export async function getActionsGetActionsMemberByIdActionByField(
  /** idAction */
  idAction: string,
  /** field */
  field: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.actions.getActionsMemberByIdActionByField({
    idAction: idAction,
    field: field,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getActionsMemberCreatorByIdAction()
 * @request GET :/actions/{idAction}/memberCreator
 * @readonly
 */
export async function getActionsGetActionsMemberCreatorByIdAction(
  /** idAction */
  idAction: string,
  query: {
    /** all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.actions.getActionsMemberCreatorByIdAction({
    idAction: idAction,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getActionsMemberCreatorByIdActionByField()
 * @request GET :/actions/{idAction}/memberCreator/{field}
 * @readonly
 */
export async function getActionsGetActionsMemberCreatorByIdActionByField(
  /** idAction */
  idAction: string,
  /** field */
  field: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.actions.getActionsMemberCreatorByIdActionByField({
    idAction: idAction,
    field: field,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getActionsOrganizationByIdAction()
 * @request GET :/actions/{idAction}/organization
 * @readonly
 */
export async function getActionsGetActionsOrganizationByIdAction(
  /** idAction */
  idAction: string,
  query: {
    /** all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.actions.getActionsOrganizationByIdAction({
    idAction: idAction,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getActionsOrganizationByIdActionByField()
 * @request GET :/actions/{idAction}/organization/{field}
 * @readonly
 */
export async function getActionsGetActionsOrganizationByIdActionByField(
  /** idAction */
  idAction: string,
  /** field */
  field: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.actions.getActionsOrganizationByIdActionByField({
    idAction: idAction,
    field: field,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateActionsTextByIdAction()
 * @request PUT :/actions/{idAction}/text
 */
export async function putActionsUpdateActionsTextByIdAction(
  /** idAction */
  idAction: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: ActionsText,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.actions.updateActionsTextByIdAction({
    idAction: idAction,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getActionsByIdActionByField()
 * @request GET :/actions/{idAction}/{field}
 * @readonly
 */
export async function getActionsGetActionsByIdActionByField(
  /** idAction */
  idAction: string,
  /** field */
  field: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.actions.getActionsByIdActionByField({
    idAction: idAction,
    field: field,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getBatch()
 * @request GET :/batch
 * @readonly
 */
export async function getBatchGetBatch(
  query: {
    /** list of API v1 GET routes, not including the version prefix */
    urls: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.batch.getBatch({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * addBoards()
 * @request POST :/boards
 */
export async function postBoardsAddBoards(
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: Boards,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.addBoards({
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getBoardsByIdBoard()
 * @request GET :/boards/{idBoard}
 * @readonly
 */
export async function getBoardsGetBoardsByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization */
    actions?: string;
    /**  true or false */
    actions_entities?: string;
    /**  true or false */
    actions_display?: string;
    /** One of: count, list or minimal */
    actions_format?: string;
    /** A date, null or lastView */
    actions_since?: string;
    /** a number from 0 to 1000 */
    actions_limit?: string;
    /** all or a comma-separated list of: data, date, idMemberCreator or type */
    action_fields?: string;
    /**  true or false */
    action_member?: string;
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    action_member_fields?: string;
    /**  true or false */
    action_memberCreator?: string;
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    action_memberCreator_fields?: string;
    /** One of: all, closed, none, open or visible */
    cards?: string;
    /** all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url */
    card_fields?: string;
    /** A boolean value or &quot;cover&quot; for only card cover attachments */
    card_attachments?: string;
    /** all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url */
    card_attachment_fields?: string;
    /** One of: all or none */
    card_checklists?: string;
    /**  true or false */
    card_stickers?: string;
    /** One of: mine or none */
    boardStars?: string;
    /** One of: all or none */
    labels?: string;
    /** all or a comma-separated list of: color, idBoard, name or uses */
    label_fields?: string;
    /** a number from 0 to 1000 */
    labels_limit?: string;
    /** One of: all, closed, none or open */
    lists?: string;
    /** all or a comma-separated list of: closed, idBoard, name, pos or subscribed */
    list_fields?: string;
    /** all or a comma-separated list of: active, admin, deactivated, me or normal */
    memberships?: string;
    /**  true or false */
    memberships_member?: string;
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    memberships_member_fields?: string;
    /** One of: admins, all, none, normal or owners */
    members?: string;
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    member_fields?: string;
    /** One of: admins, all, none, normal or owners */
    membersInvited?: string;
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    membersInvited_fields?: string;
    /** One of: all or none */
    checklists?: string;
    /** all or a comma-separated list of: idBoard, idCard, name or pos */
    checklist_fields?: string;
    /**  true or false */
    organization?: string;
    /** all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website */
    organization_fields?: string;
    /** all or a comma-separated list of: active, admin, deactivated, me or normal */
    organization_memberships?: string;
    /**  true or false */
    myPrefs?: string;
    /** all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.getBoardsByIdBoard({
    idBoard: idBoard,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateBoardsByIdBoard()
 * @request PUT :/boards/{idBoard}
 */
export async function putBoardsUpdateBoardsByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: Boards,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.updateBoardsByIdBoard({
    idBoard: idBoard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getBoardsActionsByIdBoard()
 * @request GET :/boards/{idBoard}/actions
 * @readonly
 */
export async function getBoardsGetBoardsActionsByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /**  true or false */
    entities?: string;
    /**  true or false */
    display?: string;
    /** all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization */
    filter?: string;
    /** all or a comma-separated list of: data, date, idMemberCreator or type */
    fields?: string;
    /** a number from 0 to 1000 */
    limit?: string;
    /** One of: count, list or minimal */
    format?: string;
    /** A date, null or lastView */
    since?: string;
    /** A date, or null */
    before?: string;
    /** Page * limit must be less than 1000 */
    page?: string;
    /** Only return actions related to these model ids */
    idModels?: string;
    /**  true or false */
    member?: string;
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    member_fields?: string;
    /**  true or false */
    memberCreator?: string;
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    memberCreator_fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.getBoardsActionsByIdBoard({
    idBoard: idBoard,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getBoardsBoardStarsByIdBoard()
 * @request GET :/boards/{idBoard}/boardStars
 * @readonly
 */
export async function getBoardsGetBoardsBoardStarsByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** One of: mine or none */
    filter?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.getBoardsBoardStarsByIdBoard({
    idBoard: idBoard,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * addBoardsCalendarKeyGenerateByIdBoard()
 * @request POST :/boards/{idBoard}/calendarKey/generate
 */
export async function postBoardsAddBoardsCalendarKeyGenerateByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.addBoardsCalendarKeyGenerateByIdBoard({
    idBoard: idBoard,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getBoardsCardsByIdBoard()
 * @request GET :/boards/{idBoard}/cards
 * @readonly
 */
export async function getBoardsGetBoardsCardsByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization */
    actions?: string;
    /** A boolean value or &quot;cover&quot; for only card cover attachments */
    attachments?: string;
    /** all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url */
    attachment_fields?: string;
    /**  true or false */
    stickers?: string;
    /**  true or false */
    members?: string;
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    member_fields?: string;
    /**  true or false */
    checkItemStates?: string;
    /** One of: all or none */
    checklists?: string;
    /** a number from 1 to 1000 */
    limit?: string;
    /** A date, or null */
    since?: string;
    /** A date, or null */
    before?: string;
    /** One of: all, closed, none, open or visible */
    filter?: string;
    /** all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.getBoardsCardsByIdBoard({
    idBoard: idBoard,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getBoardsCardsByIdBoardByFilter()
 * @request GET :/boards/{idBoard}/cards/{filter}
 * @readonly
 */
export async function getBoardsGetBoardsCardsByIdBoardByFilter(
  /** board_id */
  idBoard: string,
  /** filter */
  filter: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.getBoardsCardsByIdBoardByFilter({
    idBoard: idBoard,
    filter: filter,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getBoardsCardsByIdBoardByIdCard()
 * @request GET :/boards/{idBoard}/cards/{idCard}
 * @readonly
 */
export async function getBoardsGetBoardsCardsByIdBoardByIdCard(
  /** board_id */
  idBoard: string,
  /** idCard */
  idCard: string,
  query: {
    /** A boolean value or &quot;cover&quot; for only card cover attachments */
    attachments?: string;
    /** all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url */
    attachment_fields?: string;
    /** all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization */
    actions?: string;
    /**  true or false */
    actions_entities?: string;
    /**  true or false */
    actions_display?: string;
    /** a number from 0 to 1000 */
    actions_limit?: string;
    /** all or a comma-separated list of: data, date, idMemberCreator or type */
    action_fields?: string;
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    action_memberCreator_fields?: string;
    /**  true or false */
    members?: string;
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    member_fields?: string;
    /**  true or false */
    checkItemStates?: string;
    /** all or a comma-separated list of: idCheckItem or state */
    checkItemState_fields?: string;
    /**  true or false */
    labels?: string;
    /** One of: all or none */
    checklists?: string;
    /** all or a comma-separated list of: idBoard, idCard, name or pos */
    checklist_fields?: string;
    /** all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.getBoardsCardsByIdBoardByIdCard({
    idBoard: idBoard,
    idCard: idCard,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getBoardsChecklistsByIdBoard()
 * @request GET :/boards/{idBoard}/checklists
 * @readonly
 */
export async function getBoardsGetBoardsChecklistsByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** One of: all, closed, none, open or visible */
    cards?: string;
    /** all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url */
    card_fields?: string;
    /** One of: all or none */
    checkItems?: string;
    /** all or a comma-separated list of: name, nameData, pos, state or type */
    checkItem_fields?: string;
    /** One of: all or none */
    filter?: string;
    /** all or a comma-separated list of: idBoard, idCard, name or pos */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.getBoardsChecklistsByIdBoard({
    idBoard: idBoard,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * addBoardsChecklistsByIdBoard()
 * @request POST :/boards/{idBoard}/checklists
 */
export async function postBoardsAddBoardsChecklistsByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: BoardsChecklists,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.addBoardsChecklistsByIdBoard({
    idBoard: idBoard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateBoardsClosedByIdBoard()
 * @request PUT :/boards/{idBoard}/closed
 */
export async function putBoardsUpdateBoardsClosedByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: BoardsClosed,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.updateBoardsClosedByIdBoard({
    idBoard: idBoard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getBoardsDeltasByIdBoard()
 * @request GET :/boards/{idBoard}/deltas
 * @readonly
 */
export async function getBoardsGetBoardsDeltasByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** A valid tag for subscribing */
    tags: string;
    /** a number from -1 to Infinity */
    ixLastUpdate: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.getBoardsDeltasByIdBoard({
    idBoard: idBoard,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateBoardsDescByIdBoard()
 * @request PUT :/boards/{idBoard}/desc
 */
export async function putBoardsUpdateBoardsDescByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: BoardsDesc,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.updateBoardsDescByIdBoard({
    idBoard: idBoard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * addBoardsEmailKeyGenerateByIdBoard()
 * @request POST :/boards/{idBoard}/emailKey/generate
 */
export async function postBoardsAddBoardsEmailKeyGenerateByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.addBoardsEmailKeyGenerateByIdBoard({
    idBoard: idBoard,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateBoardsIdOrganizationByIdBoard()
 * @request PUT :/boards/{idBoard}/idOrganization
 */
export async function putBoardsUpdateBoardsIdOrganizationByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: BoardsIdOrganization,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.updateBoardsIdOrganizationByIdBoard({
    idBoard: idBoard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateBoardsLabelNamesBlueByIdBoard()
 * @request PUT :/boards/{idBoard}/labelNames/blue
 */
export async function putBoardsUpdateBoardsLabelNamesBlueByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: LabelNamesBlue,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.updateBoardsLabelNamesBlueByIdBoard({
    idBoard: idBoard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateBoardsLabelNamesGreenByIdBoard()
 * @request PUT :/boards/{idBoard}/labelNames/green
 */
export async function putBoardsUpdateBoardsLabelNamesGreenByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: LabelNamesGreen,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.updateBoardsLabelNamesGreenByIdBoard({
    idBoard: idBoard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateBoardsLabelNamesOrangeByIdBoard()
 * @request PUT :/boards/{idBoard}/labelNames/orange
 */
export async function putBoardsUpdateBoardsLabelNamesOrangeByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: LabelNamesOrange,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.updateBoardsLabelNamesOrangeByIdBoard({
    idBoard: idBoard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateBoardsLabelNamesPurpleByIdBoard()
 * @request PUT :/boards/{idBoard}/labelNames/purple
 */
export async function putBoardsUpdateBoardsLabelNamesPurpleByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: LabelNamesPurple,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.updateBoardsLabelNamesPurpleByIdBoard({
    idBoard: idBoard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateBoardsLabelNamesRedByIdBoard()
 * @request PUT :/boards/{idBoard}/labelNames/red
 */
export async function putBoardsUpdateBoardsLabelNamesRedByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: LabelNamesRed,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.updateBoardsLabelNamesRedByIdBoard({
    idBoard: idBoard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateBoardsLabelNamesYellowByIdBoard()
 * @request PUT :/boards/{idBoard}/labelNames/yellow
 */
export async function putBoardsUpdateBoardsLabelNamesYellowByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: LabelNamesYellow,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.updateBoardsLabelNamesYellowByIdBoard({
    idBoard: idBoard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getBoardsLabelsByIdBoard()
 * @request GET :/boards/{idBoard}/labels
 * @readonly
 */
export async function getBoardsGetBoardsLabelsByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** all or a comma-separated list of: color, idBoard, name or uses */
    fields?: string;
    /** a number from 0 to 1000 */
    limit?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.getBoardsLabelsByIdBoard({
    idBoard: idBoard,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * addBoardsLabelsByIdBoard()
 * @request POST :/boards/{idBoard}/labels
 */
export async function postBoardsAddBoardsLabelsByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: BoardsLabels,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.addBoardsLabelsByIdBoard({
    idBoard: idBoard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getBoardsLabelsByIdBoardByIdLabel()
 * @request GET :/boards/{idBoard}/labels/{idLabel}
 * @readonly
 */
export async function getBoardsGetBoardsLabelsByIdBoardByIdLabel(
  /** board_id */
  idBoard: string,
  /** idLabel */
  idLabel: string,
  query: {
    /** all or a comma-separated list of: color, idBoard, name or uses */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.getBoardsLabelsByIdBoardByIdLabel({
    idBoard: idBoard,
    idLabel: idLabel,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getBoardsListsByIdBoard()
 * @request GET :/boards/{idBoard}/lists
 * @readonly
 */
export async function getBoardsGetBoardsListsByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** One of: all, closed, none, open or visible */
    cards?: string;
    /** all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url */
    card_fields?: string;
    /** One of: all, closed, none or open */
    filter?: string;
    /** all or a comma-separated list of: closed, idBoard, name, pos or subscribed */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.getBoardsListsByIdBoard({
    idBoard: idBoard,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * addBoardsListsByIdBoard()
 * @request POST :/boards/{idBoard}/lists
 */
export async function postBoardsAddBoardsListsByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: BoardsLists,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.addBoardsListsByIdBoard({
    idBoard: idBoard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getBoardsListsByIdBoardByFilter()
 * @request GET :/boards/{idBoard}/lists/{filter}
 * @readonly
 */
export async function getBoardsGetBoardsListsByIdBoardByFilter(
  /** board_id */
  idBoard: string,
  /** filter */
  filter: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.getBoardsListsByIdBoardByFilter({
    idBoard: idBoard,
    filter: filter,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * addBoardsMarkAsViewedByIdBoard()
 * @request POST :/boards/{idBoard}/markAsViewed
 */
export async function postBoardsAddBoardsMarkAsViewedByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.addBoardsMarkAsViewedByIdBoard({
    idBoard: idBoard,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getBoardsMembersByIdBoard()
 * @request GET :/boards/{idBoard}/members
 * @readonly
 */
export async function getBoardsGetBoardsMembersByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** One of: admins, all, none, normal or owners */
    filter?: string;
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    fields?: string;
    /** true or false ; works for premium organizations only. */
    activity?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.getBoardsMembersByIdBoard({
    idBoard: idBoard,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateBoardsMembersByIdBoard()
 * @request PUT :/boards/{idBoard}/members
 */
export async function putBoardsUpdateBoardsMembersByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: BoardsMembers,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.updateBoardsMembersByIdBoard({
    idBoard: idBoard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getBoardsMembersByIdBoardByFilter()
 * @request GET :/boards/{idBoard}/members/{filter}
 * @readonly
 */
export async function getBoardsGetBoardsMembersByIdBoardByFilter(
  /** board_id */
  idBoard: string,
  /** filter */
  filter: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.getBoardsMembersByIdBoardByFilter({
    idBoard: idBoard,
    filter: filter,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * deleteBoardsMembersByIdBoardByIdMember()
 * @request DELETE :/boards/{idBoard}/members/{idMember}
 */
export async function deleteBoardsDeleteBoardsMembersByIdBoardByIdMember(
  /** board_id */
  idBoard: string,
  /** idMember */
  idMember: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.deleteBoardsMembersByIdBoardByIdMember({
    idBoard: idBoard,
    idMember: idMember,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateBoardsMembersByIdBoardByIdMember()
 * @request PUT :/boards/{idBoard}/members/{idMember}
 */
export async function putBoardsUpdateBoardsMembersByIdBoardByIdMember(
  /** board_id */
  idBoard: string,
  /** idMember */
  idMember: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: BoardsMembers,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.updateBoardsMembersByIdBoardByIdMember({
    idBoard: idBoard,
    idMember: idMember,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getBoardsMembersCardsByIdBoardByIdMember()
 * @request GET :/boards/{idBoard}/members/{idMember}/cards
 * @readonly
 */
export async function getBoardsGetBoardsMembersCardsByIdBoardByIdMember(
  /** board_id */
  idBoard: string,
  /** idMember */
  idMember: string,
  query: {
    /** all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization */
    actions?: string;
    /** A boolean value or &quot;cover&quot; for only card cover attachments */
    attachments?: string;
    /** all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url */
    attachment_fields?: string;
    /**  true or false */
    members?: string;
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    member_fields?: string;
    /**  true or false */
    checkItemStates?: string;
    /** One of: all or none */
    checklists?: string;
    /**  true or false */
    board?: string;
    /** all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url */
    board_fields?: string;
    /**  true or false */
    list?: string;
    /** all or a comma-separated list of: closed, idBoard, name, pos or subscribed */
    list_fields?: string;
    /** One of: all, closed, none, open or visible */
    filter?: string;
    /** all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.getBoardsMembersCardsByIdBoardByIdMember({
    idBoard: idBoard,
    idMember: idMember,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getBoardsMembersInvitedByIdBoard()
 * @request GET :/boards/{idBoard}/membersInvited
 * @readonly
 */
export async function getBoardsGetBoardsMembersInvitedByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.getBoardsMembersInvitedByIdBoard({
    idBoard: idBoard,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getBoardsMembersInvitedByIdBoardByField()
 * @request GET :/boards/{idBoard}/membersInvited/{field}
 * @readonly
 */
export async function getBoardsGetBoardsMembersInvitedByIdBoardByField(
  /** board_id */
  idBoard: string,
  /** field */
  field: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.getBoardsMembersInvitedByIdBoardByField({
    idBoard: idBoard,
    field: field,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getBoardsMembershipsByIdBoard()
 * @request GET :/boards/{idBoard}/memberships
 * @readonly
 */
export async function getBoardsGetBoardsMembershipsByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** all or a comma-separated list of: active, admin, deactivated, me or normal */
    filter?: string;
    /**  true or false */
    member?: string;
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    member_fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.getBoardsMembershipsByIdBoard({
    idBoard: idBoard,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getBoardsMembershipsByIdBoardByIdMembership()
 * @request GET :/boards/{idBoard}/memberships/{idMembership}
 * @readonly
 */
export async function getBoardsGetBoardsMembershipsByIdBoardByIdMembership(
  /** board_id */
  idBoard: string,
  /** idMembership */
  idMembership: string,
  query: {
    /**  true or false */
    member?: string;
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    member_fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.getBoardsMembershipsByIdBoardByIdMembership({
    idBoard: idBoard,
    idMembership: idMembership,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateBoardsMembershipsByIdBoardByIdMembership()
 * @request PUT :/boards/{idBoard}/memberships/{idMembership}
 */
export async function putBoardsUpdateBoardsMembershipsByIdBoardByIdMembership(
  /** board_id */
  idBoard: string,
  /** idMembership */
  idMembership: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: BoardsMemberships,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.boards.updateBoardsMembershipsByIdBoardByIdMembership({
      idBoard: idBoard,
      idMembership: idMembership,
      query: query,
      data: data,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getBoardsMyPrefsByIdBoard()
 * @request GET :/boards/{idBoard}/myPrefs
 * @readonly
 */
export async function getBoardsGetBoardsMyPrefsByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.getBoardsMyPrefsByIdBoard({
    idBoard: idBoard,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateBoardsMyPrefsEmailPositionByIdBoard()
 * @request PUT :/boards/{idBoard}/myPrefs/emailPosition
 */
export async function putBoardsUpdateBoardsMyPrefsEmailPositionByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: MyPrefsEmailPosition,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.updateBoardsMyPrefsEmailPositionByIdBoard({
    idBoard: idBoard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateBoardsMyPrefsIdEmailListByIdBoard()
 * @request PUT :/boards/{idBoard}/myPrefs/idEmailList
 */
export async function putBoardsUpdateBoardsMyPrefsIdEmailListByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: MyPrefsIdEmailList,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.updateBoardsMyPrefsIdEmailListByIdBoard({
    idBoard: idBoard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateBoardsMyPrefsShowListGuideByIdBoard()
 * @request PUT :/boards/{idBoard}/myPrefs/showListGuide
 */
export async function putBoardsUpdateBoardsMyPrefsShowListGuideByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: MyPrefsShowListGuide,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.updateBoardsMyPrefsShowListGuideByIdBoard({
    idBoard: idBoard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateBoardsMyPrefsShowSidebarByIdBoard()
 * @request PUT :/boards/{idBoard}/myPrefs/showSidebar
 */
export async function putBoardsUpdateBoardsMyPrefsShowSidebarByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: MyPrefsShowSidebar,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.updateBoardsMyPrefsShowSidebarByIdBoard({
    idBoard: idBoard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateBoardsMyPrefsShowSidebarActivityByIdBoard()
 * @request PUT :/boards/{idBoard}/myPrefs/showSidebarActivity
 */
export async function putBoardsUpdateBoardsMyPrefsShowSidebarActivityByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: MyPrefsShowSidebarActivity,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.boards.updateBoardsMyPrefsShowSidebarActivityByIdBoard({
      idBoard: idBoard,
      query: query,
      data: data,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateBoardsMyPrefsShowSidebarBoardActionsByIdBoard()
 * @request PUT :/boards/{idBoard}/myPrefs/showSidebarBoardActions
 */
export async function putBoardsUpdateBoardsMyPrefsShowSidebarBoardActionsByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: MyPrefsShowSidebarBoardActions,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.boards.updateBoardsMyPrefsShowSidebarBoardActionsByIdBoard({
      idBoard: idBoard,
      query: query,
      data: data,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateBoardsMyPrefsShowSidebarMembersByIdBoard()
 * @request PUT :/boards/{idBoard}/myPrefs/showSidebarMembers
 */
export async function putBoardsUpdateBoardsMyPrefsShowSidebarMembersByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: MyPrefsShowSidebarMembers,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.boards.updateBoardsMyPrefsShowSidebarMembersByIdBoard({
      idBoard: idBoard,
      query: query,
      data: data,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateBoardsNameByIdBoard()
 * @request PUT :/boards/{idBoard}/name
 */
export async function putBoardsUpdateBoardsNameByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: BoardsName,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.updateBoardsNameByIdBoard({
    idBoard: idBoard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getBoardsOrganizationByIdBoard()
 * @request GET :/boards/{idBoard}/organization
 * @readonly
 */
export async function getBoardsGetBoardsOrganizationByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.getBoardsOrganizationByIdBoard({
    idBoard: idBoard,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getBoardsOrganizationByIdBoardByField()
 * @request GET :/boards/{idBoard}/organization/{field}
 * @readonly
 */
export async function getBoardsGetBoardsOrganizationByIdBoardByField(
  /** board_id */
  idBoard: string,
  /** field */
  field: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.getBoardsOrganizationByIdBoardByField({
    idBoard: idBoard,
    field: field,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * addBoardsPowerUpsByIdBoard()
 * @request POST :/boards/{idBoard}/powerUps
 */
export async function postBoardsAddBoardsPowerUpsByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: BoardsPowerUps,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.addBoardsPowerUpsByIdBoard({
    idBoard: idBoard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * deleteBoardsPowerUpsByIdBoardByPowerUp()
 * @request DELETE :/boards/{idBoard}/powerUps/{powerUp}
 */
export async function deleteBoardsDeleteBoardsPowerUpsByIdBoardByPowerUp(
  /** board_id */
  idBoard: string,
  /** powerUp */
  powerUp: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.deleteBoardsPowerUpsByIdBoardByPowerUp({
    idBoard: idBoard,
    powerUp: powerUp,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateBoardsPrefsBackgroundByIdBoard()
 * @request PUT :/boards/{idBoard}/prefs/background
 */
export async function putBoardsUpdateBoardsPrefsBackgroundByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: PrefsBackground,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.updateBoardsPrefsBackgroundByIdBoard({
    idBoard: idBoard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateBoardsPrefsCalendarFeedEnabledByIdBoard()
 * @request PUT :/boards/{idBoard}/prefs/calendarFeedEnabled
 */
export async function putBoardsUpdateBoardsPrefsCalendarFeedEnabledByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: PrefsCalendarFeedEnabled,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.updateBoardsPrefsCalendarFeedEnabledByIdBoard(
    {
      idBoard: idBoard,
      query: query,
      data: data,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    },
  );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateBoardsPrefsCardAgingByIdBoard()
 * @request PUT :/boards/{idBoard}/prefs/cardAging
 */
export async function putBoardsUpdateBoardsPrefsCardAgingByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: PrefsCardAging,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.updateBoardsPrefsCardAgingByIdBoard({
    idBoard: idBoard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateBoardsPrefsCardCoversByIdBoard()
 * @request PUT :/boards/{idBoard}/prefs/cardCovers
 */
export async function putBoardsUpdateBoardsPrefsCardCoversByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: PrefsCardCovers,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.updateBoardsPrefsCardCoversByIdBoard({
    idBoard: idBoard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateBoardsPrefsCommentsByIdBoard()
 * @request PUT :/boards/{idBoard}/prefs/comments
 */
export async function putBoardsUpdateBoardsPrefsCommentsByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: PrefsComments,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.updateBoardsPrefsCommentsByIdBoard({
    idBoard: idBoard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateBoardsPrefsInvitationsByIdBoard()
 * @request PUT :/boards/{idBoard}/prefs/invitations
 */
export async function putBoardsUpdateBoardsPrefsInvitationsByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: PrefsInvitations,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.updateBoardsPrefsInvitationsByIdBoard({
    idBoard: idBoard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateBoardsPrefsPermissionLevelByIdBoard()
 * @request PUT :/boards/{idBoard}/prefs/permissionLevel
 */
export async function putBoardsUpdateBoardsPrefsPermissionLevelByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: PrefsPermissionLevel,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.updateBoardsPrefsPermissionLevelByIdBoard({
    idBoard: idBoard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateBoardsPrefsSelfJoinByIdBoard()
 * @request PUT :/boards/{idBoard}/prefs/selfJoin
 */
export async function putBoardsUpdateBoardsPrefsSelfJoinByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: PrefsSelfJoin,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.updateBoardsPrefsSelfJoinByIdBoard({
    idBoard: idBoard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateBoardsPrefsVotingByIdBoard()
 * @request PUT :/boards/{idBoard}/prefs/voting
 */
export async function putBoardsUpdateBoardsPrefsVotingByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: PrefsVoting,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.updateBoardsPrefsVotingByIdBoard({
    idBoard: idBoard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateBoardsSubscribedByIdBoard()
 * @request PUT :/boards/{idBoard}/subscribed
 */
export async function putBoardsUpdateBoardsSubscribedByIdBoard(
  /** board_id */
  idBoard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: BoardsSubscribed,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.updateBoardsSubscribedByIdBoard({
    idBoard: idBoard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getBoardsByIdBoardByField()
 * @request GET :/boards/{idBoard}/{field}
 * @readonly
 */
export async function getBoardsGetBoardsByIdBoardByField(
  /** board_id */
  idBoard: string,
  /** field */
  field: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.boards.getBoardsByIdBoardByField({
    idBoard: idBoard,
    field: field,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * addCards()
 * @request POST :/cards
 */
export async function postCardsAddCards(
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: Cards,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.addCards({
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * deleteCardsByIdCard()
 * @request DELETE :/cards/{idCard}
 */
export async function deleteCardsDeleteCardsByIdCard(
  /** card id or shortlink */
  idCard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.deleteCardsByIdCard({
    idCard: idCard,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getCardsByIdCard()
 * @request GET :/cards/{idCard}
 * @readonly
 */
export async function getCardsGetCardsByIdCard(
  /** card id or shortlink */
  idCard: string,
  query: {
    /** all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization */
    actions?: string;
    /**  true or false */
    actions_entities?: string;
    /**  true or false */
    actions_display?: string;
    /** a number from 0 to 1000 */
    actions_limit?: string;
    /** all or a comma-separated list of: data, date, idMemberCreator or type */
    action_fields?: string;
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    action_memberCreator_fields?: string;
    /** A boolean value or &quot;cover&quot; for only card cover attachments */
    attachments?: string;
    /** all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url */
    attachment_fields?: string;
    /**  true or false */
    members?: string;
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    member_fields?: string;
    /**  true or false */
    membersVoted?: string;
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    memberVoted_fields?: string;
    /**  true or false */
    checkItemStates?: string;
    /** all or a comma-separated list of: idCheckItem or state */
    checkItemState_fields?: string;
    /** One of: all or none */
    checklists?: string;
    /** all or a comma-separated list of: idBoard, idCard, name or pos */
    checklist_fields?: string;
    /**  true or false */
    board?: string;
    /** all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url */
    board_fields?: string;
    /**  true or false */
    list?: string;
    /** all or a comma-separated list of: closed, idBoard, name, pos or subscribed */
    list_fields?: string;
    /**  true or false */
    stickers?: string;
    /** all or a comma-separated list of: image, imageScaled, imageUrl, left, rotate, top or zIndex */
    sticker_fields?: string;
    /** all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.getCardsByIdCard({
    idCard: idCard,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateCardsByIdCard()
 * @request PUT :/cards/{idCard}
 */
export async function putCardsUpdateCardsByIdCard(
  /** card id or shortlink */
  idCard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: Cards,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.updateCardsByIdCard({
    idCard: idCard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getCardsActionsByIdCard()
 * @request GET :/cards/{idCard}/actions
 * @readonly
 */
export async function getCardsGetCardsActionsByIdCard(
  /** card id or shortlink */
  idCard: string,
  query: {
    /**  true or false */
    entities?: string;
    /**  true or false */
    display?: string;
    /** all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization */
    filter?: string;
    /** all or a comma-separated list of: data, date, idMemberCreator or type */
    fields?: string;
    /** a number from 0 to 1000 */
    limit?: string;
    /** One of: count, list or minimal */
    format?: string;
    /** A date, null or lastView */
    since?: string;
    /** A date, or null */
    before?: string;
    /** Page * limit must be less than 1000 */
    page?: string;
    /** Only return actions related to these model ids */
    idModels?: string;
    /**  true or false */
    member?: string;
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    member_fields?: string;
    /**  true or false */
    memberCreator?: string;
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    memberCreator_fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.getCardsActionsByIdCard({
    idCard: idCard,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * addCardsActionsCommentsByIdCard()
 * @request POST :/cards/{idCard}/actions/comments
 */
export async function postCardsAddCardsActionsCommentsByIdCard(
  /** card id or shortlink */
  idCard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: ActionsComments,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.addCardsActionsCommentsByIdCard({
    idCard: idCard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * deleteCardsActionsCommentsByIdCardByIdAction()
 * @request DELETE :/cards/{idCard}/actions/{idAction}/comments
 */
export async function deleteCardsDeleteCardsActionsCommentsByIdCardByIdAction(
  /** card id or shortlink */
  idCard: string,
  /** idAction */
  idAction: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.deleteCardsActionsCommentsByIdCardByIdAction({
    idCard: idCard,
    idAction: idAction,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateCardsActionsCommentsByIdCardByIdAction()
 * @request PUT :/cards/{idCard}/actions/{idAction}/comments
 */
export async function putCardsUpdateCardsActionsCommentsByIdCardByIdAction(
  /** card id or shortlink */
  idCard: string,
  /** idAction */
  idAction: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: CardsActionsComments,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.updateCardsActionsCommentsByIdCardByIdAction({
    idCard: idCard,
    idAction: idAction,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getCardsAttachmentsByIdCard()
 * @request GET :/cards/{idCard}/attachments
 * @readonly
 */
export async function getCardsGetCardsAttachmentsByIdCard(
  /** card id or shortlink */
  idCard: string,
  query: {
    /** all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url */
    fields?: string;
    /** A boolean value or &quot;cover&quot; for only card cover attachments */
    filter?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.getCardsAttachmentsByIdCard({
    idCard: idCard,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * addCardsAttachmentsByIdCard()
 * @request POST :/cards/{idCard}/attachments
 */
export async function postCardsAddCardsAttachmentsByIdCard(
  /** card id or shortlink */
  idCard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: CardsAttachments,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.addCardsAttachmentsByIdCard({
    idCard: idCard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * deleteCardsAttachmentsByIdCardByIdAttachment()
 * @request DELETE :/cards/{idCard}/attachments/{idAttachment}
 */
export async function deleteCardsDeleteCardsAttachmentsByIdCardByIdAttachment(
  /** card id or shortlink */
  idCard: string,
  /** idAttachment */
  idAttachment: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.deleteCardsAttachmentsByIdCardByIdAttachment({
    idCard: idCard,
    idAttachment: idAttachment,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getCardsAttachmentsByIdCardByIdAttachment()
 * @request GET :/cards/{idCard}/attachments/{idAttachment}
 * @readonly
 */
export async function getCardsGetCardsAttachmentsByIdCardByIdAttachment(
  /** card id or shortlink */
  idCard: string,
  /** idAttachment */
  idAttachment: string,
  query: {
    /** all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.getCardsAttachmentsByIdCardByIdAttachment({
    idCard: idCard,
    idAttachment: idAttachment,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getCardsBoardByIdCard()
 * @request GET :/cards/{idCard}/board
 * @readonly
 */
export async function getCardsGetCardsBoardByIdCard(
  /** card id or shortlink */
  idCard: string,
  query: {
    /** all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.getCardsBoardByIdCard({
    idCard: idCard,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getCardsBoardByIdCardByField()
 * @request GET :/cards/{idCard}/board/{field}
 * @readonly
 */
export async function getCardsGetCardsBoardByIdCardByField(
  /** card id or shortlink */
  idCard: string,
  /** field */
  field: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.getCardsBoardByIdCardByField({
    idCard: idCard,
    field: field,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getCardsCheckItemStatesByIdCard()
 * @request GET :/cards/{idCard}/checkItemStates
 * @readonly
 */
export async function getCardsGetCardsCheckItemStatesByIdCard(
  /** card id or shortlink */
  idCard: string,
  query: {
    /** all or a comma-separated list of: idCheckItem or state */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.getCardsCheckItemStatesByIdCard({
    idCard: idCard,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItem()
 * @request PUT :/cards/{idCard}/checklist/{idChecklistCurrent}/checkItem/{idCheckItem}
 */
export async function putCardsUpdateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItem(
  /** card id or shortlink */
  idCard: string,
  /** idChecklistCurrent */
  idChecklistCurrent: string,
  /** idCheckItem */
  idCheckItem: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: CardsChecklistIdChecklistCurrentCheckItem,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.cards.updateCardsChecklistCheckItemByIdCardByIdChecklistCurrentByIdCheckItem(
      {
        idCard: idCard,
        idChecklistCurrent: idChecklistCurrent,
        idCheckItem: idCheckItem,
        query: query,
        data: data,
        params: {
          headers: (headers?.value as Record<string, string>) ?? undefined,
        },
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * addCardsChecklistCheckItemByIdCardByIdChecklist()
 * @request POST :/cards/{idCard}/checklist/{idChecklist}/checkItem
 */
export async function postCardsAddCardsChecklistCheckItemByIdCardByIdChecklist(
  /** card id or shortlink */
  idCard: string,
  /** idChecklist */
  idChecklist: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: CardsChecklistCheckItem,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.cards.addCardsChecklistCheckItemByIdCardByIdChecklist({
      idCard: idCard,
      idChecklist: idChecklist,
      query: query,
      data: data,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * deleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItem()
 * @request DELETE :/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}
 */
export async function deleteCardsDeleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItem(
  /** card id or shortlink */
  idCard: string,
  /** idChecklist */
  idChecklist: string,
  /** idCheckItem */
  idCheckItem: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.cards.deleteCardsChecklistCheckItemByIdCardByIdChecklistByIdCheckItem(
      {
        idCard: idCard,
        idChecklist: idChecklist,
        idCheckItem: idCheckItem,
        query: query,
        params: {
          headers: (headers?.value as Record<string, string>) ?? undefined,
        },
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * addCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItem()
 * @request POST :/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}/convertToCard
 */
export async function postCardsAddCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItem(
  /** card id or shortlink */
  idCard: string,
  /** idChecklist */
  idChecklist: string,
  /** idCheckItem */
  idCheckItem: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.cards.addCardsChecklistCheckItemConvertToCardByIdCardByIdChecklistByIdCheckItem(
      {
        idCard: idCard,
        idChecklist: idChecklist,
        idCheckItem: idCheckItem,
        query: query,
        params: {
          headers: (headers?.value as Record<string, string>) ?? undefined,
        },
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItem()
 * @request PUT :/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}/name
 */
export async function putCardsUpdateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItem(
  /** card id or shortlink */
  idCard: string,
  /** idChecklist */
  idChecklist: string,
  /** idCheckItem */
  idCheckItem: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: CardsChecklistCheckItemName,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.cards.updateCardsChecklistCheckItemNameByIdCardByIdChecklistByIdCheckItem(
      {
        idCard: idCard,
        idChecklist: idChecklist,
        idCheckItem: idCheckItem,
        query: query,
        data: data,
        params: {
          headers: (headers?.value as Record<string, string>) ?? undefined,
        },
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItem()
 * @request PUT :/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}/pos
 */
export async function putCardsUpdateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItem(
  /** card id or shortlink */
  idCard: string,
  /** idChecklist */
  idChecklist: string,
  /** idCheckItem */
  idCheckItem: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: CardsChecklistCheckItemPos,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.cards.updateCardsChecklistCheckItemPosByIdCardByIdChecklistByIdCheckItem(
      {
        idCard: idCard,
        idChecklist: idChecklist,
        idCheckItem: idCheckItem,
        query: query,
        data: data,
        params: {
          headers: (headers?.value as Record<string, string>) ?? undefined,
        },
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItem()
 * @request PUT :/cards/{idCard}/checklist/{idChecklist}/checkItem/{idCheckItem}/state
 */
export async function putCardsUpdateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItem(
  /** card id or shortlink */
  idCard: string,
  /** idChecklist */
  idChecklist: string,
  /** idCheckItem */
  idCheckItem: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: CardsChecklistCheckItemState,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.cards.updateCardsChecklistCheckItemStateByIdCardByIdChecklistByIdCheckItem(
      {
        idCard: idCard,
        idChecklist: idChecklist,
        idCheckItem: idCheckItem,
        query: query,
        data: data,
        params: {
          headers: (headers?.value as Record<string, string>) ?? undefined,
        },
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getCardsChecklistsByIdCard()
 * @request GET :/cards/{idCard}/checklists
 * @readonly
 */
export async function getCardsGetCardsChecklistsByIdCard(
  /** card id or shortlink */
  idCard: string,
  query: {
    /** One of: all, closed, none, open or visible */
    cards?: string;
    /** all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url */
    card_fields?: string;
    /** One of: all or none */
    checkItems?: string;
    /** all or a comma-separated list of: name, nameData, pos, state or type */
    checkItem_fields?: string;
    /** One of: all or none */
    filter?: string;
    /** all or a comma-separated list of: idBoard, idCard, name or pos */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.getCardsChecklistsByIdCard({
    idCard: idCard,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * addCardsChecklistsByIdCard()
 * @request POST :/cards/{idCard}/checklists
 */
export async function postCardsAddCardsChecklistsByIdCard(
  /** card id or shortlink */
  idCard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: CardsChecklists,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.addCardsChecklistsByIdCard({
    idCard: idCard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * deleteCardsChecklistsByIdCardByIdChecklist()
 * @request DELETE :/cards/{idCard}/checklists/{idChecklist}
 */
export async function deleteCardsDeleteCardsChecklistsByIdCardByIdChecklist(
  /** card id or shortlink */
  idCard: string,
  /** idChecklist */
  idChecklist: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.deleteCardsChecklistsByIdCardByIdChecklist({
    idCard: idCard,
    idChecklist: idChecklist,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateCardsClosedByIdCard()
 * @request PUT :/cards/{idCard}/closed
 */
export async function putCardsUpdateCardsClosedByIdCard(
  /** card id or shortlink */
  idCard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: CardsClosed,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.updateCardsClosedByIdCard({
    idCard: idCard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateCardsDescByIdCard()
 * @request PUT :/cards/{idCard}/desc
 */
export async function putCardsUpdateCardsDescByIdCard(
  /** card id or shortlink */
  idCard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: CardsDesc,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.updateCardsDescByIdCard({
    idCard: idCard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateCardsDueByIdCard()
 * @request PUT :/cards/{idCard}/due
 */
export async function putCardsUpdateCardsDueByIdCard(
  /** card id or shortlink */
  idCard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: CardsDue,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.updateCardsDueByIdCard({
    idCard: idCard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateCardsIdAttachmentCoverByIdCard()
 * @request PUT :/cards/{idCard}/idAttachmentCover
 */
export async function putCardsUpdateCardsIdAttachmentCoverByIdCard(
  /** card id or shortlink */
  idCard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: CardsIdAttachmentCover,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.updateCardsIdAttachmentCoverByIdCard({
    idCard: idCard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateCardsIdBoardByIdCard()
 * @request PUT :/cards/{idCard}/idBoard
 */
export async function putCardsUpdateCardsIdBoardByIdCard(
  /** card id or shortlink */
  idCard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: CardsIdBoard,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.updateCardsIdBoardByIdCard({
    idCard: idCard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * addCardsIdLabelsByIdCard()
 * @request POST :/cards/{idCard}/idLabels
 */
export async function postCardsAddCardsIdLabelsByIdCard(
  /** card id or shortlink */
  idCard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: CardsIdLabels,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.addCardsIdLabelsByIdCard({
    idCard: idCard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * deleteCardsIdLabelsByIdCardByIdLabel()
 * @request DELETE :/cards/{idCard}/idLabels/{idLabel}
 */
export async function deleteCardsDeleteCardsIdLabelsByIdCardByIdLabel(
  /** card id or shortlink */
  idCard: string,
  /** idLabel */
  idLabel: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.deleteCardsIdLabelsByIdCardByIdLabel({
    idCard: idCard,
    idLabel: idLabel,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateCardsIdListByIdCard()
 * @request PUT :/cards/{idCard}/idList
 */
export async function putCardsUpdateCardsIdListByIdCard(
  /** card id or shortlink */
  idCard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: CardsIdList,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.updateCardsIdListByIdCard({
    idCard: idCard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * addCardsIdMembersByIdCard()
 * @request POST :/cards/{idCard}/idMembers
 */
export async function postCardsAddCardsIdMembersByIdCard(
  /** card id or shortlink */
  idCard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: CardsIdMembers,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.addCardsIdMembersByIdCard({
    idCard: idCard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateCardsIdMembersByIdCard()
 * @request PUT :/cards/{idCard}/idMembers
 */
export async function putCardsUpdateCardsIdMembersByIdCard(
  /** card id or shortlink */
  idCard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: CardsIdMembers,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.updateCardsIdMembersByIdCard({
    idCard: idCard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * deleteCardsIdMembersByIdCardByIdMember()
 * @request DELETE :/cards/{idCard}/idMembers/{idMember}
 */
export async function deleteCardsDeleteCardsIdMembersByIdCardByIdMember(
  /** card id or shortlink */
  idCard: string,
  /** idMember */
  idMember: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.deleteCardsIdMembersByIdCardByIdMember({
    idCard: idCard,
    idMember: idMember,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * addCardsLabelsByIdCard()
 * @request POST :/cards/{idCard}/labels
 */
export async function postCardsAddCardsLabelsByIdCard(
  /** card id or shortlink */
  idCard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: CardsLabels,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.addCardsLabelsByIdCard({
    idCard: idCard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateCardsLabelsByIdCard()
 * @request PUT :/cards/{idCard}/labels
 */
export async function putCardsUpdateCardsLabelsByIdCard(
  /** card id or shortlink */
  idCard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: CardsLabels,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.updateCardsLabelsByIdCard({
    idCard: idCard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * deleteCardsLabelsByIdCardByColor()
 * @request DELETE :/cards/{idCard}/labels/{color}
 */
export async function deleteCardsDeleteCardsLabelsByIdCardByColor(
  /** card id or shortlink */
  idCard: string,
  /** color */
  color: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.deleteCardsLabelsByIdCardByColor({
    idCard: idCard,
    color: color,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getCardsListByIdCard()
 * @request GET :/cards/{idCard}/list
 * @readonly
 */
export async function getCardsGetCardsListByIdCard(
  /** card id or shortlink */
  idCard: string,
  query: {
    /** all or a comma-separated list of: closed, idBoard, name, pos or subscribed */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.getCardsListByIdCard({
    idCard: idCard,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getCardsListByIdCardByField()
 * @request GET :/cards/{idCard}/list/{field}
 * @readonly
 */
export async function getCardsGetCardsListByIdCardByField(
  /** card id or shortlink */
  idCard: string,
  /** field */
  field: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.getCardsListByIdCardByField({
    idCard: idCard,
    field: field,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * addCardsMarkAssociatedNotificationsReadByIdCard()
 * @request POST :/cards/{idCard}/markAssociatedNotificationsRead
 */
export async function postCardsAddCardsMarkAssociatedNotificationsReadByIdCard(
  /** card id or shortlink */
  idCard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.cards.addCardsMarkAssociatedNotificationsReadByIdCard({
      idCard: idCard,
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getCardsMembersByIdCard()
 * @request GET :/cards/{idCard}/members
 * @readonly
 */
export async function getCardsGetCardsMembersByIdCard(
  /** card id or shortlink */
  idCard: string,
  query: {
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.getCardsMembersByIdCard({
    idCard: idCard,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getCardsMembersVotedByIdCard()
 * @request GET :/cards/{idCard}/membersVoted
 * @readonly
 */
export async function getCardsGetCardsMembersVotedByIdCard(
  /** card id or shortlink */
  idCard: string,
  query: {
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.getCardsMembersVotedByIdCard({
    idCard: idCard,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * addCardsMembersVotedByIdCard()
 * @request POST :/cards/{idCard}/membersVoted
 */
export async function postCardsAddCardsMembersVotedByIdCard(
  /** card id or shortlink */
  idCard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: CardsMembersVoted,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.addCardsMembersVotedByIdCard({
    idCard: idCard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * deleteCardsMembersVotedByIdCardByIdMember()
 * @request DELETE :/cards/{idCard}/membersVoted/{idMember}
 */
export async function deleteCardsDeleteCardsMembersVotedByIdCardByIdMember(
  /** card id or shortlink */
  idCard: string,
  /** idMember */
  idMember: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.deleteCardsMembersVotedByIdCardByIdMember({
    idCard: idCard,
    idMember: idMember,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateCardsNameByIdCard()
 * @request PUT :/cards/{idCard}/name
 */
export async function putCardsUpdateCardsNameByIdCard(
  /** card id or shortlink */
  idCard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: CardsName,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.updateCardsNameByIdCard({
    idCard: idCard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateCardsPosByIdCard()
 * @request PUT :/cards/{idCard}/pos
 */
export async function putCardsUpdateCardsPosByIdCard(
  /** card id or shortlink */
  idCard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: CardsPos,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.updateCardsPosByIdCard({
    idCard: idCard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getCardsStickersByIdCard()
 * @request GET :/cards/{idCard}/stickers
 * @readonly
 */
export async function getCardsGetCardsStickersByIdCard(
  /** card id or shortlink */
  idCard: string,
  query: {
    /** all or a comma-separated list of: image, imageScaled, imageUrl, left, rotate, top or zIndex */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.getCardsStickersByIdCard({
    idCard: idCard,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * addCardsStickersByIdCard()
 * @request POST :/cards/{idCard}/stickers
 */
export async function postCardsAddCardsStickersByIdCard(
  /** card id or shortlink */
  idCard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: CardsStickers,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.addCardsStickersByIdCard({
    idCard: idCard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * deleteCardsStickersByIdCardByIdSticker()
 * @request DELETE :/cards/{idCard}/stickers/{idSticker}
 */
export async function deleteCardsDeleteCardsStickersByIdCardByIdSticker(
  /** card id or shortlink */
  idCard: string,
  /** idSticker */
  idSticker: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.deleteCardsStickersByIdCardByIdSticker({
    idCard: idCard,
    idSticker: idSticker,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getCardsStickersByIdCardByIdSticker()
 * @request GET :/cards/{idCard}/stickers/{idSticker}
 * @readonly
 */
export async function getCardsGetCardsStickersByIdCardByIdSticker(
  /** card id or shortlink */
  idCard: string,
  /** idSticker */
  idSticker: string,
  query: {
    /** all or a comma-separated list of: image, imageScaled, imageUrl, left, rotate, top or zIndex */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.getCardsStickersByIdCardByIdSticker({
    idCard: idCard,
    idSticker: idSticker,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateCardsStickersByIdCardByIdSticker()
 * @request PUT :/cards/{idCard}/stickers/{idSticker}
 */
export async function putCardsUpdateCardsStickersByIdCardByIdSticker(
  /** card id or shortlink */
  idCard: string,
  /** idSticker */
  idSticker: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: CardsStickers,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.updateCardsStickersByIdCardByIdSticker({
    idCard: idCard,
    idSticker: idSticker,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateCardsSubscribedByIdCard()
 * @request PUT :/cards/{idCard}/subscribed
 */
export async function putCardsUpdateCardsSubscribedByIdCard(
  /** card id or shortlink */
  idCard: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: CardsSubscribed,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.updateCardsSubscribedByIdCard({
    idCard: idCard,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getCardsByIdCardByField()
 * @request GET :/cards/{idCard}/{field}
 * @readonly
 */
export async function getCardsGetCardsByIdCardByField(
  /** card id or shortlink */
  idCard: string,
  /** field */
  field: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cards.getCardsByIdCardByField({
    idCard: idCard,
    field: field,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * addChecklists()
 * @request POST :/checklists
 */
export async function postChecklistsAddChecklists(
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: Checklists,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.checklists.addChecklists({
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * deleteChecklistsByIdChecklist()
 * @request DELETE :/checklists/{idChecklist}
 */
export async function deleteChecklistsDeleteChecklistsByIdChecklist(
  /** idChecklist */
  idChecklist: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.checklists.deleteChecklistsByIdChecklist({
    idChecklist: idChecklist,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getChecklistsByIdChecklist()
 * @request GET :/checklists/{idChecklist}
 * @readonly
 */
export async function getChecklistsGetChecklistsByIdChecklist(
  /** idChecklist */
  idChecklist: string,
  query: {
    /** One of: all, closed, none, open or visible */
    cards?: string;
    /** all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url */
    card_fields?: string;
    /** One of: all or none */
    checkItems?: string;
    /** all or a comma-separated list of: name, nameData, pos, state or type */
    checkItem_fields?: string;
    /** all or a comma-separated list of: idBoard, idCard, name or pos */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.checklists.getChecklistsByIdChecklist({
    idChecklist: idChecklist,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateChecklistsByIdChecklist()
 * @request PUT :/checklists/{idChecklist}
 */
export async function putChecklistsUpdateChecklistsByIdChecklist(
  /** idChecklist */
  idChecklist: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: Checklists,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.checklists.updateChecklistsByIdChecklist({
    idChecklist: idChecklist,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getChecklistsBoardByIdChecklist()
 * @request GET :/checklists/{idChecklist}/board
 * @readonly
 */
export async function getChecklistsGetChecklistsBoardByIdChecklist(
  /** idChecklist */
  idChecklist: string,
  query: {
    /** all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.checklists.getChecklistsBoardByIdChecklist({
    idChecklist: idChecklist,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getChecklistsBoardByIdChecklistByField()
 * @request GET :/checklists/{idChecklist}/board/{field}
 * @readonly
 */
export async function getChecklistsGetChecklistsBoardByIdChecklistByField(
  /** idChecklist */
  idChecklist: string,
  /** field */
  field: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.checklists.getChecklistsBoardByIdChecklistByField({
    idChecklist: idChecklist,
    field: field,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getChecklistsCardsByIdChecklist()
 * @request GET :/checklists/{idChecklist}/cards
 * @readonly
 */
export async function getChecklistsGetChecklistsCardsByIdChecklist(
  /** idChecklist */
  idChecklist: string,
  query: {
    /** all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization */
    actions?: string;
    /** A boolean value or &quot;cover&quot; for only card cover attachments */
    attachments?: string;
    /** all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url */
    attachment_fields?: string;
    /**  true or false */
    stickers?: string;
    /**  true or false */
    members?: string;
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    member_fields?: string;
    /**  true or false */
    checkItemStates?: string;
    /** One of: all or none */
    checklists?: string;
    /** a number from 1 to 1000 */
    limit?: string;
    /** A date, or null */
    since?: string;
    /** A date, or null */
    before?: string;
    /** One of: all, closed, none or open */
    filter?: string;
    /** all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.checklists.getChecklistsCardsByIdChecklist({
    idChecklist: idChecklist,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getChecklistsCardsByIdChecklistByFilter()
 * @request GET :/checklists/{idChecklist}/cards/{filter}
 * @readonly
 */
export async function getChecklistsGetChecklistsCardsByIdChecklistByFilter(
  /** idChecklist */
  idChecklist: string,
  /** filter */
  filter: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.checklists.getChecklistsCardsByIdChecklistByFilter({
    idChecklist: idChecklist,
    filter: filter,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getChecklistsCheckItemsByIdChecklist()
 * @request GET :/checklists/{idChecklist}/checkItems
 * @readonly
 */
export async function getChecklistsGetChecklistsCheckItemsByIdChecklist(
  /** idChecklist */
  idChecklist: string,
  query: {
    /** One of: all or none */
    filter?: string;
    /** all or a comma-separated list of: name, nameData, pos, state or type */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.checklists.getChecklistsCheckItemsByIdChecklist({
    idChecklist: idChecklist,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * addChecklistsCheckItemsByIdChecklist()
 * @request POST :/checklists/{idChecklist}/checkItems
 */
export async function postChecklistsAddChecklistsCheckItemsByIdChecklist(
  /** idChecklist */
  idChecklist: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: ChecklistsCheckItems,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.checklists.addChecklistsCheckItemsByIdChecklist({
    idChecklist: idChecklist,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * deleteChecklistsCheckItemsByIdChecklistByIdCheckItem()
 * @request DELETE :/checklists/{idChecklist}/checkItems/{idCheckItem}
 */
export async function deleteChecklistsDeleteChecklistsCheckItemsByIdChecklistByIdCheckItem(
  /** idChecklist */
  idChecklist: string,
  /** idCheckItem */
  idCheckItem: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.checklists.deleteChecklistsCheckItemsByIdChecklistByIdCheckItem({
      idChecklist: idChecklist,
      idCheckItem: idCheckItem,
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getChecklistsCheckItemsByIdChecklistByIdCheckItem()
 * @request GET :/checklists/{idChecklist}/checkItems/{idCheckItem}
 * @readonly
 */
export async function getChecklistsGetChecklistsCheckItemsByIdChecklistByIdCheckItem(
  /** idChecklist */
  idChecklist: string,
  /** idCheckItem */
  idCheckItem: string,
  query: {
    /** all or a comma-separated list of: name, nameData, pos, state or type */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.checklists.getChecklistsCheckItemsByIdChecklistByIdCheckItem({
      idChecklist: idChecklist,
      idCheckItem: idCheckItem,
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateChecklistsIdCardByIdChecklist()
 * @request PUT :/checklists/{idChecklist}/idCard
 */
export async function putChecklistsUpdateChecklistsIdCardByIdChecklist(
  /** idChecklist */
  idChecklist: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: ChecklistsIdCard,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.checklists.updateChecklistsIdCardByIdChecklist({
    idChecklist: idChecklist,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateChecklistsNameByIdChecklist()
 * @request PUT :/checklists/{idChecklist}/name
 */
export async function putChecklistsUpdateChecklistsNameByIdChecklist(
  /** idChecklist */
  idChecklist: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: ChecklistsName,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.checklists.updateChecklistsNameByIdChecklist({
    idChecklist: idChecklist,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateChecklistsPosByIdChecklist()
 * @request PUT :/checklists/{idChecklist}/pos
 */
export async function putChecklistsUpdateChecklistsPosByIdChecklist(
  /** idChecklist */
  idChecklist: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: ChecklistsPos,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.checklists.updateChecklistsPosByIdChecklist({
    idChecklist: idChecklist,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getChecklistsByIdChecklistByField()
 * @request GET :/checklists/{idChecklist}/{field}
 * @readonly
 */
export async function getChecklistsGetChecklistsByIdChecklistByField(
  /** idChecklist */
  idChecklist: string,
  /** field */
  field: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.checklists.getChecklistsByIdChecklistByField({
    idChecklist: idChecklist,
    field: field,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * addLabels()
 * @request POST :/labels
 */
export async function postLabelsAddLabels(
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: Labels,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.labels.addLabels({
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * deleteLabelsByIdLabel()
 * @request DELETE :/labels/{idLabel}
 */
export async function deleteLabelsDeleteLabelsByIdLabel(
  /** idLabel */
  idLabel: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.labels.deleteLabelsByIdLabel({
    idLabel: idLabel,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getLabelsByIdLabel()
 * @request GET :/labels/{idLabel}
 * @readonly
 */
export async function getLabelsGetLabelsByIdLabel(
  /** idLabel */
  idLabel: string,
  query: {
    /** all or a comma-separated list of: color, idBoard, name or uses */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.labels.getLabelsByIdLabel({
    idLabel: idLabel,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateLabelsByIdLabel()
 * @request PUT :/labels/{idLabel}
 */
export async function putLabelsUpdateLabelsByIdLabel(
  /** idLabel */
  idLabel: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: Labels,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.labels.updateLabelsByIdLabel({
    idLabel: idLabel,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getLabelsBoardByIdLabel()
 * @request GET :/labels/{idLabel}/board
 * @readonly
 */
export async function getLabelsGetLabelsBoardByIdLabel(
  /** idLabel */
  idLabel: string,
  query: {
    /** all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.labels.getLabelsBoardByIdLabel({
    idLabel: idLabel,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getLabelsBoardByIdLabelByField()
 * @request GET :/labels/{idLabel}/board/{field}
 * @readonly
 */
export async function getLabelsGetLabelsBoardByIdLabelByField(
  /** idLabel */
  idLabel: string,
  /** field */
  field: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.labels.getLabelsBoardByIdLabelByField({
    idLabel: idLabel,
    field: field,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateLabelsColorByIdLabel()
 * @request PUT :/labels/{idLabel}/color
 */
export async function putLabelsUpdateLabelsColorByIdLabel(
  /** idLabel */
  idLabel: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: LabelsColor,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.labels.updateLabelsColorByIdLabel({
    idLabel: idLabel,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateLabelsNameByIdLabel()
 * @request PUT :/labels/{idLabel}/name
 */
export async function putLabelsUpdateLabelsNameByIdLabel(
  /** idLabel */
  idLabel: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: LabelsName,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.labels.updateLabelsNameByIdLabel({
    idLabel: idLabel,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * addLists()
 * @request POST :/lists
 */
export async function postListsAddLists(
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: Lists,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.lists.addLists({
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getListsByIdList()
 * @request GET :/lists/{idList}
 * @readonly
 */
export async function getListsGetListsByIdList(
  /** idList */
  idList: string,
  query: {
    /** One of: all, closed, none or open */
    cards?: string;
    /** all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url */
    card_fields?: string;
    /**  true or false */
    board?: string;
    /** all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url */
    board_fields?: string;
    /** all or a comma-separated list of: closed, idBoard, name, pos or subscribed */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.lists.getListsByIdList({
    idList: idList,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateListsByIdList()
 * @request PUT :/lists/{idList}
 */
export async function putListsUpdateListsByIdList(
  /** idList */
  idList: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: Lists,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.lists.updateListsByIdList({
    idList: idList,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getListsActionsByIdList()
 * @request GET :/lists/{idList}/actions
 * @readonly
 */
export async function getListsGetListsActionsByIdList(
  /** idList */
  idList: string,
  query: {
    /**  true or false */
    entities?: string;
    /**  true or false */
    display?: string;
    /** all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization */
    filter?: string;
    /** all or a comma-separated list of: data, date, idMemberCreator or type */
    fields?: string;
    /** a number from 0 to 1000 */
    limit?: string;
    /** One of: count, list or minimal */
    format?: string;
    /** A date, null or lastView */
    since?: string;
    /** A date, or null */
    before?: string;
    /** Page * limit must be less than 1000 */
    page?: string;
    /** Only return actions related to these model ids */
    idModels?: string;
    /**  true or false */
    member?: string;
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    member_fields?: string;
    /**  true or false */
    memberCreator?: string;
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    memberCreator_fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.lists.getListsActionsByIdList({
    idList: idList,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * addListsArchiveAllCardsByIdList()
 * @request POST :/lists/{idList}/archiveAllCards
 */
export async function postListsAddListsArchiveAllCardsByIdList(
  /** idList */
  idList: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.lists.addListsArchiveAllCardsByIdList({
    idList: idList,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getListsBoardByIdList()
 * @request GET :/lists/{idList}/board
 * @readonly
 */
export async function getListsGetListsBoardByIdList(
  /** idList */
  idList: string,
  query: {
    /** all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.lists.getListsBoardByIdList({
    idList: idList,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getListsBoardByIdListByField()
 * @request GET :/lists/{idList}/board/{field}
 * @readonly
 */
export async function getListsGetListsBoardByIdListByField(
  /** idList */
  idList: string,
  /** field */
  field: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.lists.getListsBoardByIdListByField({
    idList: idList,
    field: field,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getListsCardsByIdList()
 * @request GET :/lists/{idList}/cards
 * @readonly
 */
export async function getListsGetListsCardsByIdList(
  /** idList */
  idList: string,
  query: {
    /** all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization */
    actions?: string;
    /** A boolean value or &quot;cover&quot; for only card cover attachments */
    attachments?: string;
    /** all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url */
    attachment_fields?: string;
    /**  true or false */
    stickers?: string;
    /**  true or false */
    members?: string;
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    member_fields?: string;
    /**  true or false */
    checkItemStates?: string;
    /** One of: all or none */
    checklists?: string;
    /** a number from 1 to 1000 */
    limit?: string;
    /** A date, or null */
    since?: string;
    /** A date, or null */
    before?: string;
    /** One of: all, closed, none or open */
    filter?: string;
    /** all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.lists.getListsCardsByIdList({
    idList: idList,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * addListsCardsByIdList()
 * @request POST :/lists/{idList}/cards
 */
export async function postListsAddListsCardsByIdList(
  /** idList */
  idList: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: ListsCards,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.lists.addListsCardsByIdList({
    idList: idList,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getListsCardsByIdListByFilter()
 * @request GET :/lists/{idList}/cards/{filter}
 * @readonly
 */
export async function getListsGetListsCardsByIdListByFilter(
  /** idList */
  idList: string,
  /** filter */
  filter: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.lists.getListsCardsByIdListByFilter({
    idList: idList,
    filter: filter,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateListsClosedByIdList()
 * @request PUT :/lists/{idList}/closed
 */
export async function putListsUpdateListsClosedByIdList(
  /** idList */
  idList: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: ListsClosed,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.lists.updateListsClosedByIdList({
    idList: idList,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateListsIdBoardByIdList()
 * @request PUT :/lists/{idList}/idBoard
 */
export async function putListsUpdateListsIdBoardByIdList(
  /** idList */
  idList: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: ListsIdBoard,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.lists.updateListsIdBoardByIdList({
    idList: idList,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * addListsMoveAllCardsByIdList()
 * @request POST :/lists/{idList}/moveAllCards
 */
export async function postListsAddListsMoveAllCardsByIdList(
  /** idList */
  idList: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: ListsMoveAllCards,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.lists.addListsMoveAllCardsByIdList({
    idList: idList,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateListsNameByIdList()
 * @request PUT :/lists/{idList}/name
 */
export async function putListsUpdateListsNameByIdList(
  /** idList */
  idList: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: ListsName,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.lists.updateListsNameByIdList({
    idList: idList,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateListsPosByIdList()
 * @request PUT :/lists/{idList}/pos
 */
export async function putListsUpdateListsPosByIdList(
  /** idList */
  idList: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: ListsPos,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.lists.updateListsPosByIdList({
    idList: idList,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateListsSubscribedByIdList()
 * @request PUT :/lists/{idList}/subscribed
 */
export async function putListsUpdateListsSubscribedByIdList(
  /** idList */
  idList: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: ListsSubscribed,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.lists.updateListsSubscribedByIdList({
    idList: idList,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getListsByIdListByField()
 * @request GET :/lists/{idList}/{field}
 * @readonly
 */
export async function getListsGetListsByIdListByField(
  /** idList */
  idList: string,
  /** field */
  field: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.lists.getListsByIdListByField({
    idList: idList,
    field: field,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getMembersByIdMember()
 * @request GET :/members/{idMember}
 * @readonly
 */
export async function getMembersGetMembersByIdMember(
  /** idMember or username */
  idMember: string,
  query: {
    /** all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization */
    actions?: string;
    /**  true or false */
    actions_entities?: string;
    /**  true or false */
    actions_display?: string;
    /** a number from 0 to 1000 */
    actions_limit?: string;
    /** all or a comma-separated list of: data, date, idMemberCreator or type */
    action_fields?: string;
    /** A date, null or lastView */
    action_since?: string;
    /** A date, or null */
    action_before?: string;
    /** One of: all, closed, none, open or visible */
    cards?: string;
    /** all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url */
    card_fields?: string;
    /**  true or false */
    card_members?: string;
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    card_member_fields?: string;
    /** A boolean value or &quot;cover&quot; for only card cover attachments */
    card_attachments?: string;
    /** all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url */
    card_attachment_fields?: string;
    /**  true or false */
    card_stickers?: string;
    /** all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned */
    boards?: string;
    /** all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url */
    board_fields?: string;
    /** all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization */
    board_actions?: string;
    /**  true or false */
    board_actions_entities?: string;
    /**  true or false */
    board_actions_display?: string;
    /** One of: count, list or minimal */
    board_actions_format?: string;
    /** A date, null or lastView */
    board_actions_since?: string;
    /** a number from 0 to 1000 */
    board_actions_limit?: string;
    /** all or a comma-separated list of: data, date, idMemberCreator or type */
    board_action_fields?: string;
    /** One of: all, closed, none or open */
    board_lists?: string;
    /** all or a comma-separated list of: active, admin, deactivated, me or normal */
    board_memberships?: string;
    /**  true or false */
    board_organization?: string;
    /** all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website */
    board_organization_fields?: string;
    /** all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned */
    boardsInvited?: string;
    /** all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url */
    boardsInvited_fields?: string;
    /**  true or false */
    boardStars?: string;
    /**  true or false */
    savedSearches?: string;
    /** One of: all, members, none or public */
    organizations?: string;
    /** all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website */
    organization_fields?: string;
    /**  true or false */
    organization_paid_account?: string;
    /** One of: all, members, none or public */
    organizationsInvited?: string;
    /** all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website */
    organizationsInvited_fields?: string;
    /** all or a comma-separated list of: addAdminToBoard, addAdminToOrganization, addedAttachmentToCard, addedMemberToCard, addedToBoard, addedToCard, addedToOrganization, cardDueSoon, changeCard, closeBoard, commentCard, createdCard, declinedInvitationToBoard, declinedInvitationToOrganization, invitedToBoard, invitedToOrganization, makeAdminOfBoard, makeAdminOfOrganization, memberJoinedTrello, mentionedOnCard, removedFromBoard, removedFromCard, removedFromOrganization, removedMemberFromCard, unconfirmedInvitedToBoard, unconfirmedInvitedToOrganization or updateCheckItemStateOnCard */
    notifications?: string;
    /**  true or false */
    notifications_entities?: string;
    /**  true or false */
    notifications_display?: string;
    /** a number from 1 to 1000 */
    notifications_limit?: string;
    /** all or a comma-separated list of: data, date, idMemberCreator, type or unread */
    notification_fields?: string;
    /**  true or false */
    notification_memberCreator?: string;
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    notification_memberCreator_fields?: string;
    /** An id, or null */
    notification_before?: string;
    /** An id, or null */
    notification_since?: string;
    /** One of: all or none */
    tokens?: string;
    /**  true or false */
    paid_account?: string;
    /** One of: all, custom, default, none or premium */
    boardBackgrounds?: string;
    /** One of: all or none */
    customBoardBackgrounds?: string;
    /** One of: all or none */
    customStickers?: string;
    /** One of: all or none */
    customEmoji?: string;
    /** all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.members.getMembersByIdMember({
    idMember: idMember,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateMembersByIdMember()
 * @request PUT :/members/{idMember}
 */
export async function putMembersUpdateMembersByIdMember(
  /** idMember or username */
  idMember: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: Members,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.members.updateMembersByIdMember({
    idMember: idMember,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getMembersActionsByIdMember()
 * @request GET :/members/{idMember}/actions
 * @readonly
 */
export async function getMembersGetMembersActionsByIdMember(
  /** idMember or username */
  idMember: string,
  query: {
    /**  true or false */
    entities?: string;
    /**  true or false */
    display?: string;
    /** all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization */
    filter?: string;
    /** all or a comma-separated list of: data, date, idMemberCreator or type */
    fields?: string;
    /** a number from 0 to 1000 */
    limit?: string;
    /** One of: count, list or minimal */
    format?: string;
    /** A date, null or lastView */
    since?: string;
    /** A date, or null */
    before?: string;
    /** Page * limit must be less than 1000 */
    page?: string;
    /** Only return actions related to these model ids */
    idModels?: string;
    /**  true or false */
    member?: string;
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    member_fields?: string;
    /**  true or false */
    memberCreator?: string;
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    memberCreator_fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.members.getMembersActionsByIdMember({
    idMember: idMember,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * addMembersAvatarByIdMember()
 * @request POST :/members/{idMember}/avatar
 */
export async function postMembersAddMembersAvatarByIdMember(
  /** idMember or username */
  idMember: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: MembersAvatar,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.members.addMembersAvatarByIdMember({
    idMember: idMember,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateMembersAvatarSourceByIdMember()
 * @request PUT :/members/{idMember}/avatarSource
 */
export async function putMembersUpdateMembersAvatarSourceByIdMember(
  /** idMember or username */
  idMember: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: MembersAvatarSource,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.members.updateMembersAvatarSourceByIdMember({
    idMember: idMember,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateMembersBioByIdMember()
 * @request PUT :/members/{idMember}/bio
 */
export async function putMembersUpdateMembersBioByIdMember(
  /** idMember or username */
  idMember: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: MembersBio,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.members.updateMembersBioByIdMember({
    idMember: idMember,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getMembersBoardBackgroundsByIdMember()
 * @request GET :/members/{idMember}/boardBackgrounds
 * @readonly
 */
export async function getMembersGetMembersBoardBackgroundsByIdMember(
  /** idMember or username */
  idMember: string,
  query: {
    /** One of: all, custom, default, none or premium */
    filter?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.members.getMembersBoardBackgroundsByIdMember({
    idMember: idMember,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * addMembersBoardBackgroundsByIdMember()
 * @request POST :/members/{idMember}/boardBackgrounds
 */
export async function postMembersAddMembersBoardBackgroundsByIdMember(
  /** idMember or username */
  idMember: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: MembersBoardBackgrounds,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.members.addMembersBoardBackgroundsByIdMember({
    idMember: idMember,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * deleteMembersBoardBackgroundsByIdMemberByIdBoardBackground()
 * @request DELETE :/members/{idMember}/boardBackgrounds/{idBoardBackground}
 */
export async function deleteMembersDeleteMembersBoardBackgroundsByIdMemberByIdBoardBackground(
  /** idMember or username */
  idMember: string,
  /** idBoardBackground */
  idBoardBackground: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.members.deleteMembersBoardBackgroundsByIdMemberByIdBoardBackground(
      {
        idMember: idMember,
        idBoardBackground: idBoardBackground,
        query: query,
        params: {
          headers: (headers?.value as Record<string, string>) ?? undefined,
        },
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getMembersBoardBackgroundsByIdMemberByIdBoardBackground()
 * @request GET :/members/{idMember}/boardBackgrounds/{idBoardBackground}
 * @readonly
 */
export async function getMembersGetMembersBoardBackgroundsByIdMemberByIdBoardBackground(
  /** idMember or username */
  idMember: string,
  /** idBoardBackground */
  idBoardBackground: string,
  query: {
    /** all or a comma-separated list of: brightness, fullSizeUrl, scaled or tile */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.members.getMembersBoardBackgroundsByIdMemberByIdBoardBackground({
      idMember: idMember,
      idBoardBackground: idBoardBackground,
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateMembersBoardBackgroundsByIdMemberByIdBoardBackground()
 * @request PUT :/members/{idMember}/boardBackgrounds/{idBoardBackground}
 */
export async function putMembersUpdateMembersBoardBackgroundsByIdMemberByIdBoardBackground(
  /** idMember or username */
  idMember: string,
  /** idBoardBackground */
  idBoardBackground: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: MembersBoardBackgrounds,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.members.updateMembersBoardBackgroundsByIdMemberByIdBoardBackground(
      {
        idMember: idMember,
        idBoardBackground: idBoardBackground,
        query: query,
        data: data,
        params: {
          headers: (headers?.value as Record<string, string>) ?? undefined,
        },
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getMembersBoardStarsByIdMember()
 * @request GET :/members/{idMember}/boardStars
 * @readonly
 */
export async function getMembersGetMembersBoardStarsByIdMember(
  /** idMember or username */
  idMember: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.members.getMembersBoardStarsByIdMember({
    idMember: idMember,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * addMembersBoardStarsByIdMember()
 * @request POST :/members/{idMember}/boardStars
 */
export async function postMembersAddMembersBoardStarsByIdMember(
  /** idMember or username */
  idMember: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: MembersBoardStars,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.members.addMembersBoardStarsByIdMember({
    idMember: idMember,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * deleteMembersBoardStarsByIdMemberByIdBoardStar()
 * @request DELETE :/members/{idMember}/boardStars/{idBoardStar}
 */
export async function deleteMembersDeleteMembersBoardStarsByIdMemberByIdBoardStar(
  /** idMember or username */
  idMember: string,
  /** idBoardStar */
  idBoardStar: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.members.deleteMembersBoardStarsByIdMemberByIdBoardStar({
      idMember: idMember,
      idBoardStar: idBoardStar,
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getMembersBoardStarsByIdMemberByIdBoardStar()
 * @request GET :/members/{idMember}/boardStars/{idBoardStar}
 * @readonly
 */
export async function getMembersGetMembersBoardStarsByIdMemberByIdBoardStar(
  /** idMember or username */
  idMember: string,
  /** idBoardStar */
  idBoardStar: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.members.getMembersBoardStarsByIdMemberByIdBoardStar({
    idMember: idMember,
    idBoardStar: idBoardStar,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateMembersBoardStarsByIdMemberByIdBoardStar()
 * @request PUT :/members/{idMember}/boardStars/{idBoardStar}
 */
export async function putMembersUpdateMembersBoardStarsByIdMemberByIdBoardStar(
  /** idMember or username */
  idMember: string,
  /** idBoardStar */
  idBoardStar: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: MembersBoardStars,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.members.updateMembersBoardStarsByIdMemberByIdBoardStar({
      idMember: idMember,
      idBoardStar: idBoardStar,
      query: query,
      data: data,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateMembersBoardStarsIdBoardByIdMemberByIdBoardStar()
 * @request PUT :/members/{idMember}/boardStars/{idBoardStar}/idBoard
 */
export async function putMembersUpdateMembersBoardStarsIdBoardByIdMemberByIdBoardStar(
  /** idMember or username */
  idMember: string,
  /** idBoardStar */
  idBoardStar: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: MembersBoardStarsIdBoard,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.members.updateMembersBoardStarsIdBoardByIdMemberByIdBoardStar({
      idMember: idMember,
      idBoardStar: idBoardStar,
      query: query,
      data: data,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateMembersBoardStarsPosByIdMemberByIdBoardStar()
 * @request PUT :/members/{idMember}/boardStars/{idBoardStar}/pos
 */
export async function putMembersUpdateMembersBoardStarsPosByIdMemberByIdBoardStar(
  /** idMember or username */
  idMember: string,
  /** idBoardStar */
  idBoardStar: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: MembersBoardStarsPos,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.members.updateMembersBoardStarsPosByIdMemberByIdBoardStar({
      idMember: idMember,
      idBoardStar: idBoardStar,
      query: query,
      data: data,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getMembersBoardsByIdMember()
 * @request GET :/members/{idMember}/boards
 * @readonly
 */
export async function getMembersGetMembersBoardsByIdMember(
  /** idMember or username */
  idMember: string,
  query: {
    /** all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned */
    filter?: string;
    /** all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url */
    fields?: string;
    /** all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization */
    actions?: string;
    /**  true or false */
    actions_entities?: string;
    /** a number from 0 to 1000 */
    actions_limit?: string;
    /** One of: count, list or minimal */
    actions_format?: string;
    /** A date, null or lastView */
    actions_since?: string;
    /** all or a comma-separated list of: data, date, idMemberCreator or type */
    action_fields?: string;
    /** all or a comma-separated list of: active, admin, deactivated, me or normal */
    memberships?: string;
    /**  true or false */
    organization?: string;
    /** all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website */
    organization_fields?: string;
    /** One of: all, closed, none or open */
    lists?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.members.getMembersBoardsByIdMember({
    idMember: idMember,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getMembersBoardsByIdMemberByFilter()
 * @request GET :/members/{idMember}/boards/{filter}
 * @readonly
 */
export async function getMembersGetMembersBoardsByIdMemberByFilter(
  /** idMember or username */
  idMember: string,
  /** filter */
  filter: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.members.getMembersBoardsByIdMemberByFilter({
    idMember: idMember,
    filter: filter,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getMembersBoardsInvitedByIdMember()
 * @request GET :/members/{idMember}/boardsInvited
 * @readonly
 */
export async function getMembersGetMembersBoardsInvitedByIdMember(
  /** idMember or username */
  idMember: string,
  query: {
    /** all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.members.getMembersBoardsInvitedByIdMember({
    idMember: idMember,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getMembersBoardsInvitedByIdMemberByField()
 * @request GET :/members/{idMember}/boardsInvited/{field}
 * @readonly
 */
export async function getMembersGetMembersBoardsInvitedByIdMemberByField(
  /** idMember or username */
  idMember: string,
  /** field */
  field: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.members.getMembersBoardsInvitedByIdMemberByField({
    idMember: idMember,
    field: field,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getMembersCardsByIdMember()
 * @request GET :/members/{idMember}/cards
 * @readonly
 */
export async function getMembersGetMembersCardsByIdMember(
  /** idMember or username */
  idMember: string,
  query: {
    /** all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization */
    actions?: string;
    /** A boolean value or &quot;cover&quot; for only card cover attachments */
    attachments?: string;
    /** all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url */
    attachment_fields?: string;
    /**  true or false */
    stickers?: string;
    /**  true or false */
    members?: string;
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    member_fields?: string;
    /**  true or false */
    checkItemStates?: string;
    /** One of: all or none */
    checklists?: string;
    /** a number from 1 to 1000 */
    limit?: string;
    /** A date, or null */
    since?: string;
    /** A date, or null */
    before?: string;
    /** One of: all, closed, none, open or visible */
    filter?: string;
    /** all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.members.getMembersCardsByIdMember({
    idMember: idMember,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getMembersCardsByIdMemberByFilter()
 * @request GET :/members/{idMember}/cards/{filter}
 * @readonly
 */
export async function getMembersGetMembersCardsByIdMemberByFilter(
  /** idMember or username */
  idMember: string,
  /** filter */
  filter: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.members.getMembersCardsByIdMemberByFilter({
    idMember: idMember,
    filter: filter,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getMembersCustomBoardBackgroundsByIdMember()
 * @request GET :/members/{idMember}/customBoardBackgrounds
 * @readonly
 */
export async function getMembersGetMembersCustomBoardBackgroundsByIdMember(
  /** idMember or username */
  idMember: string,
  query: {
    /** One of: all or none */
    filter?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.members.getMembersCustomBoardBackgroundsByIdMember({
    idMember: idMember,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * addMembersCustomBoardBackgroundsByIdMember()
 * @request POST :/members/{idMember}/customBoardBackgrounds
 */
export async function postMembersAddMembersCustomBoardBackgroundsByIdMember(
  /** idMember or username */
  idMember: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: MembersCustomBoardBackgrounds,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.members.addMembersCustomBoardBackgroundsByIdMember({
    idMember: idMember,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()
 * @request DELETE :/members/{idMember}/customBoardBackgrounds/{idBoardBackground}
 */
export async function deleteMembersDeleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground(
  /** idMember or username */
  idMember: string,
  /** idBoardBackground */
  idBoardBackground: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.members.deleteMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground(
      {
        idMember: idMember,
        idBoardBackground: idBoardBackground,
        query: query,
        params: {
          headers: (headers?.value as Record<string, string>) ?? undefined,
        },
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()
 * @request GET :/members/{idMember}/customBoardBackgrounds/{idBoardBackground}
 * @readonly
 */
export async function getMembersGetMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground(
  /** idMember or username */
  idMember: string,
  /** idBoardBackground */
  idBoardBackground: string,
  query: {
    /** all or a comma-separated list of: brightness, fullSizeUrl, scaled or tile */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.members.getMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground(
      {
        idMember: idMember,
        idBoardBackground: idBoardBackground,
        query: query,
        params: {
          headers: (headers?.value as Record<string, string>) ?? undefined,
        },
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground()
 * @request PUT :/members/{idMember}/customBoardBackgrounds/{idBoardBackground}
 */
export async function putMembersUpdateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground(
  /** idMember or username */
  idMember: string,
  /** idBoardBackground */
  idBoardBackground: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: MembersCustomBoardBackgrounds,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.members.updateMembersCustomBoardBackgroundsByIdMemberByIdBoardBackground(
      {
        idMember: idMember,
        idBoardBackground: idBoardBackground,
        query: query,
        data: data,
        params: {
          headers: (headers?.value as Record<string, string>) ?? undefined,
        },
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getMembersCustomEmojiByIdMember()
 * @request GET :/members/{idMember}/customEmoji
 * @readonly
 */
export async function getMembersGetMembersCustomEmojiByIdMember(
  /** idMember or username */
  idMember: string,
  query: {
    /** One of: all or none */
    filter?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.members.getMembersCustomEmojiByIdMember({
    idMember: idMember,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * addMembersCustomEmojiByIdMember()
 * @request POST :/members/{idMember}/customEmoji
 */
export async function postMembersAddMembersCustomEmojiByIdMember(
  /** idMember or username */
  idMember: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: MembersCustomEmoji,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.members.addMembersCustomEmojiByIdMember({
    idMember: idMember,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getMembersCustomEmojiByIdMemberByIdCustomEmoji()
 * @request GET :/members/{idMember}/customEmoji/{idCustomEmoji}
 * @readonly
 */
export async function getMembersGetMembersCustomEmojiByIdMemberByIdCustomEmoji(
  /** idMember or username */
  idMember: string,
  /** idCustomEmoji */
  idCustomEmoji: string,
  query: {
    /** all or a comma-separated list of: name or url */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.members.getMembersCustomEmojiByIdMemberByIdCustomEmoji({
      idMember: idMember,
      idCustomEmoji: idCustomEmoji,
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getMembersCustomStickersByIdMember()
 * @request GET :/members/{idMember}/customStickers
 * @readonly
 */
export async function getMembersGetMembersCustomStickersByIdMember(
  /** idMember or username */
  idMember: string,
  query: {
    /** One of: all or none */
    filter?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.members.getMembersCustomStickersByIdMember({
    idMember: idMember,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * addMembersCustomStickersByIdMember()
 * @request POST :/members/{idMember}/customStickers
 */
export async function postMembersAddMembersCustomStickersByIdMember(
  /** idMember or username */
  idMember: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: MembersCustomStickers,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.members.addMembersCustomStickersByIdMember({
    idMember: idMember,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * deleteMembersCustomStickersByIdMemberByIdCustomSticker()
 * @request DELETE :/members/{idMember}/customStickers/{idCustomSticker}
 */
export async function deleteMembersDeleteMembersCustomStickersByIdMemberByIdCustomSticker(
  /** idMember or username */
  idMember: string,
  /** idCustomSticker */
  idCustomSticker: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.members.deleteMembersCustomStickersByIdMemberByIdCustomSticker({
      idMember: idMember,
      idCustomSticker: idCustomSticker,
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getMembersCustomStickersByIdMemberByIdCustomSticker()
 * @request GET :/members/{idMember}/customStickers/{idCustomSticker}
 * @readonly
 */
export async function getMembersGetMembersCustomStickersByIdMemberByIdCustomSticker(
  /** idMember or username */
  idMember: string,
  /** idCustomSticker */
  idCustomSticker: string,
  query: {
    /** all or a comma-separated list of: scaled or url */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.members.getMembersCustomStickersByIdMemberByIdCustomSticker({
      idMember: idMember,
      idCustomSticker: idCustomSticker,
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getMembersDeltasByIdMember()
 * @request GET :/members/{idMember}/deltas
 * @readonly
 */
export async function getMembersGetMembersDeltasByIdMember(
  /** idMember or username */
  idMember: string,
  query: {
    /** A valid tag for subscribing */
    tags: string;
    /** a number from -1 to Infinity */
    ixLastUpdate: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.members.getMembersDeltasByIdMember({
    idMember: idMember,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateMembersFullNameByIdMember()
 * @request PUT :/members/{idMember}/fullName
 */
export async function putMembersUpdateMembersFullNameByIdMember(
  /** idMember or username */
  idMember: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: MembersFullName,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.members.updateMembersFullNameByIdMember({
    idMember: idMember,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateMembersInitialsByIdMember()
 * @request PUT :/members/{idMember}/initials
 */
export async function putMembersUpdateMembersInitialsByIdMember(
  /** idMember or username */
  idMember: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: MembersInitials,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.members.updateMembersInitialsByIdMember({
    idMember: idMember,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getMembersNotificationsByIdMember()
 * @request GET :/members/{idMember}/notifications
 * @readonly
 */
export async function getMembersGetMembersNotificationsByIdMember(
  /** idMember or username */
  idMember: string,
  query: {
    /**  true or false */
    entities?: string;
    /**  true or false */
    display?: string;
    /** all or a comma-separated list of: addAdminToBoard, addAdminToOrganization, addedAttachmentToCard, addedMemberToCard, addedToBoard, addedToCard, addedToOrganization, cardDueSoon, changeCard, closeBoard, commentCard, createdCard, declinedInvitationToBoard, declinedInvitationToOrganization, invitedToBoard, invitedToOrganization, makeAdminOfBoard, makeAdminOfOrganization, memberJoinedTrello, mentionedOnCard, removedFromBoard, removedFromCard, removedFromOrganization, removedMemberFromCard, unconfirmedInvitedToBoard, unconfirmedInvitedToOrganization or updateCheckItemStateOnCard */
    filter?: string;
    /** One of: all, read or unread */
    read_filter?: string;
    /** all or a comma-separated list of: data, date, idMemberCreator, type or unread */
    fields?: string;
    /** a number from 1 to 1000 */
    limit?: string;
    /** a number from 0 to 100 */
    page?: string;
    /** An id, or null */
    before?: string;
    /** An id, or null */
    since?: string;
    /**  true or false */
    memberCreator?: string;
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    memberCreator_fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.members.getMembersNotificationsByIdMember({
    idMember: idMember,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getMembersNotificationsByIdMemberByFilter()
 * @request GET :/members/{idMember}/notifications/{filter}
 * @readonly
 */
export async function getMembersGetMembersNotificationsByIdMemberByFilter(
  /** idMember or username */
  idMember: string,
  /** filter */
  filter: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.members.getMembersNotificationsByIdMemberByFilter({
    idMember: idMember,
    filter: filter,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * addMembersOneTimeMessagesDismissedByIdMember()
 * @request POST :/members/{idMember}/oneTimeMessagesDismissed
 */
export async function postMembersAddMembersOneTimeMessagesDismissedByIdMember(
  /** idMember or username */
  idMember: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: MembersOneTimeMessagesDismissed,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.members.addMembersOneTimeMessagesDismissedByIdMember(
    {
      idMember: idMember,
      query: query,
      data: data,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    },
  );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getMembersOrganizationsByIdMember()
 * @request GET :/members/{idMember}/organizations
 * @readonly
 */
export async function getMembersGetMembersOrganizationsByIdMember(
  /** idMember or username */
  idMember: string,
  query: {
    /** One of: all, members, none or public */
    filter?: string;
    /** all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website */
    fields?: string;
    /**  true or false */
    paid_account?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.members.getMembersOrganizationsByIdMember({
    idMember: idMember,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getMembersOrganizationsByIdMemberByFilter()
 * @request GET :/members/{idMember}/organizations/{filter}
 * @readonly
 */
export async function getMembersGetMembersOrganizationsByIdMemberByFilter(
  /** idMember or username */
  idMember: string,
  /** filter */
  filter: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.members.getMembersOrganizationsByIdMemberByFilter({
    idMember: idMember,
    filter: filter,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getMembersOrganizationsInvitedByIdMember()
 * @request GET :/members/{idMember}/organizationsInvited
 * @readonly
 */
export async function getMembersGetMembersOrganizationsInvitedByIdMember(
  /** idMember or username */
  idMember: string,
  query: {
    /** all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.members.getMembersOrganizationsInvitedByIdMember({
    idMember: idMember,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getMembersOrganizationsInvitedByIdMemberByField()
 * @request GET :/members/{idMember}/organizationsInvited/{field}
 * @readonly
 */
export async function getMembersGetMembersOrganizationsInvitedByIdMemberByField(
  /** idMember or username */
  idMember: string,
  /** field */
  field: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.members.getMembersOrganizationsInvitedByIdMemberByField({
      idMember: idMember,
      field: field,
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateMembersPrefsColorBlindByIdMember()
 * @request PUT :/members/{idMember}/prefs/colorBlind
 */
export async function putMembersUpdateMembersPrefsColorBlindByIdMember(
  /** idMember or username */
  idMember: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: PrefsColorBlind,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.members.updateMembersPrefsColorBlindByIdMember({
    idMember: idMember,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateMembersPrefsLocaleByIdMember()
 * @request PUT :/members/{idMember}/prefs/locale
 */
export async function putMembersUpdateMembersPrefsLocaleByIdMember(
  /** idMember or username */
  idMember: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: PrefsLocale,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.members.updateMembersPrefsLocaleByIdMember({
    idMember: idMember,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateMembersPrefsMinutesBetweenSummariesByIdMember()
 * @request PUT :/members/{idMember}/prefs/minutesBetweenSummaries
 */
export async function putMembersUpdateMembersPrefsMinutesBetweenSummariesByIdMember(
  /** idMember or username */
  idMember: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: PrefsMinutesBetweenSummaries,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.members.updateMembersPrefsMinutesBetweenSummariesByIdMember({
      idMember: idMember,
      query: query,
      data: data,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getMembersSavedSearchesByIdMember()
 * @request GET :/members/{idMember}/savedSearches
 * @readonly
 */
export async function getMembersGetMembersSavedSearchesByIdMember(
  /** idMember or username */
  idMember: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.members.getMembersSavedSearchesByIdMember({
    idMember: idMember,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * addMembersSavedSearchesByIdMember()
 * @request POST :/members/{idMember}/savedSearches
 */
export async function postMembersAddMembersSavedSearchesByIdMember(
  /** idMember or username */
  idMember: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: MembersSavedSearches,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.members.addMembersSavedSearchesByIdMember({
    idMember: idMember,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * deleteMembersSavedSearchesByIdMemberByIdSavedSearch()
 * @request DELETE :/members/{idMember}/savedSearches/{idSavedSearch}
 */
export async function deleteMembersDeleteMembersSavedSearchesByIdMemberByIdSavedSearch(
  /** idMember or username */
  idMember: string,
  /** idSavedSearch */
  idSavedSearch: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.members.deleteMembersSavedSearchesByIdMemberByIdSavedSearch({
      idMember: idMember,
      idSavedSearch: idSavedSearch,
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getMembersSavedSearchesByIdMemberByIdSavedSearch()
 * @request GET :/members/{idMember}/savedSearches/{idSavedSearch}
 * @readonly
 */
export async function getMembersGetMembersSavedSearchesByIdMemberByIdSavedSearch(
  /** idMember or username */
  idMember: string,
  /** idSavedSearch */
  idSavedSearch: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.members.getMembersSavedSearchesByIdMemberByIdSavedSearch({
      idMember: idMember,
      idSavedSearch: idSavedSearch,
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateMembersSavedSearchesByIdMemberByIdSavedSearch()
 * @request PUT :/members/{idMember}/savedSearches/{idSavedSearch}
 */
export async function putMembersUpdateMembersSavedSearchesByIdMemberByIdSavedSearch(
  /** idMember or username */
  idMember: string,
  /** idSavedSearch */
  idSavedSearch: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: MembersSavedSearches,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.members.updateMembersSavedSearchesByIdMemberByIdSavedSearch({
      idMember: idMember,
      idSavedSearch: idSavedSearch,
      query: query,
      data: data,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateMembersSavedSearchesNameByIdMemberByIdSavedSearch()
 * @request PUT :/members/{idMember}/savedSearches/{idSavedSearch}/name
 */
export async function putMembersUpdateMembersSavedSearchesNameByIdMemberByIdSavedSearch(
  /** idMember or username */
  idMember: string,
  /** idSavedSearch */
  idSavedSearch: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: MembersSavedSearchesName,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.members.updateMembersSavedSearchesNameByIdMemberByIdSavedSearch({
      idMember: idMember,
      idSavedSearch: idSavedSearch,
      query: query,
      data: data,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateMembersSavedSearchesPosByIdMemberByIdSavedSearch()
 * @request PUT :/members/{idMember}/savedSearches/{idSavedSearch}/pos
 */
export async function putMembersUpdateMembersSavedSearchesPosByIdMemberByIdSavedSearch(
  /** idMember or username */
  idMember: string,
  /** idSavedSearch */
  idSavedSearch: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: MembersSavedSearchesPos,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.members.updateMembersSavedSearchesPosByIdMemberByIdSavedSearch({
      idMember: idMember,
      idSavedSearch: idSavedSearch,
      query: query,
      data: data,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateMembersSavedSearchesQueryByIdMemberByIdSavedSearch()
 * @request PUT :/members/{idMember}/savedSearches/{idSavedSearch}/query
 */
export async function putMembersUpdateMembersSavedSearchesQueryByIdMemberByIdSavedSearch(
  /** idMember or username */
  idMember: string,
  /** idSavedSearch */
  idSavedSearch: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: MembersSavedSearchesQuery,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.members.updateMembersSavedSearchesQueryByIdMemberByIdSavedSearch({
      idMember: idMember,
      idSavedSearch: idSavedSearch,
      query: query,
      data: data,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getMembersTokensByIdMember()
 * @request GET :/members/{idMember}/tokens
 * @readonly
 */
export async function getMembersGetMembersTokensByIdMember(
  /** idMember or username */
  idMember: string,
  query: {
    /** One of: all or none */
    filter?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.members.getMembersTokensByIdMember({
    idMember: idMember,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateMembersUsernameByIdMember()
 * @request PUT :/members/{idMember}/username
 */
export async function putMembersUpdateMembersUsernameByIdMember(
  /** idMember or username */
  idMember: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: MembersUsername,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.members.updateMembersUsernameByIdMember({
    idMember: idMember,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getMembersByIdMemberByField()
 * @request GET :/members/{idMember}/{field}
 * @readonly
 */
export async function getMembersGetMembersByIdMemberByField(
  /** idMember or username */
  idMember: string,
  /** field */
  field: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.members.getMembersByIdMemberByField({
    idMember: idMember,
    field: field,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * addNotificationsAllRead()
 * @request POST :/notifications/all/read
 */
export async function postNotificationsAddNotificationsAllRead(
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.notifications.addNotificationsAllRead({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getNotificationsByIdNotification()
 * @request GET :/notifications/{idNotification}
 * @readonly
 */
export async function getNotificationsGetNotificationsByIdNotification(
  /** idNotification */
  idNotification: string,
  query: {
    /**  true or false */
    display?: string;
    /**  true or false */
    entities?: string;
    /** all or a comma-separated list of: data, date, idMemberCreator, type or unread */
    fields?: string;
    /**  true or false */
    memberCreator?: string;
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    memberCreator_fields?: string;
    /**  true or false */
    board?: string;
    /** all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url */
    board_fields?: string;
    /**  true or false */
    list?: string;
    /**  true or false */
    card?: string;
    /** all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url */
    card_fields?: string;
    /**  true or false */
    organization?: string;
    /** all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website */
    organization_fields?: string;
    /**  true or false */
    member?: string;
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    member_fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.notifications.getNotificationsByIdNotification({
    idNotification: idNotification,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateNotificationsByIdNotification()
 * @request PUT :/notifications/{idNotification}
 */
export async function putNotificationsUpdateNotificationsByIdNotification(
  /** idNotification */
  idNotification: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: Notifications,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.notifications.updateNotificationsByIdNotification({
    idNotification: idNotification,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getNotificationsBoardByIdNotification()
 * @request GET :/notifications/{idNotification}/board
 * @readonly
 */
export async function getNotificationsGetNotificationsBoardByIdNotification(
  /** idNotification */
  idNotification: string,
  query: {
    /** all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.notifications.getNotificationsBoardByIdNotification({
    idNotification: idNotification,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getNotificationsBoardByIdNotificationByField()
 * @request GET :/notifications/{idNotification}/board/{field}
 * @readonly
 */
export async function getNotificationsGetNotificationsBoardByIdNotificationByField(
  /** idNotification */
  idNotification: string,
  /** field */
  field: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.notifications.getNotificationsBoardByIdNotificationByField({
      idNotification: idNotification,
      field: field,
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getNotificationsCardByIdNotification()
 * @request GET :/notifications/{idNotification}/card
 * @readonly
 */
export async function getNotificationsGetNotificationsCardByIdNotification(
  /** idNotification */
  idNotification: string,
  query: {
    /** all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.notifications.getNotificationsCardByIdNotification({
    idNotification: idNotification,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getNotificationsCardByIdNotificationByField()
 * @request GET :/notifications/{idNotification}/card/{field}
 * @readonly
 */
export async function getNotificationsGetNotificationsCardByIdNotificationByField(
  /** idNotification */
  idNotification: string,
  /** field */
  field: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.notifications.getNotificationsCardByIdNotificationByField({
      idNotification: idNotification,
      field: field,
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getNotificationsDisplayByIdNotification()
 * @request GET :/notifications/{idNotification}/display
 * @readonly
 */
export async function getNotificationsGetNotificationsDisplayByIdNotification(
  /** idNotification */
  idNotification: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.notifications.getNotificationsDisplayByIdNotification({
      idNotification: idNotification,
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getNotificationsEntitiesByIdNotification()
 * @request GET :/notifications/{idNotification}/entities
 * @readonly
 */
export async function getNotificationsGetNotificationsEntitiesByIdNotification(
  /** idNotification */
  idNotification: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.notifications.getNotificationsEntitiesByIdNotification({
      idNotification: idNotification,
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getNotificationsListByIdNotification()
 * @request GET :/notifications/{idNotification}/list
 * @readonly
 */
export async function getNotificationsGetNotificationsListByIdNotification(
  /** idNotification */
  idNotification: string,
  query: {
    /** all or a comma-separated list of: closed, idBoard, name, pos or subscribed */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.notifications.getNotificationsListByIdNotification({
    idNotification: idNotification,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getNotificationsListByIdNotificationByField()
 * @request GET :/notifications/{idNotification}/list/{field}
 * @readonly
 */
export async function getNotificationsGetNotificationsListByIdNotificationByField(
  /** idNotification */
  idNotification: string,
  /** field */
  field: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.notifications.getNotificationsListByIdNotificationByField({
      idNotification: idNotification,
      field: field,
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getNotificationsMemberByIdNotification()
 * @request GET :/notifications/{idNotification}/member
 * @readonly
 */
export async function getNotificationsGetNotificationsMemberByIdNotification(
  /** idNotification */
  idNotification: string,
  query: {
    /** all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.notifications.getNotificationsMemberByIdNotification(
    {
      idNotification: idNotification,
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    },
  );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getNotificationsMemberByIdNotificationByField()
 * @request GET :/notifications/{idNotification}/member/{field}
 * @readonly
 */
export async function getNotificationsGetNotificationsMemberByIdNotificationByField(
  /** idNotification */
  idNotification: string,
  /** field */
  field: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.notifications.getNotificationsMemberByIdNotificationByField({
      idNotification: idNotification,
      field: field,
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getNotificationsMemberCreatorByIdNotification()
 * @request GET :/notifications/{idNotification}/memberCreator
 * @readonly
 */
export async function getNotificationsGetNotificationsMemberCreatorByIdNotification(
  /** idNotification */
  idNotification: string,
  query: {
    /** all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.notifications.getNotificationsMemberCreatorByIdNotification({
      idNotification: idNotification,
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getNotificationsMemberCreatorByIdNotificationByField()
 * @request GET :/notifications/{idNotification}/memberCreator/{field}
 * @readonly
 */
export async function getNotificationsGetNotificationsMemberCreatorByIdNotificationByField(
  /** idNotification */
  idNotification: string,
  /** field */
  field: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.notifications.getNotificationsMemberCreatorByIdNotificationByField(
      {
        idNotification: idNotification,
        field: field,
        query: query,
        params: {
          headers: (headers?.value as Record<string, string>) ?? undefined,
        },
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getNotificationsOrganizationByIdNotification()
 * @request GET :/notifications/{idNotification}/organization
 * @readonly
 */
export async function getNotificationsGetNotificationsOrganizationByIdNotification(
  /** idNotification */
  idNotification: string,
  query: {
    /** all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.notifications.getNotificationsOrganizationByIdNotification({
      idNotification: idNotification,
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getNotificationsOrganizationByIdNotificationByField()
 * @request GET :/notifications/{idNotification}/organization/{field}
 * @readonly
 */
export async function getNotificationsGetNotificationsOrganizationByIdNotificationByField(
  /** idNotification */
  idNotification: string,
  /** field */
  field: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.notifications.getNotificationsOrganizationByIdNotificationByField(
      {
        idNotification: idNotification,
        field: field,
        query: query,
        params: {
          headers: (headers?.value as Record<string, string>) ?? undefined,
        },
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateNotificationsUnreadByIdNotification()
 * @request PUT :/notifications/{idNotification}/unread
 */
export async function putNotificationsUpdateNotificationsUnreadByIdNotification(
  /** idNotification */
  idNotification: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: NotificationsUnread,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.notifications.updateNotificationsUnreadByIdNotification({
      idNotification: idNotification,
      query: query,
      data: data,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getNotificationsByIdNotificationByField()
 * @request GET :/notifications/{idNotification}/{field}
 * @readonly
 */
export async function getNotificationsGetNotificationsByIdNotificationByField(
  /** idNotification */
  idNotification: string,
  /** field */
  field: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.notifications.getNotificationsByIdNotificationByField({
      idNotification: idNotification,
      field: field,
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * addOrganizations()
 * @request POST :/organizations
 */
export async function postOrganizationsAddOrganizations(
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: Organizations,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.organizations.addOrganizations({
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * deleteOrganizationsByIdOrg()
 * @request DELETE :/organizations/{idOrg}
 */
export async function deleteOrganizationsDeleteOrganizationsByIdOrg(
  /** idOrg or name */
  idOrg: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.organizations.deleteOrganizationsByIdOrg({
    idOrg: idOrg,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getOrganizationsByIdOrg()
 * @request GET :/organizations/{idOrg}
 * @readonly
 */
export async function getOrganizationsGetOrganizationsByIdOrg(
  /** idOrg or name */
  idOrg: string,
  query: {
    /** all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization */
    actions?: string;
    /**  true or false */
    actions_entities?: string;
    /**  true or false */
    actions_display?: string;
    /** a number from 0 to 1000 */
    actions_limit?: string;
    /** all or a comma-separated list of: data, date, idMemberCreator or type */
    action_fields?: string;
    /** all or a comma-separated list of: active, admin, deactivated, me or normal */
    memberships?: string;
    /**  true or false */
    memberships_member?: string;
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    memberships_member_fields?: string;
    /** One of: admins, all, none, normal or owners */
    members?: string;
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    member_fields?: string;
    /** true or false ; works for premium organizations only. */
    member_activity?: string;
    /** One of: admins, all, none, normal or owners */
    membersInvited?: string;
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    membersInvited_fields?: string;
    /** all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned */
    boards?: string;
    /** all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url */
    board_fields?: string;
    /** all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization */
    board_actions?: string;
    /**  true or false */
    board_actions_entities?: string;
    /**  true or false */
    board_actions_display?: string;
    /** One of: count, list or minimal */
    board_actions_format?: string;
    /** A date, null or lastView */
    board_actions_since?: string;
    /** a number from 0 to 1000 */
    board_actions_limit?: string;
    /** all or a comma-separated list of: data, date, idMemberCreator or type */
    board_action_fields?: string;
    /** One of: all, closed, none or open */
    board_lists?: string;
    /**  true or false */
    paid_account?: string;
    /** all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.organizations.getOrganizationsByIdOrg({
    idOrg: idOrg,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateOrganizationsByIdOrg()
 * @request PUT :/organizations/{idOrg}
 */
export async function putOrganizationsUpdateOrganizationsByIdOrg(
  /** idOrg or name */
  idOrg: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: Organizations,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.organizations.updateOrganizationsByIdOrg({
    idOrg: idOrg,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getOrganizationsActionsByIdOrg()
 * @request GET :/organizations/{idOrg}/actions
 * @readonly
 */
export async function getOrganizationsGetOrganizationsActionsByIdOrg(
  /** idOrg or name */
  idOrg: string,
  query: {
    /**  true or false */
    entities?: string;
    /**  true or false */
    display?: string;
    /** all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization */
    filter?: string;
    /** all or a comma-separated list of: data, date, idMemberCreator or type */
    fields?: string;
    /** a number from 0 to 1000 */
    limit?: string;
    /** One of: count, list or minimal */
    format?: string;
    /** A date, null or lastView */
    since?: string;
    /** A date, or null */
    before?: string;
    /** Page * limit must be less than 1000 */
    page?: string;
    /** Only return actions related to these model ids */
    idModels?: string;
    /**  true or false */
    member?: string;
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    member_fields?: string;
    /**  true or false */
    memberCreator?: string;
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    memberCreator_fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.organizations.getOrganizationsActionsByIdOrg({
    idOrg: idOrg,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getOrganizationsBoardsByIdOrg()
 * @request GET :/organizations/{idOrg}/boards
 * @readonly
 */
export async function getOrganizationsGetOrganizationsBoardsByIdOrg(
  /** idOrg or name */
  idOrg: string,
  query: {
    /** all or a comma-separated list of: closed, members, open, organization, pinned, public, starred or unpinned */
    filter?: string;
    /** all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url */
    fields?: string;
    /** all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization */
    actions?: string;
    /**  true or false */
    actions_entities?: string;
    /** a number from 0 to 1000 */
    actions_limit?: string;
    /** One of: count, list or minimal */
    actions_format?: string;
    /** A date, null or lastView */
    actions_since?: string;
    /** all or a comma-separated list of: data, date, idMemberCreator or type */
    action_fields?: string;
    /** all or a comma-separated list of: active, admin, deactivated, me or normal */
    memberships?: string;
    /**  true or false */
    organization?: string;
    /** all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website */
    organization_fields?: string;
    /** One of: all, closed, none or open */
    lists?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.organizations.getOrganizationsBoardsByIdOrg({
    idOrg: idOrg,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getOrganizationsBoardsByIdOrgByFilter()
 * @request GET :/organizations/{idOrg}/boards/{filter}
 * @readonly
 */
export async function getOrganizationsGetOrganizationsBoardsByIdOrgByFilter(
  /** idOrg or name */
  idOrg: string,
  /** filter */
  filter: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.organizations.getOrganizationsBoardsByIdOrgByFilter({
    idOrg: idOrg,
    filter: filter,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getOrganizationsDeltasByIdOrg()
 * @request GET :/organizations/{idOrg}/deltas
 * @readonly
 */
export async function getOrganizationsGetOrganizationsDeltasByIdOrg(
  /** idOrg or name */
  idOrg: string,
  query: {
    /** A valid tag for subscribing */
    tags: string;
    /** a number from -1 to Infinity */
    ixLastUpdate: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.organizations.getOrganizationsDeltasByIdOrg({
    idOrg: idOrg,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateOrganizationsDescByIdOrg()
 * @request PUT :/organizations/{idOrg}/desc
 */
export async function putOrganizationsUpdateOrganizationsDescByIdOrg(
  /** idOrg or name */
  idOrg: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: OrganizationsDesc,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.organizations.updateOrganizationsDescByIdOrg({
    idOrg: idOrg,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateOrganizationsDisplayNameByIdOrg()
 * @request PUT :/organizations/{idOrg}/displayName
 */
export async function putOrganizationsUpdateOrganizationsDisplayNameByIdOrg(
  /** idOrg or name */
  idOrg: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: OrganizationsDisplayName,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.organizations.updateOrganizationsDisplayNameByIdOrg({
    idOrg: idOrg,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * deleteOrganizationsLogoByIdOrg()
 * @request DELETE :/organizations/{idOrg}/logo
 */
export async function deleteOrganizationsDeleteOrganizationsLogoByIdOrg(
  /** idOrg or name */
  idOrg: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.organizations.deleteOrganizationsLogoByIdOrg({
    idOrg: idOrg,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * addOrganizationsLogoByIdOrg()
 * @request POST :/organizations/{idOrg}/logo
 */
export async function postOrganizationsAddOrganizationsLogoByIdOrg(
  /** idOrg or name */
  idOrg: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: OrganizationsLogo,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.organizations.addOrganizationsLogoByIdOrg({
    idOrg: idOrg,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getOrganizationsMembersByIdOrg()
 * @request GET :/organizations/{idOrg}/members
 * @readonly
 */
export async function getOrganizationsGetOrganizationsMembersByIdOrg(
  /** idOrg or name */
  idOrg: string,
  query: {
    /** One of: admins, all, none, normal or owners */
    filter?: string;
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    fields?: string;
    /** true or false ; works for premium organizations only. */
    activity?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.organizations.getOrganizationsMembersByIdOrg({
    idOrg: idOrg,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateOrganizationsMembersByIdOrg()
 * @request PUT :/organizations/{idOrg}/members
 */
export async function putOrganizationsUpdateOrganizationsMembersByIdOrg(
  /** idOrg or name */
  idOrg: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: OrganizationsMembers,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.organizations.updateOrganizationsMembersByIdOrg({
    idOrg: idOrg,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getOrganizationsMembersByIdOrgByFilter()
 * @request GET :/organizations/{idOrg}/members/{filter}
 * @readonly
 */
export async function getOrganizationsGetOrganizationsMembersByIdOrgByFilter(
  /** idOrg or name */
  idOrg: string,
  /** filter */
  filter: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.organizations.getOrganizationsMembersByIdOrgByFilter(
    {
      idOrg: idOrg,
      filter: filter,
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    },
  );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * deleteOrganizationsMembersByIdOrgByIdMember()
 * @request DELETE :/organizations/{idOrg}/members/{idMember}
 */
export async function deleteOrganizationsDeleteOrganizationsMembersByIdOrgByIdMember(
  /** idOrg or name */
  idOrg: string,
  /** idMember */
  idMember: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.organizations.deleteOrganizationsMembersByIdOrgByIdMember({
      idOrg: idOrg,
      idMember: idMember,
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateOrganizationsMembersByIdOrgByIdMember()
 * @request PUT :/organizations/{idOrg}/members/{idMember}
 */
export async function putOrganizationsUpdateOrganizationsMembersByIdOrgByIdMember(
  /** idOrg or name */
  idOrg: string,
  /** idMember */
  idMember: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: OrganizationsMembers,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.organizations.updateOrganizationsMembersByIdOrgByIdMember({
      idOrg: idOrg,
      idMember: idMember,
      query: query,
      data: data,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * deleteOrganizationsMembersAllByIdOrgByIdMember()
 * @request DELETE :/organizations/{idOrg}/members/{idMember}/all
 */
export async function deleteOrganizationsDeleteOrganizationsMembersAllByIdOrgByIdMember(
  /** idOrg or name */
  idOrg: string,
  /** idMember */
  idMember: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.organizations.deleteOrganizationsMembersAllByIdOrgByIdMember({
      idOrg: idOrg,
      idMember: idMember,
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getOrganizationsMembersCardsByIdOrgByIdMember()
 * @request GET :/organizations/{idOrg}/members/{idMember}/cards
 * @readonly
 */
export async function getOrganizationsGetOrganizationsMembersCardsByIdOrgByIdMember(
  /** idOrg or name */
  idOrg: string,
  /** idMember */
  idMember: string,
  query: {
    /** all or a comma-separated list of: addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember or updateOrganization */
    actions?: string;
    /** A boolean value or &quot;cover&quot; for only card cover attachments */
    attachments?: string;
    /** all or a comma-separated list of: bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews or url */
    attachment_fields?: string;
    /**  true or false */
    members?: string;
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    member_fields?: string;
    /**  true or false */
    checkItemStates?: string;
    /** One of: all or none */
    checklists?: string;
    /**  true or false */
    board?: string;
    /** all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url */
    board_fields?: string;
    /**  true or false */
    list?: string;
    /** all or a comma-separated list of: closed, idBoard, name, pos or subscribed */
    list_fields?: string;
    /** One of: all, closed, none, open or visible */
    filter?: string;
    /** all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.organizations.getOrganizationsMembersCardsByIdOrgByIdMember({
      idOrg: idOrg,
      idMember: idMember,
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateOrganizationsMembersDeactivatedByIdOrgByIdMember()
 * @request PUT :/organizations/{idOrg}/members/{idMember}/deactivated
 */
export async function putOrganizationsUpdateOrganizationsMembersDeactivatedByIdOrgByIdMember(
  /** idOrg or name */
  idOrg: string,
  /** idMember */
  idMember: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: OrganizationsMembersDeactivated,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.organizations.updateOrganizationsMembersDeactivatedByIdOrgByIdMember(
      {
        idOrg: idOrg,
        idMember: idMember,
        query: query,
        data: data,
        params: {
          headers: (headers?.value as Record<string, string>) ?? undefined,
        },
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getOrganizationsMembersInvitedByIdOrg()
 * @request GET :/organizations/{idOrg}/membersInvited
 * @readonly
 */
export async function getOrganizationsGetOrganizationsMembersInvitedByIdOrg(
  /** idOrg or name */
  idOrg: string,
  query: {
    /** all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.organizations.getOrganizationsMembersInvitedByIdOrg({
    idOrg: idOrg,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getOrganizationsMembersInvitedByIdOrgByField()
 * @request GET :/organizations/{idOrg}/membersInvited/{field}
 * @readonly
 */
export async function getOrganizationsGetOrganizationsMembersInvitedByIdOrgByField(
  /** idOrg or name */
  idOrg: string,
  /** field */
  field: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.organizations.getOrganizationsMembersInvitedByIdOrgByField({
      idOrg: idOrg,
      field: field,
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getOrganizationsMembershipsByIdOrg()
 * @request GET :/organizations/{idOrg}/memberships
 * @readonly
 */
export async function getOrganizationsGetOrganizationsMembershipsByIdOrg(
  /** idOrg or name */
  idOrg: string,
  query: {
    /** all or a comma-separated list of: active, admin, deactivated, me or normal */
    filter?: string;
    /**  true or false */
    member?: string;
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    member_fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.organizations.getOrganizationsMembershipsByIdOrg({
    idOrg: idOrg,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getOrganizationsMembershipsByIdOrgByIdMembership()
 * @request GET :/organizations/{idOrg}/memberships/{idMembership}
 * @readonly
 */
export async function getOrganizationsGetOrganizationsMembershipsByIdOrgByIdMembership(
  /** idOrg or name */
  idOrg: string,
  /** idMembership */
  idMembership: string,
  query: {
    /**  true or false */
    member?: string;
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    member_fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.organizations.getOrganizationsMembershipsByIdOrgByIdMembership({
      idOrg: idOrg,
      idMembership: idMembership,
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateOrganizationsMembershipsByIdOrgByIdMembership()
 * @request PUT :/organizations/{idOrg}/memberships/{idMembership}
 */
export async function putOrganizationsUpdateOrganizationsMembershipsByIdOrgByIdMembership(
  /** idOrg or name */
  idOrg: string,
  /** idMembership */
  idMembership: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: OrganizationsMemberships,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.organizations.updateOrganizationsMembershipsByIdOrgByIdMembership(
      {
        idOrg: idOrg,
        idMembership: idMembership,
        query: query,
        data: data,
        params: {
          headers: (headers?.value as Record<string, string>) ?? undefined,
        },
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateOrganizationsNameByIdOrg()
 * @request PUT :/organizations/{idOrg}/name
 */
export async function putOrganizationsUpdateOrganizationsNameByIdOrg(
  /** idOrg or name */
  idOrg: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: OrganizationsName,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.organizations.updateOrganizationsNameByIdOrg({
    idOrg: idOrg,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * deleteOrganizationsPrefsAssociatedDomainByIdOrg()
 * @request DELETE :/organizations/{idOrg}/prefs/associatedDomain
 */
export async function deleteOrganizationsDeleteOrganizationsPrefsAssociatedDomainByIdOrg(
  /** idOrg or name */
  idOrg: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.organizations.deleteOrganizationsPrefsAssociatedDomainByIdOrg({
      idOrg: idOrg,
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateOrganizationsPrefsAssociatedDomainByIdOrg()
 * @request PUT :/organizations/{idOrg}/prefs/associatedDomain
 */
export async function putOrganizationsUpdateOrganizationsPrefsAssociatedDomainByIdOrg(
  /** idOrg or name */
  idOrg: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: PrefsAssociatedDomain,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.organizations.updateOrganizationsPrefsAssociatedDomainByIdOrg({
      idOrg: idOrg,
      query: query,
      data: data,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateOrganizationsPrefsBoardVisibilityRestrictOrgByIdOrg()
 * @request PUT :/organizations/{idOrg}/prefs/boardVisibilityRestrict/org
 */
export async function putOrganizationsUpdateOrganizationsPrefsBoardVisibilityRestrictOrgByIdOrg(
  /** idOrg or name */
  idOrg: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: PrefsBoardVisibilityRestrict,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.organizations.updateOrganizationsPrefsBoardVisibilityRestrictOrgByIdOrg(
      {
        idOrg: idOrg,
        query: query,
        data: data,
        params: {
          headers: (headers?.value as Record<string, string>) ?? undefined,
        },
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateOrganizationsPrefsBoardVisibilityRestrictPrivateByIdOrg()
 * @request PUT :/organizations/{idOrg}/prefs/boardVisibilityRestrict/private
 */
export async function putOrganizationsUpdateOrganizationsPrefsBoardVisibilityRestrictPrivateByIdOrg(
  /** idOrg or name */
  idOrg: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: PrefsBoardVisibilityRestrict,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.organizations.updateOrganizationsPrefsBoardVisibilityRestrictPrivateByIdOrg(
      {
        idOrg: idOrg,
        query: query,
        data: data,
        params: {
          headers: (headers?.value as Record<string, string>) ?? undefined,
        },
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateOrganizationsPrefsBoardVisibilityRestrictPublicByIdOrg()
 * @request PUT :/organizations/{idOrg}/prefs/boardVisibilityRestrict/public
 */
export async function putOrganizationsUpdateOrganizationsPrefsBoardVisibilityRestrictPublicByIdOrg(
  /** idOrg or name */
  idOrg: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: PrefsBoardVisibilityRestrict,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.organizations.updateOrganizationsPrefsBoardVisibilityRestrictPublicByIdOrg(
      {
        idOrg: idOrg,
        query: query,
        data: data,
        params: {
          headers: (headers?.value as Record<string, string>) ?? undefined,
        },
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateOrganizationsPrefsExternalMembersDisabledByIdOrg()
 * @request PUT :/organizations/{idOrg}/prefs/externalMembersDisabled
 */
export async function putOrganizationsUpdateOrganizationsPrefsExternalMembersDisabledByIdOrg(
  /** idOrg or name */
  idOrg: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: PrefsExternalMembersDisabled,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.organizations.updateOrganizationsPrefsExternalMembersDisabledByIdOrg(
      {
        idOrg: idOrg,
        query: query,
        data: data,
        params: {
          headers: (headers?.value as Record<string, string>) ?? undefined,
        },
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateOrganizationsPrefsGoogleAppsVersionByIdOrg()
 * @request PUT :/organizations/{idOrg}/prefs/googleAppsVersion
 */
export async function putOrganizationsUpdateOrganizationsPrefsGoogleAppsVersionByIdOrg(
  /** idOrg or name */
  idOrg: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: PrefsGoogleAppsVersion,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.organizations.updateOrganizationsPrefsGoogleAppsVersionByIdOrg({
      idOrg: idOrg,
      query: query,
      data: data,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * deleteOrganizationsPrefsOrgInviteRestrictByIdOrg()
 * @request DELETE :/organizations/{idOrg}/prefs/orgInviteRestrict
 */
export async function deleteOrganizationsDeleteOrganizationsPrefsOrgInviteRestrictByIdOrg(
  /** idOrg or name */
  idOrg: string,
  query: {
    /** An email address with optional expansion tokens */
    value: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.organizations.deleteOrganizationsPrefsOrgInviteRestrictByIdOrg({
      idOrg: idOrg,
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateOrganizationsPrefsOrgInviteRestrictByIdOrg()
 * @request PUT :/organizations/{idOrg}/prefs/orgInviteRestrict
 */
export async function putOrganizationsUpdateOrganizationsPrefsOrgInviteRestrictByIdOrg(
  /** idOrg or name */
  idOrg: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: PrefsOrgInviteRestrict,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.organizations.updateOrganizationsPrefsOrgInviteRestrictByIdOrg({
      idOrg: idOrg,
      query: query,
      data: data,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateOrganizationsPrefsPermissionLevelByIdOrg()
 * @request PUT :/organizations/{idOrg}/prefs/permissionLevel
 */
export async function putOrganizationsUpdateOrganizationsPrefsPermissionLevelByIdOrg(
  /** idOrg or name */
  idOrg: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: PrefsPermissionLevel,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.organizations.updateOrganizationsPrefsPermissionLevelByIdOrg({
      idOrg: idOrg,
      query: query,
      data: data,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateOrganizationsWebsiteByIdOrg()
 * @request PUT :/organizations/{idOrg}/website
 */
export async function putOrganizationsUpdateOrganizationsWebsiteByIdOrg(
  /** idOrg or name */
  idOrg: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: OrganizationsWebsite,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.organizations.updateOrganizationsWebsiteByIdOrg({
    idOrg: idOrg,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getOrganizationsByIdOrgByField()
 * @request GET :/organizations/{idOrg}/{field}
 * @readonly
 */
export async function getOrganizationsGetOrganizationsByIdOrgByField(
  /** idOrg or name */
  idOrg: string,
  /** field */
  field: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.organizations.getOrganizationsByIdOrgByField({
    idOrg: idOrg,
    field: field,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getSearch()
 * @request GET :/search
 * @readonly
 */
export async function getSearchGetSearch(
  query: {
    /** a string with a length from 1 to 16384 */
    query: string;
    /** A comma-separated list of objectIds, 24-character hex strings */
    idBoards?: string;
    /** A comma-separated list of objectIds, 24-character hex strings */
    idOrganizations: string;
    /** A comma-separated list of objectIds, 24-character hex strings */
    idCards?: string;
    /** all or a comma-separated list of: actions, boards, cards, members or organizations */
    modelTypes?: string;
    /** all or a comma-separated list of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed or url */
    board_fields?: string;
    /** a number from 1 to 1000 */
    boards_limit?: string;
    /** all or a comma-separated list of: badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed or url */
    card_fields?: string;
    /** a number from 1 to 1000 */
    cards_limit?: string;
    /** a number from 0 to 100 */
    cards_page?: string;
    /**  true or false */
    card_board?: string;
    /**  true or false */
    card_list?: string;
    /**  true or false */
    card_members?: string;
    /**  true or false */
    card_stickers?: string;
    /** A boolean value or &quot;cover&quot; for only card cover attachments */
    card_attachments?: string;
    /** all or a comma-separated list of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url or website */
    organization_fields?: string;
    /** a number from 1 to 1000 */
    organizations_limit?: string;
    /** all or a comma-separated list of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url or username */
    member_fields?: string;
    /** a number from 1 to 1000 */
    members_limit?: string;
    /**  true or false */
    partial?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.search.getSearch({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getSearchMembers()
 * @request GET :/search/members
 * @readonly
 */
export async function getSearchGetSearchMembers(
  query: {
    /** a string with a length from 1 to 16384 */
    query: string;
    /** a number from 1 to 20 */
    limit?: string;
    /** An id, or null */
    idBoard?: string;
    /** An id, or null */
    idOrganization?: string;
    /** A boolean */
    onlyOrgMembers?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.search.getSearchMembers({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * addSessions()
 * @request POST :/sessions
 */
export async function postSessionsAddSessions(
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: Sessions,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.sessions.addSessions({
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getSessionsSocket()
 * @request GET :/sessions/socket
 * @readonly
 */
export async function getSessionsGetSessionsSocket(
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.sessions.getSessionsSocket({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateSessionsByIdSession()
 * @request PUT :/sessions/{idSession}
 */
export async function putSessionsUpdateSessionsByIdSession(
  /** idSession */
  idSession: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: Sessions,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.sessions.updateSessionsByIdSession({
    idSession: idSession,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateSessionsStatusByIdSession()
 * @request PUT :/sessions/{idSession}/status
 */
export async function putSessionsUpdateSessionsStatusByIdSession(
  /** idSession */
  idSession: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: SessionsStatus,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.sessions.updateSessionsStatusByIdSession({
    idSession: idSession,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * deleteTokensByToken()
 * @request DELETE :/tokens/{token}
 */
export async function deleteTokensDeleteTokensByToken(
  /** token */
  token: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.tokens.deleteTokensByToken({
    token: token,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getTokensByToken()
 * @request GET :/tokens/{token}
 * @readonly
 */
export async function getTokensGetTokensByToken(
  /** token */
  token: string,
  query: {
    /** all or a comma-separated list of: dateCreated, dateExpires, idMember, identifier or permissions */
    fields?: string;
    /**  true or false */
    webhooks?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.tokens.getTokensByToken({
    token: token,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getTokensMemberByToken()
 * @request GET :/tokens/{token}/member
 * @readonly
 */
export async function getTokensGetTokensMemberByToken(
  /** token */
  token: string,
  query: {
    /** all or a comma-separated list of: avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url or username */
    fields?: string;
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.tokens.getTokensMemberByToken({
    token: token,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getTokensMemberByTokenByField()
 * @request GET :/tokens/{token}/member/{field}
 * @readonly
 */
export async function getTokensGetTokensMemberByTokenByField(
  /** token */
  token: string,
  /** field */
  field: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.tokens.getTokensMemberByTokenByField({
    token: token,
    field: field,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getTokensWebhooksByToken()
 * @request GET :/tokens/{token}/webhooks
 * @readonly
 */
export async function getTokensGetTokensWebhooksByToken(
  /** token */
  token: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.tokens.getTokensWebhooksByToken({
    token: token,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * addTokensWebhooksByToken()
 * @request POST :/tokens/{token}/webhooks
 */
export async function postTokensAddTokensWebhooksByToken(
  /** token */
  token: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: TokensWebhooks,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.tokens.addTokensWebhooksByToken({
    token: token,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateTokensWebhooksByToken()
 * @request PUT :/tokens/{token}/webhooks
 */
export async function putTokensUpdateTokensWebhooksByToken(
  /** token */
  token: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: TokensWebhooks,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.tokens.updateTokensWebhooksByToken({
    token: token,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * deleteTokensWebhooksByTokenByIdWebhook()
 * @request DELETE :/tokens/{token}/webhooks/{idWebhook}
 */
export async function deleteTokensDeleteTokensWebhooksByTokenByIdWebhook(
  /** token */
  token: string,
  /** idWebhook */
  idWebhook: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.tokens.deleteTokensWebhooksByTokenByIdWebhook({
    token: token,
    idWebhook: idWebhook,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getTokensWebhooksByTokenByIdWebhook()
 * @request GET :/tokens/{token}/webhooks/{idWebhook}
 * @readonly
 */
export async function getTokensGetTokensWebhooksByTokenByIdWebhook(
  /** token */
  token: string,
  /** idWebhook */
  idWebhook: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.tokens.getTokensWebhooksByTokenByIdWebhook({
    token: token,
    idWebhook: idWebhook,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getTokensByTokenByField()
 * @request GET :/tokens/{token}/{field}
 * @readonly
 */
export async function getTokensGetTokensByTokenByField(
  /** token */
  token: string,
  /** field */
  field: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.tokens.getTokensByTokenByField({
    token: token,
    field: field,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getTypesById()
 * @request GET :/types/{id}
 * @readonly
 */
export async function getTypesGetTypesById(
  /** id */
  id: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.types.getTypesById({
    id: id,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * addWebhooks()
 * @request POST :/webhooks
 */
export async function postWebhooksAddWebhooks(
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: Webhooks,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.webhooks.addWebhooks({
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateWebhooks()
 * @request PUT :/webhooks/
 */
export async function putWebhooksUpdateWebhooks(
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: Webhooks,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.webhooks.updateWebhooks({
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * deleteWebhooksByIdWebhook()
 * @request DELETE :/webhooks/{idWebhook}
 */
export async function deleteWebhooksDeleteWebhooksByIdWebhook(
  /** idWebhook */
  idWebhook: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.webhooks.deleteWebhooksByIdWebhook({
    idWebhook: idWebhook,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getWebhooksByIdWebhook()
 * @request GET :/webhooks/{idWebhook}
 * @readonly
 */
export async function getWebhooksGetWebhooksByIdWebhook(
  /** idWebhook */
  idWebhook: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.webhooks.getWebhooksByIdWebhook({
    idWebhook: idWebhook,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateWebhooksByIdWebhook()
 * @request PUT :/webhooks/{idWebhook}
 */
export async function putWebhooksUpdateWebhooksByIdWebhook(
  /** idWebhook */
  idWebhook: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: Webhooks,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.webhooks.updateWebhooksByIdWebhook({
    idWebhook: idWebhook,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateWebhooksActiveByIdWebhook()
 * @request PUT :/webhooks/{idWebhook}/active
 */
export async function putWebhooksUpdateWebhooksActiveByIdWebhook(
  /** idWebhook */
  idWebhook: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: WebhooksActive,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.webhooks.updateWebhooksActiveByIdWebhook({
    idWebhook: idWebhook,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateWebhooksCallbackURLByIdWebhook()
 * @request PUT :/webhooks/{idWebhook}/callbackURL
 */
export async function putWebhooksUpdateWebhooksCallbackUrlByIdWebhook(
  /** idWebhook */
  idWebhook: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: WebhooksCallbackURL,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.webhooks.updateWebhooksCallbackUrlByIdWebhook({
    idWebhook: idWebhook,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateWebhooksDescriptionByIdWebhook()
 * @request PUT :/webhooks/{idWebhook}/description
 */
export async function putWebhooksUpdateWebhooksDescriptionByIdWebhook(
  /** idWebhook */
  idWebhook: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: WebhooksDescription,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.webhooks.updateWebhooksDescriptionByIdWebhook({
    idWebhook: idWebhook,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * updateWebhooksIdModelByIdWebhook()
 * @request PUT :/webhooks/{idWebhook}/idModel
 */
export async function putWebhooksUpdateWebhooksIdModelByIdWebhook(
  /** idWebhook */
  idWebhook: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  /** Request body */
  data: WebhooksIdModel,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.webhooks.updateWebhooksIdModelByIdWebhook({
    idWebhook: idWebhook,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * getWebhooksByIdWebhookByField()
 * @request GET :/webhooks/{idWebhook}/{field}
 * @readonly
 */
export async function getWebhooksGetWebhooksByIdWebhookByField(
  /** idWebhook */
  idWebhook: string,
  /** field */
  field: string,
  query: {
    /** <a href="https://trello.com/1/appKey/generate"  target="_blank">Generate your application key</a> */
    key: string;
    /** <a href="https://trello.com/docs/gettingstarted/index.html#getting-a-token-from-a-user"  target="_blank">Getting a token from a user</a> */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.webhooks.getWebhooksByIdWebhookByField({
    idWebhook: idWebhook,
    field: field,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}
