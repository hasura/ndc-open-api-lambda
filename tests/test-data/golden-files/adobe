import * as hasuraSdk from "@hasura/ndc-lambda-sdk";
import {
  Api,
  BundleInfo,
  InstallStatus,
  KeystoreInfo,
  SamlConfigurationInfo,
  TruststoreInfo,
} from "./api";

const api = new Api({
  baseUrl: `${process.env.NDC_OAS_BASE_URL}`,
});

/**
 * @request POST :/.cqactions.html
 */
export async function postCqactionsHtmlPostCqActions(
  query: { authorizableId: string; changelog: string },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.cqactionsHtml.postCqActions({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request POST :/apps/system/config/com.adobe.granite.auth.saml.SamlAuthenticationHandler.config
 */
export async function postAppsPostConfigAdobeGraniteSamlAuthenticationHandler(
  query: {
    keyStorePassword?: string;
    "keyStorePassword@TypeHint"?: string;
    serviceRanking?: number;
    serviceRankingTypeHint?: string;
    idpHttpRedirect?: boolean;
    "idpHttpRedirect@TypeHint"?: string;
    createUser?: boolean;
    "createUser@TypeHint"?: string;
    defaultRedirectUrl?: string;
    "defaultRedirectUrl@TypeHint"?: string;
    userIDAttribute?: string;
    "userIDAttribute@TypeHint"?: string;
    defaultGroups?: string[];
    "defaultGroups@TypeHint"?: string;
    idpCertAlias?: string;
    "idpCertAlias@TypeHint"?: string;
    addGroupMemberships?: boolean;
    "addGroupMemberships@TypeHint"?: string;
    path?: string[];
    "path@TypeHint"?: string;
    synchronizeAttributes?: string[];
    "synchronizeAttributes@TypeHint"?: string;
    clockTolerance?: number;
    "clockTolerance@TypeHint"?: string;
    groupMembershipAttribute?: string;
    "groupMembershipAttribute@TypeHint"?: string;
    idpUrl?: string;
    "idpUrl@TypeHint"?: string;
    logoutUrl?: string;
    "logoutUrl@TypeHint"?: string;
    serviceProviderEntityId?: string;
    "serviceProviderEntityId@TypeHint"?: string;
    assertionConsumerServiceURL?: string;
    "assertionConsumerServiceURL@TypeHint"?: string;
    handleLogout?: boolean;
    "handleLogout@TypeHint"?: string;
    spPrivateKeyAlias?: string;
    "spPrivateKeyAlias@TypeHint"?: string;
    useEncryption?: boolean;
    "useEncryption@TypeHint"?: string;
    nameIdFormat?: string;
    "nameIdFormat@TypeHint"?: string;
    digestMethod?: string;
    "digestMethod@TypeHint"?: string;
    signatureMethod?: string;
    "signatureMethod@TypeHint"?: string;
    userIntermediatePath?: string;
    "userIntermediatePath@TypeHint"?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.apps.postConfigAdobeGraniteSamlAuthenticationHandler(
    {
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    },
  );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request POST :/apps/system/config/com.shinesolutions.aem.passwordreset.Activator
 */
export async function postAppsPostConfigAemPasswordReset(
  query: {
    pwdresetAuthorizables?: string[];
    pwdresetAuthorizablesTypeHint?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.apps.postConfigAemPasswordReset({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request POST :/apps/system/config/com.shinesolutions.healthcheck.hc.impl.ActiveBundleHealthCheck
 */
export async function postAppsPostConfigAemHealthCheckServlet(
  query: { bundlesIgnored?: string[]; bundlesIgnoredTypeHint?: string },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.apps.postConfigAemHealthCheckServlet({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request POST :/apps/system/config/org.apache.felix.http
 */
export async function postAppsPostConfigApacheFelixJettyBasedHttpService(
  query: {
    orgApacheFelixHttpsNio?: boolean;
    orgApacheFelixHttpsNioTypeHint?: string;
    orgApacheFelixHttpsKeystore?: string;
    orgApacheFelixHttpsKeystoreTypeHint?: string;
    orgApacheFelixHttpsKeystorePassword?: string;
    orgApacheFelixHttpsKeystorePasswordTypeHint?: string;
    orgApacheFelixHttpsKeystoreKey?: string;
    orgApacheFelixHttpsKeystoreKeyTypeHint?: string;
    orgApacheFelixHttpsKeystoreKeyPassword?: string;
    orgApacheFelixHttpsKeystoreKeyPasswordTypeHint?: string;
    orgApacheFelixHttpsTruststore?: string;
    orgApacheFelixHttpsTruststoreTypeHint?: string;
    orgApacheFelixHttpsTruststorePassword?: string;
    orgApacheFelixHttpsTruststorePasswordTypeHint?: string;
    orgApacheFelixHttpsClientcertificate?: string;
    orgApacheFelixHttpsClientcertificateTypeHint?: string;
    orgApacheFelixHttpsEnable?: boolean;
    orgApacheFelixHttpsEnableTypeHint?: string;
    orgOsgiServiceHttpPortSecure?: string;
    orgOsgiServiceHttpPortSecureTypeHint?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.apps.postConfigApacheFelixJettyBasedHttpService({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request POST :/apps/system/config/org.apache.http.proxyconfigurator.config
 */
export async function postAppsPostConfigApacheHttpComponentsProxyConfiguration(
  query: {
    proxyHost?: string;
    proxyHostTypeHint?: string;
    proxyPort?: number;
    proxyPortTypeHint?: string;
    proxyExceptions?: string[];
    proxyExceptionsTypeHint?: string;
    proxyEnabled?: boolean;
    proxyEnabledTypeHint?: string;
    proxyUser?: string;
    proxyUserTypeHint?: string;
    proxyPassword?: string;
    proxyPasswordTypeHint?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.apps.postConfigApacheHttpComponentsProxyConfiguration({
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request POST :/apps/system/config/org.apache.sling.jcr.davex.impl.servlets.SlingDavExServlet
 */
export async function postAppsPostConfigApacheSlingDavExServlet(
  query: {
    alias?: string;
    "alias@TypeHint"?: string;
    davCreateAbsoluteUri?: boolean;
    davCreateAbsoluteUriTypeHint?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.apps.postConfigApacheSlingDavExServlet({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request POST :/apps/system/config/org.apache.sling.security.impl.ReferrerFilter
 */
export async function postAppsPostConfigApacheSlingReferrerFilter(
  query: {
    allowEmpty?: boolean;
    allowEmptyTypeHint?: string;
    allowHosts?: string;
    allowHostsTypeHint?: string;
    allowHostsRegexp?: string;
    allowHostsRegexpTypeHint?: string;
    filterMethods?: string;
    filterMethodsTypeHint?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.apps.postConfigApacheSlingReferrerFilter({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request POST :/apps/system/config/org.apache.sling.servlets.get.DefaultGetServlet
 */
export async function postAppsPostConfigApacheSlingGetServlet(
  query: {
    jsonMaximumresults?: string;
    jsonMaximumresultsTypeHint?: string;
    enableHtml?: boolean;
    enableHtmlTypeHint?: string;
    enableTxt?: boolean;
    enableTxtTypeHint?: string;
    enableXml?: boolean;
    enableXmlTypeHint?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.apps.postConfigApacheSlingGetServlet({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request POST :/apps/system/config/{configNodeName}
 */
export async function postAppsPostConfigProperty(
  configNodeName: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.apps.postConfigProperty({
    configNodeName: configNodeName,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request GET :/bin/querybuilder.json
 * @readonly
 */
export async function getBinGetQuery(
  query: {
    path: string;
    pLimit: number;
    "1_property": string;
    "1PropertyValue": string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.bin.getQuery({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request POST :/bin/querybuilder.json
 */
export async function postBinPostQuery(
  query: {
    path: string;
    pLimit: number;
    "1_property": string;
    "1PropertyValue": string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.bin.postQuery({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request POST :/crx/explorer/ui/setpassword.jsp
 */
export async function postCrxPostSetPassword(
  query: { old: string; plain: string; verify: string },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.crx.postSetPassword({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request GET :/crx/packmgr/installstatus.jsp
 * @readonly
 */
export async function getCrxGetInstallStatus(
  headers?: hasuraSdk.JSONValue,
): Promise<InstallStatus> {
  const result = await api.crx.getInstallStatus({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request POST :/crx/packmgr/service.jsp
 */
export async function postCrxPostPackageService(
  query: { cmd: string },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.crx.postPackageService({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request POST :/crx/packmgr/service/.json/{path}
 */
export async function postCrxPostPackageServiceJson(
  path: string,
  query: {
    cmd: string;
    groupName?: string;
    packageName?: string;
    packageVersion?: string;
    _charset_?: string;
    force?: boolean;
    recursive?: boolean;
  },
  /** Request body */
  data: {
    /** @format binary */
    package?: File;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.crx.postPackageServiceJson({
    path: path,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request GET :/crx/packmgr/service/script.html
 * @readonly
 */
export async function getCrxGetPackageManagerServlet(
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.crx.getPackageManagerServlet({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request POST :/crx/packmgr/update.jsp
 */
export async function postCrxPostPackageUpdate(
  query: {
    groupName: string;
    packageName: string;
    version: string;
    path: string;
    filter?: string;
    _charset_?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.crx.postPackageUpdate({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request GET :/crx/server/crx.default/jcr:root/.1.json
 * @readonly
 */
export async function getCrxGetCrxdeStatus(
  root: string,
  headers?: hasuraSdk.JSONValue,
): Promise<string> {
  const result = await api.crx.getCrxdeStatus({
    root: root,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request GET :/etc/packages/{group}/{name}-{version}.zip
 * @readonly
 */
export async function getEtcGetPackage(
  group: string,
  name: string,
  version: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.etc.getPackage({
    group: group,
    name: name,
    version: version,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request GET :/etc/packages/{group}/{name}-{version}.zip/jcr:content/vlt:definition/filter.tidy.2.json
 * @readonly
 */
export async function getEtcGetPackageFilter(
  group: string,
  name: string,
  version: string,
  content: string,
  definition: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.etc.getPackageFilter({
    group: group,
    name: name,
    version: version,
    content: content,
    definition: definition,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request GET :/etc/replication/agents.{runmode}.-1.json
 * @readonly
 */
export async function getEtcGetAgents(
  runmode: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.etc.getAgents({
    runmode: runmode,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request DELETE :/etc/replication/agents.{runmode}/{name}
 */
export async function deleteEtcDeleteAgent(
  runmode: string,
  name: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.etc.deleteAgent({
    runmode: runmode,
    name: name,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request GET :/etc/replication/agents.{runmode}/{name}
 * @readonly
 */
export async function getEtcGetAgent(
  runmode: string,
  name: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.etc.getAgent({
    runmode: runmode,
    name: name,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request POST :/etc/replication/agents.{runmode}/{name}
 */
export async function postEtcPostAgent(
  runmode: string,
  name: string,
  query: {
    "jcr:content/cq:distribute"?: boolean;
    "jcr:content/cq:distribute@TypeHint"?: string;
    "jcr:content/cq:name"?: string;
    "jcr:content/cq:template"?: string;
    "jcr:content/enabled"?: boolean;
    "jcr:content/jcr:description"?: string;
    "jcr:content/jcr:lastModified"?: string;
    "jcr:content/jcr:lastModifiedBy"?: string;
    "jcr:content/jcr:mixinTypes"?: string;
    "jcr:content/jcr:title"?: string;
    "jcr:content/logLevel"?: string;
    "jcr:content/noStatusUpdate"?: boolean;
    "jcr:content/noVersioning"?: boolean;
    "jcr:content/protocolConnectTimeout"?: number;
    "jcr:content/protocolHTTPConnectionClosed"?: boolean;
    "jcr:content/protocolHTTPExpired"?: string;
    "jcr:content/protocolHTTPHeaders"?: string[];
    "jcr:content/protocolHTTPHeaders@TypeHint"?: string;
    "jcr:content/protocolHTTPMethod"?: string;
    "jcr:content/protocolHTTPSRelaxed"?: boolean;
    "jcr:content/protocolInterface"?: string;
    "jcr:content/protocolSocketTimeout"?: number;
    "jcr:content/protocolVersion"?: string;
    "jcr:content/proxyNTLMDomain"?: string;
    "jcr:content/proxyNTLMHost"?: string;
    "jcr:content/proxyHost"?: string;
    "jcr:content/proxyPassword"?: string;
    "jcr:content/proxyPort"?: number;
    "jcr:content/proxyUser"?: string;
    "jcr:content/queueBatchMaxSize"?: number;
    "jcr:content/queueBatchMode"?: string;
    "jcr:content/queueBatchWaitTime"?: number;
    "jcr:content/retryDelay"?: string;
    "jcr:content/reverseReplication"?: boolean;
    "jcr:content/serializationType"?: string;
    "jcr:content/sling:resourceType"?: string;
    "jcr:content/ssl"?: string;
    "jcr:content/transportNTLMDomain"?: string;
    "jcr:content/transportNTLMHost"?: string;
    "jcr:content/transportPassword"?: string;
    "jcr:content/transportUri"?: string;
    "jcr:content/transportUser"?: string;
    "jcr:content/triggerDistribute"?: boolean;
    "jcr:content/triggerModified"?: boolean;
    "jcr:content/triggerOnOffTime"?: boolean;
    "jcr:content/triggerReceive"?: boolean;
    "jcr:content/triggerSpecific"?: boolean;
    "jcr:content/userId"?: string;
    "jcr:primaryType"?: string;
    ":operation"?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.etc.postAgent({
    runmode: runmode,
    name: name,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request POST :/etc/truststore
 */
export async function postEtcPostTruststorePkcs12(
  /** Request body */
  data: {
    /** @format binary */
    "truststore.p12"?: File;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.etc.postTruststorePkcs12({
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request GET :/etc/truststore/truststore.p12
 * @readonly
 */
export async function getEtcGetTruststore(
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.etc.getTruststore({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request GET :/libs/granite/core/content/login.html
 * @readonly
 */
export async function getLibsGetLoginPage(
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.libs.getLoginPage({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request POST :/libs/granite/security/post/authorizables
 */
export async function postLibsPostAuthorizables(
  query: {
    authorizableId: string;
    intermediatePath: string;
    createUser?: string;
    createGroup?: string;
    "rep:password"?: string;
    "profile/givenName"?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.libs.postAuthorizables({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request POST :/libs/granite/security/post/sslSetup.html
 */
export async function postLibsSslSetup(
  query: {
    keystorePassword: string;
    keystorePasswordConfirm: string;
    truststorePassword: string;
    truststorePasswordConfirm: string;
    httpsHostname: string;
    httpsPort: string;
  },
  /** Request body */
  data: {
    /** @format binary */
    certificateFile?: File;
    /** @format binary */
    privatekeyFile?: File;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.libs.sslSetup({
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request POST :/libs/granite/security/post/truststore
 */
export async function postLibsPostTruststore(
  query: {
    ":operation"?: string;
    newPassword?: string;
    rePassword?: string;
    keyStoreType?: string;
    removeAlias?: string;
  },
  /** Request body */
  data: {
    /** @format binary */
    certificate?: File;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.libs.postTruststore({
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request GET :/libs/granite/security/truststore.json
 * @readonly
 */
export async function getLibsGetTruststoreInfo(
  headers?: hasuraSdk.JSONValue,
): Promise<TruststoreInfo> {
  const result = await api.libs.getTruststoreInfo({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request POST :/libs/replication/treeactivation.html
 */
export async function postLibsPostTreeActivation(
  query: {
    ignoredeactivated: boolean;
    onlymodified: boolean;
    path: string;
    cmd: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.libs.postTreeActivation({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request POST :/system/console/bundles/{name}
 */
export async function postSystemPostBundle(
  name: string,
  query: { action: string },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.system.postBundle({
    name: name,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request GET :/system/console/bundles/{name}.json
 * @readonly
 */
export async function getSystemGetBundleInfo(
  name: string,
  headers?: hasuraSdk.JSONValue,
): Promise<BundleInfo> {
  const result = await api.system.getBundleInfo({
    name: name,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request GET :/system/console/configMgr
 * @readonly
 */
export async function getSystemGetConfigMgr(
  headers?: hasuraSdk.JSONValue,
): Promise<string> {
  const result = await api.system.getConfigMgr({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request POST :/system/console/configMgr/com.adobe.granite.auth.saml.SamlAuthenticationHandler
 */
export async function postSystemPostSamlConfiguration(
  query: {
    post?: boolean;
    apply?: boolean;
    delete?: boolean;
    action?: string;
    $location?: string;
    path?: string[];
    serviceRanking?: number;
    idpUrl?: string;
    idpCertAlias?: string;
    idpHttpRedirect?: boolean;
    serviceProviderEntityId?: string;
    assertionConsumerServiceURL?: string;
    spPrivateKeyAlias?: string;
    keyStorePassword?: string;
    defaultRedirectUrl?: string;
    userIDAttribute?: string;
    useEncryption?: boolean;
    createUser?: boolean;
    addGroupMemberships?: boolean;
    groupMembershipAttribute?: string;
    defaultGroups?: string[];
    nameIdFormat?: string;
    synchronizeAttributes?: string[];
    handleLogout?: boolean;
    logoutUrl?: string;
    clockTolerance?: number;
    digestMethod?: string;
    signatureMethod?: string;
    userIntermediatePath?: string;
    propertylist?: string[];
  },
  headers?: hasuraSdk.JSONValue,
): Promise<SamlConfigurationInfo> {
  const result = await api.system.postSamlConfiguration({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request POST :/system/console/jmx/com.adobe.granite:type=Repository/op/{action}
 */
export async function postSystemPostJmxRepository(
  action: string,
  type: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.system.postJmxRepository({
    action: action,
    type: type,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request GET :/system/console/status-productinfo.json
 * @readonly
 */
export async function getSystemGetAemProductInfo(
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.system.getAemProductInfo({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request GET :/system/health
 * @readonly
 */
export async function getSystemGetAemHealthCheck(
  query: { tags?: string; combineTagsOr?: boolean },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.system.getAemHealthCheck({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request POST :/{intermediatePath}/{authorizableId}.ks.html
 */
export async function postIntermediatePathPostAuthorizableKeystore(
  intermediatePath: string,
  authorizableId: string,
  query: {
    ":operation"?: string;
    currentPassword?: string;
    newPassword?: string;
    rePassword?: string;
    keyPassword?: string;
    keyStorePass?: string;
    alias?: string;
    newAlias?: string;
    removeAlias?: string;
  },
  /** Request body */
  data: {
    /** @format binary */
    "cert-chain"?: File;
    /** @format binary */
    keyStore?: File;
    /** @format binary */
    pk?: File;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<KeystoreInfo> {
  const result = await api.intermediatePath.postAuthorizableKeystore({
    intermediatePath: intermediatePath,
    authorizableId: authorizableId,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request GET :/{intermediatePath}/{authorizableId}.ks.json
 * @readonly
 */
export async function getIntermediatePathGetAuthorizableKeystore(
  intermediatePath: string,
  authorizableId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<KeystoreInfo> {
  const result = await api.intermediatePath.getAuthorizableKeystore({
    intermediatePath: intermediatePath,
    authorizableId: authorizableId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request GET :/{intermediatePath}/{authorizableId}/keystore/store.p12
 * @readonly
 */
export async function getIntermediatePathGetKeystore(
  intermediatePath: string,
  authorizableId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.intermediatePath.getKeystore({
    intermediatePath: intermediatePath,
    authorizableId: authorizableId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request POST :/{path}/
 */
export async function postPathPostPath(
  path: string,
  query: { "jcr:primaryType": string; ":name": string },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.path.postPath({
    path: path,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request DELETE :/{path}/{name}
 */
export async function deletePathDeleteNode(
  path: string,
  name: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.path.deleteNode({
    path: path,
    name: name,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request GET :/{path}/{name}
 * @readonly
 */
export async function getPathGetNode(
  path: string,
  name: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.path.getNode({
    path: path,
    name: name,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request POST :/{path}/{name}
 */
export async function postPathPostNode(
  path: string,
  name: string,
  query: { ":operation"?: string; deleteAuthorizable?: string },
  /** Request body */
  data: {
    /** @format binary */
    file?: File;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.path.postNode({
    path: path,
    name: name,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request POST :/{path}/{name}.rw.html
 */
export async function postPathPostNodeRw(
  path: string,
  name: string,
  query: { addMembers?: string },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.path.postNodeRw({
    path: path,
    name: name,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}
