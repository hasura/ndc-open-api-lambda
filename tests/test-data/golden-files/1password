import * as hasuraSdk from "@hasura/ndc-lambda-sdk";
import {
  APIRequest,
  Api,
  File,
  FullItem,
  Item,
  Patch,
  ServiceDependency,
  Vault,
} from "./api";

const api = new Api({
  baseUrl: "",
});

/**
 * Retrieve a list of API Requests that have been made.
 * @request GET :/activity
 * @readonly
 */
export async function getActivityGetApiActivity(
  query: {
    /** How many API Events should be retrieved in a single request. */
    limit?: number;
    /** How far into the collection of API Events should the response start */
    offset?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<APIRequest[]> {
  const result = await api.activity.getApiActivity({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get state of the server and its dependencies.
 * @request GET :/health
 * @readonly
 */
export async function getHealthGetServerHealth(
  headers?: hasuraSdk.JSONValue,
): Promise<{
  dependencies?: ServiceDependency[];
  name: string;
  /** The Connect server's version */
  version: string;
}> {
  const result = await api.health.getServerHealth({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Ping the server for liveness
 * @request GET :/heartbeat
 * @readonly
 */
export async function getHeartbeatGetHeartbeat(
  headers?: hasuraSdk.JSONValue,
): Promise<string> {
  const result = await api.heartbeat.getHeartbeat({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Query server for exposed Prometheus metrics
 * @request GET :/metrics
 * @readonly
 */
export async function getMetricsGetPrometheusMetrics(
  headers?: hasuraSdk.JSONValue,
): Promise<string> {
  const result = await api.metrics.getPrometheusMetrics({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get all Vaults
 * @request GET :/vaults
 * @readonly
 */
export async function getVaultsGetVaults(
  query: {
    /** Filter the Vault collection based on Vault name using SCIM eq filter */
    filter?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Vault[]> {
  const result = await api.vaults.getVaults({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get Vault details and metadata
 * @request GET :/vaults/{vaultUuid}
 * @readonly
 */
export async function getVaultsGetVaultById(
  /** The UUID of the Vault to fetch Items from */
  vaultUuid: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Vault> {
  const result = await api.vaults.getVaultById({
    vaultUuid: vaultUuid,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get all items for inside a Vault
 * @request GET :/vaults/{vaultUuid}/items
 * @readonly
 */
export async function getVaultsGetVaultItems(
  /** The UUID of the Vault to fetch Items from */
  vaultUuid: string,
  query: {
    /** Filter the Item collection based on Item name using SCIM eq filter */
    filter?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Item[]> {
  const result = await api.vaults.getVaultItems({
    vaultUuid: vaultUuid,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a new Item
 * @request POST :/vaults/{vaultUuid}/items
 * @allowrelaxedtypes
 */
export async function postVaultsCreateVaultItem(
  /** The UUID of the Vault to create an Item in */
  vaultUuid: string,
  /** Request body */
  data: FullItem,
  headers?: hasuraSdk.JSONValue,
): Promise<FullItem> {
  const result = await api.vaults.createVaultItem({
    vaultUuid: vaultUuid,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete an Item
 * @request DELETE :/vaults/{vaultUuid}/items/{itemUuid}
 */
export async function deleteVaultsDeleteVaultItem(
  /** The UUID of the Vault the item is in */
  vaultUuid: string,
  /** The UUID of the Item to update */
  itemUuid: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.vaults.deleteVaultItem({
    vaultUuid: vaultUuid,
    itemUuid: itemUuid,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the details of an Item
 * @request GET :/vaults/{vaultUuid}/items/{itemUuid}
 * @readonly
 */
export async function getVaultsGetVaultItemById(
  /** The UUID of the Vault to fetch Item from */
  vaultUuid: string,
  /** The UUID of the Item to fetch */
  itemUuid: string,
  headers?: hasuraSdk.JSONValue,
): Promise<FullItem> {
  const result = await api.vaults.getVaultItemById({
    vaultUuid: vaultUuid,
    itemUuid: itemUuid,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update a subset of Item attributes
 * @request PATCH :/vaults/{vaultUuid}/items/{itemUuid}
 * @allowrelaxedtypes
 */
export async function patchVaultsPatchVaultItem(
  /** The UUID of the Vault the item is in */
  vaultUuid: string,
  /** The UUID of the Item to update */
  itemUuid: string,
  /** Request body */
  data: Patch,
  headers?: hasuraSdk.JSONValue,
): Promise<FullItem> {
  const result = await api.vaults.patchVaultItem({
    vaultUuid: vaultUuid,
    itemUuid: itemUuid,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update an Item
 * @request PUT :/vaults/{vaultUuid}/items/{itemUuid}
 * @allowrelaxedtypes
 */
export async function putVaultsUpdateVaultItem(
  /** The UUID of the Item's Vault */
  vaultUuid: string,
  /** The UUID of the Item to update */
  itemUuid: string,
  /** Request body */
  data: FullItem,
  headers?: hasuraSdk.JSONValue,
): Promise<FullItem> {
  const result = await api.vaults.updateVaultItem({
    vaultUuid: vaultUuid,
    itemUuid: itemUuid,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get all the files inside an Item
 * @request GET :/vaults/{vaultUuid}/items/{itemUuid}/files
 * @readonly
 */
export async function getVaultsGetItemFiles(
  /** The UUID of the Vault to fetch Items from */
  vaultUuid: string,
  /** The UUID of the Item to fetch files from */
  itemUuid: string,
  query: {
    /** Tells server to return the base64-encoded file contents in the response. */
    inline_files?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<File[]> {
  const result = await api.vaults.getItemFiles({
    vaultUuid: vaultUuid,
    itemUuid: itemUuid,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the details of a File
 * @request GET :/vaults/{vaultUuid}/items/{itemUuid}/files/{fileUuid}
 * @readonly
 */
export async function getVaultsGetDetailsOfFileById(
  /** The UUID of the Vault to fetch Item from */
  vaultUuid: string,
  /** The UUID of the Item to fetch File from */
  itemUuid: string,
  /** The UUID of the File to fetch */
  fileUuid: string,
  query: {
    /** Tells server to return the base64-encoded file contents in the response. */
    inline_files?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<File> {
  const result = await api.vaults.getDetailsOfFileById({
    vaultUuid: vaultUuid,
    itemUuid: itemUuid,
    fileUuid: fileUuid,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the content of a File
 * @request GET :/vaults/{vaultUuid}/items/{itemUuid}/files/{fileUuid}/content
 * @readonly
 */
export async function getVaultsDownloadFileById(
  /** The UUID of the Vault the item is in */
  vaultUuid: string,
  /** The UUID of the Item the File is in */
  itemUuid: string,
  /** UUID of the file to get content from */
  fileUuid: string,
  headers?: hasuraSdk.JSONValue,
): Promise<File> {
  const result = await api.vaults.downloadFileById({
    vaultUuid: vaultUuid,
    itemUuid: itemUuid,
    fileUuid: fileUuid,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}
