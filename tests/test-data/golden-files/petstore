import {
  Address,
  Category,
  Tag,
  Pet,
  Order,
  Customer,
  User,
  ApiResponse,
  Api,
} from "./api";
import * as hasuraSdk from "@hasura/ndc-lambda-sdk";

const api = new Api({
  baseUrl: "http://localhost:13191",
});

/**
 * Add a new pet to the store
 * @request POST :/pet
 * @allowrelaxedtypes
 */
export async function postPetAddPet(
  /** Request body */
  data: Pet,
  headers?: hasuraSdk.JSONValue,
): Promise<Pet> {
  const result = await api.pet.addPet({
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update an existing pet
 * @request PUT :/pet
 * @allowrelaxedtypes
 */
export async function putPetUpdatePet(
  /** Request body */
  data: Pet,
  headers?: hasuraSdk.JSONValue,
): Promise<Pet> {
  const result = await api.pet.updatePet({
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Finds Pets by status
 * @request GET :/pet/findByStatus
 * @allowrelaxedtypes
 * @readonly
 */
export async function getPetFindPetsByStatus(
  query: {
    /**
     * Status values that need to be considered for filter
     */
    status?: "available" | "pending" | "sold";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Pet[]> {
  const result = await api.pet.findPetsByStatus({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Finds Pets by tags
 * @request GET :/pet/findByTags
 * @allowrelaxedtypes
 * @readonly
 */
export async function getPetFindPetsByTags(
  query: {
    /**
     * Tags to filter by
     */
    tags?: string[];
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Pet[]> {
  const result = await api.pet.findPetsByTags({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Find pet by ID
 * @request GET :/pet/{petId}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getPetGetPetById(
  /**
   * ID of pet to return
   */
  petId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Pet> {
  const result = await api.pet.getPetById({
    petId: petId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Updates a pet in the store with form data
 * @request POST :/pet/{petId}
 * @allowrelaxedtypes
 */
export async function postPetUpdatePetWithForm(
  query: {
    /**
     * Name of pet that needs to be updated
     */
    name?: string;
    /**
     * Status of pet that needs to be updated
     */
    status?: string;
  },
  /**
   * ID of pet that needs to be updated
   */
  petId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.pet.updatePetWithForm({
    query: query,
    petId: petId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * Deletes a pet
 * @request DELETE :/pet/{petId}
 * @allowrelaxedtypes
 */
export async function deletePetDeletePet(
  /**
   * Pet id to delete
   */
  petId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.pet.deletePet({
    petId: petId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * uploads an image
 * @request POST :/pet/{petId}/uploadImage
 */
export async function postPetUploadFile(
  query: {
    /**
     * Additional Metadata
     */
    additionalMetadata?: string;
  },
  /**
   * ID of pet to update
   */
  petId: number,
  /** Request body */
  data: File,
  headers?: hasuraSdk.JSONValue,
): Promise<ApiResponse> {
  const result = await api.pet.uploadFile({
    query: query,
    petId: petId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Returns pet inventories by status
 * @request GET :/store/inventory
 * @allowrelaxedtypes
 * @readonly
 */
export async function getStoreGetInventory(
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.store.getInventory({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * Place an order for a pet
 * @request POST :/store/order
 * @allowrelaxedtypes
 */
export async function postStorePlaceOrder(
  /** Request body */
  data: Order,
  headers?: hasuraSdk.JSONValue,
): Promise<Order> {
  const result = await api.store.placeOrder({
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Find purchase order by ID
 * @request GET :/store/order/{orderId}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getStoreGetOrderById(
  /**
   * ID of order that needs to be fetched
   */
  orderId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Order> {
  const result = await api.store.getOrderById({
    orderId: orderId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete purchase order by ID
 * @request DELETE :/store/order/{orderId}
 * @allowrelaxedtypes
 */
export async function deleteStoreDeleteOrder(
  /**
   * ID of the order that needs to be deleted
   */
  orderId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.store.deleteOrder({
    orderId: orderId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * Create user
 * @request POST :/user
 * @allowrelaxedtypes
 */
export async function postUserCreateUser(
  /** Request body */
  data: User,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.user.createUser({
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * Creates list of users with given input array
 * @request POST :/user/createWithList
 */
export async function postUserCreateUsersWithListInput(
  /** Request body */
  data: User[],
  headers?: hasuraSdk.JSONValue,
): Promise<User> {
  const result = await api.user.createUsersWithListInput({
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Logs user into the system
 * @request GET :/user/login
 * @readonly
 */
export async function getUserLoginUser(
  query: {
    /**
     * The user name for login
     */
    username?: string;
    /**
     * The password for login in clear text
     */
    password?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<string> {
  const result = await api.user.loginUser({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Logs out current logged in user session
 * @request GET :/user/logout
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUserLogoutUser(
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.user.logoutUser({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * Get user by user name
 * @request GET :/user/{username}
 * @readonly
 */
export async function getUserGetUserByName(
  /**
   * The name that needs to be fetched. Use user1 for testing.
   */
  username: string,
  headers?: hasuraSdk.JSONValue,
): Promise<User> {
  const result = await api.user.getUserByName({
    username: username,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update user
 * @request PUT :/user/{username}
 * @allowrelaxedtypes
 */
export async function putUserUpdateUser(
  /**
   * name that needs to be updated
   */
  username: string,
  /** Request body */
  data: User,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.user.updateUser({
    username: username,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}

/**
 * Delete user
 * @request DELETE :/user/{username}
 * @allowrelaxedtypes
 */
export async function deleteUserDeleteUser(
  /**
   * The name that needs to be deleted
   */
  username: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.user.deleteUser({
    username: username,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return new hasuraSdk.JSONValue(result.data);
  } else {
    throw result.error;
  }
}
