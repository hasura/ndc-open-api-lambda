import * as hasuraSdk from "@hasura/ndc-lambda-sdk";
import {
  Api,
  Component,
  ComponentsCollection,
  Monitor,
  MonitorInstance,
  MonitorInstancesCollection,
  MonitorsCollection,
  NotificationSetting,
  NotificationSettingsCollection,
  OperationListResult,
} from "./api";

const api = new Api({
  baseUrl: "",
});

/**
 * Gets the details of all operations possible on the resource provider.
 * @request GET :/providers/Microsoft.WorkloadMonitor/operations
 * @readonly
 */
export async function getProvidersOperationsList(
  query: {
    /** The API version to use for this operation. */
    "api-version": "2018-08-31-preview";
    /** The page-continuation token to use with a paged version of this API. */
    $skiptoken?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<OperationListResult> {
  const result = await api.providers.operationsList({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get subscription wide details of components.
 * @request GET :/subscriptions/{subscriptionId}/providers/Microsoft.WorkloadMonitor/componentsSummary
 * @readonly
 */
export async function getSubscriptionsComponentsSummaryList(
  /** The ID of the target subscription. */
  subscriptionId: string,
  query: {
    /** The API version to use for this operation. */
    "api-version": "2018-08-31-preview";
    /** Properties to be returned in the response. */
    $select?: string;
    /** Filter to be applied on the operation. */
    $filter?: string;
    /** Apply aggregation. */
    $apply?: string;
    /** Sort the result on one or more properties. */
    $orderby?: string;
    /** Include properties inline in the response. */
    $expand?: string;
    /** Limit the result to the specified number of rows. */
    $top?: string;
    /** The page-continuation token to use with a paged version of this API. */
    $skiptoken?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<ComponentsCollection> {
  const result = await api.subscriptions.componentsSummaryList({
    subscriptionId: subscriptionId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get subscription wide health instances.
 * @request GET :/subscriptions/{subscriptionId}/providers/Microsoft.WorkloadMonitor/monitorInstancesSummary
 * @readonly
 */
export async function getSubscriptionsMonitorInstancesSummaryList(
  /** The ID of the target subscription. */
  subscriptionId: string,
  query: {
    /** The API version to use for this operation. */
    "api-version": "2018-08-31-preview";
    /** Properties to be returned in the response. */
    $select?: string;
    /** Filter to be applied on the operation. */
    $filter?: string;
    /** Apply aggregation. */
    $apply?: string;
    /** Sort the result on one or more properties. */
    $orderby?: string;
    /** Include properties inline in the response. */
    $expand?: string;
    /** Limit the result to the specified number of rows. */
    $top?: string;
    /** The page-continuation token to use with a paged version of this API. */
    $skiptoken?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<MonitorInstancesCollection> {
  const result = await api.subscriptions.monitorInstancesSummaryList({
    subscriptionId: subscriptionId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get list of components for a resource.
 * @request GET :/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.WorkloadMonitor/components
 * @readonly
 */
export async function getSubscriptionsComponentsListByResource(
  /** The ID of the target subscription. */
  subscriptionId: string,
  /** The name of the resource group. The name is case insensitive. */
  resourceGroupName: string,
  /** The Namespace of the resource. */
  resourceNamespace: string,
  /** The type of the resource. */
  resourceType: string,
  /** Name of the resource. */
  resourceName: string,
  query: {
    /** The API version to use for this operation. */
    "api-version": "2018-08-31-preview";
    /** Properties to be returned in the response. */
    $select?: string;
    /** Filter to be applied on the operation. */
    $filter?: string;
    /** Apply aggregation. */
    $apply?: string;
    /** Sort the result on one or more properties. */
    $orderby?: string;
    /** Include properties inline in the response. */
    $expand?: string;
    /** Limit the result to the specified number of rows. */
    $top?: string;
    /** The page-continuation token to use with a paged version of this API. */
    $skiptoken?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<ComponentsCollection> {
  const result = await api.subscriptions.componentsListByResource({
    subscriptionId: subscriptionId,
    resourceGroupName: resourceGroupName,
    resourceNamespace: resourceNamespace,
    resourceType: resourceType,
    resourceName: resourceName,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get details of a component.
 * @request GET :/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.WorkloadMonitor/components/{componentId}
 * @readonly
 */
export async function getSubscriptionsComponentsGet(
  /** The ID of the target subscription. */
  subscriptionId: string,
  /** The name of the resource group. The name is case insensitive. */
  resourceGroupName: string,
  /** The Namespace of the resource. */
  resourceNamespace: string,
  /** The type of the resource. */
  resourceType: string,
  /** Name of the resource. */
  resourceName: string,
  /** Component Id. */
  componentId: string,
  query: {
    /** The API version to use for this operation. */
    "api-version": "2018-08-31-preview";
    /** Properties to be returned in the response. */
    $select?: string;
    /** Include properties inline in the response. */
    $expand?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Component> {
  const result = await api.subscriptions.componentsGet({
    subscriptionId: subscriptionId,
    resourceGroupName: resourceGroupName,
    resourceNamespace: resourceNamespace,
    resourceType: resourceType,
    resourceName: resourceName,
    componentId: componentId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get list of monitor instances for a resource.
 * @request GET :/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.WorkloadMonitor/monitorInstances
 * @readonly
 */
export async function getSubscriptionsMonitorInstancesListByResource(
  /** The ID of the target subscription. */
  subscriptionId: string,
  /** The name of the resource group. The name is case insensitive. */
  resourceGroupName: string,
  /** The Namespace of the resource. */
  resourceNamespace: string,
  /** The type of the resource. */
  resourceType: string,
  /** Name of the resource. */
  resourceName: string,
  query: {
    /** The API version to use for this operation. */
    "api-version": "2018-08-31-preview";
    /** Properties to be returned in the response. */
    $select?: string;
    /** Filter to be applied on the operation. */
    $filter?: string;
    /** Apply aggregation. */
    $apply?: string;
    /** Sort the result on one or more properties. */
    $orderby?: string;
    /** Include properties inline in the response. */
    $expand?: string;
    /** Limit the result to the specified number of rows. */
    $top?: string;
    /** The page-continuation token to use with a paged version of this API. */
    $skiptoken?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<MonitorInstancesCollection> {
  const result = await api.subscriptions.monitorInstancesListByResource({
    subscriptionId: subscriptionId,
    resourceGroupName: resourceGroupName,
    resourceNamespace: resourceNamespace,
    resourceType: resourceType,
    resourceName: resourceName,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get details of a monitorInstance.
 * @request GET :/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.WorkloadMonitor/monitorInstances/{monitorInstanceId}
 * @readonly
 */
export async function getSubscriptionsMonitorInstancesGet(
  /** The ID of the target subscription. */
  subscriptionId: string,
  /** The name of the resource group. The name is case insensitive. */
  resourceGroupName: string,
  /** The Namespace of the resource. */
  resourceNamespace: string,
  /** The type of the resource. */
  resourceType: string,
  /** Name of the resource. */
  resourceName: string,
  /** MonitorInstance Id. */
  monitorInstanceId: string,
  query: {
    /** The API version to use for this operation. */
    "api-version": "2018-08-31-preview";
    /** Properties to be returned in the response. */
    $select?: string;
    /** Include properties inline in the response. */
    $expand?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<MonitorInstance> {
  const result = await api.subscriptions.monitorInstancesGet({
    subscriptionId: subscriptionId,
    resourceGroupName: resourceGroupName,
    resourceNamespace: resourceNamespace,
    resourceType: resourceType,
    resourceName: resourceName,
    monitorInstanceId: monitorInstanceId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get list of a monitors of a resource.
 * @request GET :/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.WorkloadMonitor/monitors
 * @readonly
 */
export async function getSubscriptionsMonitorsListByResource(
  /** The ID of the target subscription. */
  subscriptionId: string,
  /** The name of the resource group. The name is case insensitive. */
  resourceGroupName: string,
  /** The Namespace of the resource. */
  resourceNamespace: string,
  /** The type of the resource. */
  resourceType: string,
  /** Name of the resource. */
  resourceName: string,
  query: {
    /** The API version to use for this operation. */
    "api-version": "2018-08-31-preview";
    /** Filter to be applied on the operation. */
    $filter?: string;
    /** The page-continuation token to use with a paged version of this API. */
    $skiptoken?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<MonitorsCollection> {
  const result = await api.subscriptions.monitorsListByResource({
    subscriptionId: subscriptionId,
    resourceGroupName: resourceGroupName,
    resourceNamespace: resourceNamespace,
    resourceType: resourceType,
    resourceName: resourceName,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get details of a single monitor.
 * @request GET :/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.WorkloadMonitor/monitors/{monitorId}
 * @readonly
 */
export async function getSubscriptionsMonitorsGet(
  /** The ID of the target subscription. */
  subscriptionId: string,
  /** The name of the resource group. The name is case insensitive. */
  resourceGroupName: string,
  /** The Namespace of the resource. */
  resourceNamespace: string,
  /** The type of the resource. */
  resourceType: string,
  /** Name of the resource. */
  resourceName: string,
  /** Monitor Id. */
  monitorId: string,
  query: {
    /** The API version to use for this operation. */
    "api-version": "2018-08-31-preview";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Monitor> {
  const result = await api.subscriptions.monitorsGet({
    subscriptionId: subscriptionId,
    resourceGroupName: resourceGroupName,
    resourceNamespace: resourceNamespace,
    resourceType: resourceType,
    resourceName: resourceName,
    monitorId: monitorId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update a Monitor's configuration.
 * @request PATCH :/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.WorkloadMonitor/monitors/{monitorId}
 * @allowrelaxedtypes
 */
export async function patchSubscriptionsMonitorsUpdate(
  /** The ID of the target subscription. */
  subscriptionId: string,
  /** The name of the resource group. The name is case insensitive. */
  resourceGroupName: string,
  /** The Namespace of the resource. */
  resourceNamespace: string,
  /** The type of the resource. */
  resourceType: string,
  /** Name of the resource. */
  resourceName: string,
  /** Monitor Id. */
  monitorId: string,
  query: {
    /** The API version to use for this operation. */
    "api-version": "2018-08-31-preview";
  },
  /** Request body */
  body: Monitor,
  headers?: hasuraSdk.JSONValue,
): Promise<Monitor> {
  const result = await api.subscriptions.monitorsUpdate({
    subscriptionId: subscriptionId,
    resourceGroupName: resourceGroupName,
    resourceNamespace: resourceNamespace,
    resourceType: resourceType,
    resourceName: resourceName,
    monitorId: monitorId,
    query: query,
    body: body,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get list of notification settings for a resource.
 * @request GET :/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.WorkloadMonitor/notificationSettings
 * @readonly
 */
export async function getSubscriptionsNotificationSettingsListByResource(
  /** The ID of the target subscription. */
  subscriptionId: string,
  /** The name of the resource group. The name is case insensitive. */
  resourceGroupName: string,
  /** The Namespace of the resource. */
  resourceNamespace: string,
  /** The type of the resource. */
  resourceType: string,
  /** Name of the resource. */
  resourceName: string,
  query: {
    /** The API version to use for this operation. */
    "api-version": "2018-08-31-preview";
    /** The page-continuation token to use with a paged version of this API. */
    $skiptoken?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<NotificationSettingsCollection> {
  const result = await api.subscriptions.notificationSettingsListByResource({
    subscriptionId: subscriptionId,
    resourceGroupName: resourceGroupName,
    resourceNamespace: resourceNamespace,
    resourceType: resourceType,
    resourceName: resourceName,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a of notification setting for a resource.
 * @request GET :/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.WorkloadMonitor/notificationSettings/{notificationSettingName}
 * @readonly
 */
export async function getSubscriptionsNotificationSettingsGet(
  /** The ID of the target subscription. */
  subscriptionId: string,
  /** The name of the resource group. The name is case insensitive. */
  resourceGroupName: string,
  /** The Namespace of the resource. */
  resourceNamespace: string,
  /** The type of the resource. */
  resourceType: string,
  /** Name of the resource. */
  resourceName: string,
  /** Default string modeled as parameter for URL to work correctly. */
  notificationSettingName: "default",
  query: {
    /** The API version to use for this operation. */
    "api-version": "2018-08-31-preview";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<NotificationSetting> {
  const result = await api.subscriptions.notificationSettingsGet({
    subscriptionId: subscriptionId,
    resourceGroupName: resourceGroupName,
    resourceNamespace: resourceNamespace,
    resourceType: resourceType,
    resourceName: resourceName,
    notificationSettingName: notificationSettingName,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update notification settings for a resource.
 * @request PUT :/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceNamespace}/{resourceType}/{resourceName}/providers/Microsoft.WorkloadMonitor/notificationSettings/{notificationSettingName}
 */
export async function putSubscriptionsNotificationSettingsUpdate(
  /** The ID of the target subscription. */
  subscriptionId: string,
  /** The name of the resource group. The name is case insensitive. */
  resourceGroupName: string,
  /** The Namespace of the resource. */
  resourceNamespace: string,
  /** The type of the resource. */
  resourceType: string,
  /** Name of the resource. */
  resourceName: string,
  notificationSettingName: "default",
  query: {
    /** The API version to use for this operation. */
    "api-version": "2018-08-31-preview";
  },
  /** Request body */
  body: NotificationSetting,
  headers?: hasuraSdk.JSONValue,
): Promise<NotificationSetting> {
  const result = await api.subscriptions.notificationSettingsUpdate({
    subscriptionId: subscriptionId,
    resourceGroupName: resourceGroupName,
    resourceNamespace: resourceNamespace,
    resourceType: resourceType,
    resourceName: resourceName,
    notificationSettingName: notificationSettingName,
    query: query,
    body: body,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}
