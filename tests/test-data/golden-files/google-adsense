import {
  Account,
  AdClient,
  AdStyle,
  AdUnit,
  Alert,
  CustomChannel,
  ReportingMetadataEntry,
  Payment,
  SavedAdStyle,
  SavedReport,
  UrlChannel,
  Accounts,
  AdClients,
  AdCode,
  AdUnits,
  CustomChannels,
  AdsenseReportsGenerateResponse,
  Alerts,
  UrlChannels,
  Metadata,
  Payments,
  SavedAdStyles,
  SavedReports,
  Api,
} from "./api";
import * as hasuraSdk from "@hasura/ndc-lambda-sdk";

const api = new Api({
  baseUrl: "http://localhost:13191",
});

/**
 * undefined
 * @request GET :/accounts
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAccountsAdsenseAccountsList(
  query: {
    /**
     * Data format for the response.
     */
    alt?: "csv" | "json";
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string;
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string;
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string;
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean;
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    quotaUser?: string;
    /**
     * Deprecated. Please use quotaUser instead.
     */
    userIp?: string;
    /**
     * The maximum number of accounts to include in the response, used for paging.
     */
    maxResults?: number;
    /**
     * A continuation token, used to page through accounts. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.
     */
    pageToken?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Accounts> {
  const result = await api.accounts.adsenseAccountsList({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/accounts/{accountId}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAccountsAdsenseAccountsGet(
  query: {
    /**
     * Data format for the response.
     */
    alt?: "csv" | "json";
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string;
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string;
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string;
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean;
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    quotaUser?: string;
    /**
     * Deprecated. Please use quotaUser instead.
     */
    userIp?: string;
    /**
     * Whether the tree of sub accounts should be returned.
     */
    tree?: boolean;
  },
  /**
   * Account to get information about.
   */
  accountId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Account> {
  const result = await api.accounts.adsenseAccountsGet({
    query: query,
    accountId: accountId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/accounts/{accountId}/adclients
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAccountsAdsenseAccountsAdclientsList(
  query: {
    /**
     * Data format for the response.
     */
    alt?: "csv" | "json";
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string;
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string;
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string;
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean;
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    quotaUser?: string;
    /**
     * Deprecated. Please use quotaUser instead.
     */
    userIp?: string;
    /**
     * The maximum number of ad clients to include in the response, used for paging.
     */
    maxResults?: number;
    /**
     * A continuation token, used to page through ad clients. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.
     */
    pageToken?: string;
  },
  /**
   * Account for which to list ad clients.
   */
  accountId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<AdClients> {
  const result = await api.accounts.adsenseAccountsAdclientsList({
    query: query,
    accountId: accountId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/accounts/{accountId}/adclients/{adClientId}/adcode
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAccountsAdsenseAccountsAdclientsGetAdCode(
  query: {
    /**
     * Data format for the response.
     */
    alt?: "csv" | "json";
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string;
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string;
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string;
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean;
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    quotaUser?: string;
    /**
     * Deprecated. Please use quotaUser instead.
     */
    userIp?: string;
    /**
     * Tag partner to include in the ad code snippet.
     */
    tagPartner?: string;
  },
  /**
   * Account which contains the ad client.
   */
  accountId: string,
  /**
   * Ad client to get the code for.
   */
  adClientId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<AdCode> {
  const result = await api.accounts.adsenseAccountsAdclientsGetAdCode({
    query: query,
    accountId: accountId,
    adClientId: adClientId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/accounts/{accountId}/adclients/{adClientId}/adunits
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAccountsAdsenseAccountsAdunitsList(
  query: {
    /**
     * Data format for the response.
     */
    alt?: "csv" | "json";
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string;
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string;
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string;
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean;
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    quotaUser?: string;
    /**
     * Deprecated. Please use quotaUser instead.
     */
    userIp?: string;
    /**
     * Whether to include inactive ad units. Default: true.
     */
    includeInactive?: boolean;
    /**
     * The maximum number of ad units to include in the response, used for paging.
     */
    maxResults?: number;
    /**
     * A continuation token, used to page through ad units. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.
     */
    pageToken?: string;
  },
  /**
   * Account to which the ad client belongs.
   */
  accountId: string,
  /**
   * Ad client for which to list ad units.
   */
  adClientId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<AdUnits> {
  const result = await api.accounts.adsenseAccountsAdunitsList({
    query: query,
    accountId: accountId,
    adClientId: adClientId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAccountsAdsenseAccountsAdunitsGet(
  query: {
    /**
     * Data format for the response.
     */
    alt?: "csv" | "json";
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string;
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string;
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string;
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean;
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    quotaUser?: string;
    /**
     * Deprecated. Please use quotaUser instead.
     */
    userIp?: string;
  },
  /**
   * Account to which the ad client belongs.
   */
  accountId: string,
  /**
   * Ad client for which to get the ad unit.
   */
  adClientId: string,
  /**
   * Ad unit to retrieve.
   */
  adUnitId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<AdUnit> {
  const result = await api.accounts.adsenseAccountsAdunitsGet({
    query: query,
    accountId: accountId,
    adClientId: adClientId,
    adUnitId: adUnitId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}/adcode
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAccountsAdsenseAccountsAdunitsGetAdCode(
  query: {
    /**
     * Data format for the response.
     */
    alt?: "csv" | "json";
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string;
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string;
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string;
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean;
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    quotaUser?: string;
    /**
     * Deprecated. Please use quotaUser instead.
     */
    userIp?: string;
  },
  /**
   * Account which contains the ad client.
   */
  accountId: string,
  /**
   * Ad client with contains the ad unit.
   */
  adClientId: string,
  /**
   * Ad unit to get the code for.
   */
  adUnitId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<AdCode> {
  const result = await api.accounts.adsenseAccountsAdunitsGetAdCode({
    query: query,
    accountId: accountId,
    adClientId: adClientId,
    adUnitId: adUnitId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}/customchannels
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAccountsAdsenseAccountsAdunitsCustomchannelsList(
  query: {
    /**
     * Data format for the response.
     */
    alt?: "csv" | "json";
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string;
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string;
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string;
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean;
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    quotaUser?: string;
    /**
     * Deprecated. Please use quotaUser instead.
     */
    userIp?: string;
    /**
     * The maximum number of custom channels to include in the response, used for paging.
     */
    maxResults?: number;
    /**
     * A continuation token, used to page through custom channels. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.
     */
    pageToken?: string;
  },
  /**
   * Account to which the ad client belongs.
   */
  accountId: string,
  /**
   * Ad client which contains the ad unit.
   */
  adClientId: string,
  /**
   * Ad unit for which to list custom channels.
   */
  adUnitId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<CustomChannels> {
  const result = await api.accounts.adsenseAccountsAdunitsCustomchannelsList({
    query: query,
    accountId: accountId,
    adClientId: adClientId,
    adUnitId: adUnitId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/accounts/{accountId}/adclients/{adClientId}/customchannels
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAccountsAdsenseAccountsCustomchannelsList(
  query: {
    /**
     * Data format for the response.
     */
    alt?: "csv" | "json";
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string;
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string;
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string;
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean;
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    quotaUser?: string;
    /**
     * Deprecated. Please use quotaUser instead.
     */
    userIp?: string;
    /**
     * The maximum number of custom channels to include in the response, used for paging.
     */
    maxResults?: number;
    /**
     * A continuation token, used to page through custom channels. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.
     */
    pageToken?: string;
  },
  /**
   * Account to which the ad client belongs.
   */
  accountId: string,
  /**
   * Ad client for which to list custom channels.
   */
  adClientId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<CustomChannels> {
  const result = await api.accounts.adsenseAccountsCustomchannelsList({
    query: query,
    accountId: accountId,
    adClientId: adClientId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/accounts/{accountId}/adclients/{adClientId}/customchannels/{customChannelId}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAccountsAdsenseAccountsCustomchannelsGet(
  query: {
    /**
     * Data format for the response.
     */
    alt?: "csv" | "json";
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string;
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string;
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string;
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean;
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    quotaUser?: string;
    /**
     * Deprecated. Please use quotaUser instead.
     */
    userIp?: string;
  },
  /**
   * Account to which the ad client belongs.
   */
  accountId: string,
  /**
   * Ad client which contains the custom channel.
   */
  adClientId: string,
  /**
   * Custom channel to retrieve.
   */
  customChannelId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<CustomChannel> {
  const result = await api.accounts.adsenseAccountsCustomchannelsGet({
    query: query,
    accountId: accountId,
    adClientId: adClientId,
    customChannelId: customChannelId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/accounts/{accountId}/adclients/{adClientId}/customchannels/{customChannelId}/adunits
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAccountsAdsenseAccountsCustomchannelsAdunitsList(
  query: {
    /**
     * Data format for the response.
     */
    alt?: "csv" | "json";
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string;
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string;
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string;
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean;
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    quotaUser?: string;
    /**
     * Deprecated. Please use quotaUser instead.
     */
    userIp?: string;
    /**
     * Whether to include inactive ad units. Default: true.
     */
    includeInactive?: boolean;
    /**
     * The maximum number of ad units to include in the response, used for paging.
     */
    maxResults?: number;
    /**
     * A continuation token, used to page through ad units. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.
     */
    pageToken?: string;
  },
  /**
   * Account to which the ad client belongs.
   */
  accountId: string,
  /**
   * Ad client which contains the custom channel.
   */
  adClientId: string,
  /**
   * Custom channel for which to list ad units.
   */
  customChannelId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<AdUnits> {
  const result = await api.accounts.adsenseAccountsCustomchannelsAdunitsList({
    query: query,
    accountId: accountId,
    adClientId: adClientId,
    customChannelId: customChannelId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/accounts/{accountId}/adclients/{adClientId}/urlchannels
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAccountsAdsenseAccountsUrlchannelsList(
  query: {
    /**
     * Data format for the response.
     */
    alt?: "csv" | "json";
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string;
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string;
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string;
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean;
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    quotaUser?: string;
    /**
     * Deprecated. Please use quotaUser instead.
     */
    userIp?: string;
    /**
     * The maximum number of URL channels to include in the response, used for paging.
     */
    maxResults?: number;
    /**
     * A continuation token, used to page through URL channels. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.
     */
    pageToken?: string;
  },
  /**
   * Account to which the ad client belongs.
   */
  accountId: string,
  /**
   * Ad client for which to list URL channels.
   */
  adClientId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<UrlChannels> {
  const result = await api.accounts.adsenseAccountsUrlchannelsList({
    query: query,
    accountId: accountId,
    adClientId: adClientId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/accounts/{accountId}/alerts
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAccountsAdsenseAccountsAlertsList(
  query: {
    /**
     * Data format for the response.
     */
    alt?: "csv" | "json";
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string;
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string;
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string;
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean;
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    quotaUser?: string;
    /**
     * Deprecated. Please use quotaUser instead.
     */
    userIp?: string;
    /**
     * The locale to use for translating alert messages. The account locale will be used if this is not supplied. The AdSense default (English) will be used if the supplied locale is invalid or unsupported.
     */
    locale?: string;
  },
  /**
   * Account for which to retrieve the alerts.
   */
  accountId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Alerts> {
  const result = await api.accounts.adsenseAccountsAlertsList({
    query: query,
    accountId: accountId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/accounts/{accountId}/alerts/{alertId}
 * @allowrelaxedtypes
 */
export async function deleteAccountsAdsenseAccountsAlertsDelete(
  query: {
    /**
     * Data format for the response.
     */
    alt?: "csv" | "json";
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string;
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string;
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string;
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean;
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    quotaUser?: string;
    /**
     * Deprecated. Please use quotaUser instead.
     */
    userIp?: string;
  },
  /**
   * Account which contains the ad unit.
   */
  accountId: string,
  /**
   * Alert to delete.
   */
  alertId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.accounts.adsenseAccountsAlertsDelete({
    query: query,
    accountId: accountId,
    alertId: alertId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.error) {
    throw result.error;
  } else {
    return new hasuraSdk.JSONValue(result.data);
  }
}

/**
 * undefined
 * @request GET :/accounts/{accountId}/payments
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAccountsAdsenseAccountsPaymentsList(
  query: {
    /**
     * Data format for the response.
     */
    alt?: "csv" | "json";
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string;
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string;
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string;
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean;
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    quotaUser?: string;
    /**
     * Deprecated. Please use quotaUser instead.
     */
    userIp?: string;
  },
  /**
   * Account for which to retrieve the payments.
   */
  accountId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Payments> {
  const result = await api.accounts.adsenseAccountsPaymentsList({
    query: query,
    accountId: accountId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/accounts/{accountId}/reports
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAccountsAdsenseAccountsReportsGenerate(
  query: {
    /**
     * Data format for the response.
     */
    alt?: "csv" | "json";
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string;
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string;
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string;
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean;
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    quotaUser?: string;
    /**
     * Deprecated. Please use quotaUser instead.
     */
    userIp?: string;
    /**
     * Start of the date range to report on in "YYYY-MM-DD" format, inclusive.
     */
    startDate: string;
    /**
     * End of the date range to report on in "YYYY-MM-DD" format, inclusive.
     */
    endDate: string;
    /**
     * Optional currency to use when reporting on monetary metrics. Defaults to the account's currency if not set.
     */
    currency?: string;
    /**
     * Dimensions to base the report on.
     */
    dimension?: string[];
    /**
     * Filters to be run on the report.
     */
    filter?: string[];
    /**
     * Optional locale to use for translating report output to a local language. Defaults to "en_US" if not specified.
     */
    locale?: string;
    /**
     * The maximum number of rows of report data to return.
     */
    maxResults?: number;
    /**
     * Numeric columns to include in the report.
     */
    metric?: string[];
    /**
     * The name of a dimension or metric to sort the resulting report on, optionally prefixed with "+" to sort ascending or "-" to sort descending. If no prefix is specified, the column is sorted ascending.
     */
    sort?: string[];
    /**
     * Index of the first row of report data to return.
     */
    startIndex?: number;
    /**
     * Whether the report should be generated in the AdSense account's local timezone. If false default PST/PDT timezone will be used.
     */
    useTimezoneReporting?: boolean;
  },
  /**
   * Account upon which to report.
   */
  accountId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<AdsenseReportsGenerateResponse> {
  const result = await api.accounts.adsenseAccountsReportsGenerate({
    query: query,
    accountId: accountId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/accounts/{accountId}/reports/saved
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAccountsAdsenseAccountsReportsSavedList(
  query: {
    /**
     * Data format for the response.
     */
    alt?: "csv" | "json";
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string;
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string;
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string;
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean;
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    quotaUser?: string;
    /**
     * Deprecated. Please use quotaUser instead.
     */
    userIp?: string;
    /**
     * The maximum number of saved reports to include in the response, used for paging.
     */
    maxResults?: number;
    /**
     * A continuation token, used to page through saved reports. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.
     */
    pageToken?: string;
  },
  /**
   * Account to which the saved reports belong.
   */
  accountId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<SavedReports> {
  const result = await api.accounts.adsenseAccountsReportsSavedList({
    query: query,
    accountId: accountId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/accounts/{accountId}/reports/{savedReportId}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAccountsAdsenseAccountsReportsSavedGenerate(
  query: {
    /**
     * Data format for the response.
     */
    alt?: "csv" | "json";
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string;
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string;
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string;
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean;
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    quotaUser?: string;
    /**
     * Deprecated. Please use quotaUser instead.
     */
    userIp?: string;
    /**
     * Optional locale to use for translating report output to a local language. Defaults to "en_US" if not specified.
     */
    locale?: string;
    /**
     * The maximum number of rows of report data to return.
     */
    maxResults?: number;
    /**
     * Index of the first row of report data to return.
     */
    startIndex?: number;
  },
  /**
   * Account to which the saved reports belong.
   */
  accountId: string,
  /**
   * The saved report to retrieve.
   */
  savedReportId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<AdsenseReportsGenerateResponse> {
  const result = await api.accounts.adsenseAccountsReportsSavedGenerate({
    query: query,
    accountId: accountId,
    savedReportId: savedReportId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/accounts/{accountId}/savedadstyles
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAccountsAdsenseAccountsSavedadstylesList(
  query: {
    /**
     * Data format for the response.
     */
    alt?: "csv" | "json";
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string;
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string;
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string;
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean;
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    quotaUser?: string;
    /**
     * Deprecated. Please use quotaUser instead.
     */
    userIp?: string;
    /**
     * The maximum number of saved ad styles to include in the response, used for paging.
     */
    maxResults?: number;
    /**
     * A continuation token, used to page through saved ad styles. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.
     */
    pageToken?: string;
  },
  /**
   * Account for which to list saved ad styles.
   */
  accountId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<SavedAdStyles> {
  const result = await api.accounts.adsenseAccountsSavedadstylesList({
    query: query,
    accountId: accountId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/accounts/{accountId}/savedadstyles/{savedAdStyleId}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAccountsAdsenseAccountsSavedadstylesGet(
  query: {
    /**
     * Data format for the response.
     */
    alt?: "csv" | "json";
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string;
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string;
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string;
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean;
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    quotaUser?: string;
    /**
     * Deprecated. Please use quotaUser instead.
     */
    userIp?: string;
  },
  /**
   * Account for which to get the saved ad style.
   */
  accountId: string,
  /**
   * Saved ad style to retrieve.
   */
  savedAdStyleId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<SavedAdStyle> {
  const result = await api.accounts.adsenseAccountsSavedadstylesGet({
    query: query,
    accountId: accountId,
    savedAdStyleId: savedAdStyleId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/adclients
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAdclientsAdsenseAdclientsList(
  query: {
    /**
     * Data format for the response.
     */
    alt?: "csv" | "json";
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string;
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string;
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string;
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean;
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    quotaUser?: string;
    /**
     * Deprecated. Please use quotaUser instead.
     */
    userIp?: string;
    /**
     * The maximum number of ad clients to include in the response, used for paging.
     */
    maxResults?: number;
    /**
     * A continuation token, used to page through ad clients. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.
     */
    pageToken?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<AdClients> {
  const result = await api.adclients.adsenseAdclientsList({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/adclients/{adClientId}/adunits
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAdclientsAdsenseAdunitsList(
  query: {
    /**
     * Data format for the response.
     */
    alt?: "csv" | "json";
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string;
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string;
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string;
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean;
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    quotaUser?: string;
    /**
     * Deprecated. Please use quotaUser instead.
     */
    userIp?: string;
    /**
     * Whether to include inactive ad units. Default: true.
     */
    includeInactive?: boolean;
    /**
     * The maximum number of ad units to include in the response, used for paging.
     */
    maxResults?: number;
    /**
     * A continuation token, used to page through ad units. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.
     */
    pageToken?: string;
  },
  /**
   * Ad client for which to list ad units.
   */
  adClientId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<AdUnits> {
  const result = await api.adclients.adsenseAdunitsList({
    query: query,
    adClientId: adClientId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/adclients/{adClientId}/adunits/{adUnitId}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAdclientsAdsenseAdunitsGet(
  query: {
    /**
     * Data format for the response.
     */
    alt?: "csv" | "json";
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string;
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string;
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string;
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean;
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    quotaUser?: string;
    /**
     * Deprecated. Please use quotaUser instead.
     */
    userIp?: string;
  },
  /**
   * Ad client for which to get the ad unit.
   */
  adClientId: string,
  /**
   * Ad unit to retrieve.
   */
  adUnitId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<AdUnit> {
  const result = await api.adclients.adsenseAdunitsGet({
    query: query,
    adClientId: adClientId,
    adUnitId: adUnitId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/adclients/{adClientId}/adunits/{adUnitId}/adcode
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAdclientsAdsenseAdunitsGetAdCode(
  query: {
    /**
     * Data format for the response.
     */
    alt?: "csv" | "json";
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string;
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string;
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string;
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean;
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    quotaUser?: string;
    /**
     * Deprecated. Please use quotaUser instead.
     */
    userIp?: string;
  },
  /**
   * Ad client with contains the ad unit.
   */
  adClientId: string,
  /**
   * Ad unit to get the code for.
   */
  adUnitId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<AdCode> {
  const result = await api.adclients.adsenseAdunitsGetAdCode({
    query: query,
    adClientId: adClientId,
    adUnitId: adUnitId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/adclients/{adClientId}/adunits/{adUnitId}/customchannels
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAdclientsAdsenseAdunitsCustomchannelsList(
  query: {
    /**
     * Data format for the response.
     */
    alt?: "csv" | "json";
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string;
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string;
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string;
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean;
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    quotaUser?: string;
    /**
     * Deprecated. Please use quotaUser instead.
     */
    userIp?: string;
    /**
     * The maximum number of custom channels to include in the response, used for paging.
     */
    maxResults?: number;
    /**
     * A continuation token, used to page through custom channels. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.
     */
    pageToken?: string;
  },
  /**
   * Ad client which contains the ad unit.
   */
  adClientId: string,
  /**
   * Ad unit for which to list custom channels.
   */
  adUnitId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<CustomChannels> {
  const result = await api.adclients.adsenseAdunitsCustomchannelsList({
    query: query,
    adClientId: adClientId,
    adUnitId: adUnitId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/adclients/{adClientId}/customchannels
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAdclientsAdsenseCustomchannelsList(
  query: {
    /**
     * Data format for the response.
     */
    alt?: "csv" | "json";
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string;
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string;
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string;
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean;
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    quotaUser?: string;
    /**
     * Deprecated. Please use quotaUser instead.
     */
    userIp?: string;
    /**
     * The maximum number of custom channels to include in the response, used for paging.
     */
    maxResults?: number;
    /**
     * A continuation token, used to page through custom channels. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.
     */
    pageToken?: string;
  },
  /**
   * Ad client for which to list custom channels.
   */
  adClientId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<CustomChannels> {
  const result = await api.adclients.adsenseCustomchannelsList({
    query: query,
    adClientId: adClientId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/adclients/{adClientId}/customchannels/{customChannelId}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAdclientsAdsenseCustomchannelsGet(
  query: {
    /**
     * Data format for the response.
     */
    alt?: "csv" | "json";
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string;
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string;
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string;
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean;
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    quotaUser?: string;
    /**
     * Deprecated. Please use quotaUser instead.
     */
    userIp?: string;
  },
  /**
   * Ad client which contains the custom channel.
   */
  adClientId: string,
  /**
   * Custom channel to retrieve.
   */
  customChannelId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<CustomChannel> {
  const result = await api.adclients.adsenseCustomchannelsGet({
    query: query,
    adClientId: adClientId,
    customChannelId: customChannelId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/adclients/{adClientId}/customchannels/{customChannelId}/adunits
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAdclientsAdsenseCustomchannelsAdunitsList(
  query: {
    /**
     * Data format for the response.
     */
    alt?: "csv" | "json";
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string;
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string;
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string;
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean;
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    quotaUser?: string;
    /**
     * Deprecated. Please use quotaUser instead.
     */
    userIp?: string;
    /**
     * Whether to include inactive ad units. Default: true.
     */
    includeInactive?: boolean;
    /**
     * The maximum number of ad units to include in the response, used for paging.
     */
    maxResults?: number;
    /**
     * A continuation token, used to page through ad units. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.
     */
    pageToken?: string;
  },
  /**
   * Ad client which contains the custom channel.
   */
  adClientId: string,
  /**
   * Custom channel for which to list ad units.
   */
  customChannelId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<AdUnits> {
  const result = await api.adclients.adsenseCustomchannelsAdunitsList({
    query: query,
    adClientId: adClientId,
    customChannelId: customChannelId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/adclients/{adClientId}/urlchannels
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAdclientsAdsenseUrlchannelsList(
  query: {
    /**
     * Data format for the response.
     */
    alt?: "csv" | "json";
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string;
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string;
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string;
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean;
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    quotaUser?: string;
    /**
     * Deprecated. Please use quotaUser instead.
     */
    userIp?: string;
    /**
     * The maximum number of URL channels to include in the response, used for paging.
     */
    maxResults?: number;
    /**
     * A continuation token, used to page through URL channels. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.
     */
    pageToken?: string;
  },
  /**
   * Ad client for which to list URL channels.
   */
  adClientId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<UrlChannels> {
  const result = await api.adclients.adsenseUrlchannelsList({
    query: query,
    adClientId: adClientId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/alerts
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAlertsAdsenseAlertsList(
  query: {
    /**
     * Data format for the response.
     */
    alt?: "csv" | "json";
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string;
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string;
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string;
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean;
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    quotaUser?: string;
    /**
     * Deprecated. Please use quotaUser instead.
     */
    userIp?: string;
    /**
     * The locale to use for translating alert messages. The account locale will be used if this is not supplied. The AdSense default (English) will be used if the supplied locale is invalid or unsupported.
     */
    locale?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Alerts> {
  const result = await api.alerts.adsenseAlertsList({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request DELETE :/alerts/{alertId}
 * @allowrelaxedtypes
 */
export async function deleteAlertsAdsenseAlertsDelete(
  query: {
    /**
     * Data format for the response.
     */
    alt?: "csv" | "json";
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string;
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string;
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string;
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean;
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    quotaUser?: string;
    /**
     * Deprecated. Please use quotaUser instead.
     */
    userIp?: string;
  },
  /**
   * Alert to delete.
   */
  alertId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.alerts.adsenseAlertsDelete({
    query: query,
    alertId: alertId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.error) {
    throw result.error;
  } else {
    return new hasuraSdk.JSONValue(result.data);
  }
}

/**
 * undefined
 * @request GET :/metadata/dimensions
 * @allowrelaxedtypes
 * @readonly
 */
export async function getMetadataAdsenseMetadataDimensionsList(
  query: {
    /**
     * Data format for the response.
     */
    alt?: "csv" | "json";
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string;
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string;
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string;
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean;
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    quotaUser?: string;
    /**
     * Deprecated. Please use quotaUser instead.
     */
    userIp?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Metadata> {
  const result = await api.metadata.adsenseMetadataDimensionsList({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/metadata/metrics
 * @allowrelaxedtypes
 * @readonly
 */
export async function getMetadataAdsenseMetadataMetricsList(
  query: {
    /**
     * Data format for the response.
     */
    alt?: "csv" | "json";
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string;
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string;
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string;
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean;
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    quotaUser?: string;
    /**
     * Deprecated. Please use quotaUser instead.
     */
    userIp?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Metadata> {
  const result = await api.metadata.adsenseMetadataMetricsList({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/payments
 * @allowrelaxedtypes
 * @readonly
 */
export async function getPaymentsAdsensePaymentsList(
  query: {
    /**
     * Data format for the response.
     */
    alt?: "csv" | "json";
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string;
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string;
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string;
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean;
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    quotaUser?: string;
    /**
     * Deprecated. Please use quotaUser instead.
     */
    userIp?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Payments> {
  const result = await api.payments.adsensePaymentsList({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/reports
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReportsAdsenseReportsGenerate(
  query: {
    /**
     * Data format for the response.
     */
    alt?: "csv" | "json";
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string;
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string;
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string;
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean;
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    quotaUser?: string;
    /**
     * Deprecated. Please use quotaUser instead.
     */
    userIp?: string;
    /**
     * Start of the date range to report on in "YYYY-MM-DD" format, inclusive.
     */
    startDate: string;
    /**
     * End of the date range to report on in "YYYY-MM-DD" format, inclusive.
     */
    endDate: string;
    /**
     * Accounts upon which to report.
     */
    accountId?: string[];
    /**
     * Optional currency to use when reporting on monetary metrics. Defaults to the account's currency if not set.
     */
    currency?: string;
    /**
     * Dimensions to base the report on.
     */
    dimension?: string[];
    /**
     * Filters to be run on the report.
     */
    filter?: string[];
    /**
     * Optional locale to use for translating report output to a local language. Defaults to "en_US" if not specified.
     */
    locale?: string;
    /**
     * The maximum number of rows of report data to return.
     */
    maxResults?: number;
    /**
     * Numeric columns to include in the report.
     */
    metric?: string[];
    /**
     * The name of a dimension or metric to sort the resulting report on, optionally prefixed with "+" to sort ascending or "-" to sort descending. If no prefix is specified, the column is sorted ascending.
     */
    sort?: string[];
    /**
     * Index of the first row of report data to return.
     */
    startIndex?: number;
    /**
     * Whether the report should be generated in the AdSense account's local timezone. If false default PST/PDT timezone will be used.
     */
    useTimezoneReporting?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<AdsenseReportsGenerateResponse> {
  const result = await api.reports.adsenseReportsGenerate({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/reports/saved
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReportsAdsenseReportsSavedList(
  query: {
    /**
     * Data format for the response.
     */
    alt?: "csv" | "json";
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string;
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string;
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string;
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean;
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    quotaUser?: string;
    /**
     * Deprecated. Please use quotaUser instead.
     */
    userIp?: string;
    /**
     * The maximum number of saved reports to include in the response, used for paging.
     */
    maxResults?: number;
    /**
     * A continuation token, used to page through saved reports. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.
     */
    pageToken?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<SavedReports> {
  const result = await api.reports.adsenseReportsSavedList({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/reports/{savedReportId}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReportsAdsenseReportsSavedGenerate(
  query: {
    /**
     * Data format for the response.
     */
    alt?: "csv" | "json";
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string;
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string;
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string;
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean;
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    quotaUser?: string;
    /**
     * Deprecated. Please use quotaUser instead.
     */
    userIp?: string;
    /**
     * Optional locale to use for translating report output to a local language. Defaults to "en_US" if not specified.
     */
    locale?: string;
    /**
     * The maximum number of rows of report data to return.
     */
    maxResults?: number;
    /**
     * Index of the first row of report data to return.
     */
    startIndex?: number;
  },
  /**
   * The saved report to retrieve.
   */
  savedReportId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<AdsenseReportsGenerateResponse> {
  const result = await api.reports.adsenseReportsSavedGenerate({
    query: query,
    savedReportId: savedReportId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/savedadstyles
 * @allowrelaxedtypes
 * @readonly
 */
export async function getSavedadstylesAdsenseSavedadstylesList(
  query: {
    /**
     * Data format for the response.
     */
    alt?: "csv" | "json";
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string;
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string;
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string;
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean;
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    quotaUser?: string;
    /**
     * Deprecated. Please use quotaUser instead.
     */
    userIp?: string;
    /**
     * The maximum number of saved ad styles to include in the response, used for paging.
     */
    maxResults?: number;
    /**
     * A continuation token, used to page through saved ad styles. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.
     */
    pageToken?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<SavedAdStyles> {
  const result = await api.savedadstyles.adsenseSavedadstylesList({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * undefined
 * @request GET :/savedadstyles/{savedAdStyleId}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getSavedadstylesAdsenseSavedadstylesGet(
  query: {
    /**
     * Data format for the response.
     */
    alt?: "csv" | "json";
    /**
     * Selector specifying which fields to include in a partial response.
     */
    fields?: string;
    /**
     * API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     */
    key?: string;
    /**
     * OAuth 2.0 token for the current user.
     */
    oauth_token?: string;
    /**
     * Returns response with indentations and line breaks.
     */
    prettyPrint?: boolean;
    /**
     * An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
     */
    quotaUser?: string;
    /**
     * Deprecated. Please use quotaUser instead.
     */
    userIp?: string;
  },
  /**
   * Saved ad style to retrieve.
   */
  savedAdStyleId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<SavedAdStyle> {
  const result = await api.savedadstyles.adsenseSavedadstylesGet({
    query: query,
    savedAdStyleId: savedAdStyleId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}
