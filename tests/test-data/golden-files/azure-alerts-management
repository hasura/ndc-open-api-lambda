import * as hasuraSdk from "@hasura/ndc-lambda-sdk";
import { AlertRule, AlertRulePatchObject, AlertRulesList, Api } from "./api";

const api = new Api({
  baseUrl: "",
});

/**
 * @request GET :/subscriptions/{subscriptionId}/providers/microsoft.alertsManagement/smartDetectorAlertRules
 * @readonly
 */
export async function getSubscriptionsSmartDetectorAlertRulesList(
  /** The ID of the target subscription. */
  subscriptionId: string,
  query: {
    /** Client Api Version. */
    "api-version": string;
    /** Indicates if Smart Detector should be expanded. */
    expandDetector?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<AlertRulesList> {
  const result = await api.subscriptions.smartDetectorAlertRulesList({
    subscriptionId: subscriptionId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request GET :/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.alertsManagement/smartDetectorAlertRules
 * @readonly
 */
export async function getSubscriptionsSmartDetectorAlertRulesListByResourceGroup(
  subscriptionId: string,
  /** The name of the resource group. */
  resourceGroupName: string,
  query: {
    /** Client Api Version. */
    "api-version": string;
    /** Indicates if Smart Detector should be expanded. */
    expandDetector?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<AlertRulesList> {
  const result =
    await api.subscriptions.smartDetectorAlertRulesListByResourceGroup({
      subscriptionId: subscriptionId,
      resourceGroupName: resourceGroupName,
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request DELETE :/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.alertsManagement/smartDetectorAlertRules/{alertRuleName}
 */
export async function deleteSubscriptionsSmartDetectorAlertRulesDelete(
  subscriptionId: string,
  resourceGroupName: string,
  /** The name of the alert rule. */
  alertRuleName: string,
  query: {
    /** Client Api Version. */
    "api-version": string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.subscriptions.smartDetectorAlertRulesDelete({
    subscriptionId: subscriptionId,
    resourceGroupName: resourceGroupName,
    alertRuleName: alertRuleName,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request GET :/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.alertsManagement/smartDetectorAlertRules/{alertRuleName}
 * @readonly
 */
export async function getSubscriptionsSmartDetectorAlertRulesGet(
  subscriptionId: string,
  resourceGroupName: string,
  alertRuleName: string,
  query: {
    /** Client Api Version. */
    "api-version": string;
    /** Indicates if Smart Detector should be expanded. */
    expandDetector?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<AlertRule> {
  const result = await api.subscriptions.smartDetectorAlertRulesGet({
    subscriptionId: subscriptionId,
    resourceGroupName: resourceGroupName,
    alertRuleName: alertRuleName,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request PATCH :/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.alertsManagement/smartDetectorAlertRules/{alertRuleName}
 * @allowrelaxedtypes
 */
export async function patchSubscriptionsSmartDetectorAlertRulesPatch(
  subscriptionId: string,
  resourceGroupName: string,
  alertRuleName: string,
  query: {
    /** Client Api Version. */
    "api-version": string;
  },
  /** Request body */
  parameters: AlertRulePatchObject,
  headers?: hasuraSdk.JSONValue,
): Promise<AlertRule> {
  const result = await api.subscriptions.smartDetectorAlertRulesPatch({
    subscriptionId: subscriptionId,
    resourceGroupName: resourceGroupName,
    alertRuleName: alertRuleName,
    query: query,
    parameters: parameters,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request PUT :/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.alertsManagement/smartDetectorAlertRules/{alertRuleName}
 * @allowrelaxedtypes
 */
export async function putSubscriptionsSmartDetectorAlertRulesCreateOrUpdate(
  subscriptionId: string,
  resourceGroupName: string,
  alertRuleName: string,
  query: {
    /** Client Api Version. */
    "api-version": string;
  },
  /** Request body */
  parameters: AlertRule,
  headers?: hasuraSdk.JSONValue,
): Promise<AlertRule> {
  const result = await api.subscriptions.smartDetectorAlertRulesCreateOrUpdate({
    subscriptionId: subscriptionId,
    resourceGroupName: resourceGroupName,
    alertRuleName: alertRuleName,
    query: query,
    parameters: parameters,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}
