import * as hasuraSdk from "@hasura/ndc-lambda-sdk";
import {
  AccessRequester,
  Api,
  ApplicationSetting,
  AwardEmoji,
  BasicProjectDetails,
  Board,
  Build,
  CommitNote,
  CommitStatus,
  Compare,
  Contributor,
  Deployment,
  Email,
  Environment,
  Event,
  GlobalNotificationSetting,
  Group,
  GroupDetail,
  Hook,
  Issue,
  Label,
  List,
  MRNote,
  Member,
  MergeRequest,
  MergeRequestChanges,
  MergeRequestDiff,
  MergeRequestDiffFull,
  Milestone,
  Namespace,
  Note,
  NotificationSetting,
  PersonalSnippet,
  Pipeline,
  Project,
  ProjectGroupLink,
  ProjectHook,
  ProjectService,
  ProjectSnippet,
  ProjectWithAccess,
  Release,
  RepoBranch,
  RepoCommit,
  RepoCommitDetail,
  RepoLicense,
  RepoTag,
  RepoTreeObject,
  Runner,
  RunnerDetails,
  SSHKey,
  SSHKeyWithUser,
  Template,
  TemplatesList,
  Todo,
  Trigger,
  TriggerRequest,
  UserBasic,
  UserPublic,
  UserWithPrivateToken,
  Variable,
} from "./api";

const api = new Api({
  baseUrl: `${process.env.NDC_OAS_BASE_URL}`,
});

/**
 * Get the current application settings
 * @request GET :/v3/application/settings
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ApplicationSettings(
  headers?: hasuraSdk.JSONValue,
): Promise<ApplicationSetting> {
  const result = await api.v3.getV3ApplicationSettings({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Modify application settings
 * @request PUT :/v3/application/settings
 * @allowrelaxedtypes
 */
export async function putV3PutV3ApplicationSettings(
  /** Request body */
  data: {
    /**
     * Determine if developers can push to master
     * @format int32
     */
    default_branch_protection?: 0 | 1 | 2;
    /**
     * The default project visibility
     * @format int32
     */
    default_project_visibility?: 0 | 10 | 20;
    /**
     * The default snippet visibility
     * @format int32
     */
    default_snippet_visibility?: 0 | 10 | 20;
    /**
     * The default group visibility
     * @format int32
     */
    default_group_visibility?: 0 | 10 | 20;
    /** Selected levels cannot be used by non-admin users for projects or snippets. If the public level is restricted, user profiles are only visible to logged in users. */
    restricted_visibility_levels?: string[];
    /** Enabled sources for code import during project creation. OmniAuth must be configured for GitHub, Bitbucket, and GitLab.com */
    import_sources?:
      | "github"
      | "bitbucket"
      | "gitlab"
      | "google_code"
      | "fogbugz"
      | "git"
      | "gitlab_project";
    /** Disable certain OAuth sign-in sources */
    disabled_oauth_sign_in_sources?: string[];
    /** Allow only the selected protocols to be used for Git access. */
    enabled_git_access_protocol?: "ssh" | "http" | "nil";
    /** Flag indicating if the Gravatar service is enabled */
    gravatar_enabled?: boolean;
    /**
     * The maximum number of personal projects
     * @format int32
     */
    default_projects_limit?: number;
    /**
     * Maximum attachment size in MB
     * @format int32
     */
    max_attachment_size?: number;
    /**
     * Session duration in minutes. GitLab restart is required to apply changes.
     * @format int32
     */
    session_expire_delay?: number;
    /** Allow users to register any application to use GitLab as an OAuth provider */
    user_oauth_applications?: boolean;
    /** Newly registered users will by default be external */
    user_default_external?: boolean;
    /** Flag indicating if sign up is enabled */
    signup_enabled?: boolean;
    /** Send confirmation email on sign-up */
    send_user_confirmation_email?: boolean;
    /** ONLY users with e-mail addresses that match these domain(s) will be able to sign-up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com */
    domain_whitelist?: string;
    /** Enable domain blacklist for sign ups */
    domain_blacklist_enabled?: boolean;
    /** Users with e-mail addresses that match these domain(s) will NOT be able to sign-up. Wildcards allowed. Use separate lines for multiple entries. Ex: domain.com, *.domain.com */
    domain_blacklist: string;
    /** Text shown after sign up */
    after_sign_up_text?: string;
    /** Flag indicating if sign in is enabled */
    signin_enabled?: boolean;
    /** Require all users to setup Two-factor authentication */
    require_two_factor_authentication?: boolean;
    /**
     * Amount of time (in hours) that users are allowed to skip forced configuration of two-factor authentication
     * @format int32
     */
    two_factor_grace_period: number;
    /** We will redirect non-logged in users to this page */
    home_page_url?: string;
    /** We will redirect users to this page after they sign out */
    after_sign_out_path?: string;
    /** The sign in text of the GitLab application */
    sign_in_text?: string;
    /** Custom text displayed on the help page */
    help_page_text?: string;
    /** Enable shared runners for new projects */
    shared_runners_enabled?: boolean;
    /** Shared runners text  */
    shared_runners_text: string;
    /**
     * Set the maximum file size each build's artifacts can have
     * @format int32
     */
    max_artifacts_size?: number;
    /**
     * Authorization token duration (minutes)
     * @format int32
     */
    container_registry_token_expire_delay?: number;
    /** Enable the InfluxDB metrics */
    metrics_enabled?: boolean;
    /** The InfluxDB host */
    metrics_host: string;
    /**
     * The UDP port to use for connecting to InfluxDB
     * @format int32
     */
    metrics_port: number;
    /**
     * The amount of InfluxDB connections to open
     * @format int32
     */
    metrics_pool_size: number;
    /**
     * The amount of seconds after which an InfluxDB connection will time out
     * @format int32
     */
    metrics_timeout: number;
    /**
     * A method call is only tracked when it takes longer to complete than the given amount of milliseconds.
     * @format int32
     */
    metrics_method_call_threshold: number;
    /**
     * The sampling interval in seconds
     * @format int32
     */
    metrics_sample_interval: number;
    /**
     * The amount of points to store in a single UDP packet
     * @format int32
     */
    metrics_packet_size: number;
    /** Enable Sidekiq Job Throttling */
    sidekiq_throttling_enabled?: boolean;
    /** Choose which queues you wish to throttle */
    sidekiq_throttling_queus: string[];
    /**
     * The factor by which the queues should be throttled. A value between 0.0 and 1.0, exclusive.
     * @format float
     */
    sidekiq_throttling_factor: number;
    /** Helps prevent bots from creating accounts */
    recaptcha_enabled?: boolean;
    /** Generate site key at http://www.google.com/recaptcha */
    recaptcha_site_key: string;
    /** Generate private key at http://www.google.com/recaptcha */
    recaptcha_private_key: string;
    /** Helps prevent bots from creating issues */
    akismet_enabled?: boolean;
    /** Generate API key at http://www.akismet.com */
    akismet_api_key: string;
    /** Abuse reports will be sent to this address if it is set. Abuse reports are always available in the admin area. */
    admin_notification_email?: string;
    /** Sentry is an error reporting and logging tool which is currently not shipped with GitLab, get it here: https://getsentry.com */
    sentry_enabled?: boolean;
    /** Sentry Data Source Name */
    sentry_dsn: string;
    /** Storage paths for new projects */
    repository_storage?: string;
    /** GitLab will periodically run 'git fsck' in all project and wiki repositories to look for silent disk corruption issues. */
    repository_checks_enabled?: boolean;
    /** Enable Koding */
    koding_enabled?: boolean;
    /** The Koding team URL */
    koding_url: string;
    /** Enable PlantUML */
    plantuml_enabled?: boolean;
    /** The PlantUML server URL */
    plantuml_url: string;
    /** Let GitLab inform you when an update is available. */
    version_check_enabled?: boolean;
    /** Some email servers do not support overriding the email sender name. Enable this option to include the name of the author of the issue, merge request or comment in the email body instead. */
    email_author_in_body?: boolean;
    /** By default GitLab sends emails in HTML and plain text formats so mail clients can choose what format to use. Disable this option if you only want to send emails in plain text format. */
    html_emails_enabled?: boolean;
    /** Enable automatic repository housekeeping (git repack, git gc) */
    housekeeping_enabled?: boolean;
    /** Creating pack file bitmaps makes housekeeping take a little longer but bitmaps should accelerate 'git clone' performance. */
    housekeeping_bitmaps_enabled: boolean;
    /**
     * Number of Git pushes after which an incremental 'git repack' is run.
     * @format int32
     */
    housekeeping_incremental_repack_period: number;
    /**
     * Number of Git pushes after which a full 'git repack' is run.
     * @format int32
     */
    housekeeping_full_repack_period: number;
    /**
     * Number of Git pushes after which 'git gc' is run.
     * @format int32
     */
    housekeeping_gc_period: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<ApplicationSetting> {
  const result = await api.v3.putV3ApplicationSettings({
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Validation of .gitlab-ci.yml content
 * @request POST :/v3/ci/lint
 * @allowrelaxedtypes
 */
export async function postV3PostV3CiLint(
  /** Request body */
  data: {
    /** Content of .gitlab-ci.yml */
    content: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.postV3CiLint({
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request GET :/v3/deploy_keys
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3DeployKeys(
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.getV3DeployKeys({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the list of the available template
 * @request GET :/v3/dockerfiles
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3Dockerfiles(
  headers?: hasuraSdk.JSONValue,
): Promise<TemplatesList> {
  const result = await api.v3.getV3Dockerfiles({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the text for a specific template present in local filesystem
 * @request GET :/v3/dockerfiles/{name}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3DockerfilesName(
  /** The name of the template */
  name: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Template> {
  const result = await api.v3.getV3DockerfilesName({
    name: name,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the list of the available template
 * @request GET :/v3/gitignores
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3Gitignores(
  headers?: hasuraSdk.JSONValue,
): Promise<TemplatesList> {
  const result = await api.v3.getV3Gitignores({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the text for a specific template present in local filesystem
 * @request GET :/v3/gitignores/{name}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3GitignoresName(
  /** The name of the template */
  name: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Template> {
  const result = await api.v3.getV3GitignoresName({
    name: name,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the list of the available template
 * @request GET :/v3/gitlab_ci_ymls
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3GitlabCiYmls(
  headers?: hasuraSdk.JSONValue,
): Promise<TemplatesList> {
  const result = await api.v3.getV3GitlabCiYmls({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the text for a specific template present in local filesystem
 * @request GET :/v3/gitlab_ci_ymls/{name}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3GitlabCiYmlsName(
  /** The name of the template */
  name: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Template> {
  const result = await api.v3.getV3GitlabCiYmlsName({
    name: name,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a groups list
 * @request GET :/v3/groups
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3Groups(
  query: {
    /** Include project statistics */
    statistics?: boolean;
    /** Show all group that you have access to */
    all_available?: boolean;
    /** Search for a specific group */
    search?: string;
    /** Order by name or path */
    order_by?: "name" | "path";
    /** Sort by asc (ascending) or desc (descending) */
    sort?: "asc" | "desc";
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  /** Request body */
  data: {
    /** Array of group ids to exclude from list */
    skip_groups?: number[];
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Group> {
  const result = await api.v3.getV3Groups({
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a group. Available only for users who can create groups.
 * @request POST :/v3/groups
 * @allowrelaxedtypes
 */
export async function postV3PostV3Groups(
  /** Request body */
  data: {
    /** The name of the group */
    name: string;
    /** The path of the group */
    path: string;
    /** The description of the group */
    description?: string;
    /**
     * The visibility level of the group
     * @format int32
     */
    visibility_level?: number;
    /** Enable/disable LFS for the projects in this group */
    lfs_enabled?: boolean;
    /** Allow users to request member access */
    request_access_enabled?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Group> {
  const result = await api.v3.postV3Groups({
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get list of owned groups for authenticated user
 * @request GET :/v3/groups/owned
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3GroupsOwned(
  query: {
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
    /** Include project statistics */
    statistics?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Group> {
  const result = await api.v3.getV3GroupsOwned({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Remove a group.
 * @request DELETE :/v3/groups/{id}
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3GroupsId(
  /** The ID of a group */
  id: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.deleteV3GroupsId({
    id: id,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a single group, with containing projects.
 * @request GET :/v3/groups/{id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3GroupsId(
  /** The ID of a group */
  id: string,
  headers?: hasuraSdk.JSONValue,
): Promise<GroupDetail> {
  const result = await api.v3.getV3GroupsId({
    id: id,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update a group. Available only for users who can administrate groups.
 * @request PUT :/v3/groups/{id}
 * @allowrelaxedtypes
 */
export async function putV3PutV3GroupsId(
  /** The ID of a group */
  id: string,
  /** Request body */
  data: {
    /** The name of the group */
    name?: string;
    /** The path of the group */
    path?: string;
    /** The description of the group */
    description?: string;
    /**
     * The visibility level of the group
     * @format int32
     */
    visibility_level?: number;
    /** Enable/disable LFS for the projects in this group */
    lfs_enabled?: boolean;
    /** Allow users to request member access */
    request_access_enabled?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Group> {
  const result = await api.v3.putV3GroupsId({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Gets a list of access requests for a group.
 * @request GET :/v3/groups/{id}/access_requests
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3GroupsIdAccessRequests(
  /** The group ID */
  id: string,
  query: {
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<AccessRequester> {
  const result = await api.v3.getV3GroupsIdAccessRequests({
    id: id,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Requests access for the authenticated user to a group.
 * @request POST :/v3/groups/{id}/access_requests
 * @allowrelaxedtypes
 */
export async function postV3PostV3GroupsIdAccessRequests(
  /** The group ID */
  id: string,
  headers?: hasuraSdk.JSONValue,
): Promise<AccessRequester> {
  const result = await api.v3.postV3GroupsIdAccessRequests({
    id: id,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Denies an access request for the given user.
 * @request DELETE :/v3/groups/{id}/access_requests/{user_id}
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3GroupsIdAccessRequestsUserId(
  /** The group ID */
  id: string,
  /** The user ID of the access requester */
  userId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.deleteV3GroupsIdAccessRequestsUserId({
    id: id,
    userId: userId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Approves an access request for the given user.
 * @request PUT :/v3/groups/{id}/access_requests/{user_id}/approve
 * @allowrelaxedtypes
 */
export async function putV3PutV3GroupsIdAccessRequestsUserIdApprove(
  /** The group ID */
  id: string,
  /** The user ID of the access requester */
  userId: number,
  /** Request body */
  data: {
    /**
     * A valid access level (defaults: `30`, developer access level)
     * @format int32
     */
    access_level?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Member> {
  const result = await api.v3.putV3GroupsIdAccessRequestsUserIdApprove({
    id: id,
    userId: userId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a list of group issues
 * @request GET :/v3/groups/{id}/issues
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3GroupsIdIssues(
  /** The ID of a group */
  id: string,
  query: {
    /** Return opened, closed, or all issues */
    state?: "opened" | "closed" | "all";
    /** Comma-separated list of label names */
    labels?: string;
    /** Return issues for a specific milestone */
    milestone?: string;
    /** Return issues ordered by `created_at` or `updated_at` fields. */
    order_by?: "created_at" | "updated_at";
    /** Return issues sorted in `asc` or `desc` order. */
    sort?: "asc" | "desc";
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Issue> {
  const result = await api.v3.getV3GroupsIdIssues({
    id: id,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Gets a list of group or project members viewable by the authenticated user.
 * @request GET :/v3/groups/{id}/members
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3GroupsIdMembers(
  /** The group ID */
  id: string,
  query: {
    /** A query string to search for members */
    query?: string;
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Member> {
  const result = await api.v3.getV3GroupsIdMembers({
    id: id,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Adds a member to a group or project.
 * @request POST :/v3/groups/{id}/members
 * @allowrelaxedtypes
 */
export async function postV3PostV3GroupsIdMembers(
  /** The group ID */
  id: string,
  /** Request body */
  data: {
    /**
     * The user ID of the new member
     * @format int32
     */
    user_id: number;
    /**
     * A valid access level (defaults: `30`, developer access level)
     * @format int32
     */
    access_level: number;
    /**
     * Date string in the format YEAR-MONTH-DAY
     * @format date-time
     */
    expires_at?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Member> {
  const result = await api.v3.postV3GroupsIdMembers({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Removes a user from a group or project.
 * @request DELETE :/v3/groups/{id}/members/{user_id}
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3GroupsIdMembersUserId(
  /** The group ID */
  id: string,
  /** The user ID of the member */
  userId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.deleteV3GroupsIdMembersUserId({
    id: id,
    userId: userId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Gets a member of a group or project.
 * @request GET :/v3/groups/{id}/members/{user_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3GroupsIdMembersUserId(
  /** The group ID */
  id: string,
  /** The user ID of the member */
  userId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Member> {
  const result = await api.v3.getV3GroupsIdMembersUserId({
    id: id,
    userId: userId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Updates a member of a group or project.
 * @request PUT :/v3/groups/{id}/members/{user_id}
 * @allowrelaxedtypes
 */
export async function putV3PutV3GroupsIdMembersUserId(
  /** The group ID */
  id: string,
  /** The user ID of the new member */
  userId: number,
  /** Request body */
  data: {
    /**
     * A valid access level
     * @format int32
     */
    access_level: number;
    /**
     * Date string in the format YEAR-MONTH-DAY
     * @format date-time
     */
    expires_at?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Member> {
  const result = await api.v3.putV3GroupsIdMembersUserId({
    id: id,
    userId: userId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get group level notification level settings, defaults to Global
 * @request GET :/v3/groups/{id}/notification_settings
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3GroupsIdNotificationSettings(
  /** The group ID or project ID or project NAMESPACE/PROJECT_NAME */
  id: string,
  headers?: hasuraSdk.JSONValue,
): Promise<NotificationSetting> {
  const result = await api.v3.getV3GroupsIdNotificationSettings({
    id: id,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update group level notification level settings, defaults to Global
 * @request PUT :/v3/groups/{id}/notification_settings
 * @allowrelaxedtypes
 */
export async function putV3PutV3GroupsIdNotificationSettings(
  /** The group ID or project ID or project NAMESPACE/PROJECT_NAME */
  id: string,
  /** Request body */
  data: {
    /** The group notification level */
    level?: string;
    /** Enable/disable this notification */
    new_note?: boolean;
    /** Enable/disable this notification */
    new_issue?: boolean;
    /** Enable/disable this notification */
    reopen_issue?: boolean;
    /** Enable/disable this notification */
    close_issue?: boolean;
    /** Enable/disable this notification */
    reassign_issue?: boolean;
    /** Enable/disable this notification */
    new_merge_request?: boolean;
    /** Enable/disable this notification */
    reopen_merge_request?: boolean;
    /** Enable/disable this notification */
    close_merge_request?: boolean;
    /** Enable/disable this notification */
    reassign_merge_request?: boolean;
    /** Enable/disable this notification */
    merge_merge_request?: boolean;
    /** Enable/disable this notification */
    failed_pipeline?: boolean;
    /** Enable/disable this notification */
    success_pipeline?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<NotificationSetting> {
  const result = await api.v3.putV3GroupsIdNotificationSettings({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a list of projects in this group.
 * @request GET :/v3/groups/{id}/projects
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3GroupsIdProjects(
  /** The ID of a group */
  id: string,
  query: {
    /** Limit by archived status */
    archived?: boolean;
    /** Limit by visibility */
    visibility?: "public" | "internal" | "private";
    /** Return list of authorized projects matching the search criteria */
    search?: string;
    /** Return projects ordered by field */
    order_by?:
      | "id"
      | "name"
      | "path"
      | "created_at"
      | "updated_at"
      | "last_activity_at";
    /** Return projects sorted in ascending and descending order */
    sort?: "asc" | "desc";
    /** Return only the ID, URL, name, and path of each project */
    simple?: boolean;
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Project> {
  const result = await api.v3.getV3GroupsIdProjects({
    id: id,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Transfer a project to the group namespace. Available only for admin.
 * @request POST :/v3/groups/{id}/projects/{project_id}
 * @allowrelaxedtypes
 */
export async function postV3PostV3GroupsIdProjectsProjectId(
  /** The ID of a group */
  id: string,
  /** The ID or path of the project */
  projectId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<GroupDetail> {
  const result = await api.v3.postV3GroupsIdProjectsProjectId({
    id: id,
    projectId: projectId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the list of system hooks
 * @request GET :/v3/hooks
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3Hooks(
  headers?: hasuraSdk.JSONValue,
): Promise<Hook> {
  const result = await api.v3.getV3Hooks({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a new system hook
 * @request POST :/v3/hooks
 * @allowrelaxedtypes
 */
export async function postV3PostV3Hooks(
  /** Request body */
  data: {
    /** The URL to send the request to */
    url: string;
    /** The token used to validate payloads */
    token?: string;
    /** Trigger hook on push events */
    push_events?: boolean;
    /** Trigger hook on tag push events */
    tag_push_events?: boolean;
    /** Do SSL verification when triggering the hook */
    enable_ssl_verification?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Hook> {
  const result = await api.v3.postV3Hooks({
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a hook
 * @request DELETE :/v3/hooks/{id}
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3HooksId(
  /** The ID of the system hook */
  id: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Hook> {
  const result = await api.v3.deleteV3HooksId({
    id: id,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Test a hook
 * @request GET :/v3/hooks/{id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3HooksId(
  /** The ID of the system hook */
  id: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Hook> {
  const result = await api.v3.getV3HooksId({
    id: id,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request POST :/v3/internal/allowed
 * @allowrelaxedtypes
 */
export async function postV3PostV3InternalAllowed(
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.postV3InternalAllowed({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request GET :/v3/internal/broadcast_message
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3InternalBroadcastMessage(
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.getV3InternalBroadcastMessage({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request GET :/v3/internal/check
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3InternalCheck(
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.getV3InternalCheck({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request GET :/v3/internal/discover
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3InternalDiscover(
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.getV3InternalDiscover({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request POST :/v3/internal/lfs_authenticate
 * @allowrelaxedtypes
 */
export async function postV3PostV3InternalLfsAuthenticate(
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.postV3InternalLfsAuthenticate({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request GET :/v3/internal/merge_request_urls
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3InternalMergeRequestUrls(
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.getV3InternalMergeRequestUrls({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request POST :/v3/internal/two_factor_recovery_codes
 * @allowrelaxedtypes
 */
export async function postV3PostV3InternalTwoFactorRecoveryCodes(
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.postV3InternalTwoFactorRecoveryCodes({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get currently authenticated user's issues
 * @request GET :/v3/issues
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3Issues(
  query: {
    /** Return opened, closed, or all issues */
    state?: "opened" | "closed" | "all";
    /** Comma-separated list of label names */
    labels?: string;
    /** Return issues for a specific milestone */
    milestone?: string;
    /** Return issues ordered by `created_at` or `updated_at` fields. */
    order_by?: "created_at" | "updated_at";
    /** Return issues sorted in `asc` or `desc` order. */
    sort?: "asc" | "desc";
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Issue> {
  const result = await api.v3.getV3Issues({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get single ssh key by id. Only available to admin users
 * @request GET :/v3/keys/{id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3KeysId(
  id: number,
  headers?: hasuraSdk.JSONValue,
): Promise<SSHKeyWithUser> {
  const result = await api.v3.getV3KeysId({
    id: id,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the list of the available license template
 * @request GET :/v3/licenses
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3Licenses(
  query: {
    /** If passed, returns only popular licenses */
    popular?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<RepoLicense> {
  const result = await api.v3.getV3Licenses({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the text for a specific license
 * @request GET :/v3/licenses/{name}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3LicensesName(
  /** The name of the template */
  name: string,
  headers?: hasuraSdk.JSONValue,
): Promise<RepoLicense> {
  const result = await api.v3.getV3LicensesName({
    name: name,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a namespaces list
 * @request GET :/v3/namespaces
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3Namespaces(
  query: {
    /** Search query for namespaces */
    search?: string;
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Namespace> {
  const result = await api.v3.getV3Namespaces({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get global notification level settings and email, defaults to Participate
 * @request GET :/v3/notification_settings
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3NotificationSettings(
  headers?: hasuraSdk.JSONValue,
): Promise<GlobalNotificationSetting> {
  const result = await api.v3.getV3NotificationSettings({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update global notification level settings and email, defaults to Participate
 * @request PUT :/v3/notification_settings
 * @allowrelaxedtypes
 */
export async function putV3PutV3NotificationSettings(
  /** Request body */
  data: {
    /** The global notification level */
    level?: string;
    /** The email address to send notifications */
    notification_email?: string;
    /** Enable/disable this notification */
    new_note?: boolean;
    /** Enable/disable this notification */
    new_issue?: boolean;
    /** Enable/disable this notification */
    reopen_issue?: boolean;
    /** Enable/disable this notification */
    close_issue?: boolean;
    /** Enable/disable this notification */
    reassign_issue?: boolean;
    /** Enable/disable this notification */
    new_merge_request?: boolean;
    /** Enable/disable this notification */
    reopen_merge_request?: boolean;
    /** Enable/disable this notification */
    close_merge_request?: boolean;
    /** Enable/disable this notification */
    reassign_merge_request?: boolean;
    /** Enable/disable this notification */
    merge_merge_request?: boolean;
    /** Enable/disable this notification */
    failed_pipeline?: boolean;
    /** Enable/disable this notification */
    success_pipeline?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<GlobalNotificationSetting> {
  const result = await api.v3.putV3NotificationSettings({
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a projects list for authenticated user
 * @request GET :/v3/projects
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3Projects(
  query: {
    /** Return projects ordered by field */
    order_by?:
      | "id"
      | "name"
      | "path"
      | "created_at"
      | "updated_at"
      | "last_activity_at";
    /** Return projects sorted in ascending and descending order */
    sort?: "asc" | "desc";
    /** Limit by archived status */
    archived?: boolean;
    /** Limit by visibility */
    visibility?: "public" | "internal" | "private";
    /** Return list of authorized projects matching the search criteria */
    search?: string;
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
    /** Return only the ID, URL, name, and path of each project */
    simple?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<BasicProjectDetails> {
  const result = await api.v3.getV3Projects({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create new project
 * @request POST :/v3/projects
 * @allowrelaxedtypes
 */
export async function postV3PostV3Projects(
  /** Request body */
  data: {
    /** The name of the project */
    name: string;
    /** The path of the repository */
    path?: string;
    /** The description of the project */
    description?: string;
    /** Flag indication if the issue tracker is enabled */
    issues_enabled?: boolean;
    /** Flag indication if merge requests are enabled */
    merge_requests_enabled?: boolean;
    /** Flag indication if the wiki is enabled */
    wiki_enabled?: boolean;
    /** Flag indication if builds are enabled */
    builds_enabled?: boolean;
    /** Flag indication if snippets are enabled */
    snippets_enabled?: boolean;
    /** Flag indication if shared runners are enabled for that project */
    shared_runners_enabled?: boolean;
    /** Flag indication if the container registry is enabled for that project */
    container_registry_enabled?: boolean;
    /** Flag indication if Git LFS is enabled for that project */
    lfs_enabled?: boolean;
    /** Create a public project. The same as visibility_level = 20. */
    public?: boolean;
    /**
     * Create a public project. The same as visibility_level = 20.
     * @format int32
     */
    visibility_level?: 0 | 10 | 20;
    /** Perform public builds */
    public_builds?: boolean;
    /** Allow users to request member access */
    request_access_enabled?: boolean;
    /** Only allow to merge if builds succeed */
    only_allow_merge_if_build_succeeds?: boolean;
    /** Only allow to merge if all discussions are resolved */
    only_allow_merge_if_all_discussions_are_resolved?: boolean;
    /**
     * Namespace ID for the new project. Default to the user namespace.
     * @format int32
     */
    namespace_id?: number;
    /** URL from which the project is imported */
    import_url?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Project> {
  const result = await api.v3.postV3Projects({
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get all projects for admin user
 * @request GET :/v3/projects/all
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsAll(
  query: {
    /** Return projects ordered by field */
    order_by?:
      | "id"
      | "name"
      | "path"
      | "created_at"
      | "updated_at"
      | "last_activity_at";
    /** Return projects sorted in ascending and descending order */
    sort?: "asc" | "desc";
    /** Limit by archived status */
    archived?: boolean;
    /** Limit by visibility */
    visibility?: "public" | "internal" | "private";
    /** Return list of authorized projects matching the search criteria */
    search?: string;
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
    /** Return only the ID, URL, name, and path of each project */
    simple?: boolean;
    /** Include project statistics */
    statistics?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<BasicProjectDetails> {
  const result = await api.v3.getV3ProjectsAll({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Fork new project for the current user or provided namespace.
 * @request POST :/v3/projects/fork/{id}
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsForkId(
  /** The ID of a project */
  id: string,
  /** Request body */
  data: {
    /** The ID or name of the namespace that the project will be forked into */
    namespace?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Project> {
  const result = await api.v3.postV3ProjectsForkId({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get an owned projects list for authenticated user
 * @request GET :/v3/projects/owned
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsOwned(
  query: {
    /** Return projects ordered by field */
    order_by?:
      | "id"
      | "name"
      | "path"
      | "created_at"
      | "updated_at"
      | "last_activity_at";
    /** Return projects sorted in ascending and descending order */
    sort?: "asc" | "desc";
    /** Limit by archived status */
    archived?: boolean;
    /** Limit by visibility */
    visibility?: "public" | "internal" | "private";
    /** Return list of authorized projects matching the search criteria */
    search?: string;
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
    /** Return only the ID, URL, name, and path of each project */
    simple?: boolean;
    /** Include project statistics */
    statistics?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<BasicProjectDetails> {
  const result = await api.v3.getV3ProjectsOwned({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Search for projects the current user has access to
 * @request GET :/v3/projects/search/{query}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsSearchQuery(
  /** The project name to be searched */
  query: string,
  queryParams: {
    /** Return projects ordered by field */
    order_by?:
      | "id"
      | "name"
      | "path"
      | "created_at"
      | "updated_at"
      | "last_activity_at";
    /** Return projects sorted in ascending and descending order */
    sort?: "asc" | "desc";
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Project> {
  const result = await api.v3.getV3ProjectsSearchQuery({
    query: query,
    queryParams: queryParams,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Gets starred project for the authenticated user
 * @request GET :/v3/projects/starred
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsStarred(
  query: {
    /** Return projects ordered by field */
    order_by?:
      | "id"
      | "name"
      | "path"
      | "created_at"
      | "updated_at"
      | "last_activity_at";
    /** Return projects sorted in ascending and descending order */
    sort?: "asc" | "desc";
    /** Limit by archived status */
    archived?: boolean;
    /** Limit by visibility */
    visibility?: "public" | "internal" | "private";
    /** Return list of authorized projects matching the search criteria */
    search?: string;
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
    /** Return only the ID, URL, name, and path of each project */
    simple?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<BasicProjectDetails> {
  const result = await api.v3.getV3ProjectsStarred({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create new project for a specified user. Only available to admin users.
 * @request POST :/v3/projects/user/{user_id}
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsUserUserId(
  /** The ID of a user */
  userId: number,
  /** Request body */
  data: {
    /** The name of the project */
    name: string;
    /** The default branch of the project */
    default_branch?: string;
    /** The description of the project */
    description?: string;
    /** Flag indication if the issue tracker is enabled */
    issues_enabled?: boolean;
    /** Flag indication if merge requests are enabled */
    merge_requests_enabled?: boolean;
    /** Flag indication if the wiki is enabled */
    wiki_enabled?: boolean;
    /** Flag indication if builds are enabled */
    builds_enabled?: boolean;
    /** Flag indication if snippets are enabled */
    snippets_enabled?: boolean;
    /** Flag indication if shared runners are enabled for that project */
    shared_runners_enabled?: boolean;
    /** Flag indication if the container registry is enabled for that project */
    container_registry_enabled?: boolean;
    /** Flag indication if Git LFS is enabled for that project */
    lfs_enabled?: boolean;
    /** Create a public project. The same as visibility_level = 20. */
    public?: boolean;
    /**
     * Create a public project. The same as visibility_level = 20.
     * @format int32
     */
    visibility_level?: 0 | 10 | 20;
    /** Perform public builds */
    public_builds?: boolean;
    /** Allow users to request member access */
    request_access_enabled?: boolean;
    /** Only allow to merge if builds succeed */
    only_allow_merge_if_build_succeeds?: boolean;
    /** Only allow to merge if all discussions are resolved */
    only_allow_merge_if_all_discussions_are_resolved?: boolean;
    /**
     * Namespace ID for the new project. Default to the user namespace.
     * @format int32
     */
    namespace_id?: number;
    /** URL from which the project is imported */
    import_url?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Project> {
  const result = await api.v3.postV3ProjectsUserUserId({
    userId: userId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a list of visible projects for authenticated user
 * @request GET :/v3/projects/visible
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsVisible(
  query: {
    /** Return projects ordered by field */
    order_by?:
      | "id"
      | "name"
      | "path"
      | "created_at"
      | "updated_at"
      | "last_activity_at";
    /** Return projects sorted in ascending and descending order */
    sort?: "asc" | "desc";
    /** Limit by archived status */
    archived?: boolean;
    /** Limit by visibility */
    visibility?: "public" | "internal" | "private";
    /** Return list of authorized projects matching the search criteria */
    search?: string;
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
    /** Return only the ID, URL, name, and path of each project */
    simple?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<BasicProjectDetails> {
  const result = await api.v3.getV3ProjectsVisible({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Remove a project
 * @request DELETE :/v3/projects/{id}
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3ProjectsId(
  /** The ID of a project */
  id: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.deleteV3ProjectsId({
    id: id,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a single project
 * @request GET :/v3/projects/{id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsId(
  /** The ID of a project */
  id: string,
  headers?: hasuraSdk.JSONValue,
): Promise<ProjectWithAccess> {
  const result = await api.v3.getV3ProjectsId({
    id: id,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update an existing project
 * @request PUT :/v3/projects/{id}
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsId(
  /** The ID of a project */
  id: string,
  /** Request body */
  data: {
    /** The name of the project */
    name?: string;
    /** The default branch of the project */
    default_branch?: string;
    /** The path of the repository */
    path?: string;
    /** The description of the project */
    description?: string;
    /** Flag indication if the issue tracker is enabled */
    issues_enabled?: boolean;
    /** Flag indication if merge requests are enabled */
    merge_requests_enabled?: boolean;
    /** Flag indication if the wiki is enabled */
    wiki_enabled?: boolean;
    /** Flag indication if builds are enabled */
    builds_enabled?: boolean;
    /** Flag indication if snippets are enabled */
    snippets_enabled?: boolean;
    /** Flag indication if shared runners are enabled for that project */
    shared_runners_enabled?: boolean;
    /** Flag indication if the container registry is enabled for that project */
    container_registry_enabled?: boolean;
    /** Flag indication if Git LFS is enabled for that project */
    lfs_enabled?: boolean;
    /** Create a public project. The same as visibility_level = 20. */
    public?: boolean;
    /**
     * Create a public project. The same as visibility_level = 20.
     * @format int32
     */
    visibility_level?: 0 | 10 | 20;
    /** Perform public builds */
    public_builds?: boolean;
    /** Allow users to request member access */
    request_access_enabled?: boolean;
    /** Only allow to merge if builds succeed */
    only_allow_merge_if_build_succeeds?: boolean;
    /** Only allow to merge if all discussions are resolved */
    only_allow_merge_if_all_discussions_are_resolved?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Project> {
  const result = await api.v3.putV3ProjectsId({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Trigger a GitLab project build
 * @request POST :/v3/projects/{id}/(ref/{ref}/)trigger/builds
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdRefRefTriggerBuilds(
  /** The ID of a project */
  id: string,
  /** The commit sha or name of a branch or tag */
  ref: string,
  /** Request body */
  data: {
    /** The unique token of trigger */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<TriggerRequest> {
  const result = await api.v3.postV3ProjectsIdRefRefTriggerBuilds({
    id: id,
    ref: ref,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Gets a list of access requests for a project.
 * @request GET :/v3/projects/{id}/access_requests
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdAccessRequests(
  /** The project ID */
  id: string,
  query: {
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<AccessRequester> {
  const result = await api.v3.getV3ProjectsIdAccessRequests({
    id: id,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Requests access for the authenticated user to a project.
 * @request POST :/v3/projects/{id}/access_requests
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdAccessRequests(
  /** The project ID */
  id: string,
  headers?: hasuraSdk.JSONValue,
): Promise<AccessRequester> {
  const result = await api.v3.postV3ProjectsIdAccessRequests({
    id: id,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Denies an access request for the given user.
 * @request DELETE :/v3/projects/{id}/access_requests/{user_id}
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3ProjectsIdAccessRequestsUserId(
  /** The project ID */
  id: string,
  /** The user ID of the access requester */
  userId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.deleteV3ProjectsIdAccessRequestsUserId({
    id: id,
    userId: userId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Approves an access request for the given user.
 * @request PUT :/v3/projects/{id}/access_requests/{user_id}/approve
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdAccessRequestsUserIdApprove(
  /** The project ID */
  id: string,
  /** The user ID of the access requester */
  userId: number,
  /** Request body */
  data: {
    /**
     * A valid access level (defaults: `30`, developer access level)
     * @format int32
     */
    access_level?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Member> {
  const result = await api.v3.putV3ProjectsIdAccessRequestsUserIdApprove({
    id: id,
    userId: userId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Archive a project
 * @request POST :/v3/projects/{id}/archive
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdArchive(
  /** The ID of a project */
  id: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Project> {
  const result = await api.v3.postV3ProjectsIdArchive({
    id: id,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get all project boards
 * @request GET :/v3/projects/{id}/boards
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdBoards(
  /** The ID of a project */
  id: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Board> {
  const result = await api.v3.getV3ProjectsIdBoards({
    id: id,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the lists of a project board
 * @request GET :/v3/projects/{id}/boards/{board_id}/lists
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdBoardsBoardIdLists(
  /** The ID of a project */
  id: string,
  /** The ID of a board */
  boardId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<List> {
  const result = await api.v3.getV3ProjectsIdBoardsBoardIdLists({
    id: id,
    boardId: boardId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a new board list
 * @request POST :/v3/projects/{id}/boards/{board_id}/lists
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdBoardsBoardIdLists(
  /** The ID of a project */
  id: string,
  /** The ID of a board */
  boardId: number,
  /** Request body */
  data: {
    /**
     * The ID of an existing label
     * @format int32
     */
    label_id: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<List> {
  const result = await api.v3.postV3ProjectsIdBoardsBoardIdLists({
    id: id,
    boardId: boardId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a board list
 * @request DELETE :/v3/projects/{id}/boards/{board_id}/lists/{list_id}
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3ProjectsIdBoardsBoardIdListsListId(
  /** The ID of a project */
  id: string,
  /** The ID of a board */
  boardId: number,
  /** The ID of a board list */
  listId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<List> {
  const result = await api.v3.deleteV3ProjectsIdBoardsBoardIdListsListId({
    id: id,
    boardId: boardId,
    listId: listId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a list of a project board
 * @request GET :/v3/projects/{id}/boards/{board_id}/lists/{list_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdBoardsBoardIdListsListId(
  /** The ID of a project */
  id: string,
  /** The ID of a board */
  boardId: number,
  /** The ID of a list */
  listId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<List> {
  const result = await api.v3.getV3ProjectsIdBoardsBoardIdListsListId({
    id: id,
    boardId: boardId,
    listId: listId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Moves a board list to a new position
 * @request PUT :/v3/projects/{id}/boards/{board_id}/lists/{list_id}
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdBoardsBoardIdListsListId(
  /** The ID of a project */
  id: string,
  /** The ID of a board */
  boardId: number,
  /** The ID of a list */
  listId: number,
  /** Request body */
  data: {
    /**
     * The position of the list
     * @format int32
     */
    position: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<List> {
  const result = await api.v3.putV3ProjectsIdBoardsBoardIdListsListId({
    id: id,
    boardId: boardId,
    listId: listId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a project builds
 * @request GET :/v3/projects/{id}/builds
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdBuilds(
  /** The ID of a project */
  id: string,
  query: {
    /** The scope of builds to show */
    scope?: "pending" | "running" | "failed" | "success" | "canceled";
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Build> {
  const result = await api.v3.getV3ProjectsIdBuilds({
    id: id,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Download the artifacts file from build
 * @request GET :/v3/projects/{id}/builds/artifacts/{ref_name}/download
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdBuildsArtifactsRefNameDownload(
  /** The ID of a project */
  id: string,
  /** The ref from repository */
  refName: string,
  query: {
    /** The name for the build */
    job: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.getV3ProjectsIdBuildsArtifactsRefNameDownload({
    id: id,
    refName: refName,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a specific build of a project
 * @request GET :/v3/projects/{id}/builds/{build_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdBuildsBuildId(
  /** The ID of a project */
  id: string,
  /** The ID of a build */
  buildId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Build> {
  const result = await api.v3.getV3ProjectsIdBuildsBuildId({
    id: id,
    buildId: buildId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Download the artifacts file from build
 * @request GET :/v3/projects/{id}/builds/{build_id}/artifacts
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdBuildsBuildIdArtifacts(
  /** The ID of a project */
  id: string,
  /** The ID of a build */
  buildId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.getV3ProjectsIdBuildsBuildIdArtifacts({
    id: id,
    buildId: buildId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Keep the artifacts to prevent them from being deleted
 * @request POST :/v3/projects/{id}/builds/{build_id}/artifacts/keep
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdBuildsBuildIdArtifactsKeep(
  /** The ID of a project */
  id: string,
  /** The ID of a build */
  buildId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Build> {
  const result = await api.v3.postV3ProjectsIdBuildsBuildIdArtifactsKeep({
    id: id,
    buildId: buildId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Cancel a specific build of a project
 * @request POST :/v3/projects/{id}/builds/{build_id}/cancel
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdBuildsBuildIdCancel(
  /** The ID of a project */
  id: string,
  /** The ID of a build */
  buildId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Build> {
  const result = await api.v3.postV3ProjectsIdBuildsBuildIdCancel({
    id: id,
    buildId: buildId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Erase build (remove artifacts and build trace)
 * @request POST :/v3/projects/{id}/builds/{build_id}/erase
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdBuildsBuildIdErase(
  /** The ID of a project */
  id: string,
  /** The ID of a build */
  buildId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Build> {
  const result = await api.v3.postV3ProjectsIdBuildsBuildIdErase({
    id: id,
    buildId: buildId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Trigger a manual build
 * @request POST :/v3/projects/{id}/builds/{build_id}/play
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdBuildsBuildIdPlay(
  /** The ID of a project */
  id: string,
  /** The ID of a Build */
  buildId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Build> {
  const result = await api.v3.postV3ProjectsIdBuildsBuildIdPlay({
    id: id,
    buildId: buildId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Retry a specific build of a project
 * @request POST :/v3/projects/{id}/builds/{build_id}/retry
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdBuildsBuildIdRetry(
  /** The ID of a project */
  id: string,
  /** The ID of a build */
  buildId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Build> {
  const result = await api.v3.postV3ProjectsIdBuildsBuildIdRetry({
    id: id,
    buildId: buildId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a trace of a specific build of a project
 * @request GET :/v3/projects/{id}/builds/{build_id}/trace
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdBuildsBuildIdTrace(
  /** The ID of a project */
  id: string,
  /** The ID of a build */
  buildId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.getV3ProjectsIdBuildsBuildIdTrace({
    id: id,
    buildId: buildId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a specific project's deploy keys
 * @request GET :/v3/projects/{id}/deploy_keys
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdDeployKeys(
  /** The ID of the project */
  id: string,
  headers?: hasuraSdk.JSONValue,
): Promise<SSHKey> {
  const result = await api.v3.getV3ProjectsIdDeployKeys({
    id: id,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Add new deploy key to currently authenticated user
 * @request POST :/v3/projects/{id}/deploy_keys
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdDeployKeys(
  /** The ID of the project */
  id: string,
  /** Request body */
  data: {
    /** The new deploy key */
    key: string;
    /** The name of the deploy key */
    title: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<SSHKey> {
  const result = await api.v3.postV3ProjectsIdDeployKeys({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete deploy key for a project
 * @request DELETE :/v3/projects/{id}/deploy_keys/{key_id}
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3ProjectsIdDeployKeysKeyId(
  /** The ID of the project */
  id: string,
  /** The ID of the deploy key */
  keyId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<SSHKey> {
  const result = await api.v3.deleteV3ProjectsIdDeployKeysKeyId({
    id: id,
    keyId: keyId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get single deploy key
 * @request GET :/v3/projects/{id}/deploy_keys/{key_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdDeployKeysKeyId(
  /** The ID of the project */
  id: string,
  /** The ID of the deploy key */
  keyId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<SSHKey> {
  const result = await api.v3.getV3ProjectsIdDeployKeysKeyId({
    id: id,
    keyId: keyId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Disable a deploy key for a project
 * @request DELETE :/v3/projects/{id}/deploy_keys/{key_id}/disable
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3ProjectsIdDeployKeysKeyIdDisable(
  /** The ID of the project */
  id: string,
  /** The ID of the deploy key */
  keyId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<SSHKey> {
  const result = await api.v3.deleteV3ProjectsIdDeployKeysKeyIdDisable({
    id: id,
    keyId: keyId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Enable a deploy key for a project
 * @request POST :/v3/projects/{id}/deploy_keys/{key_id}/enable
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdDeployKeysKeyIdEnable(
  /** The ID of the project */
  id: string,
  /** The ID of the deploy key */
  keyId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<SSHKey> {
  const result = await api.v3.postV3ProjectsIdDeployKeysKeyIdEnable({
    id: id,
    keyId: keyId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get all deployments of the project
 * @request GET :/v3/projects/{id}/deployments
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdDeployments(
  /** The project ID */
  id: string,
  query: {
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Deployment> {
  const result = await api.v3.getV3ProjectsIdDeployments({
    id: id,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Gets a specific deployment
 * @request GET :/v3/projects/{id}/deployments/{deployment_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdDeploymentsDeploymentId(
  /** The project ID */
  id: string,
  /** The deployment ID */
  deploymentId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Deployment> {
  const result = await api.v3.getV3ProjectsIdDeploymentsDeploymentId({
    id: id,
    deploymentId: deploymentId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get all environments of the project
 * @request GET :/v3/projects/{id}/environments
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdEnvironments(
  /** The project ID */
  id: string,
  query: {
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Environment> {
  const result = await api.v3.getV3ProjectsIdEnvironments({
    id: id,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Creates a new environment
 * @request POST :/v3/projects/{id}/environments
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdEnvironments(
  /** The project ID */
  id: string,
  /** Request body */
  data: {
    /** The name of the environment to be created */
    name: string;
    /** URL on which this deployment is viewable */
    external_url?: string;
    slug?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Environment> {
  const result = await api.v3.postV3ProjectsIdEnvironments({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Deletes an existing environment
 * @request DELETE :/v3/projects/{id}/environments/{environment_id}
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3ProjectsIdEnvironmentsEnvironmentId(
  /** The project ID */
  id: string,
  /** The environment ID */
  environmentId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Environment> {
  const result = await api.v3.deleteV3ProjectsIdEnvironmentsEnvironmentId({
    id: id,
    environmentId: environmentId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Updates an existing environment
 * @request PUT :/v3/projects/{id}/environments/{environment_id}
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdEnvironmentsEnvironmentId(
  /** The project ID */
  id: string,
  /** The environment ID */
  environmentId: number,
  /** Request body */
  data: {
    /** The new environment name */
    name?: string;
    /** The new URL on which this deployment is viewable */
    external_url?: string;
    slug?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Environment> {
  const result = await api.v3.putV3ProjectsIdEnvironmentsEnvironmentId({
    id: id,
    environmentId: environmentId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get events for a single project
 * @request GET :/v3/projects/{id}/events
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdEvents(
  /** The ID of a project */
  id: string,
  query: {
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Event> {
  const result = await api.v3.getV3ProjectsIdEvents({
    id: id,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Remove a forked_from relationship
 * @request DELETE :/v3/projects/{id}/fork
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3ProjectsIdFork(
  /** The ID of a project */
  id: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.deleteV3ProjectsIdFork({
    id: id,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Mark this project as forked from another
 * @request POST :/v3/projects/{id}/fork/{forked_from_id}
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdForkForkedFromId(
  /** The ID of a project */
  id: string,
  /** The ID of the project it was forked from */
  forkedFromId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.postV3ProjectsIdForkForkedFromId({
    id: id,
    forkedFromId: forkedFromId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get project hooks
 * @request GET :/v3/projects/{id}/hooks
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdHooks(
  /** The ID of a project */
  id: string,
  query: {
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<ProjectHook> {
  const result = await api.v3.getV3ProjectsIdHooks({
    id: id,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Add hook to project
 * @request POST :/v3/projects/{id}/hooks
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdHooks(
  /** The ID of a project */
  id: string,
  /** Request body */
  data: {
    /** The URL to send the request to */
    url: string;
    /** Trigger hook on push events */
    push_events?: boolean;
    /** Trigger hook on issues events */
    issues_events?: boolean;
    /** Trigger hook on merge request events */
    merge_requests_events?: boolean;
    /** Trigger hook on tag push events */
    tag_push_events?: boolean;
    /** Trigger hook on note(comment) events */
    note_events?: boolean;
    /** Trigger hook on build events */
    build_events?: boolean;
    /** Trigger hook on pipeline events */
    pipeline_events?: boolean;
    /** Trigger hook on wiki events */
    wiki_page_events?: boolean;
    /** Do SSL verification when triggering the hook */
    enable_ssl_verification?: boolean;
    /** Secret token to validate received payloads; this will not be returned in the response */
    token?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<ProjectHook> {
  const result = await api.v3.postV3ProjectsIdHooks({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Deletes project hook
 * @request DELETE :/v3/projects/{id}/hooks/{hook_id}
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3ProjectsIdHooksHookId(
  /** The ID of a project */
  id: string,
  /** The ID of the hook to delete */
  hookId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<ProjectHook> {
  const result = await api.v3.deleteV3ProjectsIdHooksHookId({
    id: id,
    hookId: hookId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a project hook
 * @request GET :/v3/projects/{id}/hooks/{hook_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdHooksHookId(
  /** The ID of a project */
  id: string,
  /** The ID of a project hook */
  hookId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<ProjectHook> {
  const result = await api.v3.getV3ProjectsIdHooksHookId({
    id: id,
    hookId: hookId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update an existing project hook
 * @request PUT :/v3/projects/{id}/hooks/{hook_id}
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdHooksHookId(
  /** The ID of a project */
  id: string,
  /** The ID of the hook to update */
  hookId: number,
  /** Request body */
  data: {
    /** The URL to send the request to */
    url: string;
    /** Trigger hook on push events */
    push_events?: boolean;
    /** Trigger hook on issues events */
    issues_events?: boolean;
    /** Trigger hook on merge request events */
    merge_requests_events?: boolean;
    /** Trigger hook on tag push events */
    tag_push_events?: boolean;
    /** Trigger hook on note(comment) events */
    note_events?: boolean;
    /** Trigger hook on build events */
    build_events?: boolean;
    /** Trigger hook on pipeline events */
    pipeline_events?: boolean;
    /** Trigger hook on wiki events */
    wiki_page_events?: boolean;
    /** Do SSL verification when triggering the hook */
    enable_ssl_verification?: boolean;
    /** Secret token to validate received payloads; this will not be returned in the response */
    token?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<ProjectHook> {
  const result = await api.v3.putV3ProjectsIdHooksHookId({
    id: id,
    hookId: hookId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a list of project issues
 * @request GET :/v3/projects/{id}/issues
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdIssues(
  /** The ID of a project */
  id: string,
  query: {
    /** Return opened, closed, or all issues */
    state?: "opened" | "closed" | "all";
    /** Return the issue having the given `iid` */
    iid?: number;
    /** Comma-separated list of label names */
    labels?: string;
    /** Return issues for a specific milestone */
    milestone?: string;
    /** Return issues ordered by `created_at` or `updated_at` fields. */
    order_by?: "created_at" | "updated_at";
    /** Return issues sorted in `asc` or `desc` order. */
    sort?: "asc" | "desc";
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Issue> {
  const result = await api.v3.getV3ProjectsIdIssues({
    id: id,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a new project issue
 * @request POST :/v3/projects/{id}/issues
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdIssues(
  /** The ID of a project */
  id: string,
  /** Request body */
  data: {
    /** The title of an issue */
    title: string;
    /**
     * Date time when the issue was created. Available only for admins and project owners.
     * @format date-time
     */
    created_at?: string;
    /**
     * The IID of a merge request for which to resolve discussions
     * @format int32
     */
    merge_request_for_resolving_discussions?: number;
    /** The description of an issue */
    description?: string;
    /**
     * The ID of a user to assign issue
     * @format int32
     */
    assignee_id?: number;
    /**
     * The ID of a milestone to assign issue
     * @format int32
     */
    milestone_id?: number;
    /** Comma-separated list of label names */
    labels?: string;
    /** Date time string in the format YEAR-MONTH-DAY */
    due_date?: string;
    /** Boolean parameter if the issue should be confidential */
    confidential?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Issue> {
  const result = await api.v3.postV3ProjectsIdIssues({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a project issue
 * @request DELETE :/v3/projects/{id}/issues/{issue_id}
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3ProjectsIdIssuesIssueId(
  /** The ID of a project */
  id: string,
  /** The ID of a project issue */
  issueId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.deleteV3ProjectsIdIssuesIssueId({
    id: id,
    issueId: issueId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a single project issue
 * @request GET :/v3/projects/{id}/issues/{issue_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdIssuesIssueId(
  /** The ID of a project */
  id: string,
  /** The ID of a project issue */
  issueId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Issue> {
  const result = await api.v3.getV3ProjectsIdIssuesIssueId({
    id: id,
    issueId: issueId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update an existing issue
 * @request PUT :/v3/projects/{id}/issues/{issue_id}
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdIssuesIssueId(
  /** The ID of a project */
  id: string,
  /** The ID of a project issue */
  issueId: number,
  /** Request body */
  data: {
    /** The title of an issue */
    title?: string;
    /**
     * Date time when the issue was updated. Available only for admins and project owners.
     * @format date-time
     */
    updated_at?: string;
    /** State of the issue */
    state_event?: "reopen" | "close";
    /** The description of an issue */
    description?: string;
    /**
     * The ID of a user to assign issue
     * @format int32
     */
    assignee_id?: number;
    /**
     * The ID of a milestone to assign issue
     * @format int32
     */
    milestone_id?: number;
    /** Comma-separated list of label names */
    labels?: string;
    /** Date time string in the format YEAR-MONTH-DAY */
    due_date?: string;
    /** Boolean parameter if the issue should be confidential */
    confidential?: boolean;
    created_at?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Issue> {
  const result = await api.v3.putV3ProjectsIdIssuesIssueId({
    id: id,
    issueId: issueId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Add spent time for a project issue
 * @request POST :/v3/projects/{id}/issues/{issue_id}/add_spent_time
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdIssuesIssueIdAddSpentTime(
  /** The ID of a project */
  id: string,
  /** The ID of a project issue */
  issueId: number,
  /** Request body */
  data: {
    /** The duration to be parsed */
    duration: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.postV3ProjectsIdIssuesIssueIdAddSpentTime({
    id: id,
    issueId: issueId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a list of project +awardable+ award emoji
 * @request GET :/v3/projects/{id}/issues/{issue_id}/award_emoji
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdIssuesIssueIdAwardEmoji(
  /** The ID of a project */
  id: string,
  /** The ID of an Issue, Merge Request or Snippet */
  issueId: number,
  query: {
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<AwardEmoji> {
  const result = await api.v3.getV3ProjectsIdIssuesIssueIdAwardEmoji({
    id: id,
    issueId: issueId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Award a new Emoji
 * @request POST :/v3/projects/{id}/issues/{issue_id}/award_emoji
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdIssuesIssueIdAwardEmoji(
  id: number,
  issueId: number,
  /** Request body */
  data: {
    /** The name of a award_emoji (without colons) */
    name: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<AwardEmoji> {
  const result = await api.v3.postV3ProjectsIdIssuesIssueIdAwardEmoji({
    id: id,
    issueId: issueId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a +awardables+ award emoji
 * @request DELETE :/v3/projects/{id}/issues/{issue_id}/award_emoji/{award_id}
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3ProjectsIdIssuesIssueIdAwardEmojiAwardId(
  /** The ID of an award emoji */
  awardId: number,
  id: number,
  issueId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<AwardEmoji> {
  const result = await api.v3.deleteV3ProjectsIdIssuesIssueIdAwardEmojiAwardId({
    awardId: awardId,
    id: id,
    issueId: issueId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a specific award emoji
 * @request GET :/v3/projects/{id}/issues/{issue_id}/award_emoji/{award_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdIssuesIssueIdAwardEmojiAwardId(
  /** The ID of the award */
  awardId: number,
  id: number,
  issueId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<AwardEmoji> {
  const result = await api.v3.getV3ProjectsIdIssuesIssueIdAwardEmojiAwardId({
    awardId: awardId,
    id: id,
    issueId: issueId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Move an existing issue
 * @request POST :/v3/projects/{id}/issues/{issue_id}/move
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdIssuesIssueIdMove(
  /** The ID of a project */
  id: string,
  /** The ID of a project issue */
  issueId: number,
  /** Request body */
  data: {
    /**
     * The ID of the new project
     * @format int32
     */
    to_project_id: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Issue> {
  const result = await api.v3.postV3ProjectsIdIssuesIssueIdMove({
    id: id,
    issueId: issueId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a list of project +awardable+ award emoji
 * @request GET :/v3/projects/{id}/issues/{issue_id}/notes/{note_id}/award_emoji
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmoji(
  id: number,
  issueId: number,
  noteId: number,
  query: {
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<AwardEmoji> {
  const result = await api.v3.getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmoji(
    {
      id: id,
      issueId: issueId,
      noteId: noteId,
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    },
  );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Award a new Emoji
 * @request POST :/v3/projects/{id}/issues/{issue_id}/notes/{note_id}/award_emoji
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmoji(
  id: number,
  issueId: number,
  noteId: number,
  /** Request body */
  data: {
    /** The name of a award_emoji (without colons) */
    name: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<AwardEmoji> {
  const result =
    await api.v3.postV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmoji({
      id: id,
      issueId: issueId,
      noteId: noteId,
      data: data,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a +awardables+ award emoji
 * @request DELETE :/v3/projects/{id}/issues/{issue_id}/notes/{note_id}/award_emoji/{award_id}
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardId(
  /** The ID of an award emoji */
  awardId: number,
  id: number,
  issueId: number,
  noteId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<AwardEmoji> {
  const result =
    await api.v3.deleteV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardId({
      awardId: awardId,
      id: id,
      issueId: issueId,
      noteId: noteId,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a specific award emoji
 * @request GET :/v3/projects/{id}/issues/{issue_id}/notes/{note_id}/award_emoji/{award_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardId(
  /** The ID of the award */
  awardId: number,
  id: number,
  issueId: number,
  noteId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<AwardEmoji> {
  const result =
    await api.v3.getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardId({
      awardId: awardId,
      id: id,
      issueId: issueId,
      noteId: noteId,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Reset spent time for a project issue
 * @request POST :/v3/projects/{id}/issues/{issue_id}/reset_spent_time
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdIssuesIssueIdResetSpentTime(
  /** The ID of a project */
  id: string,
  /** The ID of a project issue */
  issueId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.postV3ProjectsIdIssuesIssueIdResetSpentTime({
    id: id,
    issueId: issueId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Reset the time estimate for a project issue
 * @request POST :/v3/projects/{id}/issues/{issue_id}/reset_time_estimate
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdIssuesIssueIdResetTimeEstimate(
  /** The ID of a project */
  id: string,
  /** The ID of a project issue */
  issueId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.postV3ProjectsIdIssuesIssueIdResetTimeEstimate({
    id: id,
    issueId: issueId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set a time estimate for a project issue
 * @request POST :/v3/projects/{id}/issues/{issue_id}/time_estimate
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdIssuesIssueIdTimeEstimate(
  /** The ID of a project */
  id: string,
  /** The ID of a project issue */
  issueId: number,
  /** Request body */
  data: {
    /** The duration to be parsed */
    duration: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.postV3ProjectsIdIssuesIssueIdTimeEstimate({
    id: id,
    issueId: issueId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Show time stats for a project issue
 * @request GET :/v3/projects/{id}/issues/{issue_id}/time_stats
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdIssuesIssueIdTimeStats(
  /** The ID of a project */
  id: string,
  /** The ID of a project issue */
  issueId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.getV3ProjectsIdIssuesIssueIdTimeStats({
    id: id,
    issueId: issueId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a todo on an issuable
 * @request POST :/v3/projects/{id}/issues/{issue_id}/todo
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdIssuesIssueIdTodo(
  /** The ID of a project */
  id: string,
  /** The ID of an issuable */
  issueId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Todo> {
  const result = await api.v3.postV3ProjectsIdIssuesIssueIdTodo({
    id: id,
    issueId: issueId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a list of project +noteable+ notes
 * @request GET :/v3/projects/{id}/issues/{noteable_id}/notes
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdIssuesNoteableIdNotes(
  /** The ID of a project */
  id: string,
  /** The ID of the noteable */
  noteableId: number,
  query: {
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Note> {
  const result = await api.v3.getV3ProjectsIdIssuesNoteableIdNotes({
    id: id,
    noteableId: noteableId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a new +noteable+ note
 * @request POST :/v3/projects/{id}/issues/{noteable_id}/notes
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdIssuesNoteableIdNotes(
  /** The ID of a project */
  id: string,
  /** The ID of the noteable */
  noteableId: number,
  /** Request body */
  data: {
    /** The content of a note */
    body: string;
    /** The creation date of the note */
    created_at?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Note> {
  const result = await api.v3.postV3ProjectsIdIssuesNoteableIdNotes({
    id: id,
    noteableId: noteableId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a +noteable+ note
 * @request DELETE :/v3/projects/{id}/issues/{noteable_id}/notes/{note_id}
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3ProjectsIdIssuesNoteableIdNotesNoteId(
  /** The ID of a project */
  id: string,
  /** The ID of the noteable */
  noteableId: number,
  /** The ID of a note */
  noteId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Note> {
  const result = await api.v3.deleteV3ProjectsIdIssuesNoteableIdNotesNoteId({
    id: id,
    noteableId: noteableId,
    noteId: noteId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a single +noteable+ note
 * @request GET :/v3/projects/{id}/issues/{noteable_id}/notes/{note_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdIssuesNoteableIdNotesNoteId(
  /** The ID of a project */
  id: string,
  /** The ID of a note */
  noteId: number,
  /** The ID of the noteable */
  noteableId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Note> {
  const result = await api.v3.getV3ProjectsIdIssuesNoteableIdNotesNoteId({
    id: id,
    noteId: noteId,
    noteableId: noteableId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update an existing +noteable+ note
 * @request PUT :/v3/projects/{id}/issues/{noteable_id}/notes/{note_id}
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdIssuesNoteableIdNotesNoteId(
  /** The ID of a project */
  id: string,
  /** The ID of the noteable */
  noteableId: number,
  /** The ID of a note */
  noteId: number,
  /** Request body */
  data: {
    /** The content of a note */
    body: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Note> {
  const result = await api.v3.putV3ProjectsIdIssuesNoteableIdNotesNoteId({
    id: id,
    noteableId: noteableId,
    noteId: noteId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Unsubscribe from a resource
 * @request DELETE :/v3/projects/{id}/issues/{subscribable_id}/subscription
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3ProjectsIdIssuesSubscribableIdSubscription(
  /** The ID of a project */
  id: string,
  /** The ID of a resource */
  subscribableId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Issue> {
  const result =
    await api.v3.deleteV3ProjectsIdIssuesSubscribableIdSubscription({
      id: id,
      subscribableId: subscribableId,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Subscribe to a resource
 * @request POST :/v3/projects/{id}/issues/{subscribable_id}/subscription
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdIssuesSubscribableIdSubscription(
  /** The ID of a project */
  id: string,
  /** The ID of a resource */
  subscribableId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Issue> {
  const result = await api.v3.postV3ProjectsIdIssuesSubscribableIdSubscription({
    id: id,
    subscribableId: subscribableId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a specific project's deploy keys
 * @request GET :/v3/projects/{id}/keys
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdKeys(
  /** The ID of the project */
  id: string,
  headers?: hasuraSdk.JSONValue,
): Promise<SSHKey> {
  const result = await api.v3.getV3ProjectsIdKeys({
    id: id,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Add new deploy key to currently authenticated user
 * @request POST :/v3/projects/{id}/keys
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdKeys(
  /** The ID of the project */
  id: string,
  /** Request body */
  data: {
    /** The new deploy key */
    key: string;
    /** The name of the deploy key */
    title: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<SSHKey> {
  const result = await api.v3.postV3ProjectsIdKeys({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete deploy key for a project
 * @request DELETE :/v3/projects/{id}/keys/{key_id}
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3ProjectsIdKeysKeyId(
  /** The ID of the project */
  id: string,
  /** The ID of the deploy key */
  keyId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<SSHKey> {
  const result = await api.v3.deleteV3ProjectsIdKeysKeyId({
    id: id,
    keyId: keyId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get single deploy key
 * @request GET :/v3/projects/{id}/keys/{key_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdKeysKeyId(
  /** The ID of the project */
  id: string,
  /** The ID of the deploy key */
  keyId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<SSHKey> {
  const result = await api.v3.getV3ProjectsIdKeysKeyId({
    id: id,
    keyId: keyId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Disable a deploy key for a project
 * @request DELETE :/v3/projects/{id}/keys/{key_id}/disable
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3ProjectsIdKeysKeyIdDisable(
  /** The ID of the project */
  id: string,
  /** The ID of the deploy key */
  keyId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<SSHKey> {
  const result = await api.v3.deleteV3ProjectsIdKeysKeyIdDisable({
    id: id,
    keyId: keyId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Enable a deploy key for a project
 * @request POST :/v3/projects/{id}/keys/{key_id}/enable
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdKeysKeyIdEnable(
  /** The ID of the project */
  id: string,
  /** The ID of the deploy key */
  keyId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<SSHKey> {
  const result = await api.v3.postV3ProjectsIdKeysKeyIdEnable({
    id: id,
    keyId: keyId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete an existing label
 * @request DELETE :/v3/projects/{id}/labels
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3ProjectsIdLabels(
  /** The ID of a project */
  id: string,
  query: {
    /** The name of the label to be deleted */
    name: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Label> {
  const result = await api.v3.deleteV3ProjectsIdLabels({
    id: id,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get all labels of the project
 * @request GET :/v3/projects/{id}/labels
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdLabels(
  /** The ID of a project */
  id: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Label> {
  const result = await api.v3.getV3ProjectsIdLabels({
    id: id,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a new label
 * @request POST :/v3/projects/{id}/labels
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdLabels(
  /** The ID of a project */
  id: string,
  /** Request body */
  data: {
    /** The name of the label to be created */
    name: string;
    /** The color of the label given in 6-digit hex notation with leading '#' sign (e.g. #FFAABB) */
    color: string;
    /** The description of label to be created */
    description?: string;
    /**
     * The priority of the label
     * @format int32
     */
    priority?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Label> {
  const result = await api.v3.postV3ProjectsIdLabels({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update an existing label. At least one optional parameter is required.
 * @request PUT :/v3/projects/{id}/labels
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdLabels(
  /** The ID of a project */
  id: string,
  /** Request body */
  data: {
    /** The name of the label to be updated */
    name: string;
    /** The new name of the label */
    new_name?: string;
    /** The new color of the label given in 6-digit hex notation with leading '#' sign (e.g. #FFAABB) */
    color?: string;
    /** The new description of label */
    description?: string;
    /**
     * The priority of the label
     * @format int32
     */
    priority?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Label> {
  const result = await api.v3.putV3ProjectsIdLabels({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Unsubscribe from a resource
 * @request DELETE :/v3/projects/{id}/labels/{subscribable_id}/subscription
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3ProjectsIdLabelsSubscribableIdSubscription(
  /** The ID of a project */
  id: string,
  /** The ID of a resource */
  subscribableId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Label> {
  const result =
    await api.v3.deleteV3ProjectsIdLabelsSubscribableIdSubscription({
      id: id,
      subscribableId: subscribableId,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Subscribe to a resource
 * @request POST :/v3/projects/{id}/labels/{subscribable_id}/subscription
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdLabelsSubscribableIdSubscription(
  /** The ID of a project */
  id: string,
  /** The ID of a resource */
  subscribableId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Label> {
  const result = await api.v3.postV3ProjectsIdLabelsSubscribableIdSubscription({
    id: id,
    subscribableId: subscribableId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Gets a list of group or project members viewable by the authenticated user.
 * @request GET :/v3/projects/{id}/members
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdMembers(
  /** The project ID */
  id: string,
  query: {
    /** A query string to search for members */
    query?: string;
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Member> {
  const result = await api.v3.getV3ProjectsIdMembers({
    id: id,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Adds a member to a group or project.
 * @request POST :/v3/projects/{id}/members
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdMembers(
  /** The project ID */
  id: string,
  /** Request body */
  data: {
    /**
     * The user ID of the new member
     * @format int32
     */
    user_id: number;
    /**
     * A valid access level (defaults: `30`, developer access level)
     * @format int32
     */
    access_level: number;
    /**
     * Date string in the format YEAR-MONTH-DAY
     * @format date-time
     */
    expires_at?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Member> {
  const result = await api.v3.postV3ProjectsIdMembers({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Removes a user from a group or project.
 * @request DELETE :/v3/projects/{id}/members/{user_id}
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3ProjectsIdMembersUserId(
  /** The project ID */
  id: string,
  /** The user ID of the member */
  userId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.deleteV3ProjectsIdMembersUserId({
    id: id,
    userId: userId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Gets a member of a group or project.
 * @request GET :/v3/projects/{id}/members/{user_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdMembersUserId(
  /** The project ID */
  id: string,
  /** The user ID of the member */
  userId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Member> {
  const result = await api.v3.getV3ProjectsIdMembersUserId({
    id: id,
    userId: userId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Updates a member of a group or project.
 * @request PUT :/v3/projects/{id}/members/{user_id}
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdMembersUserId(
  /** The project ID */
  id: string,
  /** The user ID of the new member */
  userId: number,
  /** Request body */
  data: {
    /**
     * A valid access level
     * @format int32
     */
    access_level: number;
    /**
     * Date string in the format YEAR-MONTH-DAY
     * @format date-time
     */
    expires_at?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Member> {
  const result = await api.v3.putV3ProjectsIdMembersUserId({
    id: id,
    userId: userId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a single merge request
 * @request GET :/v3/projects/{id}/merge_request/{merge_request_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdMergeRequestMergeRequestId(
  /** The ID of a project */
  id: string,
  /** The ID of a merge request */
  mergeRequestId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<MergeRequest> {
  const result = await api.v3.getV3ProjectsIdMergeRequestMergeRequestId({
    id: id,
    mergeRequestId: mergeRequestId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update a merge request
 * @request PUT :/v3/projects/{id}/merge_request/{merge_request_id}
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdMergeRequestMergeRequestId(
  /** The ID of a project */
  id: string,
  mergeRequestId: number,
  /** Request body */
  data: {
    /** The title of the merge request */
    title?: string;
    /** The target branch */
    target_branch?: string;
    /** Status of the merge request */
    state_event?: "close" | "reopen" | "merge";
    /** The description of the merge request */
    description?: string;
    /**
     * The ID of a user to assign the merge request
     * @format int32
     */
    assignee_id?: number;
    /**
     * The ID of a milestone to assign the merge request
     * @format int32
     */
    milestone_id?: number;
    /** Comma-separated list of label names */
    labels?: string;
    /** Remove source branch when merging */
    remove_source_branch?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<MergeRequest> {
  const result = await api.v3.putV3ProjectsIdMergeRequestMergeRequestId({
    id: id,
    mergeRequestId: mergeRequestId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Cancel merge if "Merge When Pipeline Succeeds" is enabled
 * @request POST :/v3/projects/{id}/merge_request/{merge_request_id}/cancel_merge_when_build_succeeds
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdMergeRequestMergeRequestIdCancelMergeWhenBuildSucceeds(
  /** The ID of a project */
  id: string,
  mergeRequestId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<MergeRequest> {
  const result =
    await api.v3.postV3ProjectsIdMergeRequestMergeRequestIdCancelMergeWhenBuildSucceeds(
      {
        id: id,
        mergeRequestId: mergeRequestId,
        params: {
          headers: (headers?.value as Record<string, string>) ?? undefined,
        },
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Show the merge request changes
 * @request GET :/v3/projects/{id}/merge_request/{merge_request_id}/changes
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdMergeRequestMergeRequestIdChanges(
  /** The ID of a project */
  id: string,
  mergeRequestId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<MergeRequestChanges> {
  const result = await api.v3.getV3ProjectsIdMergeRequestMergeRequestIdChanges({
    id: id,
    mergeRequestId: mergeRequestId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List issues that will be closed on merge
 * @request GET :/v3/projects/{id}/merge_request/{merge_request_id}/closes_issues
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdMergeRequestMergeRequestIdClosesIssues(
  /** The ID of a project */
  id: string,
  mergeRequestId: number,
  query: {
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<MRNote> {
  const result =
    await api.v3.getV3ProjectsIdMergeRequestMergeRequestIdClosesIssues({
      id: id,
      mergeRequestId: mergeRequestId,
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the comments of a merge request
 * @request GET :/v3/projects/{id}/merge_request/{merge_request_id}/comments
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdMergeRequestMergeRequestIdComments(
  /** The ID of a project */
  id: string,
  mergeRequestId: number,
  query: {
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<MRNote> {
  const result = await api.v3.getV3ProjectsIdMergeRequestMergeRequestIdComments(
    {
      id: id,
      mergeRequestId: mergeRequestId,
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    },
  );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Post a comment to a merge request
 * @request POST :/v3/projects/{id}/merge_request/{merge_request_id}/comments
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdMergeRequestMergeRequestIdComments(
  /** The ID of a project */
  id: string,
  mergeRequestId: number,
  /** Request body */
  data: {
    /** The text of the comment */
    note: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<MRNote> {
  const result =
    await api.v3.postV3ProjectsIdMergeRequestMergeRequestIdComments({
      id: id,
      mergeRequestId: mergeRequestId,
      data: data,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the commits of a merge request
 * @request GET :/v3/projects/{id}/merge_request/{merge_request_id}/commits
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdMergeRequestMergeRequestIdCommits(
  /** The ID of a project */
  id: string,
  mergeRequestId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<RepoCommit> {
  const result = await api.v3.getV3ProjectsIdMergeRequestMergeRequestIdCommits({
    id: id,
    mergeRequestId: mergeRequestId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Merge a merge request
 * @request PUT :/v3/projects/{id}/merge_request/{merge_request_id}/merge
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdMergeRequestMergeRequestIdMerge(
  /** The ID of a project */
  id: string,
  mergeRequestId: number,
  /** Request body */
  data: {
    /** Custom merge commit message */
    merge_commit_message?: string;
    /** When true, the source branch will be deleted if possible */
    should_remove_source_branch?: boolean;
    /** When true, this merge request will be merged when the pipeline succeeds */
    merge_when_build_succeeds?: boolean;
    /** When present, must have the HEAD SHA of the source branch */
    sha?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<MergeRequest> {
  const result = await api.v3.putV3ProjectsIdMergeRequestMergeRequestIdMerge({
    id: id,
    mergeRequestId: mergeRequestId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Unsubscribe from a resource
 * @request DELETE :/v3/projects/{id}/merge_request/{subscribable_id}/subscription
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3ProjectsIdMergeRequestSubscribableIdSubscription(
  /** The ID of a project */
  id: string,
  /** The ID of a resource */
  subscribableId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<MergeRequest> {
  const result =
    await api.v3.deleteV3ProjectsIdMergeRequestSubscribableIdSubscription({
      id: id,
      subscribableId: subscribableId,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Subscribe to a resource
 * @request POST :/v3/projects/{id}/merge_request/{subscribable_id}/subscription
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdMergeRequestSubscribableIdSubscription(
  /** The ID of a project */
  id: string,
  /** The ID of a resource */
  subscribableId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<MergeRequest> {
  const result =
    await api.v3.postV3ProjectsIdMergeRequestSubscribableIdSubscription({
      id: id,
      subscribableId: subscribableId,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List merge requests
 * @request GET :/v3/projects/{id}/merge_requests
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdMergeRequests(
  /** The ID of a project */
  id: string,
  query: {
    /** Return opened, closed, merged, or all merge requests */
    state?: "opened" | "closed" | "merged" | "all";
    /** Return merge requests ordered by `created_at` or `updated_at` fields. */
    order_by?: "created_at" | "updated_at";
    /** Return merge requests sorted in `asc` or `desc` order. */
    sort?: "asc" | "desc";
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  /** Request body */
  data: {
    /** The IID of the merge requests */
    iid?: number[];
  },
  headers?: hasuraSdk.JSONValue,
): Promise<MergeRequest> {
  const result = await api.v3.getV3ProjectsIdMergeRequests({
    id: id,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a merge request
 * @request POST :/v3/projects/{id}/merge_requests
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdMergeRequests(
  /** The ID of a project */
  id: string,
  /** Request body */
  data: {
    /** The title of the merge request */
    title: string;
    /** The source branch */
    source_branch: string;
    /** The target branch */
    target_branch: string;
    /**
     * The target project of the merge request defaults to the :id of the project
     * @format int32
     */
    target_project_id?: number;
    /** The description of the merge request */
    description?: string;
    /**
     * The ID of a user to assign the merge request
     * @format int32
     */
    assignee_id?: number;
    /**
     * The ID of a milestone to assign the merge request
     * @format int32
     */
    milestone_id?: number;
    /** Comma-separated list of label names */
    labels?: string;
    /** Remove source branch when merging */
    remove_source_branch?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<MergeRequest> {
  const result = await api.v3.postV3ProjectsIdMergeRequests({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a merge request
 * @request DELETE :/v3/projects/{id}/merge_requests/{merge_request_id}
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3ProjectsIdMergeRequestsMergeRequestId(
  /** The ID of a project */
  id: string,
  /** The ID of a merge request */
  mergeRequestId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.deleteV3ProjectsIdMergeRequestsMergeRequestId({
    id: id,
    mergeRequestId: mergeRequestId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a single merge request
 * @request GET :/v3/projects/{id}/merge_requests/{merge_request_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdMergeRequestsMergeRequestId(
  /** The ID of a project */
  id: string,
  mergeRequestId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<MergeRequest> {
  const result = await api.v3.getV3ProjectsIdMergeRequestsMergeRequestId({
    id: id,
    mergeRequestId: mergeRequestId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update a merge request
 * @request PUT :/v3/projects/{id}/merge_requests/{merge_request_id}
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdMergeRequestsMergeRequestId(
  /** The ID of a project */
  id: string,
  mergeRequestId: number,
  /** Request body */
  data: {
    /** The title of the merge request */
    title?: string;
    /** The target branch */
    target_branch?: string;
    /** Status of the merge request */
    state_event?: "close" | "reopen" | "merge";
    /** The description of the merge request */
    description?: string;
    /**
     * The ID of a user to assign the merge request
     * @format int32
     */
    assignee_id?: number;
    /**
     * The ID of a milestone to assign the merge request
     * @format int32
     */
    milestone_id?: number;
    /** Comma-separated list of label names */
    labels?: string;
    /** Remove source branch when merging */
    remove_source_branch?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<MergeRequest> {
  const result = await api.v3.putV3ProjectsIdMergeRequestsMergeRequestId({
    id: id,
    mergeRequestId: mergeRequestId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Add spent time for a project merge_request
 * @request POST :/v3/projects/{id}/merge_requests/{merge_request_id}/add_spent_time
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdMergeRequestsMergeRequestIdAddSpentTime(
  /** The ID of a project */
  id: string,
  /** The ID of a project merge_request */
  mergeRequestId: number,
  /** Request body */
  data: {
    /** The duration to be parsed */
    duration: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.v3.postV3ProjectsIdMergeRequestsMergeRequestIdAddSpentTime({
      id: id,
      mergeRequestId: mergeRequestId,
      data: data,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a list of project +awardable+ award emoji
 * @request GET :/v3/projects/{id}/merge_requests/{merge_request_id}/award_emoji
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdMergeRequestsMergeRequestIdAwardEmoji(
  /** The ID of a project */
  id: string,
  /** The ID of an Issue, Merge Request or Snippet */
  mergeRequestId: number,
  query: {
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<AwardEmoji> {
  const result =
    await api.v3.getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmoji({
      id: id,
      mergeRequestId: mergeRequestId,
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Award a new Emoji
 * @request POST :/v3/projects/{id}/merge_requests/{merge_request_id}/award_emoji
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdMergeRequestsMergeRequestIdAwardEmoji(
  id: number,
  mergeRequestId: number,
  /** Request body */
  data: {
    /** The name of a award_emoji (without colons) */
    name: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<AwardEmoji> {
  const result =
    await api.v3.postV3ProjectsIdMergeRequestsMergeRequestIdAwardEmoji({
      id: id,
      mergeRequestId: mergeRequestId,
      data: data,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a +awardables+ award emoji
 * @request DELETE :/v3/projects/{id}/merge_requests/{merge_request_id}/award_emoji/{award_id}
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardId(
  /** The ID of an award emoji */
  awardId: number,
  id: number,
  mergeRequestId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<AwardEmoji> {
  const result =
    await api.v3.deleteV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardId(
      {
        awardId: awardId,
        id: id,
        mergeRequestId: mergeRequestId,
        params: {
          headers: (headers?.value as Record<string, string>) ?? undefined,
        },
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a specific award emoji
 * @request GET :/v3/projects/{id}/merge_requests/{merge_request_id}/award_emoji/{award_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardId(
  /** The ID of the award */
  awardId: number,
  id: number,
  mergeRequestId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<AwardEmoji> {
  const result =
    await api.v3.getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardId({
      awardId: awardId,
      id: id,
      mergeRequestId: mergeRequestId,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Cancel merge if "Merge When Pipeline Succeeds" is enabled
 * @request POST :/v3/projects/{id}/merge_requests/{merge_request_id}/cancel_merge_when_build_succeeds
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdMergeRequestsMergeRequestIdCancelMergeWhenBuildSucceeds(
  /** The ID of a project */
  id: string,
  mergeRequestId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<MergeRequest> {
  const result =
    await api.v3.postV3ProjectsIdMergeRequestsMergeRequestIdCancelMergeWhenBuildSucceeds(
      {
        id: id,
        mergeRequestId: mergeRequestId,
        params: {
          headers: (headers?.value as Record<string, string>) ?? undefined,
        },
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Show the merge request changes
 * @request GET :/v3/projects/{id}/merge_requests/{merge_request_id}/changes
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdMergeRequestsMergeRequestIdChanges(
  /** The ID of a project */
  id: string,
  mergeRequestId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<MergeRequestChanges> {
  const result = await api.v3.getV3ProjectsIdMergeRequestsMergeRequestIdChanges(
    {
      id: id,
      mergeRequestId: mergeRequestId,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    },
  );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List issues that will be closed on merge
 * @request GET :/v3/projects/{id}/merge_requests/{merge_request_id}/closes_issues
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdMergeRequestsMergeRequestIdClosesIssues(
  /** The ID of a project */
  id: string,
  mergeRequestId: number,
  query: {
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<MRNote> {
  const result =
    await api.v3.getV3ProjectsIdMergeRequestsMergeRequestIdClosesIssues({
      id: id,
      mergeRequestId: mergeRequestId,
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the comments of a merge request
 * @request GET :/v3/projects/{id}/merge_requests/{merge_request_id}/comments
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdMergeRequestsMergeRequestIdComments(
  /** The ID of a project */
  id: string,
  mergeRequestId: number,
  query: {
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<MRNote> {
  const result =
    await api.v3.getV3ProjectsIdMergeRequestsMergeRequestIdComments({
      id: id,
      mergeRequestId: mergeRequestId,
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Post a comment to a merge request
 * @request POST :/v3/projects/{id}/merge_requests/{merge_request_id}/comments
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdMergeRequestsMergeRequestIdComments(
  /** The ID of a project */
  id: string,
  mergeRequestId: number,
  /** Request body */
  data: {
    /** The text of the comment */
    note: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<MRNote> {
  const result =
    await api.v3.postV3ProjectsIdMergeRequestsMergeRequestIdComments({
      id: id,
      mergeRequestId: mergeRequestId,
      data: data,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the commits of a merge request
 * @request GET :/v3/projects/{id}/merge_requests/{merge_request_id}/commits
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdMergeRequestsMergeRequestIdCommits(
  /** The ID of a project */
  id: string,
  mergeRequestId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<RepoCommit> {
  const result = await api.v3.getV3ProjectsIdMergeRequestsMergeRequestIdCommits(
    {
      id: id,
      mergeRequestId: mergeRequestId,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    },
  );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Merge a merge request
 * @request PUT :/v3/projects/{id}/merge_requests/{merge_request_id}/merge
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdMergeRequestsMergeRequestIdMerge(
  /** The ID of a project */
  id: string,
  mergeRequestId: number,
  /** Request body */
  data: {
    /** Custom merge commit message */
    merge_commit_message?: string;
    /** When true, the source branch will be deleted if possible */
    should_remove_source_branch?: boolean;
    /** When true, this merge request will be merged when the pipeline succeeds */
    merge_when_build_succeeds?: boolean;
    /** When present, must have the HEAD SHA of the source branch */
    sha?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<MergeRequest> {
  const result = await api.v3.putV3ProjectsIdMergeRequestsMergeRequestIdMerge({
    id: id,
    mergeRequestId: mergeRequestId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a list of project +awardable+ award emoji
 * @request GET :/v3/projects/{id}/merge_requests/{merge_request_id}/notes/{note_id}/award_emoji
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmoji(
  id: number,
  mergeRequestId: number,
  noteId: number,
  query: {
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<AwardEmoji> {
  const result =
    await api.v3.getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmoji(
      {
        id: id,
        mergeRequestId: mergeRequestId,
        noteId: noteId,
        query: query,
        params: {
          headers: (headers?.value as Record<string, string>) ?? undefined,
        },
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Award a new Emoji
 * @request POST :/v3/projects/{id}/merge_requests/{merge_request_id}/notes/{note_id}/award_emoji
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmoji(
  id: number,
  mergeRequestId: number,
  noteId: number,
  /** Request body */
  data: {
    /** The name of a award_emoji (without colons) */
    name: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<AwardEmoji> {
  const result =
    await api.v3.postV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmoji(
      {
        id: id,
        mergeRequestId: mergeRequestId,
        noteId: noteId,
        data: data,
        params: {
          headers: (headers?.value as Record<string, string>) ?? undefined,
        },
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a +awardables+ award emoji
 * @request DELETE :/v3/projects/{id}/merge_requests/{merge_request_id}/notes/{note_id}/award_emoji/{award_id}
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardId(
  /** The ID of an award emoji */
  awardId: number,
  id: number,
  mergeRequestId: number,
  noteId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<AwardEmoji> {
  const result =
    await api.v3.deleteV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardId(
      {
        awardId: awardId,
        id: id,
        mergeRequestId: mergeRequestId,
        noteId: noteId,
        params: {
          headers: (headers?.value as Record<string, string>) ?? undefined,
        },
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a specific award emoji
 * @request GET :/v3/projects/{id}/merge_requests/{merge_request_id}/notes/{note_id}/award_emoji/{award_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardId(
  /** The ID of the award */
  awardId: number,
  id: number,
  mergeRequestId: number,
  noteId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<AwardEmoji> {
  const result =
    await api.v3.getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardId(
      {
        awardId: awardId,
        id: id,
        mergeRequestId: mergeRequestId,
        noteId: noteId,
        params: {
          headers: (headers?.value as Record<string, string>) ?? undefined,
        },
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Reset spent time for a project merge_request
 * @request POST :/v3/projects/{id}/merge_requests/{merge_request_id}/reset_spent_time
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdMergeRequestsMergeRequestIdResetSpentTime(
  /** The ID of a project */
  id: string,
  /** The ID of a project merge_request */
  mergeRequestId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.v3.postV3ProjectsIdMergeRequestsMergeRequestIdResetSpentTime({
      id: id,
      mergeRequestId: mergeRequestId,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Reset the time estimate for a project merge_request
 * @request POST :/v3/projects/{id}/merge_requests/{merge_request_id}/reset_time_estimate
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdMergeRequestsMergeRequestIdResetTimeEstimate(
  /** The ID of a project */
  id: string,
  /** The ID of a project merge_request */
  mergeRequestId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.v3.postV3ProjectsIdMergeRequestsMergeRequestIdResetTimeEstimate({
      id: id,
      mergeRequestId: mergeRequestId,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set a time estimate for a project merge_request
 * @request POST :/v3/projects/{id}/merge_requests/{merge_request_id}/time_estimate
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdMergeRequestsMergeRequestIdTimeEstimate(
  /** The ID of a project */
  id: string,
  /** The ID of a project merge_request */
  mergeRequestId: number,
  /** Request body */
  data: {
    /** The duration to be parsed */
    duration: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.v3.postV3ProjectsIdMergeRequestsMergeRequestIdTimeEstimate({
      id: id,
      mergeRequestId: mergeRequestId,
      data: data,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Show time stats for a project merge_request
 * @request GET :/v3/projects/{id}/merge_requests/{merge_request_id}/time_stats
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdMergeRequestsMergeRequestIdTimeStats(
  /** The ID of a project */
  id: string,
  /** The ID of a project merge_request */
  mergeRequestId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.v3.getV3ProjectsIdMergeRequestsMergeRequestIdTimeStats({
      id: id,
      mergeRequestId: mergeRequestId,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a todo on an issuable
 * @request POST :/v3/projects/{id}/merge_requests/{merge_request_id}/todo
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdMergeRequestsMergeRequestIdTodo(
  /** The ID of a project */
  id: string,
  /** The ID of an issuable */
  mergeRequestId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Todo> {
  const result = await api.v3.postV3ProjectsIdMergeRequestsMergeRequestIdTodo({
    id: id,
    mergeRequestId: mergeRequestId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a list of merge request diff versions
 * @request GET :/v3/projects/{id}/merge_requests/{merge_request_id}/versions
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdMergeRequestsMergeRequestIdVersions(
  /** The ID of a project */
  id: string,
  /** The ID of a merge request */
  mergeRequestId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<MergeRequestDiff> {
  const result =
    await api.v3.getV3ProjectsIdMergeRequestsMergeRequestIdVersions({
      id: id,
      mergeRequestId: mergeRequestId,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a single merge request diff version
 * @request GET :/v3/projects/{id}/merge_requests/{merge_request_id}/versions/{version_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdMergeRequestsMergeRequestIdVersionsVersionId(
  /** The ID of a project */
  id: string,
  /** The ID of a merge request */
  mergeRequestId: number,
  /** The ID of a merge request diff version */
  versionId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<MergeRequestDiffFull> {
  const result =
    await api.v3.getV3ProjectsIdMergeRequestsMergeRequestIdVersionsVersionId({
      id: id,
      mergeRequestId: mergeRequestId,
      versionId: versionId,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a list of project +noteable+ notes
 * @request GET :/v3/projects/{id}/merge_requests/{noteable_id}/notes
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdMergeRequestsNoteableIdNotes(
  /** The ID of a project */
  id: string,
  /** The ID of the noteable */
  noteableId: number,
  query: {
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Note> {
  const result = await api.v3.getV3ProjectsIdMergeRequestsNoteableIdNotes({
    id: id,
    noteableId: noteableId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a new +noteable+ note
 * @request POST :/v3/projects/{id}/merge_requests/{noteable_id}/notes
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdMergeRequestsNoteableIdNotes(
  /** The ID of a project */
  id: string,
  /** The ID of the noteable */
  noteableId: number,
  /** Request body */
  data: {
    /** The content of a note */
    body: string;
    /** The creation date of the note */
    created_at?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Note> {
  const result = await api.v3.postV3ProjectsIdMergeRequestsNoteableIdNotes({
    id: id,
    noteableId: noteableId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a +noteable+ note
 * @request DELETE :/v3/projects/{id}/merge_requests/{noteable_id}/notes/{note_id}
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3ProjectsIdMergeRequestsNoteableIdNotesNoteId(
  /** The ID of a project */
  id: string,
  /** The ID of the noteable */
  noteableId: number,
  /** The ID of a note */
  noteId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Note> {
  const result =
    await api.v3.deleteV3ProjectsIdMergeRequestsNoteableIdNotesNoteId({
      id: id,
      noteableId: noteableId,
      noteId: noteId,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a single +noteable+ note
 * @request GET :/v3/projects/{id}/merge_requests/{noteable_id}/notes/{note_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdMergeRequestsNoteableIdNotesNoteId(
  /** The ID of a project */
  id: string,
  /** The ID of a note */
  noteId: number,
  /** The ID of the noteable */
  noteableId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Note> {
  const result = await api.v3.getV3ProjectsIdMergeRequestsNoteableIdNotesNoteId(
    {
      id: id,
      noteId: noteId,
      noteableId: noteableId,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    },
  );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update an existing +noteable+ note
 * @request PUT :/v3/projects/{id}/merge_requests/{noteable_id}/notes/{note_id}
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdMergeRequestsNoteableIdNotesNoteId(
  /** The ID of a project */
  id: string,
  /** The ID of the noteable */
  noteableId: number,
  /** The ID of a note */
  noteId: number,
  /** Request body */
  data: {
    /** The content of a note */
    body: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Note> {
  const result = await api.v3.putV3ProjectsIdMergeRequestsNoteableIdNotesNoteId(
    {
      id: id,
      noteableId: noteableId,
      noteId: noteId,
      data: data,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    },
  );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Unsubscribe from a resource
 * @request DELETE :/v3/projects/{id}/merge_requests/{subscribable_id}/subscription
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3ProjectsIdMergeRequestsSubscribableIdSubscription(
  /** The ID of a project */
  id: string,
  /** The ID of a resource */
  subscribableId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<MergeRequest> {
  const result =
    await api.v3.deleteV3ProjectsIdMergeRequestsSubscribableIdSubscription({
      id: id,
      subscribableId: subscribableId,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Subscribe to a resource
 * @request POST :/v3/projects/{id}/merge_requests/{subscribable_id}/subscription
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdMergeRequestsSubscribableIdSubscription(
  /** The ID of a project */
  id: string,
  /** The ID of a resource */
  subscribableId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<MergeRequest> {
  const result =
    await api.v3.postV3ProjectsIdMergeRequestsSubscribableIdSubscription({
      id: id,
      subscribableId: subscribableId,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a list of project milestones
 * @request GET :/v3/projects/{id}/milestones
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdMilestones(
  /** The ID of a project */
  id: string,
  query: {
    /** Return "active", "closed", or "all" milestones */
    state?: "active" | "closed" | "all";
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  /** Request body */
  data: {
    /** The IID of the milestone */
    iid?: number[];
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Milestone> {
  const result = await api.v3.getV3ProjectsIdMilestones({
    id: id,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a new project milestone
 * @request POST :/v3/projects/{id}/milestones
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdMilestones(
  /** The ID of a project */
  id: string,
  /** Request body */
  data: {
    /** The title of the milestone */
    title: string;
    /** The description of the milestone */
    description?: string;
    /** The due date of the milestone. The ISO 8601 date format (%Y-%m-%d) */
    due_date?: string;
    /** The start date of the milestone. The ISO 8601 date format (%Y-%m-%d) */
    start_date?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Milestone> {
  const result = await api.v3.postV3ProjectsIdMilestones({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a single project milestone
 * @request GET :/v3/projects/{id}/milestones/{milestone_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdMilestonesMilestoneId(
  /** The ID of a project */
  id: string,
  /** The ID of a project milestone */
  milestoneId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Milestone> {
  const result = await api.v3.getV3ProjectsIdMilestonesMilestoneId({
    id: id,
    milestoneId: milestoneId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update an existing project milestone
 * @request PUT :/v3/projects/{id}/milestones/{milestone_id}
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdMilestonesMilestoneId(
  /** The ID of a project */
  id: string,
  /** The ID of a project milestone */
  milestoneId: number,
  /** Request body */
  data: {
    /** The title of the milestone */
    title?: string;
    /** The state event of the milestone  */
    state_event?: "close" | "activate";
    /** The description of the milestone */
    description?: string;
    /** The due date of the milestone. The ISO 8601 date format (%Y-%m-%d) */
    due_date?: string;
    /** The start date of the milestone. The ISO 8601 date format (%Y-%m-%d) */
    start_date?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Milestone> {
  const result = await api.v3.putV3ProjectsIdMilestonesMilestoneId({
    id: id,
    milestoneId: milestoneId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get all issues for a single project milestone
 * @request GET :/v3/projects/{id}/milestones/{milestone_id}/issues
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdMilestonesMilestoneIdIssues(
  /** The ID of a project */
  id: string,
  /** The ID of a project milestone */
  milestoneId: number,
  query: {
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Issue> {
  const result = await api.v3.getV3ProjectsIdMilestonesMilestoneIdIssues({
    id: id,
    milestoneId: milestoneId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get project level notification level settings, defaults to Global
 * @request GET :/v3/projects/{id}/notification_settings
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdNotificationSettings(
  /** The group ID or project ID or project NAMESPACE/PROJECT_NAME */
  id: string,
  headers?: hasuraSdk.JSONValue,
): Promise<NotificationSetting> {
  const result = await api.v3.getV3ProjectsIdNotificationSettings({
    id: id,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update project level notification level settings, defaults to Global
 * @request PUT :/v3/projects/{id}/notification_settings
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdNotificationSettings(
  /** The group ID or project ID or project NAMESPACE/PROJECT_NAME */
  id: string,
  /** Request body */
  data: {
    /** The project notification level */
    level?: string;
    /** Enable/disable this notification */
    new_note?: boolean;
    /** Enable/disable this notification */
    new_issue?: boolean;
    /** Enable/disable this notification */
    reopen_issue?: boolean;
    /** Enable/disable this notification */
    close_issue?: boolean;
    /** Enable/disable this notification */
    reassign_issue?: boolean;
    /** Enable/disable this notification */
    new_merge_request?: boolean;
    /** Enable/disable this notification */
    reopen_merge_request?: boolean;
    /** Enable/disable this notification */
    close_merge_request?: boolean;
    /** Enable/disable this notification */
    reassign_merge_request?: boolean;
    /** Enable/disable this notification */
    merge_merge_request?: boolean;
    /** Enable/disable this notification */
    failed_pipeline?: boolean;
    /** Enable/disable this notification */
    success_pipeline?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<NotificationSetting> {
  const result = await api.v3.putV3ProjectsIdNotificationSettings({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a new pipeline
 * @request POST :/v3/projects/{id}/pipeline
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdPipeline(
  /** The project ID */
  id: string,
  /** Request body */
  data: {
    /** Reference */
    ref: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Pipeline> {
  const result = await api.v3.postV3ProjectsIdPipeline({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get all Pipelines of the project
 * @request GET :/v3/projects/{id}/pipelines
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdPipelines(
  /** The project ID */
  id: string,
  query: {
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
    /** Either running, branches, or tags */
    scope?: "running" | "branches" | "tags";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Pipeline> {
  const result = await api.v3.getV3ProjectsIdPipelines({
    id: id,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Gets a specific pipeline for the project
 * @request GET :/v3/projects/{id}/pipelines/{pipeline_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdPipelinesPipelineId(
  /** The project ID */
  id: string,
  /** The pipeline ID */
  pipelineId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Pipeline> {
  const result = await api.v3.getV3ProjectsIdPipelinesPipelineId({
    id: id,
    pipelineId: pipelineId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Cancel all builds in the pipeline
 * @request POST :/v3/projects/{id}/pipelines/{pipeline_id}/cancel
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdPipelinesPipelineIdCancel(
  /** The project ID */
  id: string,
  /** The pipeline ID */
  pipelineId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Pipeline> {
  const result = await api.v3.postV3ProjectsIdPipelinesPipelineIdCancel({
    id: id,
    pipelineId: pipelineId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Retry failed builds in the pipeline
 * @request POST :/v3/projects/{id}/pipelines/{pipeline_id}/retry
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdPipelinesPipelineIdRetry(
  /** The project ID */
  id: string,
  /** The pipeline ID */
  pipelineId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Pipeline> {
  const result = await api.v3.postV3ProjectsIdPipelinesPipelineIdRetry({
    id: id,
    pipelineId: pipelineId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get an archive of the repository
 * @request GET :/v3/projects/{id}/repository/archive
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdRepositoryArchive(
  /** The ID of a project */
  id: string,
  query: {
    /** The commit sha of the archive to be downloaded */
    sha?: string;
    /** The archive format */
    format?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.getV3ProjectsIdRepositoryArchive({
    id: id,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a raw file contents
 * @request GET :/v3/projects/{id}/repository/blobs/{sha}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdRepositoryBlobsSha(
  /** The ID of a project */
  id: string,
  /** The commit, branch name, or tag name */
  sha: string,
  query: {
    /** The path to the file to display */
    filepath: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.getV3ProjectsIdRepositoryBlobsSha({
    id: id,
    sha: sha,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a project repository branches
 * @request GET :/v3/projects/{id}/repository/branches
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdRepositoryBranches(
  /** The ID of a project */
  id: string,
  headers?: hasuraSdk.JSONValue,
): Promise<RepoBranch> {
  const result = await api.v3.getV3ProjectsIdRepositoryBranches({
    id: id,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create branch
 * @request POST :/v3/projects/{id}/repository/branches
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdRepositoryBranches(
  /** The ID of a project */
  id: string,
  /** Request body */
  data: {
    /** The name of the branch */
    branch_name: string;
    /** Create branch from commit sha or existing branch */
    ref: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<RepoBranch> {
  const result = await api.v3.postV3ProjectsIdRepositoryBranches({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a branch
 * @request DELETE :/v3/projects/{id}/repository/branches/{branch}
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3ProjectsIdRepositoryBranchesBranch(
  /** The ID of a project */
  id: string,
  /** The name of the branch */
  branch: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.deleteV3ProjectsIdRepositoryBranchesBranch({
    id: id,
    branch: branch,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a single branch
 * @request GET :/v3/projects/{id}/repository/branches/{branch}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdRepositoryBranchesBranch(
  /** The ID of a project */
  id: string,
  /** The name of the branch */
  branch: string,
  headers?: hasuraSdk.JSONValue,
): Promise<RepoBranch> {
  const result = await api.v3.getV3ProjectsIdRepositoryBranchesBranch({
    id: id,
    branch: branch,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Protect a single branch
 * @request PUT :/v3/projects/{id}/repository/branches/{branch}/protect
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdRepositoryBranchesBranchProtect(
  /** The ID of a project */
  id: string,
  /** The name of the branch */
  branch: string,
  /** Request body */
  data: {
    /** Flag if developers can push to that branch */
    developers_can_push?: boolean;
    /** Flag if developers can merge to that branch */
    developers_can_merge?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<RepoBranch> {
  const result = await api.v3.putV3ProjectsIdRepositoryBranchesBranchProtect({
    id: id,
    branch: branch,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Unprotect a single branch
 * @request PUT :/v3/projects/{id}/repository/branches/{branch}/unprotect
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdRepositoryBranchesBranchUnprotect(
  /** The ID of a project */
  id: string,
  /** The name of the branch */
  branch: string,
  headers?: hasuraSdk.JSONValue,
): Promise<RepoBranch> {
  const result = await api.v3.putV3ProjectsIdRepositoryBranchesBranchUnprotect({
    id: id,
    branch: branch,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a project repository commits
 * @request GET :/v3/projects/{id}/repository/commits
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdRepositoryCommits(
  /** The ID of a project */
  id: string,
  query: {
    /** The name of a repository branch or tag, if not given the default branch is used */
    ref_name?: string;
    /** Only commits after or in this date will be returned */
    since?: string;
    /** Only commits before or in this date will be returned */
    until?: string;
    /** The page for pagination */
    page?: number;
    /** The number of results per page */
    per_page?: number;
    /** The file path */
    path?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<RepoCommit> {
  const result = await api.v3.getV3ProjectsIdRepositoryCommits({
    id: id,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Commit multiple file changes as one commit
 * @request POST :/v3/projects/{id}/repository/commits
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdRepositoryCommits(
  /** The ID of a project */
  id: string,
  /** Request body */
  data: {
    /** The name of branch */
    branch_name: string;
    /** Commit message */
    commit_message: string;
    /** Actions to perform in commit */
    actions: any[];
    /** Author email for commit */
    author_email?: string;
    /** Author name for commit */
    author_name?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<RepoCommitDetail> {
  const result = await api.v3.postV3ProjectsIdRepositoryCommits({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a specific commit of a project
 * @request GET :/v3/projects/{id}/repository/commits/{sha}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdRepositoryCommitsSha(
  /** The ID of a project */
  id: string,
  /** A commit sha, or the name of a branch or tag */
  sha: string,
  headers?: hasuraSdk.JSONValue,
): Promise<RepoCommitDetail> {
  const result = await api.v3.getV3ProjectsIdRepositoryCommitsSha({
    id: id,
    sha: sha,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a raw file contents
 * @request GET :/v3/projects/{id}/repository/commits/{sha}/blob
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdRepositoryCommitsShaBlob(
  /** The ID of a project */
  id: string,
  /** The commit, branch name, or tag name */
  sha: string,
  query: {
    /** The path to the file to display */
    filepath: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.getV3ProjectsIdRepositoryCommitsShaBlob({
    id: id,
    sha: sha,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get builds for a specific commit of a project
 * @request GET :/v3/projects/{id}/repository/commits/{sha}/builds
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdRepositoryCommitsShaBuilds(
  /** The ID of a project */
  id: string,
  /** The SHA id of a commit */
  sha: string,
  query: {
    /** The scope of builds to show */
    scope?: "pending" | "running" | "failed" | "success" | "canceled";
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Build> {
  const result = await api.v3.getV3ProjectsIdRepositoryCommitsShaBuilds({
    id: id,
    sha: sha,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Cherry pick commit into a branch
 * @request POST :/v3/projects/{id}/repository/commits/{sha}/cherry_pick
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdRepositoryCommitsShaCherryPick(
  /** The ID of a project */
  id: string,
  /** A commit sha to be cherry picked */
  sha: string,
  /** Request body */
  data: {
    /** The name of the branch */
    branch: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<RepoCommit> {
  const result = await api.v3.postV3ProjectsIdRepositoryCommitsShaCherryPick({
    id: id,
    sha: sha,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a commit's comments
 * @request GET :/v3/projects/{id}/repository/commits/{sha}/comments
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdRepositoryCommitsShaComments(
  /** The ID of a project */
  id: string,
  /** A commit sha, or the name of a branch or tag */
  sha: string,
  query: {
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<CommitNote> {
  const result = await api.v3.getV3ProjectsIdRepositoryCommitsShaComments({
    id: id,
    sha: sha,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Post comment to commit
 * @request POST :/v3/projects/{id}/repository/commits/{sha}/comments
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdRepositoryCommitsShaComments(
  /** The ID of a project */
  id: string,
  /** The commit's SHA */
  sha: string,
  /** Request body */
  data: {
    /** The text of the comment */
    note: string;
    /** The file path */
    path?: string;
    /**
     * The line number
     * @format int32
     */
    line: number;
    /**
     * The type of the line
     * @default "new"
     */
    line_type: "new" | "old";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<CommitNote> {
  const result = await api.v3.postV3ProjectsIdRepositoryCommitsShaComments({
    id: id,
    sha: sha,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the diff for a specific commit of a project
 * @request GET :/v3/projects/{id}/repository/commits/{sha}/diff
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdRepositoryCommitsShaDiff(
  /** The ID of a project */
  id: string,
  /** A commit sha, or the name of a branch or tag */
  sha: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.getV3ProjectsIdRepositoryCommitsShaDiff({
    id: id,
    sha: sha,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a commit's statuses
 * @request GET :/v3/projects/{id}/repository/commits/{sha}/statuses
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdRepositoryCommitsShaStatuses(
  /** The ID of a project */
  id: string,
  /** The commit hash */
  sha: string,
  query: {
    /** The ref */
    ref?: string;
    /** The stage */
    stage?: string;
    /** The name */
    name?: string;
    /** Show all statuses, default: false */
    all?: string;
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<CommitStatus> {
  const result = await api.v3.getV3ProjectsIdRepositoryCommitsShaStatuses({
    id: id,
    sha: sha,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Compare two branches, tags, or commits
 * @request GET :/v3/projects/{id}/repository/compare
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdRepositoryCompare(
  /** The ID of a project */
  id: string,
  query: {
    /** The commit, branch name, or tag name to start comparison */
    from: string;
    /** The commit, branch name, or tag name to stop comparison */
    to: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Compare> {
  const result = await api.v3.getV3ProjectsIdRepositoryCompare({
    id: id,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get repository contributors
 * @request GET :/v3/projects/{id}/repository/contributors
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdRepositoryContributors(
  /** The ID of a project */
  id: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Contributor> {
  const result = await api.v3.getV3ProjectsIdRepositoryContributors({
    id: id,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete an existing file in repository
 * @request DELETE :/v3/projects/{id}/repository/files
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3ProjectsIdRepositoryFiles(
  /** The project ID */
  id: string,
  query: {
    /** The path to new file. Ex. lib/class.rb */
    file_path: string;
    /** The name of branch */
    branch_name: string;
    /** Commit Message */
    commit_message: string;
    /** The email of the author */
    author_email?: string;
    /** The name of the author */
    author_name?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.deleteV3ProjectsIdRepositoryFiles({
    id: id,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a file from repository
 * @request GET :/v3/projects/{id}/repository/files
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdRepositoryFiles(
  /** The project ID */
  id: string,
  query: {
    /** The path to the file. Ex. lib/class.rb */
    file_path: string;
    /** The name of branch, tag, or commit */
    ref: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.getV3ProjectsIdRepositoryFiles({
    id: id,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create new file in repository
 * @request POST :/v3/projects/{id}/repository/files
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdRepositoryFiles(
  /** The project ID */
  id: string,
  /** Request body */
  data: {
    /** The path to new file. Ex. lib/class.rb */
    file_path: string;
    /** The name of branch */
    branch_name: string;
    /** Commit Message */
    commit_message: string;
    /** The email of the author */
    author_email?: string;
    /** The name of the author */
    author_name?: string;
    /** File content */
    content: string;
    /** File encoding */
    encoding?: "base64";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.postV3ProjectsIdRepositoryFiles({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update existing file in repository
 * @request PUT :/v3/projects/{id}/repository/files
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdRepositoryFiles(
  /** The project ID */
  id: string,
  /** Request body */
  data: {
    /** The path to new file. Ex. lib/class.rb */
    file_path: string;
    /** The name of branch */
    branch_name: string;
    /** Commit Message */
    commit_message: string;
    /** The email of the author */
    author_email?: string;
    /** The name of the author */
    author_name?: string;
    /** File content */
    content: string;
    /** File encoding */
    encoding?: "base64";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.putV3ProjectsIdRepositoryFiles({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request DELETE :/v3/projects/{id}/repository/merged_branches
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3ProjectsIdRepositoryMergedBranches(
  /** The ID of a project */
  id: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.deleteV3ProjectsIdRepositoryMergedBranches({
    id: id,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a raw blob contents by blob sha
 * @request GET :/v3/projects/{id}/repository/raw_blobs/{sha}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdRepositoryRawBlobsSha(
  /** The ID of a project */
  id: string,
  /** The commit, branch name, or tag name */
  sha: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.getV3ProjectsIdRepositoryRawBlobsSha({
    id: id,
    sha: sha,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a project repository tags
 * @request GET :/v3/projects/{id}/repository/tags
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdRepositoryTags(
  /** The ID of a project */
  id: string,
  headers?: hasuraSdk.JSONValue,
): Promise<RepoTag> {
  const result = await api.v3.getV3ProjectsIdRepositoryTags({
    id: id,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a new repository tag
 * @request POST :/v3/projects/{id}/repository/tags
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdRepositoryTags(
  /** The ID of a project */
  id: string,
  /** Request body */
  data: {
    /** The name of the tag */
    tag_name: string;
    /** The commit sha or branch name */
    ref: string;
    /** Specifying a message creates an annotated tag */
    message?: string;
    /** Specifying release notes stored in the GitLab database */
    release_description?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<RepoTag> {
  const result = await api.v3.postV3ProjectsIdRepositoryTags({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a repository tag
 * @request DELETE :/v3/projects/{id}/repository/tags/{tag_name}
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3ProjectsIdRepositoryTagsTagName(
  /** The ID of a project */
  id: string,
  /** The name of the tag */
  tagName: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.deleteV3ProjectsIdRepositoryTagsTagName({
    id: id,
    tagName: tagName,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a single repository tag
 * @request GET :/v3/projects/{id}/repository/tags/{tag_name}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdRepositoryTagsTagName(
  /** The ID of a project */
  id: string,
  /** The name of the tag */
  tagName: string,
  headers?: hasuraSdk.JSONValue,
): Promise<RepoTag> {
  const result = await api.v3.getV3ProjectsIdRepositoryTagsTagName({
    id: id,
    tagName: tagName,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Add a release note to a tag
 * @request POST :/v3/projects/{id}/repository/tags/{tag_name}/release
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdRepositoryTagsTagNameRelease(
  /** The ID of a project */
  id: string,
  /** The name of the tag */
  tagName: string,
  /** Request body */
  data: {
    /** Release notes with markdown support */
    description: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Release> {
  const result = await api.v3.postV3ProjectsIdRepositoryTagsTagNameRelease({
    id: id,
    tagName: tagName,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update a tag's release note
 * @request PUT :/v3/projects/{id}/repository/tags/{tag_name}/release
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdRepositoryTagsTagNameRelease(
  /** The ID of a project */
  id: string,
  /** The name of the tag */
  tagName: string,
  /** Request body */
  data: {
    /** Release notes with markdown support */
    description: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Release> {
  const result = await api.v3.putV3ProjectsIdRepositoryTagsTagNameRelease({
    id: id,
    tagName: tagName,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a project repository tree
 * @request GET :/v3/projects/{id}/repository/tree
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdRepositoryTree(
  /** The ID of a project */
  id: string,
  query: {
    /** The name of a repository branch or tag, if not given the default branch is used */
    ref_name?: string;
    /** The path of the tree */
    path?: string;
    /** Used to get a recursive tree */
    recursive?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<RepoTreeObject> {
  const result = await api.v3.getV3ProjectsIdRepositoryTree({
    id: id,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get runners available for project
 * @request GET :/v3/projects/{id}/runners
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdRunners(
  /** The ID of a project */
  id: string,
  query: {
    /** The scope of specific runners to show */
    scope?: "active" | "paused" | "online" | "specific" | "shared";
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Runner> {
  const result = await api.v3.getV3ProjectsIdRunners({
    id: id,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Enable a runner for a project
 * @request POST :/v3/projects/{id}/runners
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdRunners(
  /** The ID of a project */
  id: string,
  /** Request body */
  data: {
    /**
     * The ID of the runner
     * @format int32
     */
    runner_id: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Runner> {
  const result = await api.v3.postV3ProjectsIdRunners({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Disable project's runner
 * @request DELETE :/v3/projects/{id}/runners/{runner_id}
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3ProjectsIdRunnersRunnerId(
  /** The ID of a project */
  id: string,
  /** The ID of the runner */
  runnerId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Runner> {
  const result = await api.v3.deleteV3ProjectsIdRunnersRunnerId({
    id: id,
    runnerId: runnerId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set asana service for project
 * @request PUT :/v3/projects/{id}/services/asana
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdServicesAsana(
  id: number,
  /** Request body */
  data: {
    /** User API token */
    api_key: string;
    /** Comma-separated list of branches which will be automatically inspected. Leave blank to include all branches */
    restrict_to_branch?: string;
    /** Event will be triggered by a push to the repository */
    push_events?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.putV3ProjectsIdServicesAsana({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set assembla service for project
 * @request PUT :/v3/projects/{id}/services/assembla
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdServicesAssembla(
  id: number,
  /** Request body */
  data: {
    /** The authentication token */
    token: string;
    /** Subdomain setting */
    subdomain?: string;
    /** Event will be triggered by a push to the repository */
    push_events?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.putV3ProjectsIdServicesAssembla({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set bamboo service for project
 * @request PUT :/v3/projects/{id}/services/bamboo
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdServicesBamboo(
  id: number,
  /** Request body */
  data: {
    /** Bamboo root URL like https://bamboo.example.com */
    bamboo_url: string;
    /** Bamboo build plan key like */
    build_key: string;
    /** A user with API access, if applicable */
    username: string;
    /** Passord of the user */
    password: string;
    /** Event will be triggered by a push to the repository */
    push_events?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.putV3ProjectsIdServicesBamboo({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set bugzilla service for project
 * @request PUT :/v3/projects/{id}/services/bugzilla
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdServicesBugzilla(
  id: number,
  /** Request body */
  data: {
    /** New issue URL */
    new_issue_url: string;
    /** Issues URL */
    issues_url: string;
    /** Project URL */
    project_url: string;
    /** Description */
    description?: string;
    /** Title */
    title?: string;
    /** Event will be triggered by a push to the repository */
    push_events?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.putV3ProjectsIdServicesBugzilla({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set buildkite service for project
 * @request PUT :/v3/projects/{id}/services/buildkite
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdServicesBuildkite(
  id: number,
  /** Request body */
  data: {
    /** Buildkite project GitLab token */
    token: string;
    /** The buildkite project URL */
    project_url: string;
    /** Enable SSL verification for communication */
    enable_ssl_verification?: boolean;
    /** Event will be triggered by a push to the repository */
    push_events?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.putV3ProjectsIdServicesBuildkite({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set builds-email service for project
 * @request PUT :/v3/projects/{id}/services/builds-email
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdServicesBuildsEmail(
  id: number,
  /** Request body */
  data: {
    /** Comma-separated list of recipient email addresses */
    recipients: string;
    /** Add pusher to recipients list */
    add_pusher?: boolean;
    /** Notify only broken builds */
    notify_only_broken_builds?: boolean;
    /** Event will be triggered when a build status changes */
    build_events?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.putV3ProjectsIdServicesBuildsEmail({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set campfire service for project
 * @request PUT :/v3/projects/{id}/services/campfire
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdServicesCampfire(
  id: number,
  /** Request body */
  data: {
    /** Campfire token */
    token: string;
    /** Campfire subdomain */
    subdomain?: string;
    /** Campfire room */
    room?: string;
    /** Event will be triggered by a push to the repository */
    push_events?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.putV3ProjectsIdServicesCampfire({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set custom-issue-tracker service for project
 * @request PUT :/v3/projects/{id}/services/custom-issue-tracker
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdServicesCustomIssueTracker(
  id: number,
  /** Request body */
  data: {
    /** New issue URL */
    new_issue_url: string;
    /** Issues URL */
    issues_url: string;
    /** Project URL */
    project_url: string;
    /** Description */
    description?: string;
    /** Title */
    title?: string;
    /** Event will be triggered by a push to the repository */
    push_events?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.putV3ProjectsIdServicesCustomIssueTracker({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set drone-ci service for project
 * @request PUT :/v3/projects/{id}/services/drone-ci
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdServicesDroneCi(
  id: number,
  /** Request body */
  data: {
    /** Drone CI token */
    token: string;
    /** Drone CI URL */
    drone_url: string;
    /** Enable SSL verification for communication */
    enable_ssl_verification?: boolean;
    /** Event will be triggered by a push to the repository */
    push_events?: string;
    /** Event will be triggered when a merge request is created/updated/merged */
    merge_request_events?: string;
    /** Event will be triggered when a new tag is pushed to the repository */
    tag_push_events?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.putV3ProjectsIdServicesDroneCi({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set emails-on-push service for project
 * @request PUT :/v3/projects/{id}/services/emails-on-push
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdServicesEmailsOnPush(
  id: number,
  /** Request body */
  data: {
    /** Comma-separated list of recipient email addresses */
    recipients: string;
    /** Disable code diffs */
    disable_diffs?: boolean;
    /** Send from committer */
    send_from_committer_email?: boolean;
    /** Event will be triggered by a push to the repository */
    push_events?: string;
    /** Event will be triggered when a new tag is pushed to the repository */
    tag_push_events?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.putV3ProjectsIdServicesEmailsOnPush({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set external-wiki service for project
 * @request PUT :/v3/projects/{id}/services/external-wiki
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdServicesExternalWiki(
  id: number,
  /** Request body */
  data: {
    /** The URL of the external Wiki */
    external_wiki_url: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.putV3ProjectsIdServicesExternalWiki({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set flowdock service for project
 * @request PUT :/v3/projects/{id}/services/flowdock
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdServicesFlowdock(
  id: number,
  /** Request body */
  data: {
    /** Flowdock token */
    token: string;
    /** Event will be triggered by a push to the repository */
    push_events?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.putV3ProjectsIdServicesFlowdock({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set gemnasium service for project
 * @request PUT :/v3/projects/{id}/services/gemnasium
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdServicesGemnasium(
  id: number,
  /** Request body */
  data: {
    /** Your personal API key on gemnasium.com */
    api_key: string;
    /** The project's slug on gemnasium.com */
    token: string;
    /** Event will be triggered by a push to the repository */
    push_events?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.putV3ProjectsIdServicesGemnasium({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set hipchat service for project
 * @request PUT :/v3/projects/{id}/services/hipchat
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdServicesHipchat(
  id: number,
  /** Request body */
  data: {
    /** The room token */
    token: string;
    /** The room name or ID */
    room?: string;
    /** The room color */
    color?: string;
    /** Enable notifications */
    notify?: boolean;
    /** Leave blank for default (v2) */
    api_version?: string;
    /** Leave blank for default. https://hipchat.example.com */
    server?: string;
    /** Event will be triggered by a push to the repository */
    push_events?: string;
    /** Event will be triggered when an issue is created/updated/closed */
    issue_events?: string;
    /** Event will be triggered when a confidential issue is created/updated/closed */
    confidential_issue_events?: string;
    /** Event will be triggered when a merge request is created/updated/merged */
    merge_request_events?: string;
    /** Event will be triggered when someone adds a comment */
    note_events?: string;
    /** Event will be triggered when a new tag is pushed to the repository */
    tag_push_events?: string;
    /** Event will be triggered when a build status changes */
    build_events?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.putV3ProjectsIdServicesHipchat({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set irker service for project
 * @request PUT :/v3/projects/{id}/services/irker
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdServicesIrker(
  id: number,
  /** Request body */
  data: {
    /** Recipients/channels separated by whitespaces */
    recipients: string;
    /** Default: irc://irc.network.net:6697 */
    default_irc_uri?: string;
    /** Server host. Default localhost */
    server_host?: string;
    /**
     * Server port. Default 6659
     * @format int32
     */
    server_port?: number;
    /** Colorize messages */
    colorize_messages?: boolean;
    /** Event will be triggered by a push to the repository */
    push_events?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.putV3ProjectsIdServicesIrker({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set jira service for project
 * @request PUT :/v3/projects/{id}/services/jira
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdServicesJira(
  id: number,
  /** Request body */
  data: {
    /** The URL to the JIRA project which is being linked to this GitLab project, e.g., https://jira.example.com */
    url: string;
    /** The short identifier for your JIRA project, all uppercase, e.g., PROJ */
    project_key: string;
    /** The username of the user created to be used with GitLab/JIRA */
    username?: string;
    /** The password of the user created to be used with GitLab/JIRA */
    password?: string;
    /**
     * The ID of a transition that moves issues to a closed state. You can find this number under the JIRA workflow administration (**Administration > Issues > Workflows**) by selecting **View** under **Operations** of the desired workflow of your project. The ID of each state can be found inside the parenthesis of each transition name under the **Transitions (id)** column ([see screenshot][trans]). By default, this ID is set to `2`
     * @format int32
     */
    jira_issue_transition_id?: number;
    /** Event will be triggered when a commit is created/updated */
    commit_events?: string;
    /** Event will be triggered when a merge request is created/updated/merged */
    merge_request_events?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.putV3ProjectsIdServicesJira({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set kubernetes service for project
 * @request PUT :/v3/projects/{id}/services/kubernetes
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdServicesKubernetes(
  id: number,
  /** Request body */
  data: {
    /** The Kubernetes namespace to use */
    namespace: string;
    /** The URL to the Kubernetes cluster API, e.g., https://kubernetes.example.com */
    api_url: string;
    /** The service token to authenticate against the Kubernetes cluster with */
    token: string;
    /** A custom certificate authority bundle to verify the Kubernetes cluster with (PEM format) */
    ca_pem?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.putV3ProjectsIdServicesKubernetes({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set mattermost service for project
 * @request PUT :/v3/projects/{id}/services/mattermost
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdServicesMattermost(
  id: number,
  /** Request body */
  data: {
    /** The Mattermost webhook. e.g. http://mattermost_host/hooks/... */
    webhook: string;
    /** Event will be triggered by a push to the repository */
    push_events?: string;
    /** Event will be triggered when an issue is created/updated/closed */
    issue_events?: string;
    /** Event will be triggered when a confidential issue is created/updated/closed */
    confidential_issue_events?: string;
    /** Event will be triggered when a merge request is created/updated/merged */
    merge_request_events?: string;
    /** Event will be triggered when someone adds a comment */
    note_events?: string;
    /** Event will be triggered when a new tag is pushed to the repository */
    tag_push_events?: string;
    /** Event will be triggered when a build status changes */
    build_events?: string;
    pipeline_events?: string;
    /** Event will be triggered when a wiki page is created/updated */
    wiki_page_events?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.putV3ProjectsIdServicesMattermost({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set mattermost-slash-commands service for project
 * @request PUT :/v3/projects/{id}/services/mattermost-slash-commands
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdServicesMattermostSlashCommands(
  id: number,
  /** Request body */
  data: {
    /** The Mattermost token */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.putV3ProjectsIdServicesMattermostSlashCommands({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Trigger a slash command for mattermost-slash-commands
 * @request POST :/v3/projects/{id}/services/mattermost_slash_commands/trigger
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdServicesMattermostSlashCommandsTrigger(
  /** The ID of a project */
  id: string,
  /** Request body */
  data: {
    /** The Mattermost token */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.v3.postV3ProjectsIdServicesMattermostSlashCommandsTrigger({
      id: id,
      data: data,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set pipelines-email service for project
 * @request PUT :/v3/projects/{id}/services/pipelines-email
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdServicesPipelinesEmail(
  id: number,
  /** Request body */
  data: {
    /** Comma-separated list of recipient email addresses */
    recipients: string;
    /** Notify only broken builds */
    notify_only_broken_builds?: boolean;
    pipeline_events?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.putV3ProjectsIdServicesPipelinesEmail({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set pivotaltracker service for project
 * @request PUT :/v3/projects/{id}/services/pivotaltracker
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdServicesPivotaltracker(
  id: number,
  /** Request body */
  data: {
    /** The Pivotaltracker token */
    token: string;
    /** Comma-separated list of branches which will be automatically inspected. Leave blank to include all branches. */
    restrict_to_branch?: string;
    /** Event will be triggered by a push to the repository */
    push_events?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.putV3ProjectsIdServicesPivotaltracker({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set pushover service for project
 * @request PUT :/v3/projects/{id}/services/pushover
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdServicesPushover(
  id: number,
  /** Request body */
  data: {
    /** The application key */
    api_key: string;
    /** The user key */
    user_key: string;
    /** The priority */
    priority: string;
    /** Leave blank for all active devices */
    device: string;
    /** The sound of the notification */
    sound: string;
    /** Event will be triggered by a push to the repository */
    push_events?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.putV3ProjectsIdServicesPushover({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set redmine service for project
 * @request PUT :/v3/projects/{id}/services/redmine
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdServicesRedmine(
  id: number,
  /** Request body */
  data: {
    /** The new issue URL */
    new_issue_url: string;
    /** The project URL */
    project_url: string;
    /** The issues URL */
    issues_url: string;
    /** The description of the tracker */
    description?: string;
    /** Event will be triggered by a push to the repository */
    push_events?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.putV3ProjectsIdServicesRedmine({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set slack service for project
 * @request PUT :/v3/projects/{id}/services/slack
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdServicesSlack(
  id: number,
  /** Request body */
  data: {
    /** The Slack webhook. e.g. https://hooks.slack.com/services/... */
    webhook: string;
    /** The user name */
    new_issue_url?: string;
    /** The channel name */
    channel?: string;
    /** Event will be triggered by a push to the repository */
    push_events?: string;
    /** Event will be triggered when an issue is created/updated/closed */
    issue_events?: string;
    /** Event will be triggered when a confidential issue is created/updated/closed */
    confidential_issue_events?: string;
    /** Event will be triggered when a merge request is created/updated/merged */
    merge_request_events?: string;
    /** Event will be triggered when someone adds a comment */
    note_events?: string;
    /** Event will be triggered when a new tag is pushed to the repository */
    tag_push_events?: string;
    /** Event will be triggered when a build status changes */
    build_events?: string;
    pipeline_events?: string;
    /** Event will be triggered when a wiki page is created/updated */
    wiki_page_events?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.putV3ProjectsIdServicesSlack({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set slack-slash-commands service for project
 * @request PUT :/v3/projects/{id}/services/slack-slash-commands
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdServicesSlackSlashCommands(
  id: number,
  /** Request body */
  data: {
    /** The Slack token */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.putV3ProjectsIdServicesSlackSlashCommands({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Trigger a slash command for slack-slash-commands
 * @request POST :/v3/projects/{id}/services/slack_slash_commands/trigger
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdServicesSlackSlashCommandsTrigger(
  /** The ID of a project */
  id: string,
  /** Request body */
  data: {
    /** The Slack token */
    token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.postV3ProjectsIdServicesSlackSlashCommandsTrigger(
    {
      id: id,
      data: data,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    },
  );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set teamcity service for project
 * @request PUT :/v3/projects/{id}/services/teamcity
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdServicesTeamcity(
  id: number,
  /** Request body */
  data: {
    /** TeamCity root URL like https://teamcity.example.com */
    teamcity_url: string;
    /** Build configuration ID */
    build_type: string;
    /** A user with permissions to trigger a manual build */
    username: string;
    /** The password of the user */
    password: string;
    /** Event will be triggered by a push to the repository */
    push_events?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.putV3ProjectsIdServicesTeamcity({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a service for project
 * @request DELETE :/v3/projects/{id}/services/{service_slug}
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3ProjectsIdServicesServiceSlug(
  /** The name of the service */
  serviceSlug:
    | "asana"
    | "assembla"
    | "bamboo"
    | "bugzilla"
    | "buildkite"
    | "builds-email"
    | "campfire"
    | "custom-issue-tracker"
    | "drone-ci"
    | "emails-on-push"
    | "external-wiki"
    | "flowdock"
    | "gemnasium"
    | "hipchat"
    | "irker"
    | "jira"
    | "kubernetes"
    | "mattermost-slash-commands"
    | "slack-slash-commands"
    | "pipelines-email"
    | "pivotaltracker"
    | "pushover"
    | "redmine"
    | "slack"
    | "mattermost"
    | "teamcity",
  id: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.deleteV3ProjectsIdServicesServiceSlug({
    serviceSlug: serviceSlug,
    id: id,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the service settings for project
 * @request GET :/v3/projects/{id}/services/{service_slug}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdServicesServiceSlug(
  /** The name of the service */
  serviceSlug:
    | "asana"
    | "assembla"
    | "bamboo"
    | "bugzilla"
    | "buildkite"
    | "builds-email"
    | "campfire"
    | "custom-issue-tracker"
    | "drone-ci"
    | "emails-on-push"
    | "external-wiki"
    | "flowdock"
    | "gemnasium"
    | "hipchat"
    | "irker"
    | "jira"
    | "kubernetes"
    | "mattermost-slash-commands"
    | "slack-slash-commands"
    | "pipelines-email"
    | "pivotaltracker"
    | "pushover"
    | "redmine"
    | "slack"
    | "mattermost"
    | "teamcity",
  id: number,
  headers?: hasuraSdk.JSONValue,
): Promise<ProjectService> {
  const result = await api.v3.getV3ProjectsIdServicesServiceSlug({
    serviceSlug: serviceSlug,
    id: id,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Share the project with a group
 * @request POST :/v3/projects/{id}/share
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdShare(
  /** The ID of a project */
  id: string,
  /** Request body */
  data: {
    /**
     * The ID of a group
     * @format int32
     */
    group_id: number;
    /**
     * The group access level
     * @format int32
     */
    group_access: 10 | 20 | 30 | 40;
    /**
     * Share expiration date
     * @format date
     */
    expires_at?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<ProjectGroupLink> {
  const result = await api.v3.postV3ProjectsIdShare({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * @request DELETE :/v3/projects/{id}/share/{group_id}
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3ProjectsIdShareGroupId(
  /** The ID of a project */
  id: string,
  /** The ID of the group */
  groupId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.deleteV3ProjectsIdShareGroupId({
    id: id,
    groupId: groupId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get all project snippets
 * @request GET :/v3/projects/{id}/snippets
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdSnippets(
  /** The ID of a project */
  id: string,
  query: {
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<ProjectSnippet> {
  const result = await api.v3.getV3ProjectsIdSnippets({
    id: id,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a new project snippet
 * @request POST :/v3/projects/{id}/snippets
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdSnippets(
  /** The ID of a project */
  id: string,
  /** Request body */
  data: {
    /** The title of the snippet */
    title: string;
    /** The file name of the snippet */
    file_name: string;
    /** The content of the snippet */
    code: string;
    /**
     * The visibility level of the snippet
     * @format int32
     */
    visibility_level: 0 | 10 | 20;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<ProjectSnippet> {
  const result = await api.v3.postV3ProjectsIdSnippets({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a list of project +noteable+ notes
 * @request GET :/v3/projects/{id}/snippets/{noteable_id}/notes
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdSnippetsNoteableIdNotes(
  /** The ID of a project */
  id: string,
  /** The ID of the noteable */
  noteableId: number,
  query: {
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Note> {
  const result = await api.v3.getV3ProjectsIdSnippetsNoteableIdNotes({
    id: id,
    noteableId: noteableId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a new +noteable+ note
 * @request POST :/v3/projects/{id}/snippets/{noteable_id}/notes
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdSnippetsNoteableIdNotes(
  /** The ID of a project */
  id: string,
  /** The ID of the noteable */
  noteableId: number,
  /** Request body */
  data: {
    /** The content of a note */
    body: string;
    /** The creation date of the note */
    created_at?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Note> {
  const result = await api.v3.postV3ProjectsIdSnippetsNoteableIdNotes({
    id: id,
    noteableId: noteableId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a +noteable+ note
 * @request DELETE :/v3/projects/{id}/snippets/{noteable_id}/notes/{note_id}
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3ProjectsIdSnippetsNoteableIdNotesNoteId(
  /** The ID of a project */
  id: string,
  /** The ID of the noteable */
  noteableId: number,
  /** The ID of a note */
  noteId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Note> {
  const result = await api.v3.deleteV3ProjectsIdSnippetsNoteableIdNotesNoteId({
    id: id,
    noteableId: noteableId,
    noteId: noteId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a single +noteable+ note
 * @request GET :/v3/projects/{id}/snippets/{noteable_id}/notes/{note_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdSnippetsNoteableIdNotesNoteId(
  /** The ID of a project */
  id: string,
  /** The ID of a note */
  noteId: number,
  /** The ID of the noteable */
  noteableId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Note> {
  const result = await api.v3.getV3ProjectsIdSnippetsNoteableIdNotesNoteId({
    id: id,
    noteId: noteId,
    noteableId: noteableId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update an existing +noteable+ note
 * @request PUT :/v3/projects/{id}/snippets/{noteable_id}/notes/{note_id}
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdSnippetsNoteableIdNotesNoteId(
  /** The ID of a project */
  id: string,
  /** The ID of the noteable */
  noteableId: number,
  /** The ID of a note */
  noteId: number,
  /** Request body */
  data: {
    /** The content of a note */
    body: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Note> {
  const result = await api.v3.putV3ProjectsIdSnippetsNoteableIdNotesNoteId({
    id: id,
    noteableId: noteableId,
    noteId: noteId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a project snippet
 * @request DELETE :/v3/projects/{id}/snippets/{snippet_id}
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3ProjectsIdSnippetsSnippetId(
  /** The ID of a project */
  id: string,
  /** The ID of a project snippet */
  snippetId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.deleteV3ProjectsIdSnippetsSnippetId({
    id: id,
    snippetId: snippetId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a single project snippet
 * @request GET :/v3/projects/{id}/snippets/{snippet_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdSnippetsSnippetId(
  /** The ID of a project */
  id: string,
  /** The ID of a project snippet */
  snippetId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<ProjectSnippet> {
  const result = await api.v3.getV3ProjectsIdSnippetsSnippetId({
    id: id,
    snippetId: snippetId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update an existing project snippet
 * @request PUT :/v3/projects/{id}/snippets/{snippet_id}
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdSnippetsSnippetId(
  /** The ID of a project */
  id: string,
  /** The ID of a project snippet */
  snippetId: number,
  /** Request body */
  data: {
    /** The title of the snippet */
    title?: string;
    /** The file name of the snippet */
    file_name?: string;
    /** The content of the snippet */
    code?: string;
    /**
     * The visibility level of the snippet
     * @format int32
     */
    visibility_level?: 0 | 10 | 20;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<ProjectSnippet> {
  const result = await api.v3.putV3ProjectsIdSnippetsSnippetId({
    id: id,
    snippetId: snippetId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a list of project +awardable+ award emoji
 * @request GET :/v3/projects/{id}/snippets/{snippet_id}/award_emoji
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdSnippetsSnippetIdAwardEmoji(
  /** The ID of a project */
  id: string,
  /** The ID of an Issue, Merge Request or Snippet */
  snippetId: number,
  query: {
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<AwardEmoji> {
  const result = await api.v3.getV3ProjectsIdSnippetsSnippetIdAwardEmoji({
    id: id,
    snippetId: snippetId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Award a new Emoji
 * @request POST :/v3/projects/{id}/snippets/{snippet_id}/award_emoji
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdSnippetsSnippetIdAwardEmoji(
  id: number,
  snippetId: number,
  /** Request body */
  data: {
    /** The name of a award_emoji (without colons) */
    name: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<AwardEmoji> {
  const result = await api.v3.postV3ProjectsIdSnippetsSnippetIdAwardEmoji({
    id: id,
    snippetId: snippetId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a +awardables+ award emoji
 * @request DELETE :/v3/projects/{id}/snippets/{snippet_id}/award_emoji/{award_id}
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardId(
  /** The ID of an award emoji */
  awardId: number,
  id: number,
  snippetId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<AwardEmoji> {
  const result =
    await api.v3.deleteV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardId({
      awardId: awardId,
      id: id,
      snippetId: snippetId,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a specific award emoji
 * @request GET :/v3/projects/{id}/snippets/{snippet_id}/award_emoji/{award_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardId(
  /** The ID of the award */
  awardId: number,
  id: number,
  snippetId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<AwardEmoji> {
  const result = await api.v3.getV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardId(
    {
      awardId: awardId,
      id: id,
      snippetId: snippetId,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    },
  );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a list of project +awardable+ award emoji
 * @request GET :/v3/projects/{id}/snippets/{snippet_id}/notes/{note_id}/award_emoji
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji(
  id: number,
  snippetId: number,
  noteId: number,
  query: {
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<AwardEmoji> {
  const result =
    await api.v3.getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji({
      id: id,
      snippetId: snippetId,
      noteId: noteId,
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Award a new Emoji
 * @request POST :/v3/projects/{id}/snippets/{snippet_id}/notes/{note_id}/award_emoji
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji(
  id: number,
  snippetId: number,
  noteId: number,
  /** Request body */
  data: {
    /** The name of a award_emoji (without colons) */
    name: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<AwardEmoji> {
  const result =
    await api.v3.postV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji({
      id: id,
      snippetId: snippetId,
      noteId: noteId,
      data: data,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a +awardables+ award emoji
 * @request DELETE :/v3/projects/{id}/snippets/{snippet_id}/notes/{note_id}/award_emoji/{award_id}
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId(
  /** The ID of an award emoji */
  awardId: number,
  id: number,
  snippetId: number,
  noteId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<AwardEmoji> {
  const result =
    await api.v3.deleteV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId(
      {
        awardId: awardId,
        id: id,
        snippetId: snippetId,
        noteId: noteId,
        params: {
          headers: (headers?.value as Record<string, string>) ?? undefined,
        },
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a specific award emoji
 * @request GET :/v3/projects/{id}/snippets/{snippet_id}/notes/{note_id}/award_emoji/{award_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId(
  /** The ID of the award */
  awardId: number,
  id: number,
  snippetId: number,
  noteId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<AwardEmoji> {
  const result =
    await api.v3.getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId({
      awardId: awardId,
      id: id,
      snippetId: snippetId,
      noteId: noteId,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a raw project snippet
 * @request GET :/v3/projects/{id}/snippets/{snippet_id}/raw
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdSnippetsSnippetIdRaw(
  /** The ID of a project */
  id: string,
  /** The ID of a project snippet */
  snippetId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.getV3ProjectsIdSnippetsSnippetIdRaw({
    id: id,
    snippetId: snippetId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Unstar a project
 * @request DELETE :/v3/projects/{id}/star
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3ProjectsIdStar(
  /** The ID of a project */
  id: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Project> {
  const result = await api.v3.deleteV3ProjectsIdStar({
    id: id,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Star a project
 * @request POST :/v3/projects/{id}/star
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdStar(
  /** The ID of a project */
  id: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Project> {
  const result = await api.v3.postV3ProjectsIdStar({
    id: id,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Post status to a commit
 * @request POST :/v3/projects/{id}/statuses/{sha}
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdStatusesSha(
  /** The ID of a project */
  id: string,
  /** The commit hash */
  sha: string,
  /** Request body */
  data: {
    /** The state of the status */
    state: "pending" | "running" | "success" | "failed" | "canceled";
    /** The ref */
    ref?: string;
    /** The target URL to associate with this status */
    target_url?: string;
    /** A short description of the status */
    description?: string;
    /** A string label to differentiate this status from the status of other systems. Default: "default" */
    name?: string;
    /** A string label to differentiate this status from the status of other systems. Default: "default" */
    context?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<CommitStatus> {
  const result = await api.v3.postV3ProjectsIdStatusesSha({
    id: id,
    sha: sha,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get triggers list
 * @request GET :/v3/projects/{id}/triggers
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdTriggers(
  /** The ID of a project */
  id: string,
  query: {
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Trigger> {
  const result = await api.v3.getV3ProjectsIdTriggers({
    id: id,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a trigger
 * @request POST :/v3/projects/{id}/triggers
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdTriggers(
  /** The ID of a project */
  id: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Trigger> {
  const result = await api.v3.postV3ProjectsIdTriggers({
    id: id,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a trigger
 * @request DELETE :/v3/projects/{id}/triggers/{token}
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3ProjectsIdTriggersToken(
  /** The ID of a project */
  id: string,
  /** The unique token of trigger */
  token: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Trigger> {
  const result = await api.v3.deleteV3ProjectsIdTriggersToken({
    id: id,
    token: token,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get specific trigger of a project
 * @request GET :/v3/projects/{id}/triggers/{token}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdTriggersToken(
  /** The ID of a project */
  id: string,
  /** The unique token of trigger */
  token: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Trigger> {
  const result = await api.v3.getV3ProjectsIdTriggersToken({
    id: id,
    token: token,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Unarchive a project
 * @request POST :/v3/projects/{id}/unarchive
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdUnarchive(
  /** The ID of a project */
  id: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Project> {
  const result = await api.v3.postV3ProjectsIdUnarchive({
    id: id,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Upload a file
 * @request POST :/v3/projects/{id}/uploads
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdUploads(
  /** The ID of a project */
  id: string,
  /** Request body */
  data: {
    /** The file to be uploaded */
    file: File;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.postV3ProjectsIdUploads({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the users list of a project
 * @request GET :/v3/projects/{id}/users
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdUsers(
  /** The ID of a project */
  id: string,
  query: {
    /** Return list of users matching the search criteria */
    search?: string;
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<UserBasic> {
  const result = await api.v3.getV3ProjectsIdUsers({
    id: id,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get project variables
 * @request GET :/v3/projects/{id}/variables
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdVariables(
  /** The ID of a project */
  id: string,
  query: {
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Variable> {
  const result = await api.v3.getV3ProjectsIdVariables({
    id: id,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a new variable in a project
 * @request POST :/v3/projects/{id}/variables
 * @allowrelaxedtypes
 */
export async function postV3PostV3ProjectsIdVariables(
  /** The ID of a project */
  id: string,
  /** Request body */
  data: {
    /** The key of the variable */
    key: string;
    /** The value of the variable */
    value: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Variable> {
  const result = await api.v3.postV3ProjectsIdVariables({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete an existing variable from a project
 * @request DELETE :/v3/projects/{id}/variables/{key}
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3ProjectsIdVariablesKey(
  /** The ID of a project */
  id: string,
  /** The key of the variable */
  key: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Variable> {
  const result = await api.v3.deleteV3ProjectsIdVariablesKey({
    id: id,
    key: key,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a specific variable from a project
 * @request GET :/v3/projects/{id}/variables/{key}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3ProjectsIdVariablesKey(
  /** The ID of a project */
  id: string,
  /** The key of the variable */
  key: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Variable> {
  const result = await api.v3.getV3ProjectsIdVariablesKey({
    id: id,
    key: key,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update an existing variable from a project
 * @request PUT :/v3/projects/{id}/variables/{key}
 * @allowrelaxedtypes
 */
export async function putV3PutV3ProjectsIdVariablesKey(
  /** The ID of a project */
  id: string,
  /** The key of the variable */
  key: string,
  /** Request body */
  data: {
    /** The value of the variable */
    value?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Variable> {
  const result = await api.v3.putV3ProjectsIdVariablesKey({
    id: id,
    key: key,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get runners available for user
 * @request GET :/v3/runners
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3Runners(
  query: {
    /** The scope of specific runners to show */
    scope?: "active" | "paused" | "online";
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Runner> {
  const result = await api.v3.getV3Runners({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get all runners - shared and specific
 * @request GET :/v3/runners/all
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3RunnersAll(
  query: {
    /** The scope of specific runners to show */
    scope?: "active" | "paused" | "online" | "specific" | "shared";
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Runner> {
  const result = await api.v3.getV3RunnersAll({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Remove a runner
 * @request DELETE :/v3/runners/{id}
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3RunnersId(
  /** The ID of the runner */
  id: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Runner> {
  const result = await api.v3.deleteV3RunnersId({
    id: id,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get runner's details
 * @request GET :/v3/runners/{id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3RunnersId(
  /** The ID of the runner */
  id: number,
  headers?: hasuraSdk.JSONValue,
): Promise<RunnerDetails> {
  const result = await api.v3.getV3RunnersId({
    id: id,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update runner's details
 * @request PUT :/v3/runners/{id}
 * @allowrelaxedtypes
 */
export async function putV3PutV3RunnersId(
  /** The ID of the runner */
  id: number,
  /** Request body */
  data: {
    /** The description of the runner */
    description?: string;
    /** The state of a runner */
    active?: boolean;
    /** The list of tags for a runner */
    tag_list?: string[];
    /** Flag indicating the runner can execute untagged jobs */
    run_untagged?: boolean;
    /** Flag indicating the runner is locked */
    locked?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<RunnerDetails> {
  const result = await api.v3.putV3RunnersId({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Login to get token
 * @request POST :/v3/session
 * @allowrelaxedtypes
 */
export async function postV3PostV3Session(
  /** Request body */
  data: {
    /** The username */
    login?: string;
    /** The email of the user */
    email?: string;
    /** The password of the user */
    password: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<UserWithPrivateToken> {
  const result = await api.v3.postV3Session({
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the Sidekiq Compound metrics. Includes queue, process, and job statistics
 * @request GET :/v3/sidekiq/compound_metrics
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3SidekiqCompoundMetrics(
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.getV3SidekiqCompoundMetrics({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the Sidekiq job statistics
 * @request GET :/v3/sidekiq/job_stats
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3SidekiqJobStats(
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.getV3SidekiqJobStats({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the Sidekiq process metrics
 * @request GET :/v3/sidekiq/process_metrics
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3SidekiqProcessMetrics(
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.getV3SidekiqProcessMetrics({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the Sidekiq queue metrics
 * @request GET :/v3/sidekiq/queue_metrics
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3SidekiqQueueMetrics(
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.getV3SidekiqQueueMetrics({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a snippets list for authenticated user
 * @request GET :/v3/snippets
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3Snippets(
  query: {
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<PersonalSnippet> {
  const result = await api.v3.getV3Snippets({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create new snippet
 * @request POST :/v3/snippets
 * @allowrelaxedtypes
 */
export async function postV3PostV3Snippets(
  /** Request body */
  data: {
    /** The title of a snippet */
    title: string;
    /** The name of a snippet file */
    file_name: string;
    /** The content of a snippet */
    content: string;
    /**
     * The visibility level of the snippet
     * @format int32
     * @default 10
     */
    visibility_level?: 0 | 10 | 20;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<PersonalSnippet> {
  const result = await api.v3.postV3Snippets({
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List all public snippets current_user has access to
 * @request GET :/v3/snippets/public
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3SnippetsPublic(
  query: {
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<PersonalSnippet> {
  const result = await api.v3.getV3SnippetsPublic({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Remove snippet
 * @request DELETE :/v3/snippets/{id}
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3SnippetsId(
  /** The ID of a snippet */
  id: number,
  headers?: hasuraSdk.JSONValue,
): Promise<PersonalSnippet> {
  const result = await api.v3.deleteV3SnippetsId({
    id: id,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a single snippet
 * @request GET :/v3/snippets/{id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3SnippetsId(
  /** The ID of a snippet */
  id: number,
  headers?: hasuraSdk.JSONValue,
): Promise<PersonalSnippet> {
  const result = await api.v3.getV3SnippetsId({
    id: id,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update an existing snippet
 * @request PUT :/v3/snippets/{id}
 * @allowrelaxedtypes
 */
export async function putV3PutV3SnippetsId(
  /** The ID of a snippet */
  id: number,
  /** Request body */
  data: {
    /** The title of a snippet */
    title?: string;
    /** The name of a snippet file */
    file_name?: string;
    /** The content of a snippet */
    content?: string;
    /**
     * The visibility level of the snippet
     * @format int32
     */
    visibility_level?: 0 | 10 | 20;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<PersonalSnippet> {
  const result = await api.v3.putV3SnippetsId({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a raw snippet
 * @request GET :/v3/snippets/{id}/raw
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3SnippetsIdRaw(
  /** The ID of a snippet */
  id: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.getV3SnippetsIdRaw({
    id: id,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the list of the available template
 * @request GET :/v3/templates/dockerfiles
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3TemplatesDockerfiles(
  headers?: hasuraSdk.JSONValue,
): Promise<TemplatesList> {
  const result = await api.v3.getV3TemplatesDockerfiles({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the text for a specific template present in local filesystem
 * @request GET :/v3/templates/dockerfiles/{name}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3TemplatesDockerfilesName(
  /** The name of the template */
  name: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Template> {
  const result = await api.v3.getV3TemplatesDockerfilesName({
    name: name,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the list of the available template
 * @request GET :/v3/templates/gitignores
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3TemplatesGitignores(
  headers?: hasuraSdk.JSONValue,
): Promise<TemplatesList> {
  const result = await api.v3.getV3TemplatesGitignores({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the text for a specific template present in local filesystem
 * @request GET :/v3/templates/gitignores/{name}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3TemplatesGitignoresName(
  /** The name of the template */
  name: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Template> {
  const result = await api.v3.getV3TemplatesGitignoresName({
    name: name,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the list of the available template
 * @request GET :/v3/templates/gitlab_ci_ymls
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3TemplatesGitlabCiYmls(
  headers?: hasuraSdk.JSONValue,
): Promise<TemplatesList> {
  const result = await api.v3.getV3TemplatesGitlabCiYmls({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the text for a specific template present in local filesystem
 * @request GET :/v3/templates/gitlab_ci_ymls/{name}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3TemplatesGitlabCiYmlsName(
  /** The name of the template */
  name: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Template> {
  const result = await api.v3.getV3TemplatesGitlabCiYmlsName({
    name: name,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the list of the available license template
 * @request GET :/v3/templates/licenses
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3TemplatesLicenses(
  query: {
    /** If passed, returns only popular licenses */
    popular?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<RepoLicense> {
  const result = await api.v3.getV3TemplatesLicenses({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the text for a specific license
 * @request GET :/v3/templates/licenses/{name}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3TemplatesLicensesName(
  /** The name of the template */
  name: string,
  headers?: hasuraSdk.JSONValue,
): Promise<RepoLicense> {
  const result = await api.v3.getV3TemplatesLicensesName({
    name: name,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Mark all todos as done
 * @request DELETE :/v3/todos
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3Todos(
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.deleteV3Todos({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a todo list
 * @request GET :/v3/todos
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3Todos(
  query: {
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Todo> {
  const result = await api.v3.getV3Todos({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Mark a todo as done
 * @request DELETE :/v3/todos/{id}
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3TodosId(
  /** The ID of the todo being marked as done */
  id: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Todo> {
  const result = await api.v3.deleteV3TodosId({
    id: id,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the currently authenticated user
 * @request GET :/v3/user
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3User(
  headers?: hasuraSdk.JSONValue,
): Promise<UserPublic> {
  const result = await api.v3.getV3User({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the currently authenticated user's email addresses
 * @request GET :/v3/user/emails
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3UserEmails(
  headers?: hasuraSdk.JSONValue,
): Promise<Email> {
  const result = await api.v3.getV3UserEmails({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Add new email address to the currently authenticated user
 * @request POST :/v3/user/emails
 * @allowrelaxedtypes
 */
export async function postV3PostV3UserEmails(
  /** Request body */
  data: {
    /** The new email */
    email: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Email> {
  const result = await api.v3.postV3UserEmails({
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete an email address from the currently authenticated user
 * @request DELETE :/v3/user/emails/{email_id}
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3UserEmailsEmailId(
  /** The ID of the email */
  emailId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.deleteV3UserEmailsEmailId({
    emailId: emailId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a single email address owned by the currently authenticated user
 * @request GET :/v3/user/emails/{email_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3UserEmailsEmailId(
  /** The ID of the email */
  emailId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Email> {
  const result = await api.v3.getV3UserEmailsEmailId({
    emailId: emailId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the currently authenticated user's SSH keys
 * @request GET :/v3/user/keys
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3UserKeys(
  headers?: hasuraSdk.JSONValue,
): Promise<SSHKey> {
  const result = await api.v3.getV3UserKeys({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Add a new SSH key to the currently authenticated user
 * @request POST :/v3/user/keys
 * @allowrelaxedtypes
 */
export async function postV3PostV3UserKeys(
  /** Request body */
  data: {
    /** The new SSH key */
    key: string;
    /** The title of the new SSH key */
    title: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<SSHKey> {
  const result = await api.v3.postV3UserKeys({
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete an SSH key from the currently authenticated user
 * @request DELETE :/v3/user/keys/{key_id}
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3UserKeysKeyId(
  /** The ID of the SSH key */
  keyId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<SSHKey> {
  const result = await api.v3.deleteV3UserKeysKeyId({
    keyId: keyId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a single key owned by currently authenticated user
 * @request GET :/v3/user/keys/{key_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3UserKeysKeyId(
  /** The ID of the SSH key */
  keyId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<SSHKey> {
  const result = await api.v3.getV3UserKeysKeyId({
    keyId: keyId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the list of users
 * @request GET :/v3/users
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3Users(
  query: {
    /** Get a single user with a specific username */
    username?: string;
    /** Search for a username */
    search?: string;
    /** Filters only active users */
    active?: boolean;
    /** Filters only external users */
    external?: boolean;
    /** Filters only blocked users */
    blocked?: boolean;
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<UserBasic> {
  const result = await api.v3.getV3Users({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a user. Available only for admins.
 * @request POST :/v3/users
 * @allowrelaxedtypes
 */
export async function postV3PostV3Users(
  /** Request body */
  data: {
    /** The email of the user */
    email: string;
    /** The password of the new user */
    password: string;
    /** The name of the user */
    name: string;
    /** The username of the user */
    username: string;
    /** The Skype username */
    skype?: string;
    /** The LinkedIn username */
    linkedin?: string;
    /** The Twitter username */
    twitter?: string;
    /** The website of the user */
    website_url?: string;
    /** The organization of the user */
    organization?: string;
    /**
     * The number of projects a user can create
     * @format int32
     */
    projects_limit?: number;
    /** The external authentication provider UID */
    extern_uid?: string;
    /** The external provider */
    provider?: string;
    /** The biography of the user */
    bio?: string;
    /** The location of the user */
    location?: string;
    /** Flag indicating the user is an administrator */
    admin?: boolean;
    /** Flag indicating the user can create groups */
    can_create_group?: boolean;
    /** Flag indicating the account needs to be confirmed */
    confirm?: boolean;
    /** Flag indicating the user is an external user */
    external?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<UserPublic> {
  const result = await api.v3.postV3Users({
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a user. Available only for admins.
 * @request DELETE :/v3/users/{id}
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3UsersId(
  /** The ID of the user */
  id: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Email> {
  const result = await api.v3.deleteV3UsersId({
    id: id,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a single user
 * @request GET :/v3/users/{id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3UsersId(
  /** The ID of the user */
  id: number,
  headers?: hasuraSdk.JSONValue,
): Promise<UserBasic> {
  const result = await api.v3.getV3UsersId({
    id: id,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update a user. Available only for admins.
 * @request PUT :/v3/users/{id}
 * @allowrelaxedtypes
 */
export async function putV3PutV3UsersId(
  /** The ID of the user */
  id: number,
  /** Request body */
  data: {
    /** The email of the user */
    email?: string;
    /** The password of the new user */
    password?: string;
    /** The name of the user */
    name?: string;
    /** The username of the user */
    username?: string;
    /** The Skype username */
    skype?: string;
    /** The LinkedIn username */
    linkedin?: string;
    /** The Twitter username */
    twitter?: string;
    /** The website of the user */
    website_url?: string;
    /** The organization of the user */
    organization?: string;
    /**
     * The number of projects a user can create
     * @format int32
     */
    projects_limit?: number;
    /** The external authentication provider UID */
    extern_uid?: string;
    /** The external provider */
    provider?: string;
    /** The biography of the user */
    bio?: string;
    /** The location of the user */
    location?: string;
    /** Flag indicating the user is an administrator */
    admin?: boolean;
    /** Flag indicating the user can create groups */
    can_create_group?: boolean;
    /** Flag indicating the account needs to be confirmed */
    confirm?: boolean;
    /** Flag indicating the user is an external user */
    external?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<UserPublic> {
  const result = await api.v3.putV3UsersId({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Block a user. Available only for admins.
 * @request PUT :/v3/users/{id}/block
 * @allowrelaxedtypes
 */
export async function putV3PutV3UsersIdBlock(
  /** The ID of the user */
  id: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.putV3UsersIdBlock({
    id: id,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the emails addresses of a specified user. Available only for admins.
 * @request GET :/v3/users/{id}/emails
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3UsersIdEmails(
  /** The ID of the user */
  id: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Email> {
  const result = await api.v3.getV3UsersIdEmails({
    id: id,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Add an email address to a specified user. Available only for admins.
 * @request POST :/v3/users/{id}/emails
 * @allowrelaxedtypes
 */
export async function postV3PostV3UsersIdEmails(
  /** The ID of the user */
  id: number,
  /** Request body */
  data: {
    /** The email of the user */
    email: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Email> {
  const result = await api.v3.postV3UsersIdEmails({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete an email address of a specified user. Available only for admins.
 * @request DELETE :/v3/users/{id}/emails/{email_id}
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3UsersIdEmailsEmailId(
  /** The ID of the user */
  id: number,
  /** The ID of the email */
  emailId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Email> {
  const result = await api.v3.deleteV3UsersIdEmailsEmailId({
    id: id,
    emailId: emailId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the contribution events of a specified user
 * @request GET :/v3/users/{id}/events
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3UsersIdEvents(
  /** The ID of the user */
  id: number,
  query: {
    /** Current page number */
    page?: number;
    /** Number of items per page */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Event> {
  const result = await api.v3.getV3UsersIdEvents({
    id: id,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the SSH keys of a specified user. Available only for admins.
 * @request GET :/v3/users/{id}/keys
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3UsersIdKeys(
  /** The ID of the user */
  id: number,
  headers?: hasuraSdk.JSONValue,
): Promise<SSHKey> {
  const result = await api.v3.getV3UsersIdKeys({
    id: id,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Add an SSH key to a specified user. Available only for admins.
 * @request POST :/v3/users/{id}/keys
 * @allowrelaxedtypes
 */
export async function postV3PostV3UsersIdKeys(
  /** The ID of the user */
  id: number,
  /** Request body */
  data: {
    /** The new SSH key */
    key: string;
    /** The title of the new SSH key */
    title: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<SSHKey> {
  const result = await api.v3.postV3UsersIdKeys({
    id: id,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete an existing SSH key from a specified user. Available only for admins.
 * @request DELETE :/v3/users/{id}/keys/{key_id}
 * @allowrelaxedtypes
 */
export async function deleteV3DeleteV3UsersIdKeysKeyId(
  /** The ID of the user */
  id: number,
  /** The ID of the SSH key */
  keyId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<SSHKey> {
  const result = await api.v3.deleteV3UsersIdKeysKeyId({
    id: id,
    keyId: keyId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Unblock a user. Available only for admins.
 * @request PUT :/v3/users/{id}/unblock
 * @allowrelaxedtypes
 */
export async function putV3PutV3UsersIdUnblock(
  /** The ID of the user */
  id: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.putV3UsersIdUnblock({
    id: id,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the version information of the GitLab instance.
 * @request GET :/v3/version
 * @allowrelaxedtypes
 * @readonly
 */
export async function getV3GetV3Version(
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.v3.getV3Version({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}
