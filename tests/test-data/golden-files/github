import * as hasuraSdk from "@hasura/ndc-lambda-sdk";
import {
  ActionsBillingUsage,
  ActionsCacheList,
  ActionsCacheUsageByRepository,
  ActionsCacheUsageOrgEnterprise,
  ActionsEnabled,
  ActionsGetDefaultWorkflowPermissions,
  ActionsOrganizationPermissions,
  ActionsPublicKey,
  ActionsRepositoryPermissions,
  ActionsSecret,
  ActionsSetDefaultWorkflowPermissions,
  ActionsVariable,
  ActionsWorkflowAccessToRepository,
  AlertCreatedAt,
  AlertNumber,
  AllowedActions,
  Api,
  ApiOverview,
  AppPermissions,
  Artifact,
  AuthenticationToken,
  Authorization,
  Autolink,
  BaseGist,
  Blob,
  BranchProtection,
  BranchRestrictionPolicy,
  BranchShort,
  BranchWithProtection,
  CheckAnnotation,
  CheckRun,
  CheckSuite,
  CheckSuitePreference,
  CloneTraffic,
  CodeFrequencyStat,
  CodeOfConduct,
  CodeScanningAlert,
  CodeScanningAlertDismissedComment,
  CodeScanningAlertDismissedReason,
  CodeScanningAlertInstance,
  CodeScanningAlertItems,
  CodeScanningAlertSetState,
  CodeScanningAlertSeverity,
  CodeScanningAlertState,
  CodeScanningAnalysis,
  CodeScanningAnalysisCommitSha,
  CodeScanningAnalysisDeletion,
  CodeScanningAnalysisSarifFile,
  CodeScanningAnalysisSarifId,
  CodeScanningAnalysisToolGuid,
  CodeScanningAnalysisToolName,
  CodeScanningCodeqlDatabase,
  CodeScanningOrganizationAlertItems,
  CodeScanningRef,
  CodeScanningSarifsReceipt,
  CodeScanningSarifsStatus,
  CodeSearchResultItem,
  CodeownersErrors,
  Codespace,
  CodespaceExportDetails,
  CodespaceMachine,
  CodespaceWithFullRepository,
  CodespacesOrgSecret,
  CodespacesPublicKey,
  CodespacesSecret,
  CodespacesUserPublicKey,
  Collaborator,
  CombinedBillingUsage,
  CombinedCommitStatus,
  Commit,
  CommitActivity,
  CommitComment,
  CommitComparison,
  CommitSearchResultItem,
  CommunityProfile,
  ContentDirectory,
  ContentFile,
  ContentSubmodule,
  ContentSymlink,
  ContentTraffic,
  Contributor,
  ContributorActivity,
  DependabotAlert,
  DependabotAlertWithRepository,
  DependabotPublicKey,
  DependabotSecret,
  DependencyGraphDiff,
  DeployKey,
  Deployment,
  DeploymentBranchPolicy,
  DeploymentBranchPolicyNamePattern,
  DeploymentBranchPolicySettings,
  DeploymentReviewerType,
  DeploymentStatus,
  DiffEntry,
  Email,
  EmptyObject,
  EnabledRepositories,
  Environment,
  EnvironmentApprovals,
  Event,
  Feed,
  FileCommit,
  FullRepository,
  GistComment,
  GistCommit,
  GistSimple,
  GitCommit,
  GitRef,
  GitTag,
  GitTree,
  GitignoreTemplate,
  GpgKey,
  Hook,
  HookDelivery,
  HookDeliveryItem,
  Hovercard,
  Import,
  Installation,
  InstallationToken,
  Integration,
  InteractionLimit,
  InteractionLimitResponse,
  Issue,
  IssueComment,
  IssueEvent,
  IssueEventForIssue,
  IssueSearchResultItem,
  Job,
  Key,
  KeySimple,
  Label,
  LabelSearchResultItem,
  Language,
  License,
  LicenseContent,
  LicenseSimple,
  MarketplaceListingPlan,
  MarketplacePurchase,
  MergedUpstream,
  Migration,
  Milestone,
  MinimalRepository,
  OidcCustomSub,
  OidcCustomSubRepo,
  OrgHook,
  OrgMembership,
  OrganizationActionsSecret,
  OrganizationActionsVariable,
  OrganizationDependabotSecret,
  OrganizationFull,
  OrganizationInvitation,
  OrganizationSecretScanningAlert,
  OrganizationSimple,
  Package,
  PackageVersion,
  PackagesBillingUsage,
  Page,
  PageBuild,
  PageBuildStatus,
  PageDeployment,
  PagesHealthCheck,
  ParticipationStats,
  PendingDeployment,
  PorterAuthor,
  PorterLargeFile,
  PrivateUser,
  Project,
  ProjectCard,
  ProjectCollaboratorPermission,
  ProjectColumn,
  ProtectedBranch,
  ProtectedBranchAdminEnforced,
  ProtectedBranchPullRequestReview,
  PublicUser,
  PullRequest,
  PullRequestMergeResult,
  PullRequestReview,
  PullRequestReviewComment,
  PullRequestReviewRequest,
  PullRequestSimple,
  RateLimitOverview,
  Reaction,
  ReferrerTraffic,
  Release,
  ReleaseAsset,
  ReleaseNotesContent,
  RepoCodespacesSecret,
  RepoRequiredWorkflow,
  RepoSearchResultItem,
  Repository,
  RepositoryCollaboratorPermission,
  RepositoryInvitation,
  RepositorySubscription,
  RequiredWorkflow,
  ReviewComment,
  Root,
  Runner,
  RunnerApplication,
  RunnerLabel,
  SecretScanningAlert,
  SecretScanningAlertResolution,
  SecretScanningAlertResolutionComment,
  SecretScanningAlertState,
  SecretScanningLocation,
  SelectedActions,
  ShortBlob,
  ShortBranch,
  SimpleUser,
  Snapshot,
  SshSigningKey,
  Stargazer,
  StarredRepository,
  Status,
  StatusCheckPolicy,
  Tag,
  TagProtection,
  Team,
  TeamDiscussion,
  TeamDiscussionComment,
  TeamFull,
  TeamMembership,
  TeamProject,
  TeamRepository,
  TeamSimple,
  Thread,
  ThreadSubscription,
  TimelineIssueEvents,
  Topic,
  TopicSearchResultItem,
  UserMarketplacePurchase,
  UserSearchResultItem,
  ViewTraffic,
  WaitTimer,
  WebhookConfig,
  WebhookConfigContentType,
  WebhookConfigInsecureSsl,
  WebhookConfigSecret,
  WebhookConfigUrl,
  Workflow,
  WorkflowRun,
  WorkflowRunUsage,
  WorkflowUsage,
} from "./api";

const api = new Api({
  baseUrl: `${process.env.NDC_OAS_BASE_URL}`,
});

/**
 * GitHub API Root
 * @request GET :/
 * @readonly
 */
export async function getMetaRoot(
  headers?: hasuraSdk.JSONValue,
): Promise<Root> {
  const result = await api.metaRoot({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the authenticated app
 * @request GET :/app
 * @readonly
 */
export async function getAppAppsGetAuthenticated(
  headers?: hasuraSdk.JSONValue,
): Promise<Integration> {
  const result = await api.app.appsGetAuthenticated({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a GitHub App from a manifest
 * @request POST :/app-manifests/{code}/conversions
 */
export async function postAppManifestsAppsCreateFromManifest(
  code: string,
  headers?: hasuraSdk.JSONValue,
): Promise<
  Integration & {
    client_id: string;
    client_secret: string;
    pem: string;
    webhook_secret: string | null;
    [key: string]: any;
  }
> {
  const result = await api.appManifests.appsCreateFromManifest({
    code: code,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a webhook configuration for an app
 * @request GET :/app/hook/config
 * @readonly
 */
export async function getAppAppsGetWebhookConfigForApp(
  headers?: hasuraSdk.JSONValue,
): Promise<WebhookConfig> {
  const result = await api.app.appsGetWebhookConfigForApp({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update a webhook configuration for an app
 * @request PATCH :/app/hook/config
 */
export async function patchAppAppsUpdateWebhookConfigForApp(
  /** Request body */
  data: {
    /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
    content_type?: WebhookConfigContentType;
    /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
    insecure_ssl?: WebhookConfigInsecureSsl;
    /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). */
    secret?: WebhookConfigSecret;
    /** The URL to which the payloads will be delivered. */
    url?: WebhookConfigUrl;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<WebhookConfig> {
  const result = await api.app.appsUpdateWebhookConfigForApp({
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List deliveries for an app webhook
 * @request GET :/app/hook/deliveries
 * @readonly
 */
export async function getAppAppsListWebhookDeliveries(
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors. */
    cursor?: string;
    redelivery?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<HookDeliveryItem[]> {
  const result = await api.app.appsListWebhookDeliveries({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a delivery for an app webhook
 * @request GET :/app/hook/deliveries/{delivery_id}
 * @readonly
 */
export async function getAppAppsGetWebhookDelivery(
  deliveryId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<HookDelivery> {
  const result = await api.app.appsGetWebhookDelivery({
    deliveryId: deliveryId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Redeliver a delivery for an app webhook
 * @request POST :/app/hook/deliveries/{delivery_id}/attempts
 */
export async function postAppAppsRedeliverWebhookDelivery(
  deliveryId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.app.appsRedeliverWebhookDelivery({
    deliveryId: deliveryId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List installations for the authenticated app
 * @request GET :/app/installations
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAppAppsListInstallations(
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
    /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
    since?: string;
    outdated?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Installation[]> {
  const result = await api.app.appsListInstallations({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete an installation for the authenticated app
 * @request DELETE :/app/installations/{installation_id}
 */
export async function deleteAppAppsDeleteInstallation(
  /** The unique identifier of the installation. */
  installationId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.app.appsDeleteInstallation({
    installationId: installationId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get an installation for the authenticated app
 * @request GET :/app/installations/{installation_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getAppAppsGetInstallation(
  installationId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Installation> {
  const result = await api.app.appsGetInstallation({
    installationId: installationId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create an installation access token for an app
 * @request POST :/app/installations/{installation_id}/access_tokens
 * @allowrelaxedtypes
 */
export async function postAppAppsCreateInstallationAccessToken(
  installationId: number,
  /** Request body */
  data?: {
    /** The permissions granted to the user-to-server access token. */
    permissions?: AppPermissions;
    /** List of repository names that the token should have access to */
    repositories?: string[];
    /**
     * List of repository IDs that the token should have access to
     * @example [1]
     */
    repository_ids?: number[];
  },
  headers?: hasuraSdk.JSONValue,
): Promise<InstallationToken> {
  const result = await api.app.appsCreateInstallationAccessToken({
    installationId: installationId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Unsuspend an app installation
 * @request DELETE :/app/installations/{installation_id}/suspended
 */
export async function deleteAppAppsUnsuspendInstallation(
  installationId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.app.appsUnsuspendInstallation({
    installationId: installationId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Suspend an app installation
 * @request PUT :/app/installations/{installation_id}/suspended
 */
export async function putAppAppsSuspendInstallation(
  installationId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.app.appsSuspendInstallation({
    installationId: installationId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete an app authorization
 * @request DELETE :/applications/{client_id}/grant
 */
export async function deleteApplicationsAppsDeleteAuthorization(
  /** The client ID of the GitHub app. */
  clientId: string,
  /** Request body */
  data: {
    /** The OAuth access token used to authenticate to the GitHub API. */
    access_token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.applications.appsDeleteAuthorization({
    clientId: clientId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete an app token
 * @request DELETE :/applications/{client_id}/token
 */
export async function deleteApplicationsAppsDeleteToken(
  clientId: string,
  /** Request body */
  data: {
    /** The OAuth access token used to authenticate to the GitHub API. */
    access_token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.applications.appsDeleteToken({
    clientId: clientId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Reset a token
 * @request PATCH :/applications/{client_id}/token
 * @allowrelaxedtypes
 */
export async function patchApplicationsAppsResetToken(
  clientId: string,
  /** Request body */
  data: {
    /** The access_token of the OAuth application. */
    access_token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Authorization> {
  const result = await api.applications.appsResetToken({
    clientId: clientId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Check a token
 * @request POST :/applications/{client_id}/token
 * @allowrelaxedtypes
 */
export async function postApplicationsAppsCheckToken(
  clientId: string,
  /** Request body */
  data: {
    /** The access_token of the OAuth application. */
    access_token: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Authorization> {
  const result = await api.applications.appsCheckToken({
    clientId: clientId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a scoped access token
 * @request POST :/applications/{client_id}/token/scoped
 * @allowrelaxedtypes
 */
export async function postApplicationsAppsScopeToken(
  clientId: string,
  /** Request body */
  data: {
    /**
     * The access token used to authenticate to the GitHub API.
     * @example "e72e16c7e42f292c6912e7710c838347ae178b4a"
     */
    access_token: string;
    /** The permissions granted to the user-to-server access token. */
    permissions?: AppPermissions;
    /** The list of repository names to scope the user-to-server access token to. `repositories` may not be specified if `repository_ids` is specified. */
    repositories?: string[];
    /**
     * The list of repository IDs to scope the user-to-server access token to. `repository_ids` may not be specified if `repositories` is specified.
     * @example [1]
     */
    repository_ids?: number[];
    /**
     * The name of the user or organization to scope the user-to-server access token to. **Required** unless `target_id` is specified.
     * @example "octocat"
     */
    target?: string;
    /**
     * The ID of the user or organization to scope the user-to-server access token to. **Required** unless `target` is specified.
     * @example 1
     */
    target_id?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Authorization> {
  const result = await api.applications.appsScopeToken({
    clientId: clientId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get an app
 * @request GET :/apps/{app_slug}
 * @readonly
 */
export async function getAppsAppsGetBySlug(
  appSlug: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Integration> {
  const result = await api.apps.appsGetBySlug({
    appSlug: appSlug,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get all codes of conduct
 * @request GET :/codes_of_conduct
 * @readonly
 */
export async function getCodesOfConductCodesOfConductGetAllCodesOfConduct(
  headers?: hasuraSdk.JSONValue,
): Promise<CodeOfConduct[]> {
  const result = await api.codesOfConduct.codesOfConductGetAllCodesOfConduct({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a code of conduct
 * @request GET :/codes_of_conduct/{key}
 * @readonly
 */
export async function getCodesOfConductCodesOfConductGetConductCode(
  key: string,
  headers?: hasuraSdk.JSONValue,
): Promise<CodeOfConduct> {
  const result = await api.codesOfConduct.codesOfConductGetConductCode({
    key: key,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get emojis
 * @request GET :/emojis
 * @allowrelaxedtypes
 * @readonly
 */
export async function getEmojisEmojisGet(
  headers?: hasuraSdk.JSONValue,
): Promise<EmptyObject> {
  const result = await api.emojis.emojisGet({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List Dependabot alerts for an enterprise
 * @request GET :/enterprises/{enterprise}/dependabot/alerts
 * @allowrelaxedtypes
 * @readonly
 */
export async function getEnterprisesDependabotListAlertsForEnterprise(
  /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
  enterprise: string,
  query: {
    /** A comma-separated list of states. If specified, only alerts with these states will be returned.

Can be: `dismissed`, `fixed`, `open` */
    state?: string;
    /** A comma-separated list of severities. If specified, only alerts with these severities will be returned.

Can be: `low`, `medium`, `high`, `critical` */
    severity?: string;
    /** A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.

Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust` */
    ecosystem?: string;
    /** A comma-separated list of package names. If specified, only alerts for these packages will be returned. */
    package?: string;
    /** The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned. */
    scope?: "development" | "runtime";
    /** The property by which to sort the results.
`created` means when the alert was created.
`updated` means when the alert's state last changed. */
    sort?: "created" | "updated";
    /** The direction to sort the results by. */
    direction?: "asc" | "desc";
    /** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor. */
    before?: string;
    /** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor. */
    after?: string;
    /** **Deprecated**. The number of results per page (max 100), starting from the first matching result.
This parameter must not be used in combination with `last`.
Instead, use `per_page` in combination with `after` to fetch the first page of results. */
    first?: number;
    /** **Deprecated**. The number of results per page (max 100), starting from the last matching result.
This parameter must not be used in combination with `first`.
Instead, use `per_page` in combination with `before` to fetch the last page of results. */
    last?: number;
    /** The number of results per page (max 100). */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<DependabotAlertWithRepository[]> {
  const result = await api.enterprises.dependabotListAlertsForEnterprise({
    enterprise: enterprise,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List secret scanning alerts for an enterprise
 * @request GET :/enterprises/{enterprise}/secret-scanning/alerts
 * @allowrelaxedtypes
 * @readonly
 */
export async function getEnterprisesSecretScanningListAlertsForEnterprise(
  enterprise: string,
  query: {
    /** Set to `open` or `resolved` to only list secret scanning alerts in a specific state. */
    state?: "open" | "resolved";
    /** A comma-separated list of secret types to return. By default all secret types are returned.
See "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)"
for a complete list of secret types. */
    secret_type?: string;
    /** A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`. */
    resolution?: string;
    /** The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved. */
    sort?: "created" | "updated";
    /** The direction to sort the results by. */
    direction?: "asc" | "desc";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor. */
    before?: string;
    /** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor. */
    after?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<OrganizationSecretScanningAlert[]> {
  const result = await api.enterprises.secretScanningListAlertsForEnterprise({
    enterprise: enterprise,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List public events
 * @request GET :/events
 * @allowrelaxedtypes
 * @readonly
 */
export async function getEventsActivityListPublicEvents(
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Event[]> {
  const result = await api.events.activityListPublicEvents({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get feeds
 * @request GET :/feeds
 * @readonly
 */
export async function getFeedsActivityGetFeeds(
  headers?: hasuraSdk.JSONValue,
): Promise<Feed> {
  const result = await api.feeds.activityGetFeeds({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List gists for the authenticated user
 * @request GET :/gists
 * @allowrelaxedtypes
 * @readonly
 */
export async function getGistsGistsList(
  query: {
    /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
    since?: string;
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<BaseGist[]> {
  const result = await api.gists.gistsList({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a gist
 * @request POST :/gists
 * @allowrelaxedtypes
 */
export async function postGistsGistsCreate(
  /** Request body */
  data: {
    /**
     * Description of the gist
     * @example "Example Ruby script"
     */
    description?: string;
    /**
     * Names and content for the files that make up the gist
     * @example {"hello.rb":{"content":"puts \"Hello, World!\""}}
     */
    files: hasuraSdk.JSONValue;
    /** Flag indicating whether the gist is public */
    public?: boolean | "true" | "false";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<GistSimple> {
  const result = await api.gists.gistsCreate({
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List public gists
 * @request GET :/gists/public
 * @allowrelaxedtypes
 * @readonly
 */
export async function getGistsGistsListPublic(
  query: {
    /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
    since?: string;
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<BaseGist[]> {
  const result = await api.gists.gistsListPublic({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List starred gists
 * @request GET :/gists/starred
 * @allowrelaxedtypes
 * @readonly
 */
export async function getGistsGistsListStarred(
  query: {
    /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
    since?: string;
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<BaseGist[]> {
  const result = await api.gists.gistsListStarred({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a gist
 * @request DELETE :/gists/{gist_id}
 */
export async function deleteGistsGistsDelete(
  /** The unique identifier of the gist. */
  gistId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.gists.gistsDelete({
    gistId: gistId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a gist
 * @request GET :/gists/{gist_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getGistsGistsGet(
  gistId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<GistSimple> {
  const result = await api.gists.gistsGet({
    gistId: gistId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update a gist
 * @request PATCH :/gists/{gist_id}
 * @allowrelaxedtypes
 */
export async function patchGistsGistsUpdate(
  gistId: string,
  /** Request body */
  data: null & {
    /**
     * The description of the gist.
     * @example "Example Ruby script"
     */
    description?: string;
    /**
     * The gist files to be updated, renamed, or deleted. Each `key` must match the current filename
     * (including extension) of the targeted gist file. For example: `hello.py`.
     *
     * To delete a file, set the whole file to null. For example: `hello.py : null`.
     * @example {"hello.rb":{"content":"blah","filename":"goodbye.rb"}}
     */
    files?: hasuraSdk.JSONValue;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<GistSimple> {
  const result = await api.gists.gistsUpdate({
    gistId: gistId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List gist comments
 * @request GET :/gists/{gist_id}/comments
 * @allowrelaxedtypes
 * @readonly
 */
export async function getGistsGistsListComments(
  gistId: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<GistComment[]> {
  const result = await api.gists.gistsListComments({
    gistId: gistId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a gist comment
 * @request POST :/gists/{gist_id}/comments
 * @allowrelaxedtypes
 */
export async function postGistsGistsCreateComment(
  gistId: string,
  /** Request body */
  data: {
    /**
     * The comment text.
     * @maxLength 65535
     * @example "Body of the attachment"
     */
    body: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<GistComment> {
  const result = await api.gists.gistsCreateComment({
    gistId: gistId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a gist comment
 * @request DELETE :/gists/{gist_id}/comments/{comment_id}
 */
export async function deleteGistsGistsDeleteComment(
  gistId: string,
  /** The unique identifier of the comment. */
  commentId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.gists.gistsDeleteComment({
    gistId: gistId,
    commentId: commentId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a gist comment
 * @request GET :/gists/{gist_id}/comments/{comment_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getGistsGistsGetComment(
  gistId: string,
  commentId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<GistComment> {
  const result = await api.gists.gistsGetComment({
    gistId: gistId,
    commentId: commentId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update a gist comment
 * @request PATCH :/gists/{gist_id}/comments/{comment_id}
 * @allowrelaxedtypes
 */
export async function patchGistsGistsUpdateComment(
  gistId: string,
  commentId: number,
  /** Request body */
  data: {
    /**
     * The comment text.
     * @maxLength 65535
     * @example "Body of the attachment"
     */
    body: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<GistComment> {
  const result = await api.gists.gistsUpdateComment({
    gistId: gistId,
    commentId: commentId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List gist commits
 * @request GET :/gists/{gist_id}/commits
 * @readonly
 */
export async function getGistsGistsListCommits(
  gistId: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<GistCommit[]> {
  const result = await api.gists.gistsListCommits({
    gistId: gistId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List gist forks
 * @request GET :/gists/{gist_id}/forks
 * @allowrelaxedtypes
 * @readonly
 */
export async function getGistsGistsListForks(
  gistId: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<GistSimple[]> {
  const result = await api.gists.gistsListForks({
    gistId: gistId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Fork a gist
 * @request POST :/gists/{gist_id}/forks
 * @allowrelaxedtypes
 */
export async function postGistsGistsFork(
  gistId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<BaseGist> {
  const result = await api.gists.gistsFork({
    gistId: gistId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Unstar a gist
 * @request DELETE :/gists/{gist_id}/star
 */
export async function deleteGistsGistsUnstar(
  gistId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.gists.gistsUnstar({
    gistId: gistId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Check if a gist is starred
 * @request GET :/gists/{gist_id}/star
 * @readonly
 */
export async function getGistsGistsCheckIsStarred(
  gistId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.gists.gistsCheckIsStarred({
    gistId: gistId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Star a gist
 * @request PUT :/gists/{gist_id}/star
 */
export async function putGistsGistsStar(
  gistId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.gists.gistsStar({
    gistId: gistId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a gist revision
 * @request GET :/gists/{gist_id}/{sha}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getGistsGistsGetRevision(
  gistId: string,
  sha: string,
  headers?: hasuraSdk.JSONValue,
): Promise<GistSimple> {
  const result = await api.gists.gistsGetRevision({
    gistId: gistId,
    sha: sha,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get all gitignore templates
 * @request GET :/gitignore/templates
 * @readonly
 */
export async function getGitignoreGitignoreGetAllTemplates(
  headers?: hasuraSdk.JSONValue,
): Promise<string[]> {
  const result = await api.gitignore.gitignoreGetAllTemplates({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a gitignore template
 * @request GET :/gitignore/templates/{name}
 * @readonly
 */
export async function getGitignoreGitignoreGetTemplate(
  name: string,
  headers?: hasuraSdk.JSONValue,
): Promise<GitignoreTemplate> {
  const result = await api.gitignore.gitignoreGetTemplate({
    name: name,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List repositories accessible to the app installation
 * @request GET :/installation/repositories
 * @allowrelaxedtypes
 * @readonly
 */
export async function getInstallationAppsListReposAccessibleToInstallation(
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  repositories: Repository[];
  /** @example "selected" */
  repository_selection?: string;
  total_count: number;
}> {
  const result = await api.installation.appsListReposAccessibleToInstallation({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Revoke an installation access token
 * @request DELETE :/installation/token
 */
export async function deleteInstallationAppsRevokeInstallationAccessToken(
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.installation.appsRevokeInstallationAccessToken({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List issues assigned to the authenticated user
 * @request GET :/issues
 * @allowrelaxedtypes
 * @readonly
 */
export async function getIssuesIssuesList(
  query: {
    /** Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation. */
    filter?:
      | "assigned"
      | "created"
      | "mentioned"
      | "subscribed"
      | "repos"
      | "all";
    /** Indicates the state of the issues to return. */
    state?: "open" | "closed" | "all";
    /** A list of comma separated label names. Example: `bug,ui,@high` */
    labels?: string;
    /** What to sort results by. */
    sort?: "created" | "updated" | "comments";
    /** The direction to sort the results by. */
    direction?: "asc" | "desc";
    /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
    since?: string;
    collab?: boolean;
    orgs?: boolean;
    owned?: boolean;
    pulls?: boolean;
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Issue[]> {
  const result = await api.issues.issuesList({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get all commonly used licenses
 * @request GET :/licenses
 * @readonly
 */
export async function getLicensesLicensesGetAllCommonlyUsed(
  query: {
    featured?: boolean;
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<LicenseSimple[]> {
  const result = await api.licenses.licensesGetAllCommonlyUsed({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a license
 * @request GET :/licenses/{license}
 * @readonly
 */
export async function getLicensesLicensesGet(
  license: string,
  headers?: hasuraSdk.JSONValue,
): Promise<License> {
  const result = await api.licenses.licensesGet({
    license: license,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Render a Markdown document
 * @request POST :/markdown
 * @allowrelaxedtypes
 */
export async function postMarkdownMarkdownRender(
  /** Request body */
  data: {
    /** The repository context to use when creating references in `gfm` mode.  For example, setting `context` to `octo-org/octo-repo` will change the text `#42` into an HTML link to issue 42 in the `octo-org/octo-repo` repository. */
    context?: string;
    /**
     * The rendering mode.
     * @default "markdown"
     * @example "markdown"
     */
    mode?: "markdown" | "gfm";
    /** The Markdown text to render in HTML. */
    text: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<AlertCreatedAt> {
  const result = await api.markdown.markdownRender({
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Render a Markdown document in raw mode
 * @request POST :/markdown/raw
 */
export async function postMarkdownMarkdownRenderRaw(
  /** Request body */
  data?: AlertCreatedAt,
  headers?: hasuraSdk.JSONValue,
): Promise<AlertCreatedAt> {
  const result = await api.markdown.markdownRenderRaw({
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a subscription plan for an account
 * @request GET :/marketplace_listing/accounts/{account_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getMarketplaceListingAppsGetSubscriptionPlanForAccount(
  /** account_id parameter */
  accountId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<MarketplacePurchase> {
  const result = await api.marketplaceListing.appsGetSubscriptionPlanForAccount(
    {
      accountId: accountId,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    },
  );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List plans
 * @request GET :/marketplace_listing/plans
 * @allowrelaxedtypes
 * @readonly
 */
export async function getMarketplaceListingAppsListPlans(
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<MarketplaceListingPlan[]> {
  const result = await api.marketplaceListing.appsListPlans({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List accounts for a plan
 * @request GET :/marketplace_listing/plans/{plan_id}/accounts
 * @allowrelaxedtypes
 * @readonly
 */
export async function getMarketplaceListingAppsListAccountsForPlan(
  /** The unique identifier of the plan. */
  planId: number,
  query: {
    /** The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to. */
    sort?: "created" | "updated";
    /** To return the oldest accounts first, set to `asc`. Ignored without the `sort` parameter. */
    direction?: "asc" | "desc";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<MarketplacePurchase[]> {
  const result = await api.marketplaceListing.appsListAccountsForPlan({
    planId: planId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a subscription plan for an account (stubbed)
 * @request GET :/marketplace_listing/stubbed/accounts/{account_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getMarketplaceListingAppsGetSubscriptionPlanForAccountStubbed(
  accountId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<MarketplacePurchase> {
  const result =
    await api.marketplaceListing.appsGetSubscriptionPlanForAccountStubbed({
      accountId: accountId,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List plans (stubbed)
 * @request GET :/marketplace_listing/stubbed/plans
 * @allowrelaxedtypes
 * @readonly
 */
export async function getMarketplaceListingAppsListPlansStubbed(
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<MarketplaceListingPlan[]> {
  const result = await api.marketplaceListing.appsListPlansStubbed({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List accounts for a plan (stubbed)
 * @request GET :/marketplace_listing/stubbed/plans/{plan_id}/accounts
 * @allowrelaxedtypes
 * @readonly
 */
export async function getMarketplaceListingAppsListAccountsForPlanStubbed(
  planId: number,
  query: {
    /** The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to. */
    sort?: "created" | "updated";
    /** To return the oldest accounts first, set to `asc`. Ignored without the `sort` parameter. */
    direction?: "asc" | "desc";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<MarketplacePurchase[]> {
  const result = await api.marketplaceListing.appsListAccountsForPlanStubbed({
    planId: planId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get GitHub meta information
 * @request GET :/meta
 * @readonly
 */
export async function getMetaMetaGet(
  headers?: hasuraSdk.JSONValue,
): Promise<ApiOverview> {
  const result = await api.meta.metaGet({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List public events for a network of repositories
 * @request GET :/networks/{owner}/{repo}/events
 * @allowrelaxedtypes
 * @readonly
 */
export async function getNetworksActivityListPublicEventsForRepoNetwork(
  /** The account owner of the repository. The name is not case sensitive. */
  owner: string,
  /** The name of the repository. The name is not case sensitive. */
  repo: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Event[]> {
  const result = await api.networks.activityListPublicEventsForRepoNetwork({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List notifications for the authenticated user
 * @request GET :/notifications
 * @allowrelaxedtypes
 * @readonly
 */
export async function getNotificationsActivityListNotificationsForAuthenticatedUser(
  query: {
    /** If `true`, show notifications marked as read. */
    all?: boolean;
    /** If `true`, only shows notifications in which the user is directly participating or mentioned. */
    participating?: boolean;
    /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
    since?: string;
    /** Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
    before?: string;
    /** Page number of the results to fetch. */
    page?: number;
    /** The number of results per page (max 50). */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Thread[]> {
  const result =
    await api.notifications.activityListNotificationsForAuthenticatedUser({
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Mark notifications as read
 * @request PUT :/notifications
 */
export async function putNotificationsActivityMarkNotificationsAsRead(
  /** Request body */
  data?: {
    /**
     * Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.
     * @format date-time
     */
    last_read_at?: string;
    /** Whether the notification has been read. */
    read?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  message?: string;
}> {
  const result = await api.notifications.activityMarkNotificationsAsRead({
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a thread
 * @request GET :/notifications/threads/{thread_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getNotificationsActivityGetThread(
  /** The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user)). */
  threadId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Thread> {
  const result = await api.notifications.activityGetThread({
    threadId: threadId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Mark a thread as read
 * @request PATCH :/notifications/threads/{thread_id}
 */
export async function patchNotificationsActivityMarkThreadAsRead(
  threadId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.notifications.activityMarkThreadAsRead({
    threadId: threadId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a thread subscription
 * @request DELETE :/notifications/threads/{thread_id}/subscription
 */
export async function deleteNotificationsActivityDeleteThreadSubscription(
  threadId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.notifications.activityDeleteThreadSubscription({
    threadId: threadId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a thread subscription for the authenticated user
 * @request GET :/notifications/threads/{thread_id}/subscription
 * @readonly
 */
export async function getNotificationsActivityGetThreadSubscriptionForAuthenticatedUser(
  threadId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<ThreadSubscription> {
  const result =
    await api.notifications.activityGetThreadSubscriptionForAuthenticatedUser({
      threadId: threadId,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set a thread subscription
 * @request PUT :/notifications/threads/{thread_id}/subscription
 */
export async function putNotificationsActivitySetThreadSubscription(
  threadId: number,
  /** Request body */
  data?: {
    /**
     * Whether to block all notifications from a thread.
     * @default false
     */
    ignored?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<ThreadSubscription> {
  const result = await api.notifications.activitySetThreadSubscription({
    threadId: threadId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get Octocat
 * @request GET :/octocat
 * @readonly
 */
export async function getOctocatMetaGetOctocat(
  query: {
    /** The words to show in Octocat's speech bubble */
    s?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<AlertCreatedAt> {
  const result = await api.octocat.metaGetOctocat({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List organizations
 * @request GET :/organizations
 * @readonly
 */
export async function getOrganizationsOrgsList(
  query: {
    /** An organization ID. Only return organizations with an ID greater than this ID. */
    since?: number;
    /** The number of results per page (max 100). */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<OrganizationSimple[]> {
  const result = await api.organizations.orgsList({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get an organization
 * @request GET :/orgs/{org}
 * @readonly
 */
export async function getOrgsOrgsGet(
  /** The organization name. The name is not case sensitive. */
  org: string,
  headers?: hasuraSdk.JSONValue,
): Promise<OrganizationFull> {
  const result = await api.orgs.orgsGet({
    org: org,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update an organization
 * @request PATCH :/orgs/{org}
 * @allowrelaxedtypes
 */
export async function patchOrgsOrgsUpdate(
  org: string,
  /** Request body */
  data?: {
    /**
     * Whether GitHub Advanced Security is automatically enabled for new repositories.
     *
     * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     *
     * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
     */
    advanced_security_enabled_for_new_repositories?: boolean;
    /** Billing email address. This address is not publicized. */
    billing_email?: string;
    /** @example ""http://github.blog"" */
    blog?: string;
    /** The company name. */
    company?: string;
    /**
     * Default permission level members have for organization repositories.
     * @default "read"
     */
    default_repository_permission?: "read" | "write" | "admin" | "none";
    /**
     * Whether Dependabot alerts is automatically enabled for new repositories.
     *
     * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     *
     * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
     */
    dependabot_alerts_enabled_for_new_repositories?: boolean;
    /**
     * Whether Dependabot security updates is automatically enabled for new repositories.
     *
     * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     *
     * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
     */
    dependabot_security_updates_enabled_for_new_repositories?: boolean;
    /**
     * Whether dependency graph is automatically enabled for new repositories.
     *
     * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     *
     * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
     */
    dependency_graph_enabled_for_new_repositories?: boolean;
    /** The description of the company. */
    description?: string;
    /** The publicly visible email address. */
    email?: string;
    /** Whether an organization can use organization projects. */
    has_organization_projects?: boolean;
    /** Whether repositories that belong to the organization can use repository projects. */
    has_repository_projects?: boolean;
    /** The location. */
    location?: string;
    /**
     * Specifies which types of repositories non-admin organization members can create. `private` is only available to repositories that are part of an organization on GitHub Enterprise Cloud.
     * **Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.
     */
    members_allowed_repository_creation_type?: "all" | "private" | "none";
    /** Whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation. */
    members_can_create_internal_repositories?: boolean;
    /**
     * Whether organization members can create GitHub Pages sites. Existing published sites will not be impacted.
     * @default true
     */
    members_can_create_pages?: boolean;
    /**
     * Whether organization members can create private GitHub Pages sites. Existing published sites will not be impacted.
     * @default true
     */
    members_can_create_private_pages?: boolean;
    /** Whether organization members can create private repositories, which are visible to organization members with permission. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation. */
    members_can_create_private_repositories?: boolean;
    /**
     * Whether organization members can create public GitHub Pages sites. Existing published sites will not be impacted.
     * @default true
     */
    members_can_create_public_pages?: boolean;
    /** Whether organization members can create public repositories, which are visible to anyone. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation. */
    members_can_create_public_repositories?: boolean;
    /**
     * Whether of non-admin organization members can create repositories. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.
     * @default true
     */
    members_can_create_repositories?: boolean;
    /**
     * Whether organization members can fork private organization repositories.
     * @default false
     */
    members_can_fork_private_repositories?: boolean;
    /** The shorthand name of the company. */
    name?: string;
    /**
     * Whether secret scanning is automatically enabled for new repositories.
     *
     * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     *
     * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
     */
    secret_scanning_enabled_for_new_repositories?: boolean;
    /** If `secret_scanning_push_protection_custom_link_enabled` is true, the URL that will be displayed to contributors who are blocked from pushing a secret. */
    secret_scanning_push_protection_custom_link?: string;
    /** Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection. */
    secret_scanning_push_protection_custom_link_enabled?: boolean;
    /**
     * Whether secret scanning push protection is automatically enabled for new repositories.
     *
     * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     *
     * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
     */
    secret_scanning_push_protection_enabled_for_new_repositories?: boolean;
    /** The Twitter username of the company. */
    twitter_username?: string;
    /**
     * Whether contributors to organization repositories are required to sign off on commits they make through GitHub's web interface.
     * @default false
     */
    web_commit_signoff_required?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<OrganizationFull> {
  const result = await api.orgs.orgsUpdate({
    org: org,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get GitHub Actions cache usage for an organization
 * @request GET :/orgs/{org}/actions/cache/usage
 * @readonly
 */
export async function getOrgsActionsGetActionsCacheUsageForOrg(
  org: string,
  headers?: hasuraSdk.JSONValue,
): Promise<ActionsCacheUsageOrgEnterprise> {
  const result = await api.orgs.actionsGetActionsCacheUsageForOrg({
    org: org,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List repositories with GitHub Actions cache usage for an organization
 * @request GET :/orgs/{org}/actions/cache/usage-by-repository
 * @readonly
 */
export async function getOrgsActionsGetActionsCacheUsageByRepoForOrg(
  org: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  repository_cache_usages: ActionsCacheUsageByRepository[];
  total_count: number;
}> {
  const result = await api.orgs.actionsGetActionsCacheUsageByRepoForOrg({
    org: org,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the customization template for an OIDC subject claim for an organization
 * @request GET :/orgs/{org}/actions/oidc/customization/sub
 * @readonly
 */
export async function getOrgsOidcGetOidcCustomSubTemplateForOrg(
  org: string,
  headers?: hasuraSdk.JSONValue,
): Promise<OidcCustomSub> {
  const result = await api.orgs.oidcGetOidcCustomSubTemplateForOrg({
    org: org,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set the customization template for an OIDC subject claim for an organization
 * @request PUT :/orgs/{org}/actions/oidc/customization/sub
 */
export async function putOrgsOidcUpdateOidcCustomSubTemplateForOrg(
  org: string,
  /** Request body */
  data: OidcCustomSub,
  headers?: hasuraSdk.JSONValue,
): Promise<EmptyObject> {
  const result = await api.orgs.oidcUpdateOidcCustomSubTemplateForOrg({
    org: org,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get GitHub Actions permissions for an organization
 * @request GET :/orgs/{org}/actions/permissions
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsActionsGetGithubActionsPermissionsOrganization(
  org: string,
  headers?: hasuraSdk.JSONValue,
): Promise<ActionsOrganizationPermissions> {
  const result = await api.orgs.actionsGetGithubActionsPermissionsOrganization({
    org: org,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set GitHub Actions permissions for an organization
 * @request PUT :/orgs/{org}/actions/permissions
 */
export async function putOrgsActionsSetGithubActionsPermissionsOrganization(
  org: string,
  /** Request body */
  data: {
    /** The permissions policy that controls the actions and reusable workflows that are allowed to run. */
    allowed_actions?: AllowedActions;
    /** The policy that controls the repositories in the organization that are allowed to run GitHub Actions. */
    enabled_repositories: EnabledRepositories;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.actionsSetGithubActionsPermissionsOrganization({
    org: org,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List selected repositories enabled for GitHub Actions in an organization
 * @request GET :/orgs/{org}/actions/permissions/repositories
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsActionsListSelectedRepositoriesEnabledGithubActionsOrganization(
  org: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  repositories: Repository[];
  total_count: number;
}> {
  const result =
    await api.orgs.actionsListSelectedRepositoriesEnabledGithubActionsOrganization(
      {
        org: org,
        query: query,
        params: {
          headers: (headers?.value as Record<string, string>) ?? undefined,
        },
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set selected repositories enabled for GitHub Actions in an organization
 * @request PUT :/orgs/{org}/actions/permissions/repositories
 */
export async function putOrgsActionsSetSelectedRepositoriesEnabledGithubActionsOrganization(
  org: string,
  /** Request body */
  data: {
    /** List of repository IDs to enable for GitHub Actions. */
    selected_repository_ids: number[];
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.orgs.actionsSetSelectedRepositoriesEnabledGithubActionsOrganization(
      {
        org: org,
        data: data,
        params: {
          headers: (headers?.value as Record<string, string>) ?? undefined,
        },
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Disable a selected repository for GitHub Actions in an organization
 * @request DELETE :/orgs/{org}/actions/permissions/repositories/{repository_id}
 */
export async function deleteOrgsActionsDisableSelectedRepositoryGithubActionsOrganization(
  org: string,
  /** The unique identifier of the repository. */
  repositoryId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.orgs.actionsDisableSelectedRepositoryGithubActionsOrganization({
      org: org,
      repositoryId: repositoryId,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Enable a selected repository for GitHub Actions in an organization
 * @request PUT :/orgs/{org}/actions/permissions/repositories/{repository_id}
 */
export async function putOrgsActionsEnableSelectedRepositoryGithubActionsOrganization(
  org: string,
  repositoryId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.orgs.actionsEnableSelectedRepositoryGithubActionsOrganization({
      org: org,
      repositoryId: repositoryId,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get allowed actions and reusable workflows for an organization
 * @request GET :/orgs/{org}/actions/permissions/selected-actions
 * @readonly
 */
export async function getOrgsActionsGetAllowedActionsOrganization(
  org: string,
  headers?: hasuraSdk.JSONValue,
): Promise<SelectedActions> {
  const result = await api.orgs.actionsGetAllowedActionsOrganization({
    org: org,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set allowed actions and reusable workflows for an organization
 * @request PUT :/orgs/{org}/actions/permissions/selected-actions
 */
export async function putOrgsActionsSetAllowedActionsOrganization(
  org: string,
  /** Request body */
  data?: SelectedActions,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.actionsSetAllowedActionsOrganization({
    org: org,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get default workflow permissions for an organization
 * @request GET :/orgs/{org}/actions/permissions/workflow
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsActionsGetGithubActionsDefaultWorkflowPermissionsOrganization(
  org: string,
  headers?: hasuraSdk.JSONValue,
): Promise<ActionsGetDefaultWorkflowPermissions> {
  const result =
    await api.orgs.actionsGetGithubActionsDefaultWorkflowPermissionsOrganization(
      {
        org: org,
        params: {
          headers: (headers?.value as Record<string, string>) ?? undefined,
        },
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set default workflow permissions for an organization
 * @request PUT :/orgs/{org}/actions/permissions/workflow
 * @allowrelaxedtypes
 */
export async function putOrgsActionsSetGithubActionsDefaultWorkflowPermissionsOrganization(
  org: string,
  /** Request body */
  data?: ActionsSetDefaultWorkflowPermissions,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.orgs.actionsSetGithubActionsDefaultWorkflowPermissionsOrganization(
      {
        org: org,
        data: data,
        params: {
          headers: (headers?.value as Record<string, string>) ?? undefined,
        },
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List required workflows
 * @request GET :/orgs/{org}/actions/required_workflows
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsActionsListRequiredWorkflows(
  org: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  required_workflows: RequiredWorkflow[];
  total_count: number;
}> {
  const result = await api.orgs.actionsListRequiredWorkflows({
    org: org,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a required workflow
 * @request POST :/orgs/{org}/actions/required_workflows
 * @allowrelaxedtypes
 */
export async function postOrgsActionsCreateRequiredWorkflow(
  org: string,
  /** Request body */
  data: {
    /** The ID of the repository that contains the workflow file. */
    repository_id: string;
    /**
     * Enable the required workflow for all repositories or selected repositories in the organization.
     * @default "all"
     */
    scope?: "selected" | "all";
    /** A list of repository IDs where you want to enable the required workflow. You can only provide a list of repository ids when the `scope` is set to `selected`. */
    selected_repository_ids?: number[];
    /** Path of the workflow file to be configured as a required workflow. */
    workflow_file_path: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<RequiredWorkflow> {
  const result = await api.orgs.actionsCreateRequiredWorkflow({
    org: org,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a required workflow
 * @request DELETE :/orgs/{org}/actions/required_workflows/{required_workflow_id}
 */
export async function deleteOrgsActionsDeleteRequiredWorkflow(
  org: string,
  /** The unique identifier of the required workflow. */
  requiredWorkflowId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.actionsDeleteRequiredWorkflow({
    org: org,
    requiredWorkflowId: requiredWorkflowId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a required workflow
 * @request GET :/orgs/{org}/actions/required_workflows/{required_workflow_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsActionsGetRequiredWorkflow(
  org: string,
  requiredWorkflowId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<RequiredWorkflow> {
  const result = await api.orgs.actionsGetRequiredWorkflow({
    org: org,
    requiredWorkflowId: requiredWorkflowId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update a required workflow
 * @request PATCH :/orgs/{org}/actions/required_workflows/{required_workflow_id}
 * @allowrelaxedtypes
 */
export async function patchOrgsActionsUpdateRequiredWorkflow(
  org: string,
  requiredWorkflowId: number,
  /** Request body */
  data: {
    /** The ID of the repository that contains the workflow file. */
    repository_id?: string;
    /**
     * Enable the required workflow for all repositories or selected repositories in the organization.
     * @default "all"
     */
    scope?: "selected" | "all";
    /** A list of repository IDs where you want to enable the required workflow. A list of repository IDs where you want to enable the required workflow. You can only provide a list of repository ids when the `scope` is set to `selected`. */
    selected_repository_ids?: number[];
    /** Path of the workflow file to be configured as a required workflow. */
    workflow_file_path?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<RequiredWorkflow> {
  const result = await api.orgs.actionsUpdateRequiredWorkflow({
    org: org,
    requiredWorkflowId: requiredWorkflowId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List selected repositories for a required workflow
 * @request GET :/orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsActionsListSelectedRepositoriesRequiredWorkflow(
  org: string,
  requiredWorkflowId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<{
  repositories: Repository[];
  total_count: number;
}> {
  const result = await api.orgs.actionsListSelectedRepositoriesRequiredWorkflow(
    {
      org: org,
      requiredWorkflowId: requiredWorkflowId,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    },
  );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Sets repositories for a required workflow
 * @request PUT :/orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories
 */
export async function putOrgsActionsSetSelectedReposToRequiredWorkflow(
  org: string,
  requiredWorkflowId: number,
  /** Request body */
  data: {
    /** The IDs of the repositories for which the workflow should be required. */
    selected_repository_ids: number[];
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.actionsSetSelectedReposToRequiredWorkflow({
    org: org,
    requiredWorkflowId: requiredWorkflowId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Remove a selected repository from required workflow
 * @request DELETE :/orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories/{repository_id}
 */
export async function deleteOrgsActionsRemoveSelectedRepoFromRequiredWorkflow(
  org: string,
  requiredWorkflowId: number,
  repositoryId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.actionsRemoveSelectedRepoFromRequiredWorkflow({
    org: org,
    requiredWorkflowId: requiredWorkflowId,
    repositoryId: repositoryId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Add a repository to a required workflow
 * @request PUT :/orgs/{org}/actions/required_workflows/{required_workflow_id}/repositories/{repository_id}
 */
export async function putOrgsActionsAddSelectedRepoToRequiredWorkflow(
  org: string,
  requiredWorkflowId: number,
  repositoryId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.actionsAddSelectedRepoToRequiredWorkflow({
    org: org,
    requiredWorkflowId: requiredWorkflowId,
    repositoryId: repositoryId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List self-hosted runners for an organization
 * @request GET :/orgs/{org}/actions/runners
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsActionsListSelfHostedRunnersForOrg(
  org: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  runners: Runner[];
  total_count: number;
}> {
  const result = await api.orgs.actionsListSelfHostedRunnersForOrg({
    org: org,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List runner applications for an organization
 * @request GET :/orgs/{org}/actions/runners/downloads
 * @readonly
 */
export async function getOrgsActionsListRunnerApplicationsForOrg(
  org: string,
  headers?: hasuraSdk.JSONValue,
): Promise<RunnerApplication[]> {
  const result = await api.orgs.actionsListRunnerApplicationsForOrg({
    org: org,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a registration token for an organization
 * @request POST :/orgs/{org}/actions/runners/registration-token
 * @allowrelaxedtypes
 */
export async function postOrgsActionsCreateRegistrationTokenForOrg(
  org: string,
  headers?: hasuraSdk.JSONValue,
): Promise<AuthenticationToken> {
  const result = await api.orgs.actionsCreateRegistrationTokenForOrg({
    org: org,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a remove token for an organization
 * @request POST :/orgs/{org}/actions/runners/remove-token
 * @allowrelaxedtypes
 */
export async function postOrgsActionsCreateRemoveTokenForOrg(
  org: string,
  headers?: hasuraSdk.JSONValue,
): Promise<AuthenticationToken> {
  const result = await api.orgs.actionsCreateRemoveTokenForOrg({
    org: org,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a self-hosted runner from an organization
 * @request DELETE :/orgs/{org}/actions/runners/{runner_id}
 */
export async function deleteOrgsActionsDeleteSelfHostedRunnerFromOrg(
  org: string,
  /** Unique identifier of the self-hosted runner. */
  runnerId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.actionsDeleteSelfHostedRunnerFromOrg({
    org: org,
    runnerId: runnerId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a self-hosted runner for an organization
 * @request GET :/orgs/{org}/actions/runners/{runner_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsActionsGetSelfHostedRunnerForOrg(
  org: string,
  runnerId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Runner> {
  const result = await api.orgs.actionsGetSelfHostedRunnerForOrg({
    org: org,
    runnerId: runnerId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Remove all custom labels from a self-hosted runner for an organization
 * @request DELETE :/orgs/{org}/actions/runners/{runner_id}/labels
 */
export async function deleteOrgsActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg(
  org: string,
  runnerId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<{
  labels: RunnerLabel[];
  total_count: number;
}> {
  const result =
    await api.orgs.actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg({
      org: org,
      runnerId: runnerId,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List labels for a self-hosted runner for an organization
 * @request GET :/orgs/{org}/actions/runners/{runner_id}/labels
 * @readonly
 */
export async function getOrgsActionsListLabelsForSelfHostedRunnerForOrg(
  org: string,
  runnerId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<{
  labels: RunnerLabel[];
  total_count: number;
}> {
  const result = await api.orgs.actionsListLabelsForSelfHostedRunnerForOrg({
    org: org,
    runnerId: runnerId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Add custom labels to a self-hosted runner for an organization
 * @request POST :/orgs/{org}/actions/runners/{runner_id}/labels
 */
export async function postOrgsActionsAddCustomLabelsToSelfHostedRunnerForOrg(
  org: string,
  runnerId: number,
  /** Request body */
  data: {
    /**
     * The names of the custom labels to add to the runner.
     * @maxItems 100
     * @minItems 1
     */
    labels: string[];
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  labels: RunnerLabel[];
  total_count: number;
}> {
  const result = await api.orgs.actionsAddCustomLabelsToSelfHostedRunnerForOrg({
    org: org,
    runnerId: runnerId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set custom labels for a self-hosted runner for an organization
 * @request PUT :/orgs/{org}/actions/runners/{runner_id}/labels
 */
export async function putOrgsActionsSetCustomLabelsForSelfHostedRunnerForOrg(
  org: string,
  runnerId: number,
  /** Request body */
  data: {
    /**
     * The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.
     * @maxItems 100
     * @minItems 0
     */
    labels: string[];
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  labels: RunnerLabel[];
  total_count: number;
}> {
  const result = await api.orgs.actionsSetCustomLabelsForSelfHostedRunnerForOrg(
    {
      org: org,
      runnerId: runnerId,
      data: data,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    },
  );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Remove a custom label from a self-hosted runner for an organization
 * @request DELETE :/orgs/{org}/actions/runners/{runner_id}/labels/{name}
 */
export async function deleteOrgsActionsRemoveCustomLabelFromSelfHostedRunnerForOrg(
  org: string,
  runnerId: number,
  /** The name of a self-hosted runner's custom label. */
  name: string,
  headers?: hasuraSdk.JSONValue,
): Promise<{
  labels: RunnerLabel[];
  total_count: number;
}> {
  const result =
    await api.orgs.actionsRemoveCustomLabelFromSelfHostedRunnerForOrg({
      org: org,
      runnerId: runnerId,
      name: name,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List organization secrets
 * @request GET :/orgs/{org}/actions/secrets
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsActionsListOrgSecrets(
  org: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  secrets: OrganizationActionsSecret[];
  total_count: number;
}> {
  const result = await api.orgs.actionsListOrgSecrets({
    org: org,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get an organization public key
 * @request GET :/orgs/{org}/actions/secrets/public-key
 * @readonly
 */
export async function getOrgsActionsGetOrgPublicKey(
  org: string,
  headers?: hasuraSdk.JSONValue,
): Promise<ActionsPublicKey> {
  const result = await api.orgs.actionsGetOrgPublicKey({
    org: org,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete an organization secret
 * @request DELETE :/orgs/{org}/actions/secrets/{secret_name}
 */
export async function deleteOrgsActionsDeleteOrgSecret(
  org: string,
  /** The name of the secret. */
  secretName: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.actionsDeleteOrgSecret({
    org: org,
    secretName: secretName,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get an organization secret
 * @request GET :/orgs/{org}/actions/secrets/{secret_name}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsActionsGetOrgSecret(
  org: string,
  secretName: string,
  headers?: hasuraSdk.JSONValue,
): Promise<OrganizationActionsSecret> {
  const result = await api.orgs.actionsGetOrgSecret({
    org: org,
    secretName: secretName,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create or update an organization secret
 * @request PUT :/orgs/{org}/actions/secrets/{secret_name}
 * @allowrelaxedtypes
 */
export async function putOrgsActionsCreateOrUpdateOrgSecret(
  org: string,
  secretName: string,
  /** Request body */
  data: {
    /**
     * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/reference/actions#get-an-organization-public-key) endpoint.
     * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
     */
    encrypted_value?: string;
    /** ID of the key you used to encrypt the secret. */
    key_id?: string;
    /** An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints. */
    selected_repository_ids?: number[];
    /** Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret. */
    visibility: "all" | "private" | "selected";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<EmptyObject> {
  const result = await api.orgs.actionsCreateOrUpdateOrgSecret({
    org: org,
    secretName: secretName,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List selected repositories for an organization secret
 * @request GET :/orgs/{org}/actions/secrets/{secret_name}/repositories
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsActionsListSelectedReposForOrgSecret(
  org: string,
  secretName: string,
  query: {
    /** Page number of the results to fetch. */
    page?: number;
    /** The number of results per page (max 100). */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  repositories: MinimalRepository[];
  total_count: number;
}> {
  const result = await api.orgs.actionsListSelectedReposForOrgSecret({
    org: org,
    secretName: secretName,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set selected repositories for an organization secret
 * @request PUT :/orgs/{org}/actions/secrets/{secret_name}/repositories
 */
export async function putOrgsActionsSetSelectedReposForOrgSecret(
  org: string,
  secretName: string,
  /** Request body */
  data: {
    /** An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Add selected repository to an organization secret](https://docs.github.com/rest/actions/secrets#add-selected-repository-to-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints. */
    selected_repository_ids: number[];
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.actionsSetSelectedReposForOrgSecret({
    org: org,
    secretName: secretName,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Remove selected repository from an organization secret
 * @request DELETE :/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}
 */
export async function deleteOrgsActionsRemoveSelectedRepoFromOrgSecret(
  org: string,
  secretName: string,
  repositoryId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.actionsRemoveSelectedRepoFromOrgSecret({
    org: org,
    secretName: secretName,
    repositoryId: repositoryId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Add selected repository to an organization secret
 * @request PUT :/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}
 */
export async function putOrgsActionsAddSelectedRepoToOrgSecret(
  org: string,
  secretName: string,
  repositoryId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.actionsAddSelectedRepoToOrgSecret({
    org: org,
    secretName: secretName,
    repositoryId: repositoryId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List organization variables
 * @request GET :/orgs/{org}/actions/variables
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsActionsListOrgVariables(
  org: string,
  query: {
    /** The number of results per page (max 30). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  total_count: number;
  variables: OrganizationActionsVariable[];
}> {
  const result = await api.orgs.actionsListOrgVariables({
    org: org,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create an organization variable
 * @request POST :/orgs/{org}/actions/variables
 * @allowrelaxedtypes
 */
export async function postOrgsActionsCreateOrgVariable(
  org: string,
  /** Request body */
  data: {
    /** The name of the variable. */
    name: string;
    /** An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`. */
    selected_repository_ids?: number[];
    /** The value of the variable. */
    value: string;
    /** The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable. */
    visibility: "all" | "private" | "selected";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<EmptyObject> {
  const result = await api.orgs.actionsCreateOrgVariable({
    org: org,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete an organization variable
 * @request DELETE :/orgs/{org}/actions/variables/{name}
 */
export async function deleteOrgsActionsDeleteOrgVariable(
  org: string,
  /** The name of the variable. */
  name: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.actionsDeleteOrgVariable({
    org: org,
    name: name,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get an organization variable
 * @request GET :/orgs/{org}/actions/variables/{name}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsActionsGetOrgVariable(
  org: string,
  name: string,
  headers?: hasuraSdk.JSONValue,
): Promise<OrganizationActionsVariable> {
  const result = await api.orgs.actionsGetOrgVariable({
    org: org,
    name: name,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update an organization variable
 * @request PATCH :/orgs/{org}/actions/variables/{name}
 * @allowrelaxedtypes
 */
export async function patchOrgsActionsUpdateOrgVariable(
  org: string,
  name: string,
  /** Request body */
  data: {
    /** The name of the variable. */
    name?: string;
    /** An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`. */
    selected_repository_ids?: number[];
    /** The value of the variable. */
    value?: string;
    /** The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable. */
    visibility?: "all" | "private" | "selected";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.actionsUpdateOrgVariable({
    org: org,
    name: name,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List selected repositories for an organization variable
 * @request GET :/orgs/{org}/actions/variables/{name}/repositories
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsActionsListSelectedReposForOrgVariable(
  org: string,
  name: string,
  query: {
    /** Page number of the results to fetch. */
    page?: number;
    /** The number of results per page (max 100). */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  repositories: MinimalRepository[];
  total_count: number;
}> {
  const result = await api.orgs.actionsListSelectedReposForOrgVariable({
    org: org,
    name: name,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set selected repositories for an organization variable
 * @request PUT :/orgs/{org}/actions/variables/{name}/repositories
 */
export async function putOrgsActionsSetSelectedReposForOrgVariable(
  org: string,
  name: string,
  /** Request body */
  data: {
    /** The IDs of the repositories that can access the organization variable. */
    selected_repository_ids: number[];
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.actionsSetSelectedReposForOrgVariable({
    org: org,
    name: name,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Remove selected repository from an organization variable
 * @request DELETE :/orgs/{org}/actions/variables/{name}/repositories/{repository_id}
 */
export async function deleteOrgsActionsRemoveSelectedRepoFromOrgVariable(
  org: string,
  name: string,
  repositoryId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.actionsRemoveSelectedRepoFromOrgVariable({
    org: org,
    name: name,
    repositoryId: repositoryId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Add selected repository to an organization variable
 * @request PUT :/orgs/{org}/actions/variables/{name}/repositories/{repository_id}
 */
export async function putOrgsActionsAddSelectedRepoToOrgVariable(
  org: string,
  name: string,
  repositoryId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.actionsAddSelectedRepoToOrgVariable({
    org: org,
    name: name,
    repositoryId: repositoryId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List users blocked by an organization
 * @request GET :/orgs/{org}/blocks
 * @readonly
 */
export async function getOrgsOrgsListBlockedUsers(
  org: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<SimpleUser[]> {
  const result = await api.orgs.orgsListBlockedUsers({
    org: org,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Unblock a user from an organization
 * @request DELETE :/orgs/{org}/blocks/{username}
 */
export async function deleteOrgsOrgsUnblockUser(
  org: string,
  /** The handle for the GitHub user account. */
  username: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.orgsUnblockUser({
    org: org,
    username: username,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Check if a user is blocked by an organization
 * @request GET :/orgs/{org}/blocks/{username}
 * @readonly
 */
export async function getOrgsOrgsCheckBlockedUser(
  org: string,
  username: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.orgsCheckBlockedUser({
    org: org,
    username: username,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Block a user from an organization
 * @request PUT :/orgs/{org}/blocks/{username}
 */
export async function putOrgsOrgsBlockUser(
  org: string,
  username: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.orgsBlockUser({
    org: org,
    username: username,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List code scanning alerts for an organization
 * @request GET :/orgs/{org}/code-scanning/alerts
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsCodeScanningListAlertsForOrg(
  org: string,
  query: {
    /** The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both. */
    tool_name?: CodeScanningAnalysisToolName;
    /** The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both. */
    tool_guid?: CodeScanningAnalysisToolGuid;
    /** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor. */
    before?: string;
    /** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor. */
    after?: string;
    /** Page number of the results to fetch. */
    page?: number;
    /** The number of results per page (max 100). */
    per_page?: number;
    /** The direction to sort the results by. */
    direction?: "asc" | "desc";
    /** If specified, only code scanning alerts with this state will be returned. */
    state?: CodeScanningAlertState;
    /** The property by which to sort the results. */
    sort?: "created" | "updated";
    /** If specified, only code scanning alerts with this severity will be returned. */
    severity?: CodeScanningAlertSeverity;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<CodeScanningOrganizationAlertItems[]> {
  const result = await api.orgs.codeScanningListAlertsForOrg({
    org: org,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List codespaces for the organization
 * @request GET :/orgs/{org}/codespaces
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsCodespacesListInOrganization(
  org: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  codespaces: Codespace[];
  total_count: number;
}> {
  const result = await api.orgs.codespacesListInOrganization({
    org: org,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Manage access control for organization codespaces
 * @request PUT :/orgs/{org}/codespaces/billing
 * @allowrelaxedtypes
 */
export async function putOrgsCodespacesSetCodespacesBilling(
  org: string,
  /** Request body */
  data: {
    /**
     * The usernames of the organization members who should have access to codespaces in the organization. Required when `visibility` is `selected_members`. The provided list of usernames will replace any existing value.
     * @maxItems 100
     */
    selected_usernames?: string[];
    /** Which users can access codespaces in the organization. `disabled` means that no users can access codespaces in the organization. */
    visibility:
      | "disabled"
      | "selected_members"
      | "all_members"
      | "all_members_and_outside_collaborators";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.codespacesSetCodespacesBilling({
    org: org,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Removes users from Codespaces billing for an organization
 * @request DELETE :/orgs/{org}/codespaces/billing/selected_users
 */
export async function deleteOrgsCodespacesDeleteCodespacesBillingUsers(
  org: string,
  /** Request body */
  data: {
    /**
     * The usernames of the organization members whose codespaces should not be billed to the organization.
     * @maxItems 100
     */
    selected_usernames: string[];
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.codespacesDeleteCodespacesBillingUsers({
    org: org,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Add users to Codespaces billing for an organization
 * @request POST :/orgs/{org}/codespaces/billing/selected_users
 */
export async function postOrgsCodespacesSetCodespacesBillingUsers(
  org: string,
  /** Request body */
  data: {
    /**
     * The usernames of the organization members whose codespaces be billed to the organization.
     * @maxItems 100
     */
    selected_usernames: string[];
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.codespacesSetCodespacesBillingUsers({
    org: org,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List organization secrets
 * @request GET :/orgs/{org}/codespaces/secrets
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsCodespacesListOrgSecrets(
  org: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  secrets: CodespacesOrgSecret[];
  total_count: number;
}> {
  const result = await api.orgs.codespacesListOrgSecrets({
    org: org,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get an organization public key
 * @request GET :/orgs/{org}/codespaces/secrets/public-key
 * @readonly
 */
export async function getOrgsCodespacesGetOrgPublicKey(
  org: string,
  headers?: hasuraSdk.JSONValue,
): Promise<CodespacesPublicKey> {
  const result = await api.orgs.codespacesGetOrgPublicKey({
    org: org,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete an organization secret
 * @request DELETE :/orgs/{org}/codespaces/secrets/{secret_name}
 */
export async function deleteOrgsCodespacesDeleteOrgSecret(
  org: string,
  secretName: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.codespacesDeleteOrgSecret({
    org: org,
    secretName: secretName,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get an organization secret
 * @request GET :/orgs/{org}/codespaces/secrets/{secret_name}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsCodespacesGetOrgSecret(
  org: string,
  secretName: string,
  headers?: hasuraSdk.JSONValue,
): Promise<CodespacesOrgSecret> {
  const result = await api.orgs.codespacesGetOrgSecret({
    org: org,
    secretName: secretName,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create or update an organization secret
 * @request PUT :/orgs/{org}/codespaces/secrets/{secret_name}
 * @allowrelaxedtypes
 */
export async function putOrgsCodespacesCreateOrUpdateOrgSecret(
  org: string,
  secretName: string,
  /** Request body */
  data: {
    /**
     * The value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/reference/codespaces#get-an-organization-public-key) endpoint.
     * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
     */
    encrypted_value?: string;
    /** The ID of the key you used to encrypt the secret. */
    key_id?: string;
    /** An array of repository IDs that can access the organization secret. You can only provide a list of repository IDs when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/codespaces#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/codespaces#remove-selected-repository-from-an-organization-secret) endpoints. */
    selected_repository_ids?: number[];
    /** Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret. */
    visibility: "all" | "private" | "selected";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<EmptyObject> {
  const result = await api.orgs.codespacesCreateOrUpdateOrgSecret({
    org: org,
    secretName: secretName,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List selected repositories for an organization secret
 * @request GET :/orgs/{org}/codespaces/secrets/{secret_name}/repositories
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsCodespacesListSelectedReposForOrgSecret(
  org: string,
  secretName: string,
  query: {
    /** Page number of the results to fetch. */
    page?: number;
    /** The number of results per page (max 100). */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  repositories: MinimalRepository[];
  total_count: number;
}> {
  const result = await api.orgs.codespacesListSelectedReposForOrgSecret({
    org: org,
    secretName: secretName,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set selected repositories for an organization secret
 * @request PUT :/orgs/{org}/codespaces/secrets/{secret_name}/repositories
 */
export async function putOrgsCodespacesSetSelectedReposForOrgSecret(
  org: string,
  secretName: string,
  /** Request body */
  data: {
    /** An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/codespaces#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/codespaces#remove-selected-repository-from-an-organization-secret) endpoints. */
    selected_repository_ids: number[];
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.codespacesSetSelectedReposForOrgSecret({
    org: org,
    secretName: secretName,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Remove selected repository from an organization secret
 * @request DELETE :/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}
 */
export async function deleteOrgsCodespacesRemoveSelectedRepoFromOrgSecret(
  org: string,
  secretName: string,
  repositoryId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.codespacesRemoveSelectedRepoFromOrgSecret({
    org: org,
    secretName: secretName,
    repositoryId: repositoryId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Add selected repository to an organization secret
 * @request PUT :/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}
 */
export async function putOrgsCodespacesAddSelectedRepoToOrgSecret(
  org: string,
  secretName: string,
  repositoryId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.codespacesAddSelectedRepoToOrgSecret({
    org: org,
    secretName: secretName,
    repositoryId: repositoryId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List Dependabot alerts for an organization
 * @request GET :/orgs/{org}/dependabot/alerts
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsDependabotListAlertsForOrg(
  org: string,
  query: {
    /** A comma-separated list of states. If specified, only alerts with these states will be returned.

Can be: `dismissed`, `fixed`, `open` */
    state?: string;
    /** A comma-separated list of severities. If specified, only alerts with these severities will be returned.

Can be: `low`, `medium`, `high`, `critical` */
    severity?: string;
    /** A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.

Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust` */
    ecosystem?: string;
    /** A comma-separated list of package names. If specified, only alerts for these packages will be returned. */
    package?: string;
    /** The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned. */
    scope?: "development" | "runtime";
    /** The property by which to sort the results.
`created` means when the alert was created.
`updated` means when the alert's state last changed. */
    sort?: "created" | "updated";
    /** The direction to sort the results by. */
    direction?: "asc" | "desc";
    /** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor. */
    before?: string;
    /** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor. */
    after?: string;
    /** **Deprecated**. The number of results per page (max 100), starting from the first matching result.
This parameter must not be used in combination with `last`.
Instead, use `per_page` in combination with `after` to fetch the first page of results. */
    first?: number;
    /** **Deprecated**. The number of results per page (max 100), starting from the last matching result.
This parameter must not be used in combination with `first`.
Instead, use `per_page` in combination with `before` to fetch the last page of results. */
    last?: number;
    /** The number of results per page (max 100). */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<DependabotAlertWithRepository[]> {
  const result = await api.orgs.dependabotListAlertsForOrg({
    org: org,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List organization secrets
 * @request GET :/orgs/{org}/dependabot/secrets
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsDependabotListOrgSecrets(
  org: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  secrets: OrganizationDependabotSecret[];
  total_count: number;
}> {
  const result = await api.orgs.dependabotListOrgSecrets({
    org: org,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get an organization public key
 * @request GET :/orgs/{org}/dependabot/secrets/public-key
 * @readonly
 */
export async function getOrgsDependabotGetOrgPublicKey(
  org: string,
  headers?: hasuraSdk.JSONValue,
): Promise<DependabotPublicKey> {
  const result = await api.orgs.dependabotGetOrgPublicKey({
    org: org,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete an organization secret
 * @request DELETE :/orgs/{org}/dependabot/secrets/{secret_name}
 */
export async function deleteOrgsDependabotDeleteOrgSecret(
  org: string,
  secretName: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.dependabotDeleteOrgSecret({
    org: org,
    secretName: secretName,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get an organization secret
 * @request GET :/orgs/{org}/dependabot/secrets/{secret_name}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsDependabotGetOrgSecret(
  org: string,
  secretName: string,
  headers?: hasuraSdk.JSONValue,
): Promise<OrganizationDependabotSecret> {
  const result = await api.orgs.dependabotGetOrgSecret({
    org: org,
    secretName: secretName,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create or update an organization secret
 * @request PUT :/orgs/{org}/dependabot/secrets/{secret_name}
 * @allowrelaxedtypes
 */
export async function putOrgsDependabotCreateOrUpdateOrgSecret(
  org: string,
  secretName: string,
  /** Request body */
  data: {
    /**
     * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/reference/dependabot#get-an-organization-public-key) endpoint.
     * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
     */
    encrypted_value?: string;
    /** ID of the key you used to encrypt the secret. */
    key_id?: string;
    /** An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/reference/dependabot#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/dependabot#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/dependabot#remove-selected-repository-from-an-organization-secret) endpoints. */
    selected_repository_ids?: string[];
    /** Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret. */
    visibility: "all" | "private" | "selected";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<EmptyObject> {
  const result = await api.orgs.dependabotCreateOrUpdateOrgSecret({
    org: org,
    secretName: secretName,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List selected repositories for an organization secret
 * @request GET :/orgs/{org}/dependabot/secrets/{secret_name}/repositories
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsDependabotListSelectedReposForOrgSecret(
  org: string,
  secretName: string,
  query: {
    /** Page number of the results to fetch. */
    page?: number;
    /** The number of results per page (max 100). */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  repositories: MinimalRepository[];
  total_count: number;
}> {
  const result = await api.orgs.dependabotListSelectedReposForOrgSecret({
    org: org,
    secretName: secretName,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set selected repositories for an organization secret
 * @request PUT :/orgs/{org}/dependabot/secrets/{secret_name}/repositories
 */
export async function putOrgsDependabotSetSelectedReposForOrgSecret(
  org: string,
  secretName: string,
  /** Request body */
  data: {
    /** An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/dependabot#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/dependabot#remove-selected-repository-from-an-organization-secret) endpoints. */
    selected_repository_ids: number[];
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.dependabotSetSelectedReposForOrgSecret({
    org: org,
    secretName: secretName,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Remove selected repository from an organization secret
 * @request DELETE :/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}
 */
export async function deleteOrgsDependabotRemoveSelectedRepoFromOrgSecret(
  org: string,
  secretName: string,
  repositoryId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.dependabotRemoveSelectedRepoFromOrgSecret({
    org: org,
    secretName: secretName,
    repositoryId: repositoryId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Add selected repository to an organization secret
 * @request PUT :/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}
 */
export async function putOrgsDependabotAddSelectedRepoToOrgSecret(
  org: string,
  secretName: string,
  repositoryId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.dependabotAddSelectedRepoToOrgSecret({
    org: org,
    secretName: secretName,
    repositoryId: repositoryId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List public organization events
 * @request GET :/orgs/{org}/events
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsActivityListPublicOrgEvents(
  org: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Event[]> {
  const result = await api.orgs.activityListPublicOrgEvents({
    org: org,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List failed organization invitations
 * @request GET :/orgs/{org}/failed_invitations
 * @readonly
 */
export async function getOrgsOrgsListFailedInvitations(
  org: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<OrganizationInvitation[]> {
  const result = await api.orgs.orgsListFailedInvitations({
    org: org,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List organization webhooks
 * @request GET :/orgs/{org}/hooks
 * @readonly
 */
export async function getOrgsOrgsListWebhooks(
  org: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<OrgHook[]> {
  const result = await api.orgs.orgsListWebhooks({
    org: org,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create an organization webhook
 * @request POST :/orgs/{org}/hooks
 */
export async function postOrgsOrgsCreateWebhook(
  org: string,
  /** Request body */
  data: {
    /**
     * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
     * @default true
     */
    active?: boolean;
    /** Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/orgs#create-hook-config-params). */
    config: {
      /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
      content_type?: WebhookConfigContentType;
      /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
      insecure_ssl?: WebhookConfigInsecureSsl;
      /** @example ""password"" */
      password?: string;
      /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). */
      secret?: WebhookConfigSecret;
      /** The URL to which the payloads will be delivered. */
      url: WebhookConfigUrl;
      /** @example ""kdaigle"" */
      username?: string;
    };
    /**
     * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. Set to `["*"]` to receive all possible events.
     * @default ["push"]
     */
    events?: string[];
    /** Must be passed as "web". */
    name: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<OrgHook> {
  const result = await api.orgs.orgsCreateWebhook({
    org: org,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete an organization webhook
 * @request DELETE :/orgs/{org}/hooks/{hook_id}
 */
export async function deleteOrgsOrgsDeleteWebhook(
  org: string,
  /** The unique identifier of the hook. */
  hookId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.orgsDeleteWebhook({
    org: org,
    hookId: hookId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get an organization webhook
 * @request GET :/orgs/{org}/hooks/{hook_id}
 * @readonly
 */
export async function getOrgsOrgsGetWebhook(
  org: string,
  hookId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<OrgHook> {
  const result = await api.orgs.orgsGetWebhook({
    org: org,
    hookId: hookId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update an organization webhook
 * @request PATCH :/orgs/{org}/hooks/{hook_id}
 */
export async function patchOrgsOrgsUpdateWebhook(
  org: string,
  hookId: number,
  /** Request body */
  data?: {
    /**
     * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
     * @default true
     */
    active?: boolean;
    /** Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/orgs#update-hook-config-params). */
    config?: {
      /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
      content_type?: WebhookConfigContentType;
      /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
      insecure_ssl?: WebhookConfigInsecureSsl;
      /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). */
      secret?: WebhookConfigSecret;
      /** The URL to which the payloads will be delivered. */
      url: WebhookConfigUrl;
    };
    /**
     * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
     * @default ["push"]
     */
    events?: string[];
    /** @example ""web"" */
    name?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<OrgHook> {
  const result = await api.orgs.orgsUpdateWebhook({
    org: org,
    hookId: hookId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a webhook configuration for an organization
 * @request GET :/orgs/{org}/hooks/{hook_id}/config
 * @readonly
 */
export async function getOrgsOrgsGetWebhookConfigForOrg(
  org: string,
  hookId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<WebhookConfig> {
  const result = await api.orgs.orgsGetWebhookConfigForOrg({
    org: org,
    hookId: hookId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update a webhook configuration for an organization
 * @request PATCH :/orgs/{org}/hooks/{hook_id}/config
 */
export async function patchOrgsOrgsUpdateWebhookConfigForOrg(
  org: string,
  hookId: number,
  /** Request body */
  data?: {
    /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
    content_type?: WebhookConfigContentType;
    /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
    insecure_ssl?: WebhookConfigInsecureSsl;
    /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). */
    secret?: WebhookConfigSecret;
    /** The URL to which the payloads will be delivered. */
    url?: WebhookConfigUrl;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<WebhookConfig> {
  const result = await api.orgs.orgsUpdateWebhookConfigForOrg({
    org: org,
    hookId: hookId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List deliveries for an organization webhook
 * @request GET :/orgs/{org}/hooks/{hook_id}/deliveries
 * @readonly
 */
export async function getOrgsOrgsListWebhookDeliveries(
  org: string,
  hookId: number,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors. */
    cursor?: string;
    redelivery?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<HookDeliveryItem[]> {
  const result = await api.orgs.orgsListWebhookDeliveries({
    org: org,
    hookId: hookId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a webhook delivery for an organization webhook
 * @request GET :/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}
 * @readonly
 */
export async function getOrgsOrgsGetWebhookDelivery(
  org: string,
  hookId: number,
  deliveryId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<HookDelivery> {
  const result = await api.orgs.orgsGetWebhookDelivery({
    org: org,
    hookId: hookId,
    deliveryId: deliveryId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Redeliver a delivery for an organization webhook
 * @request POST :/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts
 */
export async function postOrgsOrgsRedeliverWebhookDelivery(
  org: string,
  hookId: number,
  deliveryId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.orgsRedeliverWebhookDelivery({
    org: org,
    hookId: hookId,
    deliveryId: deliveryId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Ping an organization webhook
 * @request POST :/orgs/{org}/hooks/{hook_id}/pings
 */
export async function postOrgsOrgsPingWebhook(
  org: string,
  hookId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.orgsPingWebhook({
    org: org,
    hookId: hookId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get an organization installation for the authenticated app
 * @request GET :/orgs/{org}/installation
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsAppsGetOrgInstallation(
  org: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Installation> {
  const result = await api.orgs.appsGetOrgInstallation({
    org: org,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List app installations for an organization
 * @request GET :/orgs/{org}/installations
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsOrgsListAppInstallations(
  org: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  installations: Installation[];
  total_count: number;
}> {
  const result = await api.orgs.orgsListAppInstallations({
    org: org,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Remove interaction restrictions for an organization
 * @request DELETE :/orgs/{org}/interaction-limits
 */
export async function deleteOrgsInteractionsRemoveRestrictionsForOrg(
  org: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.interactionsRemoveRestrictionsForOrg({
    org: org,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get interaction restrictions for an organization
 * @request GET :/orgs/{org}/interaction-limits
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsInteractionsGetRestrictionsForOrg(
  org: string,
  headers?: hasuraSdk.JSONValue,
): Promise<InteractionLimitResponse | hasuraSdk.JSONValue> {
  const result = await api.orgs.interactionsGetRestrictionsForOrg({
    org: org,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set interaction restrictions for an organization
 * @request PUT :/orgs/{org}/interaction-limits
 * @allowrelaxedtypes
 */
export async function putOrgsInteractionsSetRestrictionsForOrg(
  org: string,
  /** Request body */
  data: InteractionLimit,
  headers?: hasuraSdk.JSONValue,
): Promise<InteractionLimitResponse> {
  const result = await api.orgs.interactionsSetRestrictionsForOrg({
    org: org,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List pending organization invitations
 * @request GET :/orgs/{org}/invitations
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsOrgsListPendingInvitations(
  org: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
    /** Filter invitations by their member role. */
    role?:
      | "all"
      | "admin"
      | "direct_member"
      | "billing_manager"
      | "hiring_manager";
    /** Filter invitations by their invitation source. */
    invitation_source?: "all" | "member" | "scim";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<OrganizationInvitation[]> {
  const result = await api.orgs.orgsListPendingInvitations({
    org: org,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create an organization invitation
 * @request POST :/orgs/{org}/invitations
 * @allowrelaxedtypes
 */
export async function postOrgsOrgsCreateInvitation(
  org: string,
  /** Request body */
  data?: {
    /** **Required unless you provide `invitee_id`**. Email address of the person you are inviting, which can be an existing GitHub user. */
    email?: string;
    /** **Required unless you provide `email`**. GitHub user ID for the person you are inviting. */
    invitee_id?: number;
    /**
     * The role for the new member.
     *  * `admin` - Organization owners with full administrative rights to the organization and complete access to all repositories and teams.
     *  * `direct_member` - Non-owner organization members with ability to see other members and join teams by invitation.
     *  * `billing_manager` - Non-owner organization members with ability to manage the billing settings of your organization.
     * @default "direct_member"
     */
    role?: "admin" | "direct_member" | "billing_manager";
    /** Specify IDs for the teams you want to invite new members to. */
    team_ids?: number[];
  },
  headers?: hasuraSdk.JSONValue,
): Promise<OrganizationInvitation> {
  const result = await api.orgs.orgsCreateInvitation({
    org: org,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Cancel an organization invitation
 * @request DELETE :/orgs/{org}/invitations/{invitation_id}
 */
export async function deleteOrgsOrgsCancelInvitation(
  org: string,
  /** The unique identifier of the invitation. */
  invitationId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.orgsCancelInvitation({
    org: org,
    invitationId: invitationId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List organization invitation teams
 * @request GET :/orgs/{org}/invitations/{invitation_id}/teams
 * @readonly
 */
export async function getOrgsOrgsListInvitationTeams(
  org: string,
  invitationId: number,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Team[]> {
  const result = await api.orgs.orgsListInvitationTeams({
    org: org,
    invitationId: invitationId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List organization issues assigned to the authenticated user
 * @request GET :/orgs/{org}/issues
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsIssuesListForOrg(
  org: string,
  query: {
    /** Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation. */
    filter?:
      | "assigned"
      | "created"
      | "mentioned"
      | "subscribed"
      | "repos"
      | "all";
    /** Indicates the state of the issues to return. */
    state?: "open" | "closed" | "all";
    /** A list of comma separated label names. Example: `bug,ui,@high` */
    labels?: string;
    /** What to sort results by. */
    sort?: "created" | "updated" | "comments";
    /** The direction to sort the results by. */
    direction?: "asc" | "desc";
    /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
    since?: string;
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Issue[]> {
  const result = await api.orgs.issuesListForOrg({
    org: org,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List organization members
 * @request GET :/orgs/{org}/members
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsOrgsListMembers(
  org: string,
  query: {
    /** Filter members returned in the list. `2fa_disabled` means that only members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned. This options is only available for organization owners. */
    filter?: "2fa_disabled" | "all";
    /** Filter members returned by their role. */
    role?: "all" | "admin" | "member";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<SimpleUser[]> {
  const result = await api.orgs.orgsListMembers({
    org: org,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Remove an organization member
 * @request DELETE :/orgs/{org}/members/{username}
 */
export async function deleteOrgsOrgsRemoveMember(
  org: string,
  username: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.orgsRemoveMember({
    org: org,
    username: username,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Check organization membership for a user
 * @request GET :/orgs/{org}/members/{username}
 * @readonly
 */
export async function getOrgsOrgsCheckMembershipForUser(
  org: string,
  username: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.orgsCheckMembershipForUser({
    org: org,
    username: username,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List codespaces for a user in organization
 * @request GET :/orgs/{org}/members/{username}/codespaces
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsCodespacesGetCodespacesForUserInOrg(
  org: string,
  username: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  codespaces: Codespace[];
  total_count: number;
}> {
  const result = await api.orgs.codespacesGetCodespacesForUserInOrg({
    org: org,
    username: username,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a codespace from the organization
 * @request DELETE :/orgs/{org}/members/{username}/codespaces/{codespace_name}
 */
export async function deleteOrgsCodespacesDeleteFromOrganization(
  org: string,
  username: string,
  /** The name of the codespace. */
  codespaceName: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.codespacesDeleteFromOrganization({
    org: org,
    username: username,
    codespaceName: codespaceName,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Stop a codespace for an organization user
 * @request POST :/orgs/{org}/members/{username}/codespaces/{codespace_name}/stop
 * @allowrelaxedtypes
 */
export async function postOrgsCodespacesStopInOrganization(
  org: string,
  username: string,
  codespaceName: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Codespace> {
  const result = await api.orgs.codespacesStopInOrganization({
    org: org,
    username: username,
    codespaceName: codespaceName,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Remove organization membership for a user
 * @request DELETE :/orgs/{org}/memberships/{username}
 */
export async function deleteOrgsOrgsRemoveMembershipForUser(
  org: string,
  username: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.orgsRemoveMembershipForUser({
    org: org,
    username: username,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get organization membership for a user
 * @request GET :/orgs/{org}/memberships/{username}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsOrgsGetMembershipForUser(
  org: string,
  username: string,
  headers?: hasuraSdk.JSONValue,
): Promise<OrgMembership> {
  const result = await api.orgs.orgsGetMembershipForUser({
    org: org,
    username: username,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set organization membership for a user
 * @request PUT :/orgs/{org}/memberships/{username}
 * @allowrelaxedtypes
 */
export async function putOrgsOrgsSetMembershipForUser(
  org: string,
  username: string,
  /** Request body */
  data?: {
    /**
     * The role to give the user in the organization. Can be one of:
     *  * `admin` - The user will become an owner of the organization.
     *  * `member` - The user will become a non-owner member of the organization.
     * @default "member"
     */
    role?: "admin" | "member";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<OrgMembership> {
  const result = await api.orgs.orgsSetMembershipForUser({
    org: org,
    username: username,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List organization migrations
 * @request GET :/orgs/{org}/migrations
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsMigrationsListForOrg(
  org: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
    /** Exclude attributes from the API response to improve performance */
    exclude?: "repositories"[];
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Migration[]> {
  const result = await api.orgs.migrationsListForOrg({
    org: org,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Start an organization migration
 * @request POST :/orgs/{org}/migrations
 * @allowrelaxedtypes
 */
export async function postOrgsMigrationsStartForOrg(
  org: string,
  /** Request body */
  data: {
    /** Exclude related items from being returned in the response in order to improve performance of the request. The array can include any of: `"repositories"`. */
    exclude?: "repositories"[];
    /**
     * Indicates whether attachments should be excluded from the migration (to reduce migration archive file size).
     * @default false
     * @example true
     */
    exclude_attachments?: boolean;
    /**
     * Indicates whether the repository git data should be excluded from the migration.
     * @default false
     */
    exclude_git_data?: boolean;
    /**
     * Indicates whether metadata should be excluded and only git source should be included for the migration.
     * @default false
     */
    exclude_metadata?: boolean;
    /**
     * Indicates whether projects owned by the organization or users should be excluded. from the migration.
     * @default false
     * @example true
     */
    exclude_owner_projects?: boolean;
    /**
     * Indicates whether releases should be excluded from the migration (to reduce migration archive file size).
     * @default false
     * @example true
     */
    exclude_releases?: boolean;
    /**
     * Indicates whether repositories should be locked (to prevent manipulation) while migrating data.
     * @default false
     * @example true
     */
    lock_repositories?: boolean;
    /**
     * Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).
     * @default false
     * @example true
     */
    org_metadata_only?: boolean;
    /** A list of arrays indicating which repositories should be migrated. */
    repositories: string[];
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Migration> {
  const result = await api.orgs.migrationsStartForOrg({
    org: org,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get an organization migration status
 * @request GET :/orgs/{org}/migrations/{migration_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsMigrationsGetStatusForOrg(
  org: string,
  /** The unique identifier of the migration. */
  migrationId: number,
  query: {
    /** Exclude attributes from the API response to improve performance */
    exclude?: "repositories"[];
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Migration> {
  const result = await api.orgs.migrationsGetStatusForOrg({
    org: org,
    migrationId: migrationId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete an organization migration archive
 * @request DELETE :/orgs/{org}/migrations/{migration_id}/archive
 */
export async function deleteOrgsMigrationsDeleteArchiveForOrg(
  org: string,
  migrationId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.migrationsDeleteArchiveForOrg({
    org: org,
    migrationId: migrationId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Download an organization migration archive
 * @request GET :/orgs/{org}/migrations/{migration_id}/archive
 * @readonly
 */
export async function getOrgsMigrationsDownloadArchiveForOrg(
  org: string,
  migrationId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.migrationsDownloadArchiveForOrg({
    org: org,
    migrationId: migrationId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Unlock an organization repository
 * @request DELETE :/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock
 */
export async function deleteOrgsMigrationsUnlockRepoForOrg(
  org: string,
  migrationId: number,
  /** repo_name parameter */
  repoName: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.migrationsUnlockRepoForOrg({
    org: org,
    migrationId: migrationId,
    repoName: repoName,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List repositories in an organization migration
 * @request GET :/orgs/{org}/migrations/{migration_id}/repositories
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsMigrationsListReposForOrg(
  org: string,
  migrationId: number,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<MinimalRepository[]> {
  const result = await api.orgs.migrationsListReposForOrg({
    org: org,
    migrationId: migrationId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List outside collaborators for an organization
 * @request GET :/orgs/{org}/outside_collaborators
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsOrgsListOutsideCollaborators(
  org: string,
  query: {
    /** Filter the list of outside collaborators. `2fa_disabled` means that only outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned. */
    filter?: "2fa_disabled" | "all";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<SimpleUser[]> {
  const result = await api.orgs.orgsListOutsideCollaborators({
    org: org,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Remove outside collaborator from an organization
 * @request DELETE :/orgs/{org}/outside_collaborators/{username}
 */
export async function deleteOrgsOrgsRemoveOutsideCollaborator(
  org: string,
  username: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.orgsRemoveOutsideCollaborator({
    org: org,
    username: username,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Convert an organization member to outside collaborator
 * @request PUT :/orgs/{org}/outside_collaborators/{username}
 */
export async function putOrgsOrgsConvertMemberToOutsideCollaborator(
  org: string,
  username: string,
  /** Request body */
  data?: {
    /**
     * When set to `true`, the request will be performed asynchronously. Returns a 202 status code when the job is successfully queued.
     * @default false
     */
    async?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<EmptyObject> {
  const result = await api.orgs.orgsConvertMemberToOutsideCollaborator({
    org: org,
    username: username,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List packages for an organization
 * @request GET :/orgs/{org}/packages
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsPackagesListPackagesForOrganization(
  org: string,
  query: {
    /** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */
    package_type:
      | "npm"
      | "maven"
      | "rubygems"
      | "docker"
      | "nuget"
      | "container";
    /** The selected visibility of the packages.  This parameter is optional and only filters an existing result set.

The `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.
For the list of GitHub Packages registries that support granular permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)." */
    visibility?: "public" | "private" | "internal";
    /** Page number of the results to fetch. */
    page?: number;
    /** The number of results per page (max 100). */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Package[]> {
  const result = await api.orgs.packagesListPackagesForOrganization({
    org: org,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a package for an organization
 * @request DELETE :/orgs/{org}/packages/{package_type}/{package_name}
 * @allowrelaxedtypes
 */
export async function deleteOrgsPackagesDeletePackageForOrg(
  /** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
  /** The name of the package. */
  packageName: string,
  org: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.packagesDeletePackageForOrg({
    packageType: packageType,
    packageName: packageName,
    org: org,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a package for an organization
 * @request GET :/orgs/{org}/packages/{package_type}/{package_name}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsPackagesGetPackageForOrganization(
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
  packageName: string,
  org: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Package> {
  const result = await api.orgs.packagesGetPackageForOrganization({
    packageType: packageType,
    packageName: packageName,
    org: org,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Restore a package for an organization
 * @request POST :/orgs/{org}/packages/{package_type}/{package_name}/restore
 * @allowrelaxedtypes
 */
export async function postOrgsPackagesRestorePackageForOrg(
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
  packageName: string,
  org: string,
  query: {
    /** package token */
    token?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.packagesRestorePackageForOrg({
    packageType: packageType,
    packageName: packageName,
    org: org,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List package versions for a package owned by an organization
 * @request GET :/orgs/{org}/packages/{package_type}/{package_name}/versions
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsPackagesGetAllPackageVersionsForPackageOwnedByOrg(
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
  packageName: string,
  org: string,
  query: {
    /** Page number of the results to fetch. */
    page?: number;
    /** The number of results per page (max 100). */
    per_page?: number;
    /** The state of the package, either active or deleted. */
    state?: "active" | "deleted";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<PackageVersion[]> {
  const result =
    await api.orgs.packagesGetAllPackageVersionsForPackageOwnedByOrg({
      packageType: packageType,
      packageName: packageName,
      org: org,
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete package version for an organization
 * @request DELETE :/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}
 * @allowrelaxedtypes
 */
export async function deleteOrgsPackagesDeletePackageVersionForOrg(
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
  packageName: string,
  org: string,
  /** Unique identifier of the package version. */
  packageVersionId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.packagesDeletePackageVersionForOrg({
    packageType: packageType,
    packageName: packageName,
    org: org,
    packageVersionId: packageVersionId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a package version for an organization
 * @request GET :/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsPackagesGetPackageVersionForOrganization(
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
  packageName: string,
  org: string,
  packageVersionId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<PackageVersion> {
  const result = await api.orgs.packagesGetPackageVersionForOrganization({
    packageType: packageType,
    packageName: packageName,
    org: org,
    packageVersionId: packageVersionId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Restore package version for an organization
 * @request POST :/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore
 * @allowrelaxedtypes
 */
export async function postOrgsPackagesRestorePackageVersionForOrg(
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
  packageName: string,
  org: string,
  packageVersionId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.packagesRestorePackageVersionForOrg({
    packageType: packageType,
    packageName: packageName,
    org: org,
    packageVersionId: packageVersionId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List organization projects
 * @request GET :/orgs/{org}/projects
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsProjectsListForOrg(
  org: string,
  query: {
    /** Indicates the state of the projects to return. */
    state?: "open" | "closed" | "all";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Project[]> {
  const result = await api.orgs.projectsListForOrg({
    org: org,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create an organization project
 * @request POST :/orgs/{org}/projects
 * @allowrelaxedtypes
 */
export async function postOrgsProjectsCreateForOrg(
  org: string,
  /** Request body */
  data: {
    /** The description of the project. */
    body?: string;
    /** The name of the project. */
    name: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Project> {
  const result = await api.orgs.projectsCreateForOrg({
    org: org,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List public organization members
 * @request GET :/orgs/{org}/public_members
 * @readonly
 */
export async function getOrgsOrgsListPublicMembers(
  org: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<SimpleUser[]> {
  const result = await api.orgs.orgsListPublicMembers({
    org: org,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Remove public organization membership for the authenticated user
 * @request DELETE :/orgs/{org}/public_members/{username}
 */
export async function deleteOrgsOrgsRemovePublicMembershipForAuthenticatedUser(
  org: string,
  username: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.orgsRemovePublicMembershipForAuthenticatedUser({
    org: org,
    username: username,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Check public organization membership for a user
 * @request GET :/orgs/{org}/public_members/{username}
 * @readonly
 */
export async function getOrgsOrgsCheckPublicMembershipForUser(
  org: string,
  username: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.orgsCheckPublicMembershipForUser({
    org: org,
    username: username,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set public organization membership for the authenticated user
 * @request PUT :/orgs/{org}/public_members/{username}
 */
export async function putOrgsOrgsSetPublicMembershipForAuthenticatedUser(
  org: string,
  username: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.orgsSetPublicMembershipForAuthenticatedUser({
    org: org,
    username: username,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List organization repositories
 * @request GET :/orgs/{org}/repos
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsReposListForOrg(
  org: string,
  query: {
    /** Specifies the types of repositories you want returned. */
    type?: "all" | "public" | "private" | "forks" | "sources" | "member";
    /** The property to sort the results by. */
    sort?: "created" | "updated" | "pushed" | "full_name";
    /** The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`. */
    direction?: "asc" | "desc";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<MinimalRepository[]> {
  const result = await api.orgs.reposListForOrg({
    org: org,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create an organization repository
 * @request POST :/orgs/{org}/repos
 * @allowrelaxedtypes
 */
export async function postOrgsReposCreateInOrg(
  org: string,
  /** Request body */
  data: {
    /**
     * Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
     * @default false
     */
    allow_auto_merge?: boolean;
    /**
     * Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
     * @default true
     */
    allow_merge_commit?: boolean;
    /**
     * Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
     * @default true
     */
    allow_rebase_merge?: boolean;
    /**
     * Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
     * @default true
     */
    allow_squash_merge?: boolean;
    /**
     * Pass `true` to create an initial commit with empty README.
     * @default false
     */
    auto_init?: boolean;
    /**
     * Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion. **The authenticated user must be an organization owner to set this property to `true`.**
     * @default false
     */
    delete_branch_on_merge?: boolean;
    /** A short description of the repository. */
    description?: string;
    /** Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, "Haskell". */
    gitignore_template?: string;
    /**
     * Whether downloads are enabled.
     * @default true
     * @example true
     */
    has_downloads?: boolean;
    /**
     * Either `true` to enable issues for this repository or `false` to disable them.
     * @default true
     */
    has_issues?: boolean;
    /**
     * Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
     * @default true
     */
    has_projects?: boolean;
    /**
     * Either `true` to enable the wiki for this repository or `false` to disable it.
     * @default true
     */
    has_wiki?: boolean;
    /** A URL with more information about the repository. */
    homepage?: string;
    /**
     * Either `true` to make this repo available as a template repository or `false` to prevent it.
     * @default false
     */
    is_template?: boolean;
    /** Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, "mit" or "mpl-2.0". */
    license_template?: string;
    /**
     * The default value for a merge commit message.
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `PR_BODY` - default to the pull request's body.
     * - `BLANK` - default to a blank commit message.
     */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
    /**
     * The default value for a merge commit title.
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
     */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
    /** The name of the repository. */
    name: string;
    /**
     * Whether the repository is private.
     * @default false
     */
    private?: boolean;
    /**
     * The default value for a squash merge commit message:
     *
     * - `PR_BODY` - default to the pull request's body.
     * - `COMMIT_MESSAGES` - default to the branch's commit messages.
     * - `BLANK` - default to a blank commit message.
     */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
    /**
     * The default value for a squash merge commit title:
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
     */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
    /** The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization. */
    team_id?: number;
    /**
     * Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
     * @deprecated
     * @default false
     */
    use_squash_pr_title_as_default?: boolean;
    /** The visibility of the repository. */
    visibility?: "public" | "private";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Repository> {
  const result = await api.orgs.reposCreateInOrg({
    org: org,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List secret scanning alerts for an organization
 * @request GET :/orgs/{org}/secret-scanning/alerts
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsSecretScanningListAlertsForOrg(
  org: string,
  query: {
    /** Set to `open` or `resolved` to only list secret scanning alerts in a specific state. */
    state?: "open" | "resolved";
    /** A comma-separated list of secret types to return. By default all secret types are returned.
See "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)"
for a complete list of secret types. */
    secret_type?: string;
    /** A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`. */
    resolution?: string;
    /** The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved. */
    sort?: "created" | "updated";
    /** The direction to sort the results by. */
    direction?: "asc" | "desc";
    /** Page number of the results to fetch. */
    page?: number;
    /** The number of results per page (max 100). */
    per_page?: number;
    /** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty "before" query string. */
    before?: string;
    /** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty "after" query string. */
    after?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<OrganizationSecretScanningAlert[]> {
  const result = await api.orgs.secretScanningListAlertsForOrg({
    org: org,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List security manager teams
 * @request GET :/orgs/{org}/security-managers
 * @readonly
 */
export async function getOrgsOrgsListSecurityManagerTeams(
  org: string,
  headers?: hasuraSdk.JSONValue,
): Promise<TeamSimple[]> {
  const result = await api.orgs.orgsListSecurityManagerTeams({
    org: org,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Remove a security manager team
 * @request DELETE :/orgs/{org}/security-managers/teams/{team_slug}
 */
export async function deleteOrgsOrgsRemoveSecurityManagerTeam(
  org: string,
  /** The slug of the team name. */
  teamSlug: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.orgsRemoveSecurityManagerTeam({
    org: org,
    teamSlug: teamSlug,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Add a security manager team
 * @request PUT :/orgs/{org}/security-managers/teams/{team_slug}
 */
export async function putOrgsOrgsAddSecurityManagerTeam(
  org: string,
  teamSlug: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.orgsAddSecurityManagerTeam({
    org: org,
    teamSlug: teamSlug,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get GitHub Actions billing for an organization
 * @request GET :/orgs/{org}/settings/billing/actions
 * @readonly
 */
export async function getOrgsBillingGetGithubActionsBillingOrg(
  org: string,
  headers?: hasuraSdk.JSONValue,
): Promise<ActionsBillingUsage> {
  const result = await api.orgs.billingGetGithubActionsBillingOrg({
    org: org,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get GitHub Packages billing for an organization
 * @request GET :/orgs/{org}/settings/billing/packages
 * @readonly
 */
export async function getOrgsBillingGetGithubPackagesBillingOrg(
  org: string,
  headers?: hasuraSdk.JSONValue,
): Promise<PackagesBillingUsage> {
  const result = await api.orgs.billingGetGithubPackagesBillingOrg({
    org: org,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get shared storage billing for an organization
 * @request GET :/orgs/{org}/settings/billing/shared-storage
 * @readonly
 */
export async function getOrgsBillingGetSharedStorageBillingOrg(
  org: string,
  headers?: hasuraSdk.JSONValue,
): Promise<CombinedBillingUsage> {
  const result = await api.orgs.billingGetSharedStorageBillingOrg({
    org: org,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List teams
 * @request GET :/orgs/{org}/teams
 * @readonly
 */
export async function getOrgsTeamsList(
  org: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Team[]> {
  const result = await api.orgs.teamsList({
    org: org,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a team
 * @request POST :/orgs/{org}/teams
 * @allowrelaxedtypes
 */
export async function postOrgsTeamsCreate(
  org: string,
  /** Request body */
  data: {
    /** The description of the team. */
    description?: string;
    /** List GitHub IDs for organization members who will become team maintainers. */
    maintainers?: string[];
    /** The name of the team. */
    name: string;
    /** The ID of a team to set as the parent team. */
    parent_team_id?: number;
    /**
     * **Deprecated**. The permission that new repositories will be added to the team with when none is specified.
     * @default "pull"
     */
    permission?: "pull" | "push";
    /**
     * The level of privacy this team should have. The options are:
     * **For a non-nested team:**
     *  * `secret` - only visible to organization owners and members of this team.
     *  * `closed` - visible to all members of this organization.
     * Default: `secret`
     * **For a parent or child team:**
     *  * `closed` - visible to all members of this organization.
     * Default for child team: `closed`
     */
    privacy?: "secret" | "closed";
    /** The full name (e.g., "organization-name/repository-name") of repositories to add the team to. */
    repo_names?: string[];
  },
  headers?: hasuraSdk.JSONValue,
): Promise<TeamFull> {
  const result = await api.orgs.teamsCreate({
    org: org,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a team
 * @request DELETE :/orgs/{org}/teams/{team_slug}
 */
export async function deleteOrgsTeamsDeleteInOrg(
  org: string,
  teamSlug: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.teamsDeleteInOrg({
    org: org,
    teamSlug: teamSlug,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a team by name
 * @request GET :/orgs/{org}/teams/{team_slug}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsTeamsGetByName(
  org: string,
  teamSlug: string,
  headers?: hasuraSdk.JSONValue,
): Promise<TeamFull> {
  const result = await api.orgs.teamsGetByName({
    org: org,
    teamSlug: teamSlug,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update a team
 * @request PATCH :/orgs/{org}/teams/{team_slug}
 * @allowrelaxedtypes
 */
export async function patchOrgsTeamsUpdateInOrg(
  org: string,
  teamSlug: string,
  /** Request body */
  data?: {
    /** The description of the team. */
    description?: string;
    /** The name of the team. */
    name?: string;
    /** The ID of a team to set as the parent team. */
    parent_team_id?: number | null;
    /**
     * **Deprecated**. The permission that new repositories will be added to the team with when none is specified.
     * @default "pull"
     */
    permission?: "pull" | "push" | "admin";
    /**
     * The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:
     * **For a non-nested team:**
     *  * `secret` - only visible to organization owners and members of this team.
     *  * `closed` - visible to all members of this organization.
     * **For a parent or child team:**
     *  * `closed` - visible to all members of this organization.
     */
    privacy?: "secret" | "closed";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<TeamFull> {
  const result = await api.orgs.teamsUpdateInOrg({
    org: org,
    teamSlug: teamSlug,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List discussions
 * @request GET :/orgs/{org}/teams/{team_slug}/discussions
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsTeamsListDiscussionsInOrg(
  org: string,
  teamSlug: string,
  query: {
    /** The direction to sort the results by. */
    direction?: "asc" | "desc";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
    /** Pinned discussions only filter */
    pinned?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<TeamDiscussion[]> {
  const result = await api.orgs.teamsListDiscussionsInOrg({
    org: org,
    teamSlug: teamSlug,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a discussion
 * @request POST :/orgs/{org}/teams/{team_slug}/discussions
 */
export async function postOrgsTeamsCreateDiscussionInOrg(
  org: string,
  teamSlug: string,
  /** Request body */
  data: {
    /** The discussion post's body text. */
    body: string;
    /**
     * Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
     * @default false
     */
    private?: boolean;
    /** The discussion post's title. */
    title: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<TeamDiscussion> {
  const result = await api.orgs.teamsCreateDiscussionInOrg({
    org: org,
    teamSlug: teamSlug,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a discussion
 * @request DELETE :/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}
 */
export async function deleteOrgsTeamsDeleteDiscussionInOrg(
  org: string,
  teamSlug: string,
  /** The number that identifies the discussion. */
  discussionNumber: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.teamsDeleteDiscussionInOrg({
    org: org,
    teamSlug: teamSlug,
    discussionNumber: discussionNumber,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a discussion
 * @request GET :/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}
 * @readonly
 */
export async function getOrgsTeamsGetDiscussionInOrg(
  org: string,
  teamSlug: string,
  discussionNumber: number,
  headers?: hasuraSdk.JSONValue,
): Promise<TeamDiscussion> {
  const result = await api.orgs.teamsGetDiscussionInOrg({
    org: org,
    teamSlug: teamSlug,
    discussionNumber: discussionNumber,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update a discussion
 * @request PATCH :/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}
 */
export async function patchOrgsTeamsUpdateDiscussionInOrg(
  org: string,
  teamSlug: string,
  discussionNumber: number,
  /** Request body */
  data?: {
    /** The discussion post's body text. */
    body?: string;
    /** The discussion post's title. */
    title?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<TeamDiscussion> {
  const result = await api.orgs.teamsUpdateDiscussionInOrg({
    org: org,
    teamSlug: teamSlug,
    discussionNumber: discussionNumber,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List discussion comments
 * @request GET :/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsTeamsListDiscussionCommentsInOrg(
  org: string,
  teamSlug: string,
  discussionNumber: number,
  query: {
    /** The direction to sort the results by. */
    direction?: "asc" | "desc";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<TeamDiscussionComment[]> {
  const result = await api.orgs.teamsListDiscussionCommentsInOrg({
    org: org,
    teamSlug: teamSlug,
    discussionNumber: discussionNumber,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a discussion comment
 * @request POST :/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments
 */
export async function postOrgsTeamsCreateDiscussionCommentInOrg(
  org: string,
  teamSlug: string,
  discussionNumber: number,
  /** Request body */
  data: {
    /** The discussion comment's body text. */
    body: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<TeamDiscussionComment> {
  const result = await api.orgs.teamsCreateDiscussionCommentInOrg({
    org: org,
    teamSlug: teamSlug,
    discussionNumber: discussionNumber,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a discussion comment
 * @request DELETE :/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}
 */
export async function deleteOrgsTeamsDeleteDiscussionCommentInOrg(
  org: string,
  teamSlug: string,
  discussionNumber: number,
  /** The number that identifies the comment. */
  commentNumber: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.teamsDeleteDiscussionCommentInOrg({
    org: org,
    teamSlug: teamSlug,
    discussionNumber: discussionNumber,
    commentNumber: commentNumber,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a discussion comment
 * @request GET :/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}
 * @readonly
 */
export async function getOrgsTeamsGetDiscussionCommentInOrg(
  org: string,
  teamSlug: string,
  discussionNumber: number,
  commentNumber: number,
  headers?: hasuraSdk.JSONValue,
): Promise<TeamDiscussionComment> {
  const result = await api.orgs.teamsGetDiscussionCommentInOrg({
    org: org,
    teamSlug: teamSlug,
    discussionNumber: discussionNumber,
    commentNumber: commentNumber,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update a discussion comment
 * @request PATCH :/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}
 */
export async function patchOrgsTeamsUpdateDiscussionCommentInOrg(
  org: string,
  teamSlug: string,
  discussionNumber: number,
  commentNumber: number,
  /** Request body */
  data: {
    /** The discussion comment's body text. */
    body: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<TeamDiscussionComment> {
  const result = await api.orgs.teamsUpdateDiscussionCommentInOrg({
    org: org,
    teamSlug: teamSlug,
    discussionNumber: discussionNumber,
    commentNumber: commentNumber,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List reactions for a team discussion comment
 * @request GET :/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsReactionsListForTeamDiscussionCommentInOrg(
  org: string,
  teamSlug: string,
  discussionNumber: number,
  commentNumber: number,
  query: {
    /** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment. */
    content?:
      | "+1"
      | "-1"
      | "laugh"
      | "confused"
      | "heart"
      | "hooray"
      | "rocket"
      | "eyes";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Reaction[]> {
  const result = await api.orgs.reactionsListForTeamDiscussionCommentInOrg({
    org: org,
    teamSlug: teamSlug,
    discussionNumber: discussionNumber,
    commentNumber: commentNumber,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create reaction for a team discussion comment
 * @request POST :/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions
 * @allowrelaxedtypes
 */
export async function postOrgsReactionsCreateForTeamDiscussionCommentInOrg(
  org: string,
  teamSlug: string,
  discussionNumber: number,
  commentNumber: number,
  /** Request body */
  data: {
    /** The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion comment. */
    content:
      | "+1"
      | "-1"
      | "laugh"
      | "confused"
      | "heart"
      | "hooray"
      | "rocket"
      | "eyes";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Reaction> {
  const result = await api.orgs.reactionsCreateForTeamDiscussionCommentInOrg({
    org: org,
    teamSlug: teamSlug,
    discussionNumber: discussionNumber,
    commentNumber: commentNumber,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete team discussion comment reaction
 * @request DELETE :/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}
 */
export async function deleteOrgsReactionsDeleteForTeamDiscussionComment(
  org: string,
  teamSlug: string,
  discussionNumber: number,
  commentNumber: number,
  /** The unique identifier of the reaction. */
  reactionId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.reactionsDeleteForTeamDiscussionComment({
    org: org,
    teamSlug: teamSlug,
    discussionNumber: discussionNumber,
    commentNumber: commentNumber,
    reactionId: reactionId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List reactions for a team discussion
 * @request GET :/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsReactionsListForTeamDiscussionInOrg(
  org: string,
  teamSlug: string,
  discussionNumber: number,
  query: {
    /** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion. */
    content?:
      | "+1"
      | "-1"
      | "laugh"
      | "confused"
      | "heart"
      | "hooray"
      | "rocket"
      | "eyes";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Reaction[]> {
  const result = await api.orgs.reactionsListForTeamDiscussionInOrg({
    org: org,
    teamSlug: teamSlug,
    discussionNumber: discussionNumber,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create reaction for a team discussion
 * @request POST :/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions
 * @allowrelaxedtypes
 */
export async function postOrgsReactionsCreateForTeamDiscussionInOrg(
  org: string,
  teamSlug: string,
  discussionNumber: number,
  /** Request body */
  data: {
    /** The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion. */
    content:
      | "+1"
      | "-1"
      | "laugh"
      | "confused"
      | "heart"
      | "hooray"
      | "rocket"
      | "eyes";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Reaction> {
  const result = await api.orgs.reactionsCreateForTeamDiscussionInOrg({
    org: org,
    teamSlug: teamSlug,
    discussionNumber: discussionNumber,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete team discussion reaction
 * @request DELETE :/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}
 */
export async function deleteOrgsReactionsDeleteForTeamDiscussion(
  org: string,
  teamSlug: string,
  discussionNumber: number,
  reactionId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.reactionsDeleteForTeamDiscussion({
    org: org,
    teamSlug: teamSlug,
    discussionNumber: discussionNumber,
    reactionId: reactionId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List pending team invitations
 * @request GET :/orgs/{org}/teams/{team_slug}/invitations
 * @readonly
 */
export async function getOrgsTeamsListPendingInvitationsInOrg(
  org: string,
  teamSlug: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<OrganizationInvitation[]> {
  const result = await api.orgs.teamsListPendingInvitationsInOrg({
    org: org,
    teamSlug: teamSlug,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List team members
 * @request GET :/orgs/{org}/teams/{team_slug}/members
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsTeamsListMembersInOrg(
  org: string,
  teamSlug: string,
  query: {
    /** Filters members returned by their role in the team. */
    role?: "member" | "maintainer" | "all";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<SimpleUser[]> {
  const result = await api.orgs.teamsListMembersInOrg({
    org: org,
    teamSlug: teamSlug,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Remove team membership for a user
 * @request DELETE :/orgs/{org}/teams/{team_slug}/memberships/{username}
 */
export async function deleteOrgsTeamsRemoveMembershipForUserInOrg(
  org: string,
  teamSlug: string,
  username: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.teamsRemoveMembershipForUserInOrg({
    org: org,
    teamSlug: teamSlug,
    username: username,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get team membership for a user
 * @request GET :/orgs/{org}/teams/{team_slug}/memberships/{username}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsTeamsGetMembershipForUserInOrg(
  org: string,
  teamSlug: string,
  username: string,
  headers?: hasuraSdk.JSONValue,
): Promise<TeamMembership> {
  const result = await api.orgs.teamsGetMembershipForUserInOrg({
    org: org,
    teamSlug: teamSlug,
    username: username,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Add or update team membership for a user
 * @request PUT :/orgs/{org}/teams/{team_slug}/memberships/{username}
 * @allowrelaxedtypes
 */
export async function putOrgsTeamsAddOrUpdateMembershipForUserInOrg(
  org: string,
  teamSlug: string,
  username: string,
  /** Request body */
  data?: {
    /**
     * The role that this user should have in the team.
     * @default "member"
     */
    role?: "member" | "maintainer";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<TeamMembership> {
  const result = await api.orgs.teamsAddOrUpdateMembershipForUserInOrg({
    org: org,
    teamSlug: teamSlug,
    username: username,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List team projects
 * @request GET :/orgs/{org}/teams/{team_slug}/projects
 * @readonly
 */
export async function getOrgsTeamsListProjectsInOrg(
  org: string,
  teamSlug: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<TeamProject[]> {
  const result = await api.orgs.teamsListProjectsInOrg({
    org: org,
    teamSlug: teamSlug,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Remove a project from a team
 * @request DELETE :/orgs/{org}/teams/{team_slug}/projects/{project_id}
 */
export async function deleteOrgsTeamsRemoveProjectInOrg(
  org: string,
  teamSlug: string,
  /** The unique identifier of the project. */
  projectId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.teamsRemoveProjectInOrg({
    org: org,
    teamSlug: teamSlug,
    projectId: projectId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Check team permissions for a project
 * @request GET :/orgs/{org}/teams/{team_slug}/projects/{project_id}
 * @readonly
 */
export async function getOrgsTeamsCheckPermissionsForProjectInOrg(
  org: string,
  teamSlug: string,
  projectId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<TeamProject> {
  const result = await api.orgs.teamsCheckPermissionsForProjectInOrg({
    org: org,
    teamSlug: teamSlug,
    projectId: projectId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Add or update team project permissions
 * @request PUT :/orgs/{org}/teams/{team_slug}/projects/{project_id}
 * @allowrelaxedtypes
 */
export async function putOrgsTeamsAddOrUpdateProjectPermissionsInOrg(
  org: string,
  teamSlug: string,
  projectId: number,
  /** Request body */
  data?: {
    /** The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)." */
    permission?: "read" | "write" | "admin";
  } | null,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.teamsAddOrUpdateProjectPermissionsInOrg({
    org: org,
    teamSlug: teamSlug,
    projectId: projectId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List team repositories
 * @request GET :/orgs/{org}/teams/{team_slug}/repos
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsTeamsListReposInOrg(
  org: string,
  teamSlug: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<MinimalRepository[]> {
  const result = await api.orgs.teamsListReposInOrg({
    org: org,
    teamSlug: teamSlug,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Remove a repository from a team
 * @request DELETE :/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}
 */
export async function deleteOrgsTeamsRemoveRepoInOrg(
  org: string,
  teamSlug: string,
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.teamsRemoveRepoInOrg({
    org: org,
    teamSlug: teamSlug,
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Check team permissions for a repository
 * @request GET :/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getOrgsTeamsCheckPermissionsForRepoInOrg(
  org: string,
  teamSlug: string,
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<TeamRepository> {
  const result = await api.orgs.teamsCheckPermissionsForRepoInOrg({
    org: org,
    teamSlug: teamSlug,
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Add or update team repository permissions
 * @request PUT :/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}
 */
export async function putOrgsTeamsAddOrUpdateRepoPermissionsInOrg(
  org: string,
  teamSlug: string,
  owner: string,
  repo: string,
  /** Request body */
  data?: {
    /**
     * The permission to grant the team on this repository. We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
     * @default "push"
     */
    permission?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.teamsAddOrUpdateRepoPermissionsInOrg({
    org: org,
    teamSlug: teamSlug,
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List child teams
 * @request GET :/orgs/{org}/teams/{team_slug}/teams
 * @readonly
 */
export async function getOrgsTeamsListChildInOrg(
  org: string,
  teamSlug: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Team[]> {
  const result = await api.orgs.teamsListChildInOrg({
    org: org,
    teamSlug: teamSlug,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Enable or disable a security feature for an organization
 * @request POST :/orgs/{org}/{security_product}/{enablement}
 * @allowrelaxedtypes
 */
export async function postOrgsOrgsEnableOrDisableSecurityProductOnAllOrgRepos(
  org: string,
  /** The security feature to enable or disable. */
  securityProduct:
    | "dependency_graph"
    | "dependabot_alerts"
    | "dependabot_security_updates"
    | "advanced_security"
    | "secret_scanning"
    | "secret_scanning_push_protection",
  /** The action to take.

`enable_all` means to enable the specified security feature for all repositories in the organization.
`disable_all` means to disable the specified security feature for all repositories in the organization. */
  enablement: "enable_all" | "disable_all",
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.orgs.orgsEnableOrDisableSecurityProductOnAllOrgRepos(
    {
      org: org,
      securityProduct: securityProduct,
      enablement: enablement,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    },
  );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a project card
 * @request DELETE :/projects/columns/cards/{card_id}
 */
export async function deleteProjectsProjectsDeleteCard(
  /** The unique identifier of the card. */
  cardId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.projects.projectsDeleteCard({
    cardId: cardId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a project card
 * @request GET :/projects/columns/cards/{card_id}
 * @readonly
 */
export async function getProjectsProjectsGetCard(
  cardId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<ProjectCard> {
  const result = await api.projects.projectsGetCard({
    cardId: cardId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update an existing project card
 * @request PATCH :/projects/columns/cards/{card_id}
 * @allowrelaxedtypes
 */
export async function patchProjectsProjectsUpdateCard(
  cardId: number,
  /** Request body */
  data?: {
    /**
     * Whether or not the card is archived
     * @example false
     */
    archived?: boolean;
    /**
     * The project card's note
     * @example "Update all gems"
     */
    note?: string | null;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<ProjectCard> {
  const result = await api.projects.projectsUpdateCard({
    cardId: cardId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Move a project card
 * @request POST :/projects/columns/cards/{card_id}/moves
 */
export async function postProjectsProjectsMoveCard(
  cardId: number,
  /** Request body */
  data: {
    /**
     * The unique identifier of the column the card should be moved to
     * @example 42
     */
    column_id?: number;
    /**
     * The position of the card in a column. Can be one of: `top`, `bottom`, or `after:<card_id>` to place after the specified card.
     * @pattern ^(?:top|bottom|after:\d+)$
     * @example "bottom"
     */
    position: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<EmptyObject> {
  const result = await api.projects.projectsMoveCard({
    cardId: cardId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a project column
 * @request DELETE :/projects/columns/{column_id}
 */
export async function deleteProjectsProjectsDeleteColumn(
  /** The unique identifier of the column. */
  columnId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.projects.projectsDeleteColumn({
    columnId: columnId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a project column
 * @request GET :/projects/columns/{column_id}
 * @readonly
 */
export async function getProjectsProjectsGetColumn(
  columnId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<ProjectColumn> {
  const result = await api.projects.projectsGetColumn({
    columnId: columnId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update an existing project column
 * @request PATCH :/projects/columns/{column_id}
 */
export async function patchProjectsProjectsUpdateColumn(
  columnId: number,
  /** Request body */
  data: {
    /**
     * Name of the project column
     * @example "Remaining tasks"
     */
    name: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<ProjectColumn> {
  const result = await api.projects.projectsUpdateColumn({
    columnId: columnId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List project cards
 * @request GET :/projects/columns/{column_id}/cards
 * @allowrelaxedtypes
 * @readonly
 */
export async function getProjectsProjectsListCards(
  columnId: number,
  query: {
    /** Filters the project cards that are returned by the card's state. */
    archived_state?: "all" | "archived" | "not_archived";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<ProjectCard[]> {
  const result = await api.projects.projectsListCards({
    columnId: columnId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a project card
 * @request POST :/projects/columns/{column_id}/cards
 * @allowrelaxedtypes
 */
export async function postProjectsProjectsCreateCard(
  columnId: number,
  /** Request body */
  data:
    | {
        /**
         * The project card's note
         * @example "Update all gems"
         */
        note: string | null;
      }
    | {
        /**
         * The unique identifier of the content associated with the card
         * @example 42
         */
        content_id: number;
        /**
         * The piece of content associated with the card
         * @example "PullRequest"
         */
        content_type: string;
      },
  headers?: hasuraSdk.JSONValue,
): Promise<ProjectCard> {
  const result = await api.projects.projectsCreateCard({
    columnId: columnId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Move a project column
 * @request POST :/projects/columns/{column_id}/moves
 */
export async function postProjectsProjectsMoveColumn(
  columnId: number,
  /** Request body */
  data: {
    /**
     * The position of the column in a project. Can be one of: `first`, `last`, or `after:<column_id>` to place after the specified column.
     * @pattern ^(?:first|last|after:\d+)$
     * @example "last"
     */
    position: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<EmptyObject> {
  const result = await api.projects.projectsMoveColumn({
    columnId: columnId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a project
 * @request DELETE :/projects/{project_id}
 */
export async function deleteProjectsProjectsDelete(
  projectId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.projects.projectsDelete({
    projectId: projectId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a project
 * @request GET :/projects/{project_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getProjectsProjectsGet(
  projectId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Project> {
  const result = await api.projects.projectsGet({
    projectId: projectId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update a project
 * @request PATCH :/projects/{project_id}
 * @allowrelaxedtypes
 */
export async function patchProjectsProjectsUpdate(
  projectId: number,
  /** Request body */
  data?: {
    /**
     * Body of the project
     * @example "This project represents the sprint of the first week in January"
     */
    body?: string | null;
    /**
     * Name of the project
     * @example "Week One Sprint"
     */
    name?: string;
    /** The baseline permission that all organization members have on this project */
    organization_permission?: "read" | "write" | "admin" | "none";
    /** Whether or not this project can be seen by everyone. */
    private?: boolean;
    /**
     * State of the project; either 'open' or 'closed'
     * @example "open"
     */
    state?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Project> {
  const result = await api.projects.projectsUpdate({
    projectId: projectId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List project collaborators
 * @request GET :/projects/{project_id}/collaborators
 * @allowrelaxedtypes
 * @readonly
 */
export async function getProjectsProjectsListCollaborators(
  projectId: number,
  query: {
    /** Filters the collaborators by their affiliation. `outside` means outside collaborators of a project that are not a member of the project's organization. `direct` means collaborators with permissions to a project, regardless of organization membership status. `all` means all collaborators the authenticated user can see. */
    affiliation?: "outside" | "direct" | "all";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<SimpleUser[]> {
  const result = await api.projects.projectsListCollaborators({
    projectId: projectId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Remove user as a collaborator
 * @request DELETE :/projects/{project_id}/collaborators/{username}
 */
export async function deleteProjectsProjectsRemoveCollaborator(
  projectId: number,
  username: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.projects.projectsRemoveCollaborator({
    projectId: projectId,
    username: username,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Add project collaborator
 * @request PUT :/projects/{project_id}/collaborators/{username}
 * @allowrelaxedtypes
 */
export async function putProjectsProjectsAddCollaborator(
  projectId: number,
  username: string,
  /** Request body */
  data?: {
    /**
     * The permission to grant the collaborator.
     * @default "write"
     * @example "write"
     */
    permission?: "read" | "write" | "admin";
  } | null,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.projects.projectsAddCollaborator({
    projectId: projectId,
    username: username,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get project permission for a user
 * @request GET :/projects/{project_id}/collaborators/{username}/permission
 * @readonly
 */
export async function getProjectsProjectsGetPermissionForUser(
  projectId: number,
  username: string,
  headers?: hasuraSdk.JSONValue,
): Promise<ProjectCollaboratorPermission> {
  const result = await api.projects.projectsGetPermissionForUser({
    projectId: projectId,
    username: username,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List project columns
 * @request GET :/projects/{project_id}/columns
 * @readonly
 */
export async function getProjectsProjectsListColumns(
  projectId: number,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<ProjectColumn[]> {
  const result = await api.projects.projectsListColumns({
    projectId: projectId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a project column
 * @request POST :/projects/{project_id}/columns
 */
export async function postProjectsProjectsCreateColumn(
  projectId: number,
  /** Request body */
  data: {
    /**
     * Name of the project column
     * @example "Remaining tasks"
     */
    name: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<ProjectColumn> {
  const result = await api.projects.projectsCreateColumn({
    projectId: projectId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get rate limit status for the authenticated user
 * @request GET :/rate_limit
 * @readonly
 */
export async function getRateLimitRateLimitGet(
  headers?: hasuraSdk.JSONValue,
): Promise<RateLimitOverview> {
  const result = await api.rateLimit.rateLimitGet({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List repository required workflows
 * @request GET :/repos/{org}/{repo}/actions/required_workflows
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposActionsListRepoRequiredWorkflows(
  org: string,
  repo: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  required_workflows: RepoRequiredWorkflow[];
  total_count: number;
}> {
  const result = await api.repos.actionsListRepoRequiredWorkflows({
    org: org,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a required workflow entity for a repository
 * @request GET :/repos/{org}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposActionsGetRepoRequiredWorkflow(
  org: string,
  repo: string,
  /** The ID of the required workflow that has run at least once in a repository. */
  requiredWorkflowIdForRepo: number,
  headers?: hasuraSdk.JSONValue,
): Promise<RepoRequiredWorkflow> {
  const result = await api.repos.actionsGetRepoRequiredWorkflow({
    org: org,
    repo: repo,
    requiredWorkflowIdForRepo: requiredWorkflowIdForRepo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get required workflow usage
 * @request GET :/repos/{org}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}/timing
 * @readonly
 */
export async function getReposActionsGetRepoRequiredWorkflowUsage(
  org: string,
  repo: string,
  requiredWorkflowIdForRepo: number,
  headers?: hasuraSdk.JSONValue,
): Promise<WorkflowUsage> {
  const result = await api.repos.actionsGetRepoRequiredWorkflowUsage({
    org: org,
    repo: repo,
    requiredWorkflowIdForRepo: requiredWorkflowIdForRepo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a repository
 * @request DELETE :/repos/{owner}/{repo}
 */
export async function deleteReposReposDelete(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.reposDelete({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a repository
 * @request GET :/repos/{owner}/{repo}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposReposGet(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<FullRepository> {
  const result = await api.repos.reposGet({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update a repository
 * @request PATCH :/repos/{owner}/{repo}
 * @allowrelaxedtypes
 */
export async function patchReposReposUpdate(
  owner: string,
  repo: string,
  /** Request body */
  data?: {
    /**
     * Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
     * @default false
     */
    allow_auto_merge?: boolean;
    /**
     * Either `true` to allow private forks, or `false` to prevent private forks.
     * @default false
     */
    allow_forking?: boolean;
    /**
     * Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
     * @default true
     */
    allow_merge_commit?: boolean;
    /**
     * Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
     * @default true
     */
    allow_rebase_merge?: boolean;
    /**
     * Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
     * @default true
     */
    allow_squash_merge?: boolean;
    /**
     * Either `true` to always allow a pull request head branch that is behind its base branch to be updated even if it is not required to be up to date before merging, or false otherwise.
     * @default false
     */
    allow_update_branch?: boolean;
    /**
     * Whether to archive this repository. `false` will unarchive a previously archived repository.
     * @default false
     */
    archived?: boolean;
    /** Updates the default branch for this repository. */
    default_branch?: string;
    /**
     * Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
     * @default false
     */
    delete_branch_on_merge?: boolean;
    /** A short description of the repository. */
    description?: string;
    /**
     * Either `true` to enable issues for this repository or `false` to disable them.
     * @default true
     */
    has_issues?: boolean;
    /**
     * Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
     * @default true
     */
    has_projects?: boolean;
    /**
     * Either `true` to enable the wiki for this repository or `false` to disable it.
     * @default true
     */
    has_wiki?: boolean;
    /** A URL with more information about the repository. */
    homepage?: string;
    /**
     * Either `true` to make this repo available as a template repository or `false` to prevent it.
     * @default false
     */
    is_template?: boolean;
    /**
     * The default value for a merge commit message.
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `PR_BODY` - default to the pull request's body.
     * - `BLANK` - default to a blank commit message.
     */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
    /**
     * The default value for a merge commit title.
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
     */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
    /** The name of the repository. */
    name?: string;
    /**
     * Either `true` to make the repository private or `false` to make it public. Default: `false`.
     * **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
     * @default false
     */
    private?: boolean;
    /**
     * Specify which security and analysis features to enable or disable for the repository.
     *
     * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     *
     * For example, to enable GitHub Advanced Security, use this data in the body of the `PATCH` request:
     * `{ "security_and_analysis": {"advanced_security": { "status": "enabled" } } }`.
     *
     * You can check which security and analysis features are currently enabled by using a `GET /repos/{owner}/{repo}` request.
     */
    security_and_analysis?: {
      /** Use the `status` property to enable or disable GitHub Advanced Security for this repository. For more information, see "[About GitHub Advanced Security](/github/getting-started-with-github/learning-about-github/about-github-advanced-security)." */
      advanced_security?: {
        /** Can be `enabled` or `disabled`. */
        status?: string;
      };
      /** Use the `status` property to enable or disable secret scanning for this repository. For more information, see "[About secret scanning](/code-security/secret-security/about-secret-scanning)." */
      secret_scanning?: {
        /** Can be `enabled` or `disabled`. */
        status?: string;
      };
      /** Use the `status` property to enable or disable secret scanning push protection for this repository. For more information, see "[Protecting pushes with secret scanning](/code-security/secret-scanning/protecting-pushes-with-secret-scanning)." */
      secret_scanning_push_protection?: {
        /** Can be `enabled` or `disabled`. */
        status?: string;
      };
    } | null;
    /**
     * The default value for a squash merge commit message:
     *
     * - `PR_BODY` - default to the pull request's body.
     * - `COMMIT_MESSAGES` - default to the branch's commit messages.
     * - `BLANK` - default to a blank commit message.
     */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
    /**
     * The default value for a squash merge commit title:
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
     */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
    /**
     * Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
     * @deprecated
     * @default false
     */
    use_squash_pr_title_as_default?: boolean;
    /** The visibility of the repository. */
    visibility?: "public" | "private";
    /**
     * Either `true` to require contributors to sign off on web-based commits, or `false` to not require contributors to sign off on web-based commits.
     * @default false
     */
    web_commit_signoff_required?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<FullRepository> {
  const result = await api.repos.reposUpdate({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List artifacts for a repository
 * @request GET :/repos/{owner}/{repo}/actions/artifacts
 * @readonly
 */
export async function getReposActionsListArtifactsForRepo(
  owner: string,
  repo: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
    /** Filters artifacts by exact match on their name field. */
    name?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  artifacts: Artifact[];
  total_count: number;
}> {
  const result = await api.repos.actionsListArtifactsForRepo({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete an artifact
 * @request DELETE :/repos/{owner}/{repo}/actions/artifacts/{artifact_id}
 */
export async function deleteReposActionsDeleteArtifact(
  owner: string,
  repo: string,
  /** The unique identifier of the artifact. */
  artifactId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.actionsDeleteArtifact({
    owner: owner,
    repo: repo,
    artifactId: artifactId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get an artifact
 * @request GET :/repos/{owner}/{repo}/actions/artifacts/{artifact_id}
 * @readonly
 */
export async function getReposActionsGetArtifact(
  owner: string,
  repo: string,
  artifactId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Artifact> {
  const result = await api.repos.actionsGetArtifact({
    owner: owner,
    repo: repo,
    artifactId: artifactId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Download an artifact
 * @request GET :/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}
 * @readonly
 */
export async function getReposActionsDownloadArtifact(
  owner: string,
  repo: string,
  artifactId: number,
  archiveFormat: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.actionsDownloadArtifact({
    owner: owner,
    repo: repo,
    artifactId: artifactId,
    archiveFormat: archiveFormat,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get GitHub Actions cache usage for a repository
 * @request GET :/repos/{owner}/{repo}/actions/cache/usage
 * @readonly
 */
export async function getReposActionsGetActionsCacheUsage(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<ActionsCacheUsageByRepository> {
  const result = await api.repos.actionsGetActionsCacheUsage({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete GitHub Actions caches for a repository (using a cache key)
 * @request DELETE :/repos/{owner}/{repo}/actions/caches
 */
export async function deleteReposActionsDeleteActionsCacheByKey(
  owner: string,
  repo: string,
  query: {
    /** A key for identifying the cache. */
    key: string;
    /** The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */
    ref?: CodeScanningRef;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<ActionsCacheList> {
  const result = await api.repos.actionsDeleteActionsCacheByKey({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List GitHub Actions caches for a repository
 * @request GET :/repos/{owner}/{repo}/actions/caches
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposActionsGetActionsCacheList(
  owner: string,
  repo: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
    /** The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */
    ref?: CodeScanningRef;
    /** An explicit key or prefix for identifying the cache */
    key?: string;
    /** The property to sort the results by. `created_at` means when the cache was created. `last_accessed_at` means when the cache was last accessed. `size_in_bytes` is the size of the cache in bytes. */
    sort?: "created_at" | "last_accessed_at" | "size_in_bytes";
    /** The direction to sort the results by. */
    direction?: "asc" | "desc";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<ActionsCacheList> {
  const result = await api.repos.actionsGetActionsCacheList({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a GitHub Actions cache for a repository (using a cache ID)
 * @request DELETE :/repos/{owner}/{repo}/actions/caches/{cache_id}
 */
export async function deleteReposActionsDeleteActionsCacheById(
  owner: string,
  repo: string,
  /** The unique identifier of the GitHub Actions cache. */
  cacheId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.actionsDeleteActionsCacheById({
    owner: owner,
    repo: repo,
    cacheId: cacheId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a job for a workflow run
 * @request GET :/repos/{owner}/{repo}/actions/jobs/{job_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposActionsGetJobForWorkflowRun(
  owner: string,
  repo: string,
  /** The unique identifier of the job. */
  jobId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Job> {
  const result = await api.repos.actionsGetJobForWorkflowRun({
    owner: owner,
    repo: repo,
    jobId: jobId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Download job logs for a workflow run
 * @request GET :/repos/{owner}/{repo}/actions/jobs/{job_id}/logs
 * @readonly
 */
export async function getReposActionsDownloadJobLogsForWorkflowRun(
  owner: string,
  repo: string,
  jobId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.actionsDownloadJobLogsForWorkflowRun({
    owner: owner,
    repo: repo,
    jobId: jobId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Re-run a job from a workflow run
 * @request POST :/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun
 * @allowrelaxedtypes
 */
export async function postReposActionsReRunJobForWorkflowRun(
  owner: string,
  repo: string,
  jobId: number,
  /** Request body */
  data?: {
    /**
     * Whether to enable debug logging for the re-run.
     * @default false
     */
    enable_debug_logging?: boolean;
  } | null,
  headers?: hasuraSdk.JSONValue,
): Promise<EmptyObject> {
  const result = await api.repos.actionsReRunJobForWorkflowRun({
    owner: owner,
    repo: repo,
    jobId: jobId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the customization template for an OIDC subject claim for a repository
 * @request GET :/repos/{owner}/{repo}/actions/oidc/customization/sub
 * @readonly
 */
export async function getReposActionsGetCustomOidcSubClaimForRepo(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<OidcCustomSubRepo> {
  const result = await api.repos.actionsGetCustomOidcSubClaimForRepo({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set the customization template for an OIDC subject claim for a repository
 * @request PUT :/repos/{owner}/{repo}/actions/oidc/customization/sub
 */
export async function putReposActionsSetCustomOidcSubClaimForRepo(
  owner: string,
  repo: string,
  /** Request body */
  data: {
    /** Array of unique strings. Each claim key can only contain alphanumeric characters and underscores. */
    include_claim_keys?: string[];
    /** Whether to use the default template or not. If `true`, the `include_claim_keys` field is ignored. */
    use_default: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<EmptyObject> {
  const result = await api.repos.actionsSetCustomOidcSubClaimForRepo({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get GitHub Actions permissions for a repository
 * @request GET :/repos/{owner}/{repo}/actions/permissions
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposActionsGetGithubActionsPermissionsRepository(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<ActionsRepositoryPermissions> {
  const result = await api.repos.actionsGetGithubActionsPermissionsRepository({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set GitHub Actions permissions for a repository
 * @request PUT :/repos/{owner}/{repo}/actions/permissions
 */
export async function putReposActionsSetGithubActionsPermissionsRepository(
  owner: string,
  repo: string,
  /** Request body */
  data: {
    /** The permissions policy that controls the actions and reusable workflows that are allowed to run. */
    allowed_actions?: AllowedActions;
    /** Whether GitHub Actions is enabled on the repository. */
    enabled: ActionsEnabled;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.actionsSetGithubActionsPermissionsRepository({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the level of access for workflows outside of the repository
 * @request GET :/repos/{owner}/{repo}/actions/permissions/access
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposActionsGetWorkflowAccessToRepository(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<ActionsWorkflowAccessToRepository> {
  const result = await api.repos.actionsGetWorkflowAccessToRepository({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set the level of access for workflows outside of the repository
 * @request PUT :/repos/{owner}/{repo}/actions/permissions/access
 * @allowrelaxedtypes
 */
export async function putReposActionsSetWorkflowAccessToRepository(
  owner: string,
  repo: string,
  /** Request body */
  data: ActionsWorkflowAccessToRepository,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.actionsSetWorkflowAccessToRepository({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get allowed actions and reusable workflows for a repository
 * @request GET :/repos/{owner}/{repo}/actions/permissions/selected-actions
 * @readonly
 */
export async function getReposActionsGetAllowedActionsRepository(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<SelectedActions> {
  const result = await api.repos.actionsGetAllowedActionsRepository({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set allowed actions and reusable workflows for a repository
 * @request PUT :/repos/{owner}/{repo}/actions/permissions/selected-actions
 */
export async function putReposActionsSetAllowedActionsRepository(
  owner: string,
  repo: string,
  /** Request body */
  data?: SelectedActions,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.actionsSetAllowedActionsRepository({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get default workflow permissions for a repository
 * @request GET :/repos/{owner}/{repo}/actions/permissions/workflow
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposActionsGetGithubActionsDefaultWorkflowPermissionsRepository(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<ActionsGetDefaultWorkflowPermissions> {
  const result =
    await api.repos.actionsGetGithubActionsDefaultWorkflowPermissionsRepository(
      {
        owner: owner,
        repo: repo,
        params: {
          headers: (headers?.value as Record<string, string>) ?? undefined,
        },
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set default workflow permissions for a repository
 * @request PUT :/repos/{owner}/{repo}/actions/permissions/workflow
 * @allowrelaxedtypes
 */
export async function putReposActionsSetGithubActionsDefaultWorkflowPermissionsRepository(
  owner: string,
  repo: string,
  /** Request body */
  data: ActionsSetDefaultWorkflowPermissions,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.repos.actionsSetGithubActionsDefaultWorkflowPermissionsRepository(
      {
        owner: owner,
        repo: repo,
        data: data,
        params: {
          headers: (headers?.value as Record<string, string>) ?? undefined,
        },
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List workflow runs for a required workflow
 * @request GET :/repos/{owner}/{repo}/actions/required_workflows/{required_workflow_id_for_repo}/runs
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposActionsListRequiredWorkflowRuns(
  owner: string,
  repo: string,
  requiredWorkflowIdForRepo: number,
  query: {
    /** Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run. */
    actor?: string;
    /** Returns workflow runs associated with a branch. Use the name of the branch of the `push`. */
    branch?: string;
    /** Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)." */
    event?: string;
    /** Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. */
    status?:
      | "completed"
      | "action_required"
      | "cancelled"
      | "failure"
      | "neutral"
      | "skipped"
      | "stale"
      | "success"
      | "timed_out"
      | "in_progress"
      | "queued"
      | "requested"
      | "waiting"
      | "pending";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
    /** Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)." */
    created?: string;
    /** If `true` pull requests are omitted from the response (empty array). */
    exclude_pull_requests?: boolean;
    /** Returns workflow runs with the `check_suite_id` that you specify. */
    check_suite_id?: number;
    /** Only returns workflow runs that are associated with the specified `head_sha`. */
    head_sha?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  total_count: number;
  workflow_runs: WorkflowRun[];
}> {
  const result = await api.repos.actionsListRequiredWorkflowRuns({
    owner: owner,
    repo: repo,
    requiredWorkflowIdForRepo: requiredWorkflowIdForRepo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List self-hosted runners for a repository
 * @request GET :/repos/{owner}/{repo}/actions/runners
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposActionsListSelfHostedRunnersForRepo(
  owner: string,
  repo: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  runners: Runner[];
  total_count: number;
}> {
  const result = await api.repos.actionsListSelfHostedRunnersForRepo({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List runner applications for a repository
 * @request GET :/repos/{owner}/{repo}/actions/runners/downloads
 * @readonly
 */
export async function getReposActionsListRunnerApplicationsForRepo(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<RunnerApplication[]> {
  const result = await api.repos.actionsListRunnerApplicationsForRepo({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a registration token for a repository
 * @request POST :/repos/{owner}/{repo}/actions/runners/registration-token
 * @allowrelaxedtypes
 */
export async function postReposActionsCreateRegistrationTokenForRepo(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<AuthenticationToken> {
  const result = await api.repos.actionsCreateRegistrationTokenForRepo({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a remove token for a repository
 * @request POST :/repos/{owner}/{repo}/actions/runners/remove-token
 * @allowrelaxedtypes
 */
export async function postReposActionsCreateRemoveTokenForRepo(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<AuthenticationToken> {
  const result = await api.repos.actionsCreateRemoveTokenForRepo({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a self-hosted runner from a repository
 * @request DELETE :/repos/{owner}/{repo}/actions/runners/{runner_id}
 */
export async function deleteReposActionsDeleteSelfHostedRunnerFromRepo(
  owner: string,
  repo: string,
  runnerId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.actionsDeleteSelfHostedRunnerFromRepo({
    owner: owner,
    repo: repo,
    runnerId: runnerId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a self-hosted runner for a repository
 * @request GET :/repos/{owner}/{repo}/actions/runners/{runner_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposActionsGetSelfHostedRunnerForRepo(
  owner: string,
  repo: string,
  runnerId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Runner> {
  const result = await api.repos.actionsGetSelfHostedRunnerForRepo({
    owner: owner,
    repo: repo,
    runnerId: runnerId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Remove all custom labels from a self-hosted runner for a repository
 * @request DELETE :/repos/{owner}/{repo}/actions/runners/{runner_id}/labels
 */
export async function deleteReposActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo(
  owner: string,
  repo: string,
  runnerId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<{
  labels: RunnerLabel[];
  total_count: number;
}> {
  const result =
    await api.repos.actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo({
      owner: owner,
      repo: repo,
      runnerId: runnerId,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List labels for a self-hosted runner for a repository
 * @request GET :/repos/{owner}/{repo}/actions/runners/{runner_id}/labels
 * @readonly
 */
export async function getReposActionsListLabelsForSelfHostedRunnerForRepo(
  owner: string,
  repo: string,
  runnerId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<{
  labels: RunnerLabel[];
  total_count: number;
}> {
  const result = await api.repos.actionsListLabelsForSelfHostedRunnerForRepo({
    owner: owner,
    repo: repo,
    runnerId: runnerId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Add custom labels to a self-hosted runner for a repository
 * @request POST :/repos/{owner}/{repo}/actions/runners/{runner_id}/labels
 */
export async function postReposActionsAddCustomLabelsToSelfHostedRunnerForRepo(
  owner: string,
  repo: string,
  runnerId: number,
  /** Request body */
  data: {
    /**
     * The names of the custom labels to add to the runner.
     * @maxItems 100
     * @minItems 1
     */
    labels: string[];
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  labels: RunnerLabel[];
  total_count: number;
}> {
  const result =
    await api.repos.actionsAddCustomLabelsToSelfHostedRunnerForRepo({
      owner: owner,
      repo: repo,
      runnerId: runnerId,
      data: data,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set custom labels for a self-hosted runner for a repository
 * @request PUT :/repos/{owner}/{repo}/actions/runners/{runner_id}/labels
 */
export async function putReposActionsSetCustomLabelsForSelfHostedRunnerForRepo(
  owner: string,
  repo: string,
  runnerId: number,
  /** Request body */
  data: {
    /**
     * The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.
     * @maxItems 100
     * @minItems 0
     */
    labels: string[];
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  labels: RunnerLabel[];
  total_count: number;
}> {
  const result =
    await api.repos.actionsSetCustomLabelsForSelfHostedRunnerForRepo({
      owner: owner,
      repo: repo,
      runnerId: runnerId,
      data: data,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Remove a custom label from a self-hosted runner for a repository
 * @request DELETE :/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}
 */
export async function deleteReposActionsRemoveCustomLabelFromSelfHostedRunnerForRepo(
  owner: string,
  repo: string,
  runnerId: number,
  name: string,
  headers?: hasuraSdk.JSONValue,
): Promise<{
  labels: RunnerLabel[];
  total_count: number;
}> {
  const result =
    await api.repos.actionsRemoveCustomLabelFromSelfHostedRunnerForRepo({
      owner: owner,
      repo: repo,
      runnerId: runnerId,
      name: name,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List workflow runs for a repository
 * @request GET :/repos/{owner}/{repo}/actions/runs
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposActionsListWorkflowRunsForRepo(
  owner: string,
  repo: string,
  query: {
    /** Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run. */
    actor?: string;
    /** Returns workflow runs associated with a branch. Use the name of the branch of the `push`. */
    branch?: string;
    /** Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)." */
    event?: string;
    /** Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. */
    status?:
      | "completed"
      | "action_required"
      | "cancelled"
      | "failure"
      | "neutral"
      | "skipped"
      | "stale"
      | "success"
      | "timed_out"
      | "in_progress"
      | "queued"
      | "requested"
      | "waiting"
      | "pending";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
    /** Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)." */
    created?: string;
    /** If `true` pull requests are omitted from the response (empty array). */
    exclude_pull_requests?: boolean;
    /** Returns workflow runs with the `check_suite_id` that you specify. */
    check_suite_id?: number;
    /** Only returns workflow runs that are associated with the specified `head_sha`. */
    head_sha?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  total_count: number;
  workflow_runs: WorkflowRun[];
}> {
  const result = await api.repos.actionsListWorkflowRunsForRepo({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a workflow run
 * @request DELETE :/repos/{owner}/{repo}/actions/runs/{run_id}
 */
export async function deleteReposActionsDeleteWorkflowRun(
  owner: string,
  repo: string,
  /** The unique identifier of the workflow run. */
  runId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.actionsDeleteWorkflowRun({
    owner: owner,
    repo: repo,
    runId: runId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a workflow run
 * @request GET :/repos/{owner}/{repo}/actions/runs/{run_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposActionsGetWorkflowRun(
  owner: string,
  repo: string,
  runId: number,
  query: {
    /** If `true` pull requests are omitted from the response (empty array). */
    exclude_pull_requests?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<WorkflowRun> {
  const result = await api.repos.actionsGetWorkflowRun({
    owner: owner,
    repo: repo,
    runId: runId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the review history for a workflow run
 * @request GET :/repos/{owner}/{repo}/actions/runs/{run_id}/approvals
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposActionsGetReviewsForRun(
  owner: string,
  repo: string,
  runId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<EnvironmentApprovals[]> {
  const result = await api.repos.actionsGetReviewsForRun({
    owner: owner,
    repo: repo,
    runId: runId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Approve a workflow run for a fork pull request
 * @request POST :/repos/{owner}/{repo}/actions/runs/{run_id}/approve
 */
export async function postReposActionsApproveWorkflowRun(
  owner: string,
  repo: string,
  runId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<EmptyObject> {
  const result = await api.repos.actionsApproveWorkflowRun({
    owner: owner,
    repo: repo,
    runId: runId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List workflow run artifacts
 * @request GET :/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts
 * @readonly
 */
export async function getReposActionsListWorkflowRunArtifacts(
  owner: string,
  repo: string,
  runId: number,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  artifacts: Artifact[];
  total_count: number;
}> {
  const result = await api.repos.actionsListWorkflowRunArtifacts({
    owner: owner,
    repo: repo,
    runId: runId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a workflow run attempt
 * @request GET :/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposActionsGetWorkflowRunAttempt(
  owner: string,
  repo: string,
  runId: number,
  /** The attempt number of the workflow run. */
  attemptNumber: number,
  query: {
    /** If `true` pull requests are omitted from the response (empty array). */
    exclude_pull_requests?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<WorkflowRun> {
  const result = await api.repos.actionsGetWorkflowRunAttempt({
    owner: owner,
    repo: repo,
    runId: runId,
    attemptNumber: attemptNumber,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List jobs for a workflow run attempt
 * @request GET :/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposActionsListJobsForWorkflowRunAttempt(
  owner: string,
  repo: string,
  runId: number,
  attemptNumber: number,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  jobs: Job[];
  total_count: number;
}> {
  const result = await api.repos.actionsListJobsForWorkflowRunAttempt({
    owner: owner,
    repo: repo,
    runId: runId,
    attemptNumber: attemptNumber,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Download workflow run attempt logs
 * @request GET :/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs
 * @readonly
 */
export async function getReposActionsDownloadWorkflowRunAttemptLogs(
  owner: string,
  repo: string,
  runId: number,
  attemptNumber: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.actionsDownloadWorkflowRunAttemptLogs({
    owner: owner,
    repo: repo,
    runId: runId,
    attemptNumber: attemptNumber,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Cancel a workflow run
 * @request POST :/repos/{owner}/{repo}/actions/runs/{run_id}/cancel
 */
export async function postReposActionsCancelWorkflowRun(
  owner: string,
  repo: string,
  runId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<EmptyObject> {
  const result = await api.repos.actionsCancelWorkflowRun({
    owner: owner,
    repo: repo,
    runId: runId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List jobs for a workflow run
 * @request GET :/repos/{owner}/{repo}/actions/runs/{run_id}/jobs
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposActionsListJobsForWorkflowRun(
  owner: string,
  repo: string,
  runId: number,
  query: {
    /** Filters jobs by their `completed_at` timestamp. `latest` returns jobs from the most recent execution of the workflow run. `all` returns all jobs for a workflow run, including from old executions of the workflow run. */
    filter?: "latest" | "all";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  jobs: Job[];
  total_count: number;
}> {
  const result = await api.repos.actionsListJobsForWorkflowRun({
    owner: owner,
    repo: repo,
    runId: runId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete workflow run logs
 * @request DELETE :/repos/{owner}/{repo}/actions/runs/{run_id}/logs
 */
export async function deleteReposActionsDeleteWorkflowRunLogs(
  owner: string,
  repo: string,
  runId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.actionsDeleteWorkflowRunLogs({
    owner: owner,
    repo: repo,
    runId: runId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Download workflow run logs
 * @request GET :/repos/{owner}/{repo}/actions/runs/{run_id}/logs
 * @readonly
 */
export async function getReposActionsDownloadWorkflowRunLogs(
  owner: string,
  repo: string,
  runId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.actionsDownloadWorkflowRunLogs({
    owner: owner,
    repo: repo,
    runId: runId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get pending deployments for a workflow run
 * @request GET :/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposActionsGetPendingDeploymentsForRun(
  owner: string,
  repo: string,
  runId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<PendingDeployment[]> {
  const result = await api.repos.actionsGetPendingDeploymentsForRun({
    owner: owner,
    repo: repo,
    runId: runId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Review pending deployments for a workflow run
 * @request POST :/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments
 * @allowrelaxedtypes
 */
export async function postReposActionsReviewPendingDeploymentsForRun(
  owner: string,
  repo: string,
  runId: number,
  /** Request body */
  data: {
    /**
     * A comment to accompany the deployment review
     * @example "Ship it!"
     */
    comment: string;
    /**
     * The list of environment ids to approve or reject
     * @example [161171787,161171795]
     */
    environment_ids: number[];
    /**
     * Whether to approve or reject deployment to the specified environments.
     * @example "approved"
     */
    state: "approved" | "rejected";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Deployment[]> {
  const result = await api.repos.actionsReviewPendingDeploymentsForRun({
    owner: owner,
    repo: repo,
    runId: runId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Re-run a workflow
 * @request POST :/repos/{owner}/{repo}/actions/runs/{run_id}/rerun
 * @allowrelaxedtypes
 */
export async function postReposActionsReRunWorkflow(
  owner: string,
  repo: string,
  runId: number,
  /** Request body */
  data?: {
    /**
     * Whether to enable debug logging for the re-run.
     * @default false
     */
    enable_debug_logging?: boolean;
  } | null,
  headers?: hasuraSdk.JSONValue,
): Promise<EmptyObject> {
  const result = await api.repos.actionsReRunWorkflow({
    owner: owner,
    repo: repo,
    runId: runId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Re-run failed jobs from a workflow run
 * @request POST :/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs
 * @allowrelaxedtypes
 */
export async function postReposActionsReRunWorkflowFailedJobs(
  owner: string,
  repo: string,
  runId: number,
  /** Request body */
  data?: {
    /**
     * Whether to enable debug logging for the re-run.
     * @default false
     */
    enable_debug_logging?: boolean;
  } | null,
  headers?: hasuraSdk.JSONValue,
): Promise<EmptyObject> {
  const result = await api.repos.actionsReRunWorkflowFailedJobs({
    owner: owner,
    repo: repo,
    runId: runId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get workflow run usage
 * @request GET :/repos/{owner}/{repo}/actions/runs/{run_id}/timing
 * @readonly
 */
export async function getReposActionsGetWorkflowRunUsage(
  owner: string,
  repo: string,
  runId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<WorkflowRunUsage> {
  const result = await api.repos.actionsGetWorkflowRunUsage({
    owner: owner,
    repo: repo,
    runId: runId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List repository secrets
 * @request GET :/repos/{owner}/{repo}/actions/secrets
 * @readonly
 */
export async function getReposActionsListRepoSecrets(
  owner: string,
  repo: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  secrets: ActionsSecret[];
  total_count: number;
}> {
  const result = await api.repos.actionsListRepoSecrets({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a repository public key
 * @request GET :/repos/{owner}/{repo}/actions/secrets/public-key
 * @readonly
 */
export async function getReposActionsGetRepoPublicKey(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<ActionsPublicKey> {
  const result = await api.repos.actionsGetRepoPublicKey({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a repository secret
 * @request DELETE :/repos/{owner}/{repo}/actions/secrets/{secret_name}
 */
export async function deleteReposActionsDeleteRepoSecret(
  owner: string,
  repo: string,
  secretName: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.actionsDeleteRepoSecret({
    owner: owner,
    repo: repo,
    secretName: secretName,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a repository secret
 * @request GET :/repos/{owner}/{repo}/actions/secrets/{secret_name}
 * @readonly
 */
export async function getReposActionsGetRepoSecret(
  owner: string,
  repo: string,
  secretName: string,
  headers?: hasuraSdk.JSONValue,
): Promise<ActionsSecret> {
  const result = await api.repos.actionsGetRepoSecret({
    owner: owner,
    repo: repo,
    secretName: secretName,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create or update a repository secret
 * @request PUT :/repos/{owner}/{repo}/actions/secrets/{secret_name}
 */
export async function putReposActionsCreateOrUpdateRepoSecret(
  owner: string,
  repo: string,
  secretName: string,
  /** Request body */
  data: {
    /**
     * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/reference/actions#get-a-repository-public-key) endpoint.
     * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
     */
    encrypted_value?: string;
    /** ID of the key you used to encrypt the secret. */
    key_id?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<EmptyObject> {
  const result = await api.repos.actionsCreateOrUpdateRepoSecret({
    owner: owner,
    repo: repo,
    secretName: secretName,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List repository variables
 * @request GET :/repos/{owner}/{repo}/actions/variables
 * @readonly
 */
export async function getReposActionsListRepoVariables(
  owner: string,
  repo: string,
  query: {
    /** The number of results per page (max 30). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  total_count: number;
  variables: ActionsVariable[];
}> {
  const result = await api.repos.actionsListRepoVariables({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a repository variable
 * @request POST :/repos/{owner}/{repo}/actions/variables
 */
export async function postReposActionsCreateRepoVariable(
  owner: string,
  repo: string,
  /** Request body */
  data: {
    /** The name of the variable. */
    name: string;
    /** The value of the variable. */
    value: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<EmptyObject> {
  const result = await api.repos.actionsCreateRepoVariable({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a repository variable
 * @request DELETE :/repos/{owner}/{repo}/actions/variables/{name}
 */
export async function deleteReposActionsDeleteRepoVariable(
  owner: string,
  repo: string,
  name: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.actionsDeleteRepoVariable({
    owner: owner,
    repo: repo,
    name: name,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a repository variable
 * @request GET :/repos/{owner}/{repo}/actions/variables/{name}
 * @readonly
 */
export async function getReposActionsGetRepoVariable(
  owner: string,
  repo: string,
  name: string,
  headers?: hasuraSdk.JSONValue,
): Promise<ActionsVariable> {
  const result = await api.repos.actionsGetRepoVariable({
    owner: owner,
    repo: repo,
    name: name,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update a repository variable
 * @request PATCH :/repos/{owner}/{repo}/actions/variables/{name}
 */
export async function patchReposActionsUpdateRepoVariable(
  owner: string,
  repo: string,
  name: string,
  /** Request body */
  data: {
    /** The name of the variable. */
    name?: string;
    /** The value of the variable. */
    value?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.actionsUpdateRepoVariable({
    owner: owner,
    repo: repo,
    name: name,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List repository workflows
 * @request GET :/repos/{owner}/{repo}/actions/workflows
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposActionsListRepoWorkflows(
  owner: string,
  repo: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  total_count: number;
  workflows: Workflow[];
}> {
  const result = await api.repos.actionsListRepoWorkflows({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a workflow
 * @request GET :/repos/{owner}/{repo}/actions/workflows/{workflow_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposActionsGetWorkflow(
  owner: string,
  repo: string,
  /** The ID of the workflow. You can also pass the workflow file name as a string. */
  workflowId: number | string,
  headers?: hasuraSdk.JSONValue,
): Promise<Workflow> {
  const result = await api.repos.actionsGetWorkflow({
    owner: owner,
    repo: repo,
    workflowId: workflowId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Disable a workflow
 * @request PUT :/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable
 * @allowrelaxedtypes
 */
export async function putReposActionsDisableWorkflow(
  owner: string,
  repo: string,
  workflowId: number | string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.actionsDisableWorkflow({
    owner: owner,
    repo: repo,
    workflowId: workflowId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a workflow dispatch event
 * @request POST :/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches
 * @allowrelaxedtypes
 */
export async function postReposActionsCreateWorkflowDispatch(
  owner: string,
  repo: string,
  workflowId: number | string,
  /** Request body */
  data: {
    /** Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted. */
    inputs?: hasuraSdk.JSONValue;
    /** The git reference for the workflow. The reference can be a branch or tag name. */
    ref: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.actionsCreateWorkflowDispatch({
    owner: owner,
    repo: repo,
    workflowId: workflowId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Enable a workflow
 * @request PUT :/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable
 * @allowrelaxedtypes
 */
export async function putReposActionsEnableWorkflow(
  owner: string,
  repo: string,
  workflowId: number | string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.actionsEnableWorkflow({
    owner: owner,
    repo: repo,
    workflowId: workflowId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List workflow runs for a workflow
 * @request GET :/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposActionsListWorkflowRuns(
  owner: string,
  repo: string,
  workflowId: number | string,
  query: {
    /** Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run. */
    actor?: string;
    /** Returns workflow runs associated with a branch. Use the name of the branch of the `push`. */
    branch?: string;
    /** Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)." */
    event?: string;
    /** Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. */
    status?:
      | "completed"
      | "action_required"
      | "cancelled"
      | "failure"
      | "neutral"
      | "skipped"
      | "stale"
      | "success"
      | "timed_out"
      | "in_progress"
      | "queued"
      | "requested"
      | "waiting"
      | "pending";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
    /** Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)." */
    created?: string;
    /** If `true` pull requests are omitted from the response (empty array). */
    exclude_pull_requests?: boolean;
    /** Returns workflow runs with the `check_suite_id` that you specify. */
    check_suite_id?: number;
    /** Only returns workflow runs that are associated with the specified `head_sha`. */
    head_sha?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  total_count: number;
  workflow_runs: WorkflowRun[];
}> {
  const result = await api.repos.actionsListWorkflowRuns({
    owner: owner,
    repo: repo,
    workflowId: workflowId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get workflow usage
 * @request GET :/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposActionsGetWorkflowUsage(
  owner: string,
  repo: string,
  workflowId: number | string,
  headers?: hasuraSdk.JSONValue,
): Promise<WorkflowUsage> {
  const result = await api.repos.actionsGetWorkflowUsage({
    owner: owner,
    repo: repo,
    workflowId: workflowId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List assignees
 * @request GET :/repos/{owner}/{repo}/assignees
 * @readonly
 */
export async function getReposIssuesListAssignees(
  owner: string,
  repo: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<SimpleUser[]> {
  const result = await api.repos.issuesListAssignees({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Check if a user can be assigned
 * @request GET :/repos/{owner}/{repo}/assignees/{assignee}
 * @readonly
 */
export async function getReposIssuesCheckUserCanBeAssigned(
  owner: string,
  repo: string,
  assignee: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.issuesCheckUserCanBeAssigned({
    owner: owner,
    repo: repo,
    assignee: assignee,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List all autolinks of a repository
 * @request GET :/repos/{owner}/{repo}/autolinks
 * @readonly
 */
export async function getReposReposListAutolinks(
  owner: string,
  repo: string,
  query: {
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Autolink[]> {
  const result = await api.repos.reposListAutolinks({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create an autolink reference for a repository
 * @request POST :/repos/{owner}/{repo}/autolinks
 */
export async function postReposReposCreateAutolink(
  owner: string,
  repo: string,
  /** Request body */
  data: {
    /**
     * Whether this autolink reference matches alphanumeric characters. If true, the `<num>` parameter of the `url_template` matches alphanumeric characters `A-Z` (case insensitive), `0-9`, and `-`. If false, this autolink reference only matches numeric characters.
     * @default "true"
     */
    is_alphanumeric?: boolean;
    /** This prefix appended by certain characters will generate a link any time it is found in an issue, pull request, or commit. */
    key_prefix: string;
    /** The URL must contain `<num>` for the reference number. `<num>` matches different characters depending on the value of `is_alphanumeric`. */
    url_template: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Autolink> {
  const result = await api.repos.reposCreateAutolink({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete an autolink reference from a repository
 * @request DELETE :/repos/{owner}/{repo}/autolinks/{autolink_id}
 */
export async function deleteReposReposDeleteAutolink(
  owner: string,
  repo: string,
  /** The unique identifier of the autolink. */
  autolinkId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.reposDeleteAutolink({
    owner: owner,
    repo: repo,
    autolinkId: autolinkId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get an autolink reference of a repository
 * @request GET :/repos/{owner}/{repo}/autolinks/{autolink_id}
 * @readonly
 */
export async function getReposReposGetAutolink(
  owner: string,
  repo: string,
  autolinkId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Autolink> {
  const result = await api.repos.reposGetAutolink({
    owner: owner,
    repo: repo,
    autolinkId: autolinkId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Disable automated security fixes
 * @request DELETE :/repos/{owner}/{repo}/automated-security-fixes
 */
export async function deleteReposReposDisableAutomatedSecurityFixes(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.reposDisableAutomatedSecurityFixes({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Enable automated security fixes
 * @request PUT :/repos/{owner}/{repo}/automated-security-fixes
 */
export async function putReposReposEnableAutomatedSecurityFixes(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.reposEnableAutomatedSecurityFixes({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List branches
 * @request GET :/repos/{owner}/{repo}/branches
 * @readonly
 */
export async function getReposReposListBranches(
  owner: string,
  repo: string,
  query: {
    /** Setting to `true` returns only protected branches. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches. */
    protected?: boolean;
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<ShortBranch[]> {
  const result = await api.repos.reposListBranches({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a branch
 * @request GET :/repos/{owner}/{repo}/branches/{branch}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposReposGetBranch(
  owner: string,
  repo: string,
  /** The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/graphql). */
  branch: string,
  headers?: hasuraSdk.JSONValue,
): Promise<BranchWithProtection> {
  const result = await api.repos.reposGetBranch({
    owner: owner,
    repo: repo,
    branch: branch,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete branch protection
 * @request DELETE :/repos/{owner}/{repo}/branches/{branch}/protection
 */
export async function deleteReposReposDeleteBranchProtection(
  owner: string,
  repo: string,
  branch: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.reposDeleteBranchProtection({
    owner: owner,
    repo: repo,
    branch: branch,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get branch protection
 * @request GET :/repos/{owner}/{repo}/branches/{branch}/protection
 * @readonly
 */
export async function getReposReposGetBranchProtection(
  owner: string,
  repo: string,
  branch: string,
  headers?: hasuraSdk.JSONValue,
): Promise<BranchProtection> {
  const result = await api.repos.reposGetBranchProtection({
    owner: owner,
    repo: repo,
    branch: branch,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update branch protection
 * @request PUT :/repos/{owner}/{repo}/branches/{branch}/protection
 * @allowrelaxedtypes
 */
export async function putReposReposUpdateBranchProtection(
  owner: string,
  repo: string,
  branch: string,
  /** Request body */
  data: {
    /** Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation. */
    allow_deletions?: boolean;
    /** Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation." */
    allow_force_pushes?: boolean | null;
    /**
     * Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing. Default: `false`.
     * @default false
     */
    allow_fork_syncing?: boolean;
    /** If set to `true`, the `restrictions` branch protection settings which limits who can push will also block pushes which create new branches, unless the push is initiated by a user, team, or app which has the ability to push. Set to `true` to restrict new branch creation. Default: `false`. */
    block_creations?: boolean;
    /** Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable. */
    enforce_admins: boolean | null;
    /**
     * Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. Default: `false`.
     * @default false
     */
    lock_branch?: boolean;
    /** Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to `false` to disable. Default: `false`. */
    required_conversation_resolution?: boolean;
    /** Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see "[Requiring a linear commit history](https://docs.github.com/github/administering-a-repository/requiring-a-linear-commit-history)" in the GitHub Help documentation. */
    required_linear_history?: boolean;
    /** Require at least one approving review on a pull request, before merging. Set to `null` to disable. */
    required_pull_request_reviews: {
      /** Allow specific users, teams, or apps to bypass pull request requirements. */
      bypass_pull_request_allowances?: {
        /** The list of app `slug`s allowed to bypass pull request requirements. */
        apps?: string[];
        /** The list of team `slug`s allowed to bypass pull request requirements. */
        teams?: string[];
        /** The list of user `login`s allowed to bypass pull request requirements. */
        users?: string[];
      };
      /** Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit. */
      dismiss_stale_reviews?: boolean;
      /** Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories. */
      dismissal_restrictions?: {
        /** The list of app `slug`s with dismissal access */
        apps?: string[];
        /** The list of team `slug`s with dismissal access */
        teams?: string[];
        /** The list of user `login`s with dismissal access */
        users?: string[];
      };
      /** Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) review them. */
      require_code_owner_reviews?: boolean;
      /**
       * Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`.
       * @default false
       */
      require_last_push_approval?: boolean;
      /** Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers. */
      required_approving_review_count?: number;
    } | null;
    /** Require status checks to pass before merging. Set to `null` to disable. */
    required_status_checks: {
      /** The list of status checks to require in order to merge into this branch. */
      checks?: {
        /** The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status. */
        app_id?: number;
        /** The name of the required check */
        context: string;
      }[];
      /**
       * **Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.
       * @deprecated
       */
      contexts: string[];
      /** Require branches to be up to date before merging. */
      strict: boolean;
    } | null;
    /** Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable. */
    restrictions: {
      /** The list of app `slug`s with push access */
      apps?: string[];
      /** The list of team `slug`s with push access */
      teams: string[];
      /** The list of user `login`s with push access */
      users: string[];
    } | null;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<ProtectedBranch> {
  const result = await api.repos.reposUpdateBranchProtection({
    owner: owner,
    repo: repo,
    branch: branch,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete admin branch protection
 * @request DELETE :/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins
 */
export async function deleteReposReposDeleteAdminBranchProtection(
  owner: string,
  repo: string,
  branch: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.reposDeleteAdminBranchProtection({
    owner: owner,
    repo: repo,
    branch: branch,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get admin branch protection
 * @request GET :/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins
 * @readonly
 */
export async function getReposReposGetAdminBranchProtection(
  owner: string,
  repo: string,
  branch: string,
  headers?: hasuraSdk.JSONValue,
): Promise<ProtectedBranchAdminEnforced> {
  const result = await api.repos.reposGetAdminBranchProtection({
    owner: owner,
    repo: repo,
    branch: branch,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set admin branch protection
 * @request POST :/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins
 */
export async function postReposReposSetAdminBranchProtection(
  owner: string,
  repo: string,
  branch: string,
  headers?: hasuraSdk.JSONValue,
): Promise<ProtectedBranchAdminEnforced> {
  const result = await api.repos.reposSetAdminBranchProtection({
    owner: owner,
    repo: repo,
    branch: branch,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete pull request review protection
 * @request DELETE :/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews
 */
export async function deleteReposReposDeletePullRequestReviewProtection(
  owner: string,
  repo: string,
  branch: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.reposDeletePullRequestReviewProtection({
    owner: owner,
    repo: repo,
    branch: branch,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get pull request review protection
 * @request GET :/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews
 * @readonly
 */
export async function getReposReposGetPullRequestReviewProtection(
  owner: string,
  repo: string,
  branch: string,
  headers?: hasuraSdk.JSONValue,
): Promise<ProtectedBranchPullRequestReview> {
  const result = await api.repos.reposGetPullRequestReviewProtection({
    owner: owner,
    repo: repo,
    branch: branch,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update pull request review protection
 * @request PATCH :/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews
 */
export async function patchReposReposUpdatePullRequestReviewProtection(
  owner: string,
  repo: string,
  branch: string,
  /** Request body */
  data?: {
    /** Allow specific users, teams, or apps to bypass pull request requirements. */
    bypass_pull_request_allowances?: {
      /** The list of app `slug`s allowed to bypass pull request requirements. */
      apps?: string[];
      /** The list of team `slug`s allowed to bypass pull request requirements. */
      teams?: string[];
      /** The list of user `login`s allowed to bypass pull request requirements. */
      users?: string[];
    };
    /** Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit. */
    dismiss_stale_reviews?: boolean;
    /** Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories. */
    dismissal_restrictions?: {
      /** The list of app `slug`s with dismissal access */
      apps?: string[];
      /** The list of team `slug`s with dismissal access */
      teams?: string[];
      /** The list of user `login`s with dismissal access */
      users?: string[];
    };
    /** Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) have reviewed. */
    require_code_owner_reviews?: boolean;
    /**
     * Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`
     * @default false
     */
    require_last_push_approval?: boolean;
    /** Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers. */
    required_approving_review_count?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<ProtectedBranchPullRequestReview> {
  const result = await api.repos.reposUpdatePullRequestReviewProtection({
    owner: owner,
    repo: repo,
    branch: branch,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete commit signature protection
 * @request DELETE :/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures
 */
export async function deleteReposReposDeleteCommitSignatureProtection(
  owner: string,
  repo: string,
  branch: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.reposDeleteCommitSignatureProtection({
    owner: owner,
    repo: repo,
    branch: branch,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get commit signature protection
 * @request GET :/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures
 * @readonly
 */
export async function getReposReposGetCommitSignatureProtection(
  owner: string,
  repo: string,
  branch: string,
  headers?: hasuraSdk.JSONValue,
): Promise<ProtectedBranchAdminEnforced> {
  const result = await api.repos.reposGetCommitSignatureProtection({
    owner: owner,
    repo: repo,
    branch: branch,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create commit signature protection
 * @request POST :/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures
 */
export async function postReposReposCreateCommitSignatureProtection(
  owner: string,
  repo: string,
  branch: string,
  headers?: hasuraSdk.JSONValue,
): Promise<ProtectedBranchAdminEnforced> {
  const result = await api.repos.reposCreateCommitSignatureProtection({
    owner: owner,
    repo: repo,
    branch: branch,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Remove status check protection
 * @request DELETE :/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks
 */
export async function deleteReposReposRemoveStatusCheckProtection(
  owner: string,
  repo: string,
  branch: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.reposRemoveStatusCheckProtection({
    owner: owner,
    repo: repo,
    branch: branch,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get status checks protection
 * @request GET :/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks
 * @readonly
 */
export async function getReposReposGetStatusChecksProtection(
  owner: string,
  repo: string,
  branch: string,
  headers?: hasuraSdk.JSONValue,
): Promise<StatusCheckPolicy> {
  const result = await api.repos.reposGetStatusChecksProtection({
    owner: owner,
    repo: repo,
    branch: branch,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update status check protection
 * @request PATCH :/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks
 */
export async function patchReposReposUpdateStatusCheckProtection(
  owner: string,
  repo: string,
  branch: string,
  /** Request body */
  data?: {
    /** The list of status checks to require in order to merge into this branch. */
    checks?: {
      /** The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status. */
      app_id?: number;
      /** The name of the required check */
      context: string;
    }[];
    /**
     * **Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.
     * @deprecated
     */
    contexts?: string[];
    /** Require branches to be up to date before merging. */
    strict?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<StatusCheckPolicy> {
  const result = await api.repos.reposUpdateStatusCheckProtection({
    owner: owner,
    repo: repo,
    branch: branch,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Remove status check contexts
 * @request DELETE :/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts
 * @allowrelaxedtypes
 */
export async function deleteReposReposRemoveStatusCheckContexts(
  owner: string,
  repo: string,
  branch: string,
  /** Request body */
  data:
    | {
        /** The name of the status checks */
        contexts: string[];
      }
    | string[],
  headers?: hasuraSdk.JSONValue,
): Promise<string[]> {
  const result = await api.repos.reposRemoveStatusCheckContexts({
    owner: owner,
    repo: repo,
    branch: branch,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get all status check contexts
 * @request GET :/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts
 * @readonly
 */
export async function getReposReposGetAllStatusCheckContexts(
  owner: string,
  repo: string,
  branch: string,
  headers?: hasuraSdk.JSONValue,
): Promise<string[]> {
  const result = await api.repos.reposGetAllStatusCheckContexts({
    owner: owner,
    repo: repo,
    branch: branch,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Add status check contexts
 * @request POST :/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts
 * @allowrelaxedtypes
 */
export async function postReposReposAddStatusCheckContexts(
  owner: string,
  repo: string,
  branch: string,
  /** Request body */
  data?:
    | {
        /** The name of the status checks */
        contexts: string[];
      }
    | string[],
  headers?: hasuraSdk.JSONValue,
): Promise<string[]> {
  const result = await api.repos.reposAddStatusCheckContexts({
    owner: owner,
    repo: repo,
    branch: branch,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set status check contexts
 * @request PUT :/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts
 * @allowrelaxedtypes
 */
export async function putReposReposSetStatusCheckContexts(
  owner: string,
  repo: string,
  branch: string,
  /** Request body */
  data?:
    | {
        /** The name of the status checks */
        contexts: string[];
      }
    | string[],
  headers?: hasuraSdk.JSONValue,
): Promise<string[]> {
  const result = await api.repos.reposSetStatusCheckContexts({
    owner: owner,
    repo: repo,
    branch: branch,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete access restrictions
 * @request DELETE :/repos/{owner}/{repo}/branches/{branch}/protection/restrictions
 */
export async function deleteReposReposDeleteAccessRestrictions(
  owner: string,
  repo: string,
  branch: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.reposDeleteAccessRestrictions({
    owner: owner,
    repo: repo,
    branch: branch,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get access restrictions
 * @request GET :/repos/{owner}/{repo}/branches/{branch}/protection/restrictions
 * @readonly
 */
export async function getReposReposGetAccessRestrictions(
  owner: string,
  repo: string,
  branch: string,
  headers?: hasuraSdk.JSONValue,
): Promise<BranchRestrictionPolicy> {
  const result = await api.repos.reposGetAccessRestrictions({
    owner: owner,
    repo: repo,
    branch: branch,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Remove app access restrictions
 * @request DELETE :/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps
 * @allowrelaxedtypes
 */
export async function deleteReposReposRemoveAppAccessRestrictions(
  owner: string,
  repo: string,
  branch: string,
  /** Request body */
  data:
    | {
        /** The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items. */
        apps: string[];
      }
    | string[],
  headers?: hasuraSdk.JSONValue,
): Promise<Integration[]> {
  const result = await api.repos.reposRemoveAppAccessRestrictions({
    owner: owner,
    repo: repo,
    branch: branch,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get apps with access to the protected branch
 * @request GET :/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps
 * @readonly
 */
export async function getReposReposGetAppsWithAccessToProtectedBranch(
  owner: string,
  repo: string,
  branch: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Integration[]> {
  const result = await api.repos.reposGetAppsWithAccessToProtectedBranch({
    owner: owner,
    repo: repo,
    branch: branch,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Add app access restrictions
 * @request POST :/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps
 * @allowrelaxedtypes
 */
export async function postReposReposAddAppAccessRestrictions(
  owner: string,
  repo: string,
  branch: string,
  /** Request body */
  data?:
    | {
        /** The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items. */
        apps: string[];
      }
    | string[],
  headers?: hasuraSdk.JSONValue,
): Promise<Integration[]> {
  const result = await api.repos.reposAddAppAccessRestrictions({
    owner: owner,
    repo: repo,
    branch: branch,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set app access restrictions
 * @request PUT :/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps
 * @allowrelaxedtypes
 */
export async function putReposReposSetAppAccessRestrictions(
  owner: string,
  repo: string,
  branch: string,
  /** Request body */
  data?:
    | {
        /** The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items. */
        apps: string[];
      }
    | string[],
  headers?: hasuraSdk.JSONValue,
): Promise<Integration[]> {
  const result = await api.repos.reposSetAppAccessRestrictions({
    owner: owner,
    repo: repo,
    branch: branch,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Remove team access restrictions
 * @request DELETE :/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams
 * @allowrelaxedtypes
 */
export async function deleteReposReposRemoveTeamAccessRestrictions(
  owner: string,
  repo: string,
  branch: string,
  /** Request body */
  data:
    | {
        /** The slug values for teams */
        teams: string[];
      }
    | string[],
  headers?: hasuraSdk.JSONValue,
): Promise<Team[]> {
  const result = await api.repos.reposRemoveTeamAccessRestrictions({
    owner: owner,
    repo: repo,
    branch: branch,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get teams with access to the protected branch
 * @request GET :/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams
 * @readonly
 */
export async function getReposReposGetTeamsWithAccessToProtectedBranch(
  owner: string,
  repo: string,
  branch: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Team[]> {
  const result = await api.repos.reposGetTeamsWithAccessToProtectedBranch({
    owner: owner,
    repo: repo,
    branch: branch,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Add team access restrictions
 * @request POST :/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams
 * @allowrelaxedtypes
 */
export async function postReposReposAddTeamAccessRestrictions(
  owner: string,
  repo: string,
  branch: string,
  /** Request body */
  data?:
    | {
        /** The slug values for teams */
        teams: string[];
      }
    | string[],
  headers?: hasuraSdk.JSONValue,
): Promise<Team[]> {
  const result = await api.repos.reposAddTeamAccessRestrictions({
    owner: owner,
    repo: repo,
    branch: branch,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set team access restrictions
 * @request PUT :/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams
 * @allowrelaxedtypes
 */
export async function putReposReposSetTeamAccessRestrictions(
  owner: string,
  repo: string,
  branch: string,
  /** Request body */
  data?:
    | {
        /** The slug values for teams */
        teams: string[];
      }
    | string[],
  headers?: hasuraSdk.JSONValue,
): Promise<Team[]> {
  const result = await api.repos.reposSetTeamAccessRestrictions({
    owner: owner,
    repo: repo,
    branch: branch,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Remove user access restrictions
 * @request DELETE :/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users
 * @allowrelaxedtypes
 */
export async function deleteReposReposRemoveUserAccessRestrictions(
  owner: string,
  repo: string,
  branch: string,
  /** Request body */
  data:
    | {
        /** The username for users */
        users: string[];
      }
    | string[],
  headers?: hasuraSdk.JSONValue,
): Promise<SimpleUser[]> {
  const result = await api.repos.reposRemoveUserAccessRestrictions({
    owner: owner,
    repo: repo,
    branch: branch,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get users with access to the protected branch
 * @request GET :/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users
 * @readonly
 */
export async function getReposReposGetUsersWithAccessToProtectedBranch(
  owner: string,
  repo: string,
  branch: string,
  headers?: hasuraSdk.JSONValue,
): Promise<SimpleUser[]> {
  const result = await api.repos.reposGetUsersWithAccessToProtectedBranch({
    owner: owner,
    repo: repo,
    branch: branch,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Add user access restrictions
 * @request POST :/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users
 * @allowrelaxedtypes
 */
export async function postReposReposAddUserAccessRestrictions(
  owner: string,
  repo: string,
  branch: string,
  /** Request body */
  data?:
    | {
        /** The username for users */
        users: string[];
      }
    | string[],
  headers?: hasuraSdk.JSONValue,
): Promise<SimpleUser[]> {
  const result = await api.repos.reposAddUserAccessRestrictions({
    owner: owner,
    repo: repo,
    branch: branch,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set user access restrictions
 * @request PUT :/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users
 * @allowrelaxedtypes
 */
export async function putReposReposSetUserAccessRestrictions(
  owner: string,
  repo: string,
  branch: string,
  /** Request body */
  data?:
    | {
        /** The username for users */
        users: string[];
      }
    | string[],
  headers?: hasuraSdk.JSONValue,
): Promise<SimpleUser[]> {
  const result = await api.repos.reposSetUserAccessRestrictions({
    owner: owner,
    repo: repo,
    branch: branch,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Rename a branch
 * @request POST :/repos/{owner}/{repo}/branches/{branch}/rename
 * @allowrelaxedtypes
 */
export async function postReposReposRenameBranch(
  owner: string,
  repo: string,
  branch: string,
  /** Request body */
  data: {
    /** The new name of the branch. */
    new_name: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<BranchWithProtection> {
  const result = await api.repos.reposRenameBranch({
    owner: owner,
    repo: repo,
    branch: branch,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a check run
 * @request POST :/repos/{owner}/{repo}/check-runs
 * @allowrelaxedtypes
 */
export async function postReposChecksCreate(
  owner: string,
  repo: string,
  /** Request body */
  data: (
    | {
        status: "completed";
        [key: string]: any;
      }
    | {
        status?: "queued" | "in_progress";
        [key: string]: any;
      }
  ) & {
    /**
     * Displays a button on GitHub that can be clicked to alert your app to do additional tasks. For example, a code linting app can display a button that automatically fixes detected errors. The button created in this object is displayed after the check run completes. When a user clicks the button, GitHub sends the [`check_run.requested_action` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) to your app. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/rest/reference/checks#check-runs-and-requested-actions)."
     * @maxItems 3
     */
    actions?: {
      /**
       * A short explanation of what this action would do. The maximum size is 40 characters.
       * @maxLength 40
       */
      description: string;
      /**
       * A reference for the action on the integrator's system. The maximum size is 20 characters.
       * @maxLength 20
       */
      identifier: string;
      /**
       * The text to be displayed on a button in the web UI. The maximum size is 20 characters.
       * @maxLength 20
       */
      label: string;
    }[];
    /**
     * The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @format date-time
     */
    completed_at?: string;
    /**
     * **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check.
     * **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.
     */
    conclusion?:
      | "action_required"
      | "cancelled"
      | "failure"
      | "neutral"
      | "success"
      | "skipped"
      | "stale"
      | "timed_out";
    /** The URL of the integrator's site that has the full details of the check. If the integrator does not provide this, then the homepage of the GitHub app is used. */
    details_url?: string;
    /** A reference for the run on the integrator's system. */
    external_id?: string;
    /** The SHA of the commit. */
    head_sha: string;
    /** The name of the check. For example, "code-coverage". */
    name: string;
    /** Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. */
    output?: {
      /**
       * Adds information from your analysis to specific lines of code. Annotations are visible on GitHub in the **Checks** and **Files changed** tab of the pull request. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/rest/reference/checks#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about how you can view annotations on GitHub, see "[About status checks](https://docs.github.com/articles/about-status-checks#checks)".
       * @maxItems 50
       */
      annotations?: {
        /** The level of the annotation. */
        annotation_level: "notice" | "warning" | "failure";
        /** The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. */
        end_column?: number;
        /** The end line of the annotation. */
        end_line: number;
        /** A short description of the feedback for these lines of code. The maximum size is 64 KB. */
        message: string;
        /** The path of the file to add an annotation to. For example, `assets/css/main.css`. */
        path: string;
        /** Details about this annotation. The maximum size is 64 KB. */
        raw_details?: string;
        /** The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. Column numbers start at 1. */
        start_column?: number;
        /** The start line of the annotation. Line numbers start at 1. */
        start_line: number;
        /** The title that represents the annotation. The maximum size is 255 characters. */
        title?: string;
      }[];
      /** Adds images to the output displayed in the GitHub pull request UI. */
      images?: {
        /** The alternative text for the image. */
        alt: string;
        /** A short image description. */
        caption?: string;
        /** The full URL of the image. */
        image_url: string;
      }[];
      /**
       * The summary of the check run. This parameter supports Markdown. **Maximum length**: 65535 characters.
       * @maxLength 65535
       */
      summary: string;
      /**
       * The details of the check run. This parameter supports Markdown. **Maximum length**: 65535 characters.
       * @maxLength 65535
       */
      text?: string;
      /** The title of the check run. */
      title: string;
    };
    /**
     * The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @format date-time
     */
    started_at?: string;
    /**
     * The current status.
     * @default "queued"
     */
    status?: "queued" | "in_progress" | "completed";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<CheckRun> {
  const result = await api.repos.checksCreate({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a check run
 * @request GET :/repos/{owner}/{repo}/check-runs/{check_run_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposChecksGet(
  owner: string,
  repo: string,
  /** The unique identifier of the check run. */
  checkRunId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<CheckRun> {
  const result = await api.repos.checksGet({
    owner: owner,
    repo: repo,
    checkRunId: checkRunId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update a check run
 * @request PATCH :/repos/{owner}/{repo}/check-runs/{check_run_id}
 * @allowrelaxedtypes
 */
export async function patchReposChecksUpdate(
  owner: string,
  repo: string,
  checkRunId: number,
  /** Request body */
  data: (
    | {
        status?: "completed";
        [key: string]: any;
      }
    | {
        status?: "queued" | "in_progress";
        [key: string]: any;
      }
  ) & {
    /**
     * Possible further actions the integrator can perform, which a user may trigger. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. See the [`actions` object](https://docs.github.com/rest/reference/checks#actions-object) description. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/rest/reference/checks#check-runs-and-requested-actions)."
     * @maxItems 3
     */
    actions?: {
      /**
       * A short explanation of what this action would do. The maximum size is 40 characters.
       * @maxLength 40
       */
      description: string;
      /**
       * A reference for the action on the integrator's system. The maximum size is 20 characters.
       * @maxLength 20
       */
      identifier: string;
      /**
       * The text to be displayed on a button in the web UI. The maximum size is 20 characters.
       * @maxLength 20
       */
      label: string;
    }[];
    /**
     * The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @format date-time
     */
    completed_at?: string;
    /**
     * **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check.
     * **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.
     */
    conclusion?:
      | "action_required"
      | "cancelled"
      | "failure"
      | "neutral"
      | "success"
      | "skipped"
      | "stale"
      | "timed_out";
    /** The URL of the integrator's site that has the full details of the check. */
    details_url?: string;
    /** A reference for the run on the integrator's system. */
    external_id?: string;
    /** The name of the check. For example, "code-coverage". */
    name?: string;
    /** Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. */
    output?: {
      /**
       * Adds information from your analysis to specific lines of code. Annotations are visible in GitHub's pull request UI. Annotations are visible in GitHub's pull request UI. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/rest/reference/checks#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about annotations in the UI, see "[About status checks](https://docs.github.com/articles/about-status-checks#checks)".
       * @maxItems 50
       */
      annotations?: {
        /** The level of the annotation. */
        annotation_level: "notice" | "warning" | "failure";
        /** The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. */
        end_column?: number;
        /** The end line of the annotation. */
        end_line: number;
        /** A short description of the feedback for these lines of code. The maximum size is 64 KB. */
        message: string;
        /** The path of the file to add an annotation to. For example, `assets/css/main.css`. */
        path: string;
        /** Details about this annotation. The maximum size is 64 KB. */
        raw_details?: string;
        /** The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. Column numbers start at 1. */
        start_column?: number;
        /** The start line of the annotation. Line numbers start at 1. */
        start_line: number;
        /** The title that represents the annotation. The maximum size is 255 characters. */
        title?: string;
      }[];
      /** Adds images to the output displayed in the GitHub pull request UI. */
      images?: {
        /** The alternative text for the image. */
        alt: string;
        /** A short image description. */
        caption?: string;
        /** The full URL of the image. */
        image_url: string;
      }[];
      /**
       * Can contain Markdown.
       * @maxLength 65535
       */
      summary: string;
      /**
       * Can contain Markdown.
       * @maxLength 65535
       */
      text?: string;
      /** **Required**. */
      title?: string;
    };
    /**
     * This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @format date-time
     */
    started_at?: string;
    /** The current status. */
    status?: "queued" | "in_progress" | "completed";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<CheckRun> {
  const result = await api.repos.checksUpdate({
    owner: owner,
    repo: repo,
    checkRunId: checkRunId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List check run annotations
 * @request GET :/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations
 * @readonly
 */
export async function getReposChecksListAnnotations(
  owner: string,
  repo: string,
  checkRunId: number,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<CheckAnnotation[]> {
  const result = await api.repos.checksListAnnotations({
    owner: owner,
    repo: repo,
    checkRunId: checkRunId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Rerequest a check run
 * @request POST :/repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest
 */
export async function postReposChecksRerequestRun(
  owner: string,
  repo: string,
  checkRunId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<EmptyObject> {
  const result = await api.repos.checksRerequestRun({
    owner: owner,
    repo: repo,
    checkRunId: checkRunId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a check suite
 * @request POST :/repos/{owner}/{repo}/check-suites
 * @allowrelaxedtypes
 */
export async function postReposChecksCreateSuite(
  owner: string,
  repo: string,
  /** Request body */
  data: {
    /** The sha of the head commit. */
    head_sha: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<CheckSuite> {
  const result = await api.repos.checksCreateSuite({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update repository preferences for check suites
 * @request PATCH :/repos/{owner}/{repo}/check-suites/preferences
 * @allowrelaxedtypes
 */
export async function patchReposChecksSetSuitesPreferences(
  owner: string,
  repo: string,
  /** Request body */
  data: {
    /** Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default. */
    auto_trigger_checks?: {
      /** The `id` of the GitHub App. */
      app_id: number;
      /**
       * Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository, or `false` to disable them.
       * @default true
       */
      setting: boolean;
    }[];
  },
  headers?: hasuraSdk.JSONValue,
): Promise<CheckSuitePreference> {
  const result = await api.repos.checksSetSuitesPreferences({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a check suite
 * @request GET :/repos/{owner}/{repo}/check-suites/{check_suite_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposChecksGetSuite(
  owner: string,
  repo: string,
  /** The unique identifier of the check suite. */
  checkSuiteId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<CheckSuite> {
  const result = await api.repos.checksGetSuite({
    owner: owner,
    repo: repo,
    checkSuiteId: checkSuiteId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List check runs in a check suite
 * @request GET :/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposChecksListForSuite(
  owner: string,
  repo: string,
  checkSuiteId: number,
  query: {
    /** Returns check runs with the specified `name`. */
    check_name?: string;
    /** Returns check runs with the specified `status`. */
    status?: "queued" | "in_progress" | "completed";
    /** Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs. */
    filter?: "latest" | "all";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  check_runs: CheckRun[];
  total_count: number;
}> {
  const result = await api.repos.checksListForSuite({
    owner: owner,
    repo: repo,
    checkSuiteId: checkSuiteId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Rerequest a check suite
 * @request POST :/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest
 */
export async function postReposChecksRerequestSuite(
  owner: string,
  repo: string,
  checkSuiteId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<EmptyObject> {
  const result = await api.repos.checksRerequestSuite({
    owner: owner,
    repo: repo,
    checkSuiteId: checkSuiteId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List code scanning alerts for a repository
 * @request GET :/repos/{owner}/{repo}/code-scanning/alerts
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposCodeScanningListAlertsForRepo(
  owner: string,
  repo: string,
  query: {
    /** The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both. */
    tool_name?: CodeScanningAnalysisToolName;
    /** The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both. */
    tool_guid?: CodeScanningAnalysisToolGuid;
    /** Page number of the results to fetch. */
    page?: number;
    /** The number of results per page (max 100). */
    per_page?: number;
    /** The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */
    ref?: CodeScanningRef;
    /** The direction to sort the results by. */
    direction?: "asc" | "desc";
    /** The property by which to sort the results. */
    sort?: "created" | "updated";
    /** If specified, only code scanning alerts with this state will be returned. */
    state?: CodeScanningAlertState;
    /** If specified, only code scanning alerts with this severity will be returned. */
    severity?: CodeScanningAlertSeverity;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<CodeScanningAlertItems[]> {
  const result = await api.repos.codeScanningListAlertsForRepo({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a code scanning alert
 * @request GET :/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposCodeScanningGetAlert(
  owner: string,
  repo: string,
  /** The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. */
  alertNumber: AlertNumber,
  headers?: hasuraSdk.JSONValue,
): Promise<CodeScanningAlert> {
  const result = await api.repos.codeScanningGetAlert({
    owner: owner,
    repo: repo,
    alertNumber: alertNumber,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update a code scanning alert
 * @request PATCH :/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}
 * @allowrelaxedtypes
 */
export async function patchReposCodeScanningUpdateAlert(
  owner: string,
  repo: string,
  alertNumber: AlertNumber,
  /** Request body */
  data: {
    /** The dismissal comment associated with the dismissal of the alert. */
    dismissed_comment?: CodeScanningAlertDismissedComment;
    /** **Required when the state is dismissed.** The reason for dismissing or closing the alert. */
    dismissed_reason?: CodeScanningAlertDismissedReason;
    /** Sets the state of the code scanning alert. You must provide `dismissed_reason` when you set the state to `dismissed`. */
    state: CodeScanningAlertSetState;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<CodeScanningAlert> {
  const result = await api.repos.codeScanningUpdateAlert({
    owner: owner,
    repo: repo,
    alertNumber: alertNumber,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List instances of a code scanning alert
 * @request GET :/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposCodeScanningListAlertInstances(
  owner: string,
  repo: string,
  alertNumber: AlertNumber,
  query: {
    /** Page number of the results to fetch. */
    page?: number;
    /** The number of results per page (max 100). */
    per_page?: number;
    /** The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */
    ref?: CodeScanningRef;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<CodeScanningAlertInstance[]> {
  const result = await api.repos.codeScanningListAlertInstances({
    owner: owner,
    repo: repo,
    alertNumber: alertNumber,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List code scanning analyses for a repository
 * @request GET :/repos/{owner}/{repo}/code-scanning/analyses
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposCodeScanningListRecentAnalyses(
  owner: string,
  repo: string,
  query: {
    /** The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both. */
    tool_name?: CodeScanningAnalysisToolName;
    /** The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both. */
    tool_guid?: CodeScanningAnalysisToolGuid;
    /** Page number of the results to fetch. */
    page?: number;
    /** The number of results per page (max 100). */
    per_page?: number;
    /** The Git reference for the analyses you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */
    ref?: CodeScanningRef;
    /** Filter analyses belonging to the same SARIF upload. */
    sarif_id?: CodeScanningAnalysisSarifId;
    /** The direction to sort the results by. */
    direction?: "asc" | "desc";
    /** The property by which to sort the results. */
    sort?: "created";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<CodeScanningAnalysis[]> {
  const result = await api.repos.codeScanningListRecentAnalyses({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a code scanning analysis from a repository
 * @request DELETE :/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}
 */
export async function deleteReposCodeScanningDeleteAnalysis(
  owner: string,
  repo: string,
  /** The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation. */
  analysisId: number,
  query: {
    /** Allow deletion if the specified analysis is the last in a set. If you attempt to delete the final analysis in a set without setting this parameter to `true`, you'll get a 400 response with the message: `Analysis is last of its type and deletion may result in the loss of historical alert data. Please specify confirm_delete.` */
    confirm_delete?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<CodeScanningAnalysisDeletion> {
  const result = await api.repos.codeScanningDeleteAnalysis({
    owner: owner,
    repo: repo,
    analysisId: analysisId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a code scanning analysis for a repository
 * @request GET :/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}
 * @readonly
 */
export async function getReposCodeScanningGetAnalysis(
  owner: string,
  repo: string,
  /** The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation. */
  analysisId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<CodeScanningAnalysis> {
  const result = await api.repos.codeScanningGetAnalysis({
    owner: owner,
    repo: repo,
    analysisId: analysisId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List CodeQL databases for a repository
 * @request GET :/repos/{owner}/{repo}/code-scanning/codeql/databases
 * @readonly
 */
export async function getReposCodeScanningListCodeqlDatabases(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<CodeScanningCodeqlDatabase[]> {
  const result = await api.repos.codeScanningListCodeqlDatabases({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a CodeQL database for a repository
 * @request GET :/repos/{owner}/{repo}/code-scanning/codeql/databases/{language}
 * @readonly
 */
export async function getReposCodeScanningGetCodeqlDatabase(
  owner: string,
  repo: string,
  /** The language of the CodeQL database. */
  language: string,
  headers?: hasuraSdk.JSONValue,
): Promise<CodeScanningCodeqlDatabase> {
  const result = await api.repos.codeScanningGetCodeqlDatabase({
    owner: owner,
    repo: repo,
    language: language,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Upload an analysis as SARIF data
 * @request POST :/repos/{owner}/{repo}/code-scanning/sarifs
 */
export async function postReposCodeScanningUploadSarif(
  owner: string,
  repo: string,
  /** Request body */
  data: {
    /**
     * The base directory used in the analysis, as it appears in the SARIF file.
     * This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.
     * @format uri
     * @example "file:///github/workspace/"
     */
    checkout_uri?: string;
    /** The SHA of the commit to which the analysis you are uploading relates. */
    commit_sha: CodeScanningAnalysisCommitSha;
    /**
     * The full Git reference, formatted as `refs/heads/<branch name>`,
     * `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
     */
    ref: CodeScanningRef;
    /** A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see "[SARIF support for code scanning](https://docs.github.com/code-security/secure-coding/sarif-support-for-code-scanning)." */
    sarif: CodeScanningAnalysisSarifFile;
    /**
     * The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @format date-time
     */
    started_at?: string;
    /** The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to "API". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`. */
    tool_name?: string;
    /**
     * Whether the SARIF file will be validated according to the code scanning specifications.
     * This parameter is intended to help integrators ensure that the uploaded SARIF files are correctly rendered by code scanning.
     */
    validate?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<CodeScanningSarifsReceipt> {
  const result = await api.repos.codeScanningUploadSarif({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get information about a SARIF upload
 * @request GET :/repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposCodeScanningGetSarif(
  owner: string,
  repo: string,
  /** The SARIF ID obtained after uploading. */
  sarifId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<CodeScanningSarifsStatus> {
  const result = await api.repos.codeScanningGetSarif({
    owner: owner,
    repo: repo,
    sarifId: sarifId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List CODEOWNERS errors
 * @request GET :/repos/{owner}/{repo}/codeowners/errors
 * @readonly
 */
export async function getReposReposCodeownersErrors(
  owner: string,
  repo: string,
  query: {
    /** A branch, tag or commit name used to determine which version of the CODEOWNERS file to use. Default: the repository's default branch (e.g. `main`) */
    ref?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<CodeownersErrors> {
  const result = await api.repos.reposCodeownersErrors({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List codespaces in a repository for the authenticated user
 * @request GET :/repos/{owner}/{repo}/codespaces
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposCodespacesListInRepositoryForAuthenticatedUser(
  owner: string,
  repo: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  codespaces: Codespace[];
  total_count: number;
}> {
  const result = await api.repos.codespacesListInRepositoryForAuthenticatedUser(
    {
      owner: owner,
      repo: repo,
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    },
  );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a codespace in a repository
 * @request POST :/repos/{owner}/{repo}/codespaces
 * @allowrelaxedtypes
 */
export async function postReposCodespacesCreateWithRepoForAuthenticatedUser(
  owner: string,
  repo: string,
  /** Request body */
  data: {
    /** IP for location auto-detection when proxying a request */
    client_ip?: string;
    /** Path to devcontainer.json config to use for this codespace */
    devcontainer_path?: string;
    /** Display name for this codespace */
    display_name?: string;
    /** Time in minutes before codespace stops from inactivity */
    idle_timeout_minutes?: number;
    /** Location for this codespace. Assigned by IP if not provided */
    location?: string;
    /** Machine type to use for this codespace */
    machine?: string;
    /** Whether to authorize requested permissions from devcontainer.json */
    multi_repo_permissions_opt_out?: boolean;
    /** Git ref (typically a branch name) for this codespace */
    ref?: string;
    /** Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days). */
    retention_period_minutes?: number;
    /** Working directory for this codespace */
    working_directory?: string;
  } | null,
  headers?: hasuraSdk.JSONValue,
): Promise<Codespace> {
  const result = await api.repos.codespacesCreateWithRepoForAuthenticatedUser({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List devcontainer configurations in a repository for the authenticated user
 * @request GET :/repos/{owner}/{repo}/codespaces/devcontainers
 * @readonly
 */
export async function getReposCodespacesListDevcontainersInRepositoryForAuthenticatedUser(
  owner: string,
  repo: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  devcontainers: {
    name?: string;
    path: string;
  }[];
  total_count: number;
}> {
  const result =
    await api.repos.codespacesListDevcontainersInRepositoryForAuthenticatedUser(
      {
        owner: owner,
        repo: repo,
        query: query,
        params: {
          headers: (headers?.value as Record<string, string>) ?? undefined,
        },
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List available machine types for a repository
 * @request GET :/repos/{owner}/{repo}/codespaces/machines
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposCodespacesRepoMachinesForAuthenticatedUser(
  owner: string,
  repo: string,
  query: {
    /** The location to check for available machines. Assigned by IP if not provided. */
    location?: string;
    /** IP for location auto-detection when proxying a request */
    client_ip?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  machines: CodespaceMachine[];
  total_count: number;
}> {
  const result = await api.repos.codespacesRepoMachinesForAuthenticatedUser({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get default attributes for a codespace
 * @request GET :/repos/{owner}/{repo}/codespaces/new
 * @readonly
 */
export async function getReposCodespacesPreFlightWithRepoForAuthenticatedUser(
  owner: string,
  repo: string,
  query: {
    /** The branch or commit to check for a default devcontainer path. If not specified, the default branch will be checked. */
    ref?: string;
    /** An alternative IP for default location auto-detection, such as when proxying a request. */
    client_ip?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  /** A GitHub user. */
  billable_owner?: SimpleUser;
  defaults?: {
    devcontainer_path: string | null;
    location: string;
  };
}> {
  const result =
    await api.repos.codespacesPreFlightWithRepoForAuthenticatedUser({
      owner: owner,
      repo: repo,
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List repository secrets
 * @request GET :/repos/{owner}/{repo}/codespaces/secrets
 * @readonly
 */
export async function getReposCodespacesListRepoSecrets(
  owner: string,
  repo: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  secrets: RepoCodespacesSecret[];
  total_count: number;
}> {
  const result = await api.repos.codespacesListRepoSecrets({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a repository public key
 * @request GET :/repos/{owner}/{repo}/codespaces/secrets/public-key
 * @readonly
 */
export async function getReposCodespacesGetRepoPublicKey(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<CodespacesPublicKey> {
  const result = await api.repos.codespacesGetRepoPublicKey({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a repository secret
 * @request DELETE :/repos/{owner}/{repo}/codespaces/secrets/{secret_name}
 */
export async function deleteReposCodespacesDeleteRepoSecret(
  owner: string,
  repo: string,
  secretName: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.codespacesDeleteRepoSecret({
    owner: owner,
    repo: repo,
    secretName: secretName,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a repository secret
 * @request GET :/repos/{owner}/{repo}/codespaces/secrets/{secret_name}
 * @readonly
 */
export async function getReposCodespacesGetRepoSecret(
  owner: string,
  repo: string,
  secretName: string,
  headers?: hasuraSdk.JSONValue,
): Promise<RepoCodespacesSecret> {
  const result = await api.repos.codespacesGetRepoSecret({
    owner: owner,
    repo: repo,
    secretName: secretName,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create or update a repository secret
 * @request PUT :/repos/{owner}/{repo}/codespaces/secrets/{secret_name}
 */
export async function putReposCodespacesCreateOrUpdateRepoSecret(
  owner: string,
  repo: string,
  secretName: string,
  /** Request body */
  data: {
    /**
     * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/reference/codespaces#get-a-repository-public-key) endpoint.
     * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
     */
    encrypted_value?: string;
    /** ID of the key you used to encrypt the secret. */
    key_id?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<EmptyObject> {
  const result = await api.repos.codespacesCreateOrUpdateRepoSecret({
    owner: owner,
    repo: repo,
    secretName: secretName,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List repository collaborators
 * @request GET :/repos/{owner}/{repo}/collaborators
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposReposListCollaborators(
  owner: string,
  repo: string,
  query: {
    /** Filter collaborators returned by their affiliation. `outside` means all outside collaborators of an organization-owned repository. `direct` means all collaborators with permissions to an organization-owned repository, regardless of organization membership status. `all` means all collaborators the authenticated user can see. */
    affiliation?: "outside" | "direct" | "all";
    /** Filter collaborators by the permissions they have on the repository. If not specified, all collaborators will be returned. */
    permission?: "pull" | "triage" | "push" | "maintain" | "admin";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Collaborator[]> {
  const result = await api.repos.reposListCollaborators({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Remove a repository collaborator
 * @request DELETE :/repos/{owner}/{repo}/collaborators/{username}
 */
export async function deleteReposReposRemoveCollaborator(
  owner: string,
  repo: string,
  username: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.reposRemoveCollaborator({
    owner: owner,
    repo: repo,
    username: username,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Check if a user is a repository collaborator
 * @request GET :/repos/{owner}/{repo}/collaborators/{username}
 * @readonly
 */
export async function getReposReposCheckCollaborator(
  owner: string,
  repo: string,
  username: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.reposCheckCollaborator({
    owner: owner,
    repo: repo,
    username: username,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Add a repository collaborator
 * @request PUT :/repos/{owner}/{repo}/collaborators/{username}
 * @allowrelaxedtypes
 */
export async function putReposReposAddCollaborator(
  owner: string,
  repo: string,
  username: string,
  /** Request body */
  data?: {
    /**
     * The permission to grant the collaborator. **Only valid on organization-owned repositories.** We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any.
     * @default "push"
     */
    permission?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<RepositoryInvitation> {
  const result = await api.repos.reposAddCollaborator({
    owner: owner,
    repo: repo,
    username: username,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get repository permissions for a user
 * @request GET :/repos/{owner}/{repo}/collaborators/{username}/permission
 * @readonly
 */
export async function getReposReposGetCollaboratorPermissionLevel(
  owner: string,
  repo: string,
  username: string,
  headers?: hasuraSdk.JSONValue,
): Promise<RepositoryCollaboratorPermission> {
  const result = await api.repos.reposGetCollaboratorPermissionLevel({
    owner: owner,
    repo: repo,
    username: username,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List commit comments for a repository
 * @request GET :/repos/{owner}/{repo}/comments
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposReposListCommitCommentsForRepo(
  owner: string,
  repo: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<CommitComment[]> {
  const result = await api.repos.reposListCommitCommentsForRepo({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a commit comment
 * @request DELETE :/repos/{owner}/{repo}/comments/{comment_id}
 */
export async function deleteReposReposDeleteCommitComment(
  owner: string,
  repo: string,
  commentId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.reposDeleteCommitComment({
    owner: owner,
    repo: repo,
    commentId: commentId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a commit comment
 * @request GET :/repos/{owner}/{repo}/comments/{comment_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposReposGetCommitComment(
  owner: string,
  repo: string,
  commentId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<CommitComment> {
  const result = await api.repos.reposGetCommitComment({
    owner: owner,
    repo: repo,
    commentId: commentId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update a commit comment
 * @request PATCH :/repos/{owner}/{repo}/comments/{comment_id}
 * @allowrelaxedtypes
 */
export async function patchReposReposUpdateCommitComment(
  owner: string,
  repo: string,
  commentId: number,
  /** Request body */
  data: {
    /** The contents of the comment */
    body: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<CommitComment> {
  const result = await api.repos.reposUpdateCommitComment({
    owner: owner,
    repo: repo,
    commentId: commentId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List reactions for a commit comment
 * @request GET :/repos/{owner}/{repo}/comments/{comment_id}/reactions
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposReactionsListForCommitComment(
  owner: string,
  repo: string,
  commentId: number,
  query: {
    /** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a commit comment. */
    content?:
      | "+1"
      | "-1"
      | "laugh"
      | "confused"
      | "heart"
      | "hooray"
      | "rocket"
      | "eyes";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Reaction[]> {
  const result = await api.repos.reactionsListForCommitComment({
    owner: owner,
    repo: repo,
    commentId: commentId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create reaction for a commit comment
 * @request POST :/repos/{owner}/{repo}/comments/{comment_id}/reactions
 * @allowrelaxedtypes
 */
export async function postReposReactionsCreateForCommitComment(
  owner: string,
  repo: string,
  commentId: number,
  /** Request body */
  data: {
    /** The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the commit comment. */
    content:
      | "+1"
      | "-1"
      | "laugh"
      | "confused"
      | "heart"
      | "hooray"
      | "rocket"
      | "eyes";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Reaction> {
  const result = await api.repos.reactionsCreateForCommitComment({
    owner: owner,
    repo: repo,
    commentId: commentId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a commit comment reaction
 * @request DELETE :/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}
 */
export async function deleteReposReactionsDeleteForCommitComment(
  owner: string,
  repo: string,
  commentId: number,
  reactionId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.reactionsDeleteForCommitComment({
    owner: owner,
    repo: repo,
    commentId: commentId,
    reactionId: reactionId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List commits
 * @request GET :/repos/{owner}/{repo}/commits
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposReposListCommits(
  owner: string,
  repo: string,
  query: {
    /** SHA or branch to start listing commits from. Default: the repository’s default branch (usually `main`). */
    sha?: string;
    /** Only commits containing this file path will be returned. */
    path?: string;
    /** GitHub login or email address by which to filter by commit author. */
    author?: string;
    /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
    since?: string;
    /** Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
    until?: string;
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Commit[]> {
  const result = await api.repos.reposListCommits({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List branches for HEAD commit
 * @request GET :/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head
 * @readonly
 */
export async function getReposReposListBranchesForHeadCommit(
  owner: string,
  repo: string,
  /** The SHA of the commit. */
  commitSha: string,
  headers?: hasuraSdk.JSONValue,
): Promise<BranchShort[]> {
  const result = await api.repos.reposListBranchesForHeadCommit({
    owner: owner,
    repo: repo,
    commitSha: commitSha,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List commit comments
 * @request GET :/repos/{owner}/{repo}/commits/{commit_sha}/comments
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposReposListCommentsForCommit(
  owner: string,
  repo: string,
  commitSha: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<CommitComment[]> {
  const result = await api.repos.reposListCommentsForCommit({
    owner: owner,
    repo: repo,
    commitSha: commitSha,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a commit comment
 * @request POST :/repos/{owner}/{repo}/commits/{commit_sha}/comments
 * @allowrelaxedtypes
 */
export async function postReposReposCreateCommitComment(
  owner: string,
  repo: string,
  commitSha: string,
  /** Request body */
  data: {
    /** The contents of the comment. */
    body: string;
    /** **Deprecated**. Use **position** parameter instead. Line number in the file to comment on. */
    line?: number;
    /** Relative path of the file to comment on. */
    path?: string;
    /** Line index in the diff to comment on. */
    position?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<CommitComment> {
  const result = await api.repos.reposCreateCommitComment({
    owner: owner,
    repo: repo,
    commitSha: commitSha,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List pull requests associated with a commit
 * @request GET :/repos/{owner}/{repo}/commits/{commit_sha}/pulls
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposReposListPullRequestsAssociatedWithCommit(
  owner: string,
  repo: string,
  commitSha: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<PullRequestSimple[]> {
  const result = await api.repos.reposListPullRequestsAssociatedWithCommit({
    owner: owner,
    repo: repo,
    commitSha: commitSha,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a commit
 * @request GET :/repos/{owner}/{repo}/commits/{ref}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposReposGetCommit(
  owner: string,
  repo: string,
  /** ref parameter */
  ref: string,
  query: {
    /** Page number of the results to fetch. */
    page?: number;
    /** The number of results per page (max 100). */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Commit> {
  const result = await api.repos.reposGetCommit({
    owner: owner,
    repo: repo,
    ref: ref,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List check runs for a Git reference
 * @request GET :/repos/{owner}/{repo}/commits/{ref}/check-runs
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposChecksListForRef(
  owner: string,
  repo: string,
  /** ref parameter */
  ref: string,
  query: {
    /** Returns check runs with the specified `name`. */
    check_name?: string;
    /** Returns check runs with the specified `status`. */
    status?: "queued" | "in_progress" | "completed";
    /** Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs. */
    filter?: "latest" | "all";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
    app_id?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  check_runs: CheckRun[];
  total_count: number;
}> {
  const result = await api.repos.checksListForRef({
    owner: owner,
    repo: repo,
    ref: ref,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List check suites for a Git reference
 * @request GET :/repos/{owner}/{repo}/commits/{ref}/check-suites
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposChecksListSuitesForRef(
  owner: string,
  repo: string,
  /** ref parameter */
  ref: string,
  query: {
    /** Filters check suites by GitHub App `id`. */
    app_id?: number;
    /** Returns check runs with the specified `name`. */
    check_name?: string;
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  check_suites: CheckSuite[];
  total_count: number;
}> {
  const result = await api.repos.checksListSuitesForRef({
    owner: owner,
    repo: repo,
    ref: ref,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the combined status for a specific reference
 * @request GET :/repos/{owner}/{repo}/commits/{ref}/status
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposReposGetCombinedStatusForRef(
  owner: string,
  repo: string,
  /** ref parameter */
  ref: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<CombinedCommitStatus> {
  const result = await api.repos.reposGetCombinedStatusForRef({
    owner: owner,
    repo: repo,
    ref: ref,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List commit statuses for a reference
 * @request GET :/repos/{owner}/{repo}/commits/{ref}/statuses
 * @readonly
 */
export async function getReposReposListCommitStatusesForRef(
  owner: string,
  repo: string,
  /** ref parameter */
  ref: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Status[]> {
  const result = await api.repos.reposListCommitStatusesForRef({
    owner: owner,
    repo: repo,
    ref: ref,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get community profile metrics
 * @request GET :/repos/{owner}/{repo}/community/profile
 * @readonly
 */
export async function getReposReposGetCommunityProfileMetrics(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<CommunityProfile> {
  const result = await api.repos.reposGetCommunityProfileMetrics({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Compare two commits
 * @request GET :/repos/{owner}/{repo}/compare/{basehead}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposReposCompareCommits(
  owner: string,
  repo: string,
  /** The base branch and head branch to compare. This parameter expects the format `BASE...HEAD`. Both must be branch names in `repo`. To compare with a branch that exists in a different repository in the same network as `repo`, the `basehead` parameter expects the format `USERNAME:BASE...USERNAME:HEAD`. */
  basehead: string,
  query: {
    /** Page number of the results to fetch. */
    page?: number;
    /** The number of results per page (max 100). */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<CommitComparison> {
  const result = await api.repos.reposCompareCommits({
    owner: owner,
    repo: repo,
    basehead: basehead,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a file
 * @request DELETE :/repos/{owner}/{repo}/contents/{path}
 */
export async function deleteReposReposDeleteFile(
  owner: string,
  repo: string,
  /** path parameter */
  path: string,
  /** Request body */
  data: {
    /** object containing information about the author. */
    author?: {
      /** The email of the author (or committer) of the commit */
      email?: string;
      /** The name of the author (or committer) of the commit */
      name?: string;
    };
    /** The branch name. Default: the repository’s default branch (usually `master`) */
    branch?: string;
    /** object containing information about the committer. */
    committer?: {
      /** The email of the author (or committer) of the commit */
      email?: string;
      /** The name of the author (or committer) of the commit */
      name?: string;
    };
    /** The commit message. */
    message: string;
    /** The blob SHA of the file being deleted. */
    sha: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<FileCommit> {
  const result = await api.repos.reposDeleteFile({
    owner: owner,
    repo: repo,
    path: path,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get repository content
 * @request GET :/repos/{owner}/{repo}/contents/{path}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposReposGetContent(
  owner: string,
  repo: string,
  /** path parameter */
  path: string,
  query: {
    /** The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`) */
    ref?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<ContentDirectory | ContentFile | ContentSymlink | ContentSubmodule> {
  const result = await api.repos.reposGetContent({
    owner: owner,
    repo: repo,
    path: path,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create or update file contents
 * @request PUT :/repos/{owner}/{repo}/contents/{path}
 */
export async function putReposReposCreateOrUpdateFileContents(
  owner: string,
  repo: string,
  /** path parameter */
  path: string,
  /** Request body */
  data: {
    /** The author of the file. Default: The `committer` or the authenticated user if you omit `committer`. */
    author?: {
      /** @example ""2013-01-15T17:13:22+05:00"" */
      date?: string;
      /** The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted. */
      email: string;
      /** The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted. */
      name: string;
    };
    /** The branch name. Default: the repository’s default branch (usually `master`) */
    branch?: string;
    /** The person that committed the file. Default: the authenticated user. */
    committer?: {
      /** @example ""2013-01-05T13:13:22+05:00"" */
      date?: string;
      /** The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted. */
      email: string;
      /** The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted. */
      name: string;
    };
    /** The new file content, using Base64 encoding. */
    content: string;
    /** The commit message. */
    message: string;
    /** **Required if you are updating a file**. The blob SHA of the file being replaced. */
    sha?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<FileCommit> {
  const result = await api.repos.reposCreateOrUpdateFileContents({
    owner: owner,
    repo: repo,
    path: path,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List repository contributors
 * @request GET :/repos/{owner}/{repo}/contributors
 * @readonly
 */
export async function getReposReposListContributors(
  owner: string,
  repo: string,
  query: {
    /** Set to `1` or `true` to include anonymous contributors in results. */
    anon?: string;
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Contributor[]> {
  const result = await api.repos.reposListContributors({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List Dependabot alerts for a repository
 * @request GET :/repos/{owner}/{repo}/dependabot/alerts
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposDependabotListAlertsForRepo(
  owner: string,
  repo: string,
  query: {
    /** A comma-separated list of states. If specified, only alerts with these states will be returned.

Can be: `dismissed`, `fixed`, `open` */
    state?: string;
    /** A comma-separated list of severities. If specified, only alerts with these severities will be returned.

Can be: `low`, `medium`, `high`, `critical` */
    severity?: string;
    /** A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.

Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust` */
    ecosystem?: string;
    /** A comma-separated list of package names. If specified, only alerts for these packages will be returned. */
    package?: string;
    /** A comma-separated list of full manifest paths. If specified, only alerts for these manifests will be returned. */
    manifest?: string;
    /** The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned. */
    scope?: "development" | "runtime";
    /** The property by which to sort the results.
`created` means when the alert was created.
`updated` means when the alert's state last changed. */
    sort?: "created" | "updated";
    /** The direction to sort the results by. */
    direction?: "asc" | "desc";
    /** **Deprecated**. Page number of the results to fetch. Use cursor-based pagination with `before` or `after` instead. */
    page?: number;
    /** The number of results per page (max 100). */
    per_page?: number;
    /** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results before this cursor. */
    before?: string;
    /** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for results after this cursor. */
    after?: string;
    /** **Deprecated**. The number of results per page (max 100), starting from the first matching result.
This parameter must not be used in combination with `last`.
Instead, use `per_page` in combination with `after` to fetch the first page of results. */
    first?: number;
    /** **Deprecated**. The number of results per page (max 100), starting from the last matching result.
This parameter must not be used in combination with `first`.
Instead, use `per_page` in combination with `before` to fetch the last page of results. */
    last?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<DependabotAlert[]> {
  const result = await api.repos.dependabotListAlertsForRepo({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a Dependabot alert
 * @request GET :/repos/{owner}/{repo}/dependabot/alerts/{alert_number}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposDependabotGetAlert(
  owner: string,
  repo: string,
  /** The number that identifies a Dependabot alert in its repository.
You can find this at the end of the URL for a Dependabot alert within GitHub,
or in `number` fields in the response from the
`GET /repos/{owner}/{repo}/dependabot/alerts` operation. */
  alertNumber: AlertNumber,
  headers?: hasuraSdk.JSONValue,
): Promise<DependabotAlert> {
  const result = await api.repos.dependabotGetAlert({
    owner: owner,
    repo: repo,
    alertNumber: alertNumber,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update a Dependabot alert
 * @request PATCH :/repos/{owner}/{repo}/dependabot/alerts/{alert_number}
 * @allowrelaxedtypes
 */
export async function patchReposDependabotUpdateAlert(
  owner: string,
  repo: string,
  alertNumber: AlertNumber,
  /** Request body */
  data: {
    /**
     * An optional comment associated with dismissing the alert.
     * @maxLength 280
     */
    dismissed_comment?: string;
    /** **Required when `state` is `dismissed`.** A reason for dismissing the alert. */
    dismissed_reason?:
      | "fix_started"
      | "inaccurate"
      | "no_bandwidth"
      | "not_used"
      | "tolerable_risk";
    /**
     * The state of the Dependabot alert.
     * A `dismissed_reason` must be provided when setting the state to `dismissed`.
     */
    state: "dismissed" | "open";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<DependabotAlert> {
  const result = await api.repos.dependabotUpdateAlert({
    owner: owner,
    repo: repo,
    alertNumber: alertNumber,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List repository secrets
 * @request GET :/repos/{owner}/{repo}/dependabot/secrets
 * @readonly
 */
export async function getReposDependabotListRepoSecrets(
  owner: string,
  repo: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  secrets: DependabotSecret[];
  total_count: number;
}> {
  const result = await api.repos.dependabotListRepoSecrets({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a repository public key
 * @request GET :/repos/{owner}/{repo}/dependabot/secrets/public-key
 * @readonly
 */
export async function getReposDependabotGetRepoPublicKey(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<DependabotPublicKey> {
  const result = await api.repos.dependabotGetRepoPublicKey({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a repository secret
 * @request DELETE :/repos/{owner}/{repo}/dependabot/secrets/{secret_name}
 */
export async function deleteReposDependabotDeleteRepoSecret(
  owner: string,
  repo: string,
  secretName: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.dependabotDeleteRepoSecret({
    owner: owner,
    repo: repo,
    secretName: secretName,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a repository secret
 * @request GET :/repos/{owner}/{repo}/dependabot/secrets/{secret_name}
 * @readonly
 */
export async function getReposDependabotGetRepoSecret(
  owner: string,
  repo: string,
  secretName: string,
  headers?: hasuraSdk.JSONValue,
): Promise<DependabotSecret> {
  const result = await api.repos.dependabotGetRepoSecret({
    owner: owner,
    repo: repo,
    secretName: secretName,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create or update a repository secret
 * @request PUT :/repos/{owner}/{repo}/dependabot/secrets/{secret_name}
 */
export async function putReposDependabotCreateOrUpdateRepoSecret(
  owner: string,
  repo: string,
  secretName: string,
  /** Request body */
  data: {
    /**
     * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/reference/dependabot#get-a-repository-public-key) endpoint.
     * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
     */
    encrypted_value?: string;
    /** ID of the key you used to encrypt the secret. */
    key_id?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<EmptyObject> {
  const result = await api.repos.dependabotCreateOrUpdateRepoSecret({
    owner: owner,
    repo: repo,
    secretName: secretName,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a diff of the dependencies between commits
 * @request GET :/repos/{owner}/{repo}/dependency-graph/compare/{basehead}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposDependencyGraphDiffRange(
  owner: string,
  repo: string,
  /** The base and head Git revisions to compare. The Git revisions will be resolved to commit SHAs. Named revisions will be resolved to their corresponding HEAD commits, and an appropriate merge base will be determined. This parameter expects the format `{base}...{head}`. */
  basehead: string,
  query: {
    /** The full path, relative to the repository root, of the dependency manifest file. */
    name?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<DependencyGraphDiff> {
  const result = await api.repos.dependencyGraphDiffRange({
    owner: owner,
    repo: repo,
    basehead: basehead,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a snapshot of dependencies for a repository
 * @request POST :/repos/{owner}/{repo}/dependency-graph/snapshots
 */
export async function postReposDependencyGraphCreateRepositorySnapshot(
  owner: string,
  repo: string,
  /** Request body */
  data: Snapshot,
  headers?: hasuraSdk.JSONValue,
): Promise<{
  /** The time at which the snapshot was created. */
  created_at: string;
  /** ID of the created snapshot. */
  id: number;
  /** A message providing further details about the result, such as why the dependencies were not updated. */
  message: string;
  /** Either "SUCCESS", "ACCEPTED", or "INVALID". "SUCCESS" indicates that the snapshot was successfully created and the repository's dependencies were updated. "ACCEPTED" indicates that the snapshot was successfully created, but the repository's dependencies were not updated. "INVALID" indicates that the snapshot was malformed. */
  result: string;
}> {
  const result = await api.repos.dependencyGraphCreateRepositorySnapshot({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List deployments
 * @request GET :/repos/{owner}/{repo}/deployments
 * @readonly
 */
export async function getReposReposListDeployments(
  owner: string,
  repo: string,
  query: {
    /** The SHA recorded at creation time. */
    sha?: string;
    /** The name of the ref. This can be a branch, tag, or SHA. */
    ref?: string;
    /** The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`). */
    task?: string;
    /** The name of the environment that was deployed to (e.g., `staging` or `production`). */
    environment?: string;
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Deployment[]> {
  const result = await api.repos.reposListDeployments({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a deployment
 * @request POST :/repos/{owner}/{repo}/deployments
 * @allowrelaxedtypes
 */
export async function postReposReposCreateDeployment(
  owner: string,
  repo: string,
  /** Request body */
  data: {
    /**
     * Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.
     * @default true
     */
    auto_merge?: boolean;
    /**
     * Short description of the deployment.
     * @default ""
     */
    description?: string | null;
    /**
     * Name for the target deployment environment (e.g., `production`, `staging`, `qa`).
     * @default "production"
     */
    environment?: string;
    /** JSON payload with extra information about the deployment. */
    payload?: hasuraSdk.JSONValue | string;
    /** Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise. */
    production_environment?: boolean;
    /** The ref to deploy. This can be a branch, tag, or SHA. */
    ref: string;
    /** The [status](https://docs.github.com/rest/commits/statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts. */
    required_contexts?: string[];
    /**
     * Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).
     * @default "deploy"
     */
    task?: string;
    /**
     * Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`
     * @default false
     */
    transient_environment?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Deployment> {
  const result = await api.repos.reposCreateDeployment({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a deployment
 * @request DELETE :/repos/{owner}/{repo}/deployments/{deployment_id}
 */
export async function deleteReposReposDeleteDeployment(
  owner: string,
  repo: string,
  /** deployment_id parameter */
  deploymentId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.reposDeleteDeployment({
    owner: owner,
    repo: repo,
    deploymentId: deploymentId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a deployment
 * @request GET :/repos/{owner}/{repo}/deployments/{deployment_id}
 * @readonly
 */
export async function getReposReposGetDeployment(
  owner: string,
  repo: string,
  deploymentId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Deployment> {
  const result = await api.repos.reposGetDeployment({
    owner: owner,
    repo: repo,
    deploymentId: deploymentId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List deployment statuses
 * @request GET :/repos/{owner}/{repo}/deployments/{deployment_id}/statuses
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposReposListDeploymentStatuses(
  owner: string,
  repo: string,
  deploymentId: number,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<DeploymentStatus[]> {
  const result = await api.repos.reposListDeploymentStatuses({
    owner: owner,
    repo: repo,
    deploymentId: deploymentId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a deployment status
 * @request POST :/repos/{owner}/{repo}/deployments/{deployment_id}/statuses
 * @allowrelaxedtypes
 */
export async function postReposReposCreateDeploymentStatus(
  owner: string,
  repo: string,
  deploymentId: number,
  /** Request body */
  data: {
    /** Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true` */
    auto_inactive?: boolean;
    /**
     * A short description of the status. The maximum description length is 140 characters.
     * @default ""
     */
    description?: string;
    /** Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`. */
    environment?: "production" | "staging" | "qa";
    /**
     * Sets the URL for accessing your environment. Default: `""`
     * @default ""
     */
    environment_url?: string;
    /**
     * The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `""`
     * @default ""
     */
    log_url?: string;
    /** The state of the status. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub. */
    state:
      | "error"
      | "failure"
      | "inactive"
      | "in_progress"
      | "queued"
      | "pending"
      | "success";
    /**
     * The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. **Note:** It's recommended to use the `log_url` parameter, which replaces `target_url`.
     * @default ""
     */
    target_url?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<DeploymentStatus> {
  const result = await api.repos.reposCreateDeploymentStatus({
    owner: owner,
    repo: repo,
    deploymentId: deploymentId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a deployment status
 * @request GET :/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposReposGetDeploymentStatus(
  owner: string,
  repo: string,
  deploymentId: number,
  statusId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<DeploymentStatus> {
  const result = await api.repos.reposGetDeploymentStatus({
    owner: owner,
    repo: repo,
    deploymentId: deploymentId,
    statusId: statusId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a repository dispatch event
 * @request POST :/repos/{owner}/{repo}/dispatches
 */
export async function postReposReposCreateDispatchEvent(
  owner: string,
  repo: string,
  /** Request body */
  data: {
    /** JSON payload with extra information about the webhook event that your action or workflow may use. The maximum number of top-level properties is 10. */
    client_payload?: hasuraSdk.JSONValue;
    /**
     * A custom webhook event name. Must be 100 characters or fewer.
     * @minLength 1
     * @maxLength 100
     */
    event_type: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.reposCreateDispatchEvent({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List environments
 * @request GET :/repos/{owner}/{repo}/environments
 * @readonly
 */
export async function getReposReposGetAllEnvironments(
  owner: string,
  repo: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  environments?: Environment[];
  /**
   * The number of environments in this repository
   * @example 5
   */
  total_count?: number;
}> {
  const result = await api.repos.reposGetAllEnvironments({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete an environment
 * @request DELETE :/repos/{owner}/{repo}/environments/{environment_name}
 */
export async function deleteReposReposDeleteAnEnvironment(
  owner: string,
  repo: string,
  /** The name of the environment. */
  environmentName: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.reposDeleteAnEnvironment({
    owner: owner,
    repo: repo,
    environmentName: environmentName,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get an environment
 * @request GET :/repos/{owner}/{repo}/environments/{environment_name}
 * @readonly
 */
export async function getReposReposGetEnvironment(
  owner: string,
  repo: string,
  environmentName: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Environment> {
  const result = await api.repos.reposGetEnvironment({
    owner: owner,
    repo: repo,
    environmentName: environmentName,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create or update an environment
 * @request PUT :/repos/{owner}/{repo}/environments/{environment_name}
 * @allowrelaxedtypes
 */
export async function putReposReposCreateOrUpdateEnvironment(
  owner: string,
  repo: string,
  environmentName: string,
  /** Request body */
  data?: {
    /** The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`. */
    deployment_branch_policy?: DeploymentBranchPolicySettings;
    /** The people or teams that may review jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed. */
    reviewers?:
      | {
          /**
           * The id of the user or team who can review the deployment
           * @example 4532992
           */
          id?: number;
          /** The type of reviewer. */
          type?: DeploymentReviewerType;
        }[]
      | null;
    /** The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days). */
    wait_timer?: WaitTimer;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Environment> {
  const result = await api.repos.reposCreateOrUpdateEnvironment({
    owner: owner,
    repo: repo,
    environmentName: environmentName,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List deployment branch policies
 * @request GET :/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies
 * @readonly
 */
export async function getReposReposListDeploymentBranchPolicies(
  owner: string,
  repo: string,
  environmentName: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  branch_policies: DeploymentBranchPolicy[];
  /**
   * The number of deployment branch policies for the environment.
   * @example 2
   */
  total_count: number;
}> {
  const result = await api.repos.reposListDeploymentBranchPolicies({
    owner: owner,
    repo: repo,
    environmentName: environmentName,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a deployment branch policy
 * @request POST :/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies
 */
export async function postReposReposCreateDeploymentBranchPolicy(
  owner: string,
  repo: string,
  environmentName: string,
  /** Request body */
  data: DeploymentBranchPolicyNamePattern,
  headers?: hasuraSdk.JSONValue,
): Promise<DeploymentBranchPolicy> {
  const result = await api.repos.reposCreateDeploymentBranchPolicy({
    owner: owner,
    repo: repo,
    environmentName: environmentName,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a deployment branch policy
 * @request DELETE :/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}
 */
export async function deleteReposReposDeleteDeploymentBranchPolicy(
  owner: string,
  repo: string,
  environmentName: string,
  /** The unique identifier of the branch policy. */
  branchPolicyId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.reposDeleteDeploymentBranchPolicy({
    owner: owner,
    repo: repo,
    environmentName: environmentName,
    branchPolicyId: branchPolicyId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a deployment branch policy
 * @request GET :/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}
 * @readonly
 */
export async function getReposReposGetDeploymentBranchPolicy(
  owner: string,
  repo: string,
  environmentName: string,
  branchPolicyId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<DeploymentBranchPolicy> {
  const result = await api.repos.reposGetDeploymentBranchPolicy({
    owner: owner,
    repo: repo,
    environmentName: environmentName,
    branchPolicyId: branchPolicyId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update a deployment branch policy
 * @request PUT :/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}
 */
export async function putReposReposUpdateDeploymentBranchPolicy(
  owner: string,
  repo: string,
  environmentName: string,
  branchPolicyId: number,
  /** Request body */
  data: DeploymentBranchPolicyNamePattern,
  headers?: hasuraSdk.JSONValue,
): Promise<DeploymentBranchPolicy> {
  const result = await api.repos.reposUpdateDeploymentBranchPolicy({
    owner: owner,
    repo: repo,
    environmentName: environmentName,
    branchPolicyId: branchPolicyId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List repository events
 * @request GET :/repos/{owner}/{repo}/events
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposActivityListRepoEvents(
  owner: string,
  repo: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Event[]> {
  const result = await api.repos.activityListRepoEvents({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List forks
 * @request GET :/repos/{owner}/{repo}/forks
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposReposListForks(
  owner: string,
  repo: string,
  query: {
    /** The sort order. `stargazers` will sort by star count. */
    sort?: "newest" | "oldest" | "stargazers" | "watchers";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<MinimalRepository[]> {
  const result = await api.repos.reposListForks({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a fork
 * @request POST :/repos/{owner}/{repo}/forks
 * @allowrelaxedtypes
 */
export async function postReposReposCreateFork(
  owner: string,
  repo: string,
  /** Request body */
  data?: {
    /** When forking from an existing repository, fork with only the default branch. */
    default_branch_only?: boolean;
    /** When forking from an existing repository, a new name for the fork. */
    name?: string;
    /** Optional parameter to specify the organization name if forking into an organization. */
    organization?: string;
  } | null,
  headers?: hasuraSdk.JSONValue,
): Promise<FullRepository> {
  const result = await api.repos.reposCreateFork({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a blob
 * @request POST :/repos/{owner}/{repo}/git/blobs
 */
export async function postReposGitCreateBlob(
  owner: string,
  repo: string,
  /** Request body */
  data: {
    /** The new blob's content. */
    content: string;
    /**
     * The encoding used for `content`. Currently, `"utf-8"` and `"base64"` are supported.
     * @default "utf-8"
     */
    encoding?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<ShortBlob> {
  const result = await api.repos.gitCreateBlob({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a blob
 * @request GET :/repos/{owner}/{repo}/git/blobs/{file_sha}
 * @readonly
 */
export async function getReposGitGetBlob(
  owner: string,
  repo: string,
  fileSha: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Blob> {
  const result = await api.repos.gitGetBlob({
    owner: owner,
    repo: repo,
    fileSha: fileSha,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a commit
 * @request POST :/repos/{owner}/{repo}/git/commits
 */
export async function postReposGitCreateCommit(
  owner: string,
  repo: string,
  /** Request body */
  data: {
    /** Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details. */
    author?: {
      /**
       * Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
       * @format date-time
       */
      date?: string;
      /** The email of the author (or committer) of the commit */
      email: string;
      /** The name of the author (or committer) of the commit */
      name: string;
    };
    /** Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details. */
    committer?: {
      /**
       * Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
       * @format date-time
       */
      date?: string;
      /** The email of the author (or committer) of the commit */
      email?: string;
      /** The name of the author (or committer) of the commit */
      name?: string;
    };
    /** The commit message */
    message: string;
    /** The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided. */
    parents?: string[];
    /** The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits. */
    signature?: string;
    /** The SHA of the tree object this commit points to */
    tree: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<GitCommit> {
  const result = await api.repos.gitCreateCommit({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a commit
 * @request GET :/repos/{owner}/{repo}/git/commits/{commit_sha}
 * @readonly
 */
export async function getReposGitGetCommit(
  owner: string,
  repo: string,
  commitSha: string,
  headers?: hasuraSdk.JSONValue,
): Promise<GitCommit> {
  const result = await api.repos.gitGetCommit({
    owner: owner,
    repo: repo,
    commitSha: commitSha,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List matching references
 * @request GET :/repos/{owner}/{repo}/git/matching-refs/{ref}
 * @readonly
 */
export async function getReposGitListMatchingRefs(
  owner: string,
  repo: string,
  /** ref parameter */
  ref: string,
  headers?: hasuraSdk.JSONValue,
): Promise<GitRef[]> {
  const result = await api.repos.gitListMatchingRefs({
    owner: owner,
    repo: repo,
    ref: ref,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a reference
 * @request GET :/repos/{owner}/{repo}/git/ref/{ref}
 * @readonly
 */
export async function getReposGitGetRef(
  owner: string,
  repo: string,
  /** ref parameter */
  ref: string,
  headers?: hasuraSdk.JSONValue,
): Promise<GitRef> {
  const result = await api.repos.gitGetRef({
    owner: owner,
    repo: repo,
    ref: ref,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a reference
 * @request POST :/repos/{owner}/{repo}/git/refs
 */
export async function postReposGitCreateRef(
  owner: string,
  repo: string,
  /** Request body */
  data: {
    /** @example ""refs/heads/newbranch"" */
    key?: string;
    /** The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected. */
    ref: string;
    /** The SHA1 value for this reference. */
    sha: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<GitRef> {
  const result = await api.repos.gitCreateRef({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a reference
 * @request DELETE :/repos/{owner}/{repo}/git/refs/{ref}
 */
export async function deleteReposGitDeleteRef(
  owner: string,
  repo: string,
  /** ref parameter */
  ref: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.gitDeleteRef({
    owner: owner,
    repo: repo,
    ref: ref,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update a reference
 * @request PATCH :/repos/{owner}/{repo}/git/refs/{ref}
 */
export async function patchReposGitUpdateRef(
  owner: string,
  repo: string,
  /** The name of the fully qualified reference to update. For example, `refs/heads/master`. If the value doesn't start with `refs` and have at least two slashes, it will be rejected. */
  ref: string,
  /** Request body */
  data: {
    /**
     * Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work.
     * @default false
     */
    force?: boolean;
    /** The SHA1 value to set this reference to */
    sha: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<GitRef> {
  const result = await api.repos.gitUpdateRef({
    owner: owner,
    repo: repo,
    ref: ref,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a tag object
 * @request POST :/repos/{owner}/{repo}/git/tags
 * @allowrelaxedtypes
 */
export async function postReposGitCreateTag(
  owner: string,
  repo: string,
  /** Request body */
  data: {
    /** The tag message. */
    message: string;
    /** The SHA of the git object this is tagging. */
    object: string;
    /** The tag's name. This is typically a version (e.g., "v0.0.1"). */
    tag: string;
    /** An object with information about the individual creating the tag. */
    tagger?: {
      /**
       * When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
       * @format date-time
       */
      date?: string;
      /** The email of the author of the tag */
      email: string;
      /** The name of the author of the tag */
      name: string;
    };
    /** The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`. */
    type: "commit" | "tree" | "blob";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<GitTag> {
  const result = await api.repos.gitCreateTag({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a tag
 * @request GET :/repos/{owner}/{repo}/git/tags/{tag_sha}
 * @readonly
 */
export async function getReposGitGetTag(
  owner: string,
  repo: string,
  tagSha: string,
  headers?: hasuraSdk.JSONValue,
): Promise<GitTag> {
  const result = await api.repos.gitGetTag({
    owner: owner,
    repo: repo,
    tagSha: tagSha,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a tree
 * @request POST :/repos/{owner}/{repo}/git/trees
 * @allowrelaxedtypes
 */
export async function postReposGitCreateTree(
  owner: string,
  repo: string,
  /** Request body */
  data: {
    /**
     * The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on.
     * If not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the `tree` parameter will be listed as deleted by the new commit.
     */
    base_tree?: string;
    /** Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure. */
    tree: {
      /**
       * The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.
       *
       * **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
       */
      content?: string;
      /** The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink. */
      mode?: "100644" | "100755" | "040000" | "160000" | "120000";
      /** The file referenced in the tree. */
      path?: string;
      /**
       * The SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the value is `null` then the file will be deleted.
       *
       * **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
       */
      sha?: string | null;
      /** Either `blob`, `tree`, or `commit`. */
      type?: "blob" | "tree" | "commit";
    }[];
  },
  headers?: hasuraSdk.JSONValue,
): Promise<GitTree> {
  const result = await api.repos.gitCreateTree({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a tree
 * @request GET :/repos/{owner}/{repo}/git/trees/{tree_sha}
 * @readonly
 */
export async function getReposGitGetTree(
  owner: string,
  repo: string,
  treeSha: string,
  query: {
    /** Setting this parameter to any value returns the objects or subtrees referenced by the tree specified in `:tree_sha`. For example, setting `recursive` to any of the following will enable returning objects or subtrees: `0`, `1`, `"true"`, and `"false"`. Omit this parameter to prevent recursively returning objects or subtrees. */
    recursive?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<GitTree> {
  const result = await api.repos.gitGetTree({
    owner: owner,
    repo: repo,
    treeSha: treeSha,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List repository webhooks
 * @request GET :/repos/{owner}/{repo}/hooks
 * @readonly
 */
export async function getReposReposListWebhooks(
  owner: string,
  repo: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Hook[]> {
  const result = await api.repos.reposListWebhooks({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a repository webhook
 * @request POST :/repos/{owner}/{repo}/hooks
 * @allowrelaxedtypes
 */
export async function postReposReposCreateWebhook(
  owner: string,
  repo: string,
  /** Request body */
  data?: {
    /**
     * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
     * @default true
     */
    active?: boolean;
    /** Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/repos#create-hook-config-params). */
    config?: {
      /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
      content_type?: WebhookConfigContentType;
      /** @example ""sha256"" */
      digest?: string;
      /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
      insecure_ssl?: WebhookConfigInsecureSsl;
      /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). */
      secret?: WebhookConfigSecret;
      /** @example ""abc"" */
      token?: string;
      /** The URL to which the payloads will be delivered. */
      url?: WebhookConfigUrl;
    };
    /**
     * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
     * @default ["push"]
     */
    events?: string[];
    /** Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`. */
    name?: string;
  } | null,
  headers?: hasuraSdk.JSONValue,
): Promise<Hook> {
  const result = await api.repos.reposCreateWebhook({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a repository webhook
 * @request DELETE :/repos/{owner}/{repo}/hooks/{hook_id}
 */
export async function deleteReposReposDeleteWebhook(
  owner: string,
  repo: string,
  hookId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.reposDeleteWebhook({
    owner: owner,
    repo: repo,
    hookId: hookId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a repository webhook
 * @request GET :/repos/{owner}/{repo}/hooks/{hook_id}
 * @readonly
 */
export async function getReposReposGetWebhook(
  owner: string,
  repo: string,
  hookId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Hook> {
  const result = await api.repos.reposGetWebhook({
    owner: owner,
    repo: repo,
    hookId: hookId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update a repository webhook
 * @request PATCH :/repos/{owner}/{repo}/hooks/{hook_id}
 */
export async function patchReposReposUpdateWebhook(
  owner: string,
  repo: string,
  hookId: number,
  /** Request body */
  data: {
    /**
     * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
     * @default true
     */
    active?: boolean;
    /** Determines a list of events to be added to the list of events that the Hook triggers for. */
    add_events?: string[];
    /** Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/repos#create-hook-config-params). */
    config?: {
      /** @example ""bar@example.com"" */
      address?: string;
      /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
      content_type?: WebhookConfigContentType;
      /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
      insecure_ssl?: WebhookConfigInsecureSsl;
      /** @example ""The Serious Room"" */
      room?: string;
      /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). */
      secret?: WebhookConfigSecret;
      /** The URL to which the payloads will be delivered. */
      url: WebhookConfigUrl;
    };
    /**
     * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.
     * @default ["push"]
     */
    events?: string[];
    /** Determines a list of events to be removed from the list of events that the Hook triggers for. */
    remove_events?: string[];
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Hook> {
  const result = await api.repos.reposUpdateWebhook({
    owner: owner,
    repo: repo,
    hookId: hookId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a webhook configuration for a repository
 * @request GET :/repos/{owner}/{repo}/hooks/{hook_id}/config
 * @readonly
 */
export async function getReposReposGetWebhookConfigForRepo(
  owner: string,
  repo: string,
  hookId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<WebhookConfig> {
  const result = await api.repos.reposGetWebhookConfigForRepo({
    owner: owner,
    repo: repo,
    hookId: hookId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update a webhook configuration for a repository
 * @request PATCH :/repos/{owner}/{repo}/hooks/{hook_id}/config
 */
export async function patchReposReposUpdateWebhookConfigForRepo(
  owner: string,
  repo: string,
  hookId: number,
  /** Request body */
  data?: {
    /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
    content_type?: WebhookConfigContentType;
    /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
    insecure_ssl?: WebhookConfigInsecureSsl;
    /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). */
    secret?: WebhookConfigSecret;
    /** The URL to which the payloads will be delivered. */
    url?: WebhookConfigUrl;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<WebhookConfig> {
  const result = await api.repos.reposUpdateWebhookConfigForRepo({
    owner: owner,
    repo: repo,
    hookId: hookId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List deliveries for a repository webhook
 * @request GET :/repos/{owner}/{repo}/hooks/{hook_id}/deliveries
 * @readonly
 */
export async function getReposReposListWebhookDeliveries(
  owner: string,
  repo: string,
  hookId: number,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors. */
    cursor?: string;
    redelivery?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<HookDeliveryItem[]> {
  const result = await api.repos.reposListWebhookDeliveries({
    owner: owner,
    repo: repo,
    hookId: hookId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a delivery for a repository webhook
 * @request GET :/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}
 * @readonly
 */
export async function getReposReposGetWebhookDelivery(
  owner: string,
  repo: string,
  hookId: number,
  deliveryId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<HookDelivery> {
  const result = await api.repos.reposGetWebhookDelivery({
    owner: owner,
    repo: repo,
    hookId: hookId,
    deliveryId: deliveryId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Redeliver a delivery for a repository webhook
 * @request POST :/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts
 */
export async function postReposReposRedeliverWebhookDelivery(
  owner: string,
  repo: string,
  hookId: number,
  deliveryId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.reposRedeliverWebhookDelivery({
    owner: owner,
    repo: repo,
    hookId: hookId,
    deliveryId: deliveryId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Ping a repository webhook
 * @request POST :/repos/{owner}/{repo}/hooks/{hook_id}/pings
 */
export async function postReposReposPingWebhook(
  owner: string,
  repo: string,
  hookId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.reposPingWebhook({
    owner: owner,
    repo: repo,
    hookId: hookId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Test the push repository webhook
 * @request POST :/repos/{owner}/{repo}/hooks/{hook_id}/tests
 */
export async function postReposReposTestPushWebhook(
  owner: string,
  repo: string,
  hookId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.reposTestPushWebhook({
    owner: owner,
    repo: repo,
    hookId: hookId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Cancel an import
 * @request DELETE :/repos/{owner}/{repo}/import
 */
export async function deleteReposMigrationsCancelImport(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.migrationsCancelImport({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get an import status
 * @request GET :/repos/{owner}/{repo}/import
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposMigrationsGetImportStatus(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Import> {
  const result = await api.repos.migrationsGetImportStatus({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update an import
 * @request PATCH :/repos/{owner}/{repo}/import
 * @allowrelaxedtypes
 */
export async function patchReposMigrationsUpdateImport(
  owner: string,
  repo: string,
  /** Request body */
  data?: {
    /**
     * For a tfvc import, the name of the project that is being imported.
     * @example ""project1""
     */
    tfvc_project?: string;
    /**
     * The type of version control system you are migrating from.
     * @example ""git""
     */
    vcs?: "subversion" | "tfvc" | "git" | "mercurial";
    /** The password to provide to the originating repository. */
    vcs_password?: string;
    /** The username to provide to the originating repository. */
    vcs_username?: string;
  } | null,
  headers?: hasuraSdk.JSONValue,
): Promise<Import> {
  const result = await api.repos.migrationsUpdateImport({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Start an import
 * @request PUT :/repos/{owner}/{repo}/import
 * @allowrelaxedtypes
 */
export async function putReposMigrationsStartImport(
  owner: string,
  repo: string,
  /** Request body */
  data: {
    /** For a tfvc import, the name of the project that is being imported. */
    tfvc_project?: string;
    /** The originating VCS type. Without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response. */
    vcs?: "subversion" | "git" | "mercurial" | "tfvc";
    /** If authentication is required, the password to provide to `vcs_url`. */
    vcs_password?: string;
    /** The URL of the originating repository. */
    vcs_url: string;
    /** If authentication is required, the username to provide to `vcs_url`. */
    vcs_username?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Import> {
  const result = await api.repos.migrationsStartImport({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get commit authors
 * @request GET :/repos/{owner}/{repo}/import/authors
 * @readonly
 */
export async function getReposMigrationsGetCommitAuthors(
  owner: string,
  repo: string,
  query: {
    /** A user ID. Only return users with an ID greater than this ID. */
    since?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<PorterAuthor[]> {
  const result = await api.repos.migrationsGetCommitAuthors({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Map a commit author
 * @request PATCH :/repos/{owner}/{repo}/import/authors/{author_id}
 */
export async function patchReposMigrationsMapCommitAuthor(
  owner: string,
  repo: string,
  authorId: number,
  /** Request body */
  data?: {
    /** The new Git author email. */
    email?: string;
    /** The new Git author name. */
    name?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<PorterAuthor> {
  const result = await api.repos.migrationsMapCommitAuthor({
    owner: owner,
    repo: repo,
    authorId: authorId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get large files
 * @request GET :/repos/{owner}/{repo}/import/large_files
 * @readonly
 */
export async function getReposMigrationsGetLargeFiles(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<PorterLargeFile[]> {
  const result = await api.repos.migrationsGetLargeFiles({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update Git LFS preference
 * @request PATCH :/repos/{owner}/{repo}/import/lfs
 * @allowrelaxedtypes
 */
export async function patchReposMigrationsSetLfsPreference(
  owner: string,
  repo: string,
  /** Request body */
  data: {
    /** Whether to store large files during the import. `opt_in` means large files will be stored using Git LFS. `opt_out` means large files will be removed during the import. */
    use_lfs: "opt_in" | "opt_out";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Import> {
  const result = await api.repos.migrationsSetLfsPreference({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a repository installation for the authenticated app
 * @request GET :/repos/{owner}/{repo}/installation
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposAppsGetRepoInstallation(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Installation> {
  const result = await api.repos.appsGetRepoInstallation({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Remove interaction restrictions for a repository
 * @request DELETE :/repos/{owner}/{repo}/interaction-limits
 */
export async function deleteReposInteractionsRemoveRestrictionsForRepo(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.interactionsRemoveRestrictionsForRepo({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get interaction restrictions for a repository
 * @request GET :/repos/{owner}/{repo}/interaction-limits
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposInteractionsGetRestrictionsForRepo(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<InteractionLimitResponse | hasuraSdk.JSONValue> {
  const result = await api.repos.interactionsGetRestrictionsForRepo({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set interaction restrictions for a repository
 * @request PUT :/repos/{owner}/{repo}/interaction-limits
 * @allowrelaxedtypes
 */
export async function putReposInteractionsSetRestrictionsForRepo(
  owner: string,
  repo: string,
  /** Request body */
  data: InteractionLimit,
  headers?: hasuraSdk.JSONValue,
): Promise<InteractionLimitResponse> {
  const result = await api.repos.interactionsSetRestrictionsForRepo({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List repository invitations
 * @request GET :/repos/{owner}/{repo}/invitations
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposReposListInvitations(
  owner: string,
  repo: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<RepositoryInvitation[]> {
  const result = await api.repos.reposListInvitations({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a repository invitation
 * @request DELETE :/repos/{owner}/{repo}/invitations/{invitation_id}
 */
export async function deleteReposReposDeleteInvitation(
  owner: string,
  repo: string,
  invitationId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.reposDeleteInvitation({
    owner: owner,
    repo: repo,
    invitationId: invitationId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update a repository invitation
 * @request PATCH :/repos/{owner}/{repo}/invitations/{invitation_id}
 * @allowrelaxedtypes
 */
export async function patchReposReposUpdateInvitation(
  owner: string,
  repo: string,
  invitationId: number,
  /** Request body */
  data?: {
    /** The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`. */
    permissions?: "read" | "write" | "maintain" | "triage" | "admin";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<RepositoryInvitation> {
  const result = await api.repos.reposUpdateInvitation({
    owner: owner,
    repo: repo,
    invitationId: invitationId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List repository issues
 * @request GET :/repos/{owner}/{repo}/issues
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposIssuesListForRepo(
  owner: string,
  repo: string,
  query: {
    /** If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned. */
    milestone?: string;
    /** Indicates the state of the issues to return. */
    state?: "open" | "closed" | "all";
    /** Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user. */
    assignee?: string;
    /** The user that created the issue. */
    creator?: string;
    /** A user that's mentioned in the issue. */
    mentioned?: string;
    /** A list of comma separated label names. Example: `bug,ui,@high` */
    labels?: string;
    /** What to sort results by. */
    sort?: "created" | "updated" | "comments";
    /** The direction to sort the results by. */
    direction?: "asc" | "desc";
    /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
    since?: string;
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Issue[]> {
  const result = await api.repos.issuesListForRepo({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create an issue
 * @request POST :/repos/{owner}/{repo}/issues
 * @allowrelaxedtypes
 */
export async function postReposIssuesCreate(
  owner: string,
  repo: string,
  /** Request body */
  data: {
    /** Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_ */
    assignee?: string | null;
    /** Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._ */
    assignees?: string[];
    /** The contents of the issue. */
    body?: string;
    /** Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._ */
    labels?: (
      | string
      | {
          color?: string | null;
          description?: string | null;
          id?: number;
          name?: string;
        }
    )[];
    /** The `number` of the milestone to associate this issue with. _NOTE: Only users with push access can set the milestone for new issues. The milestone is silently dropped otherwise._ */
    milestone?: string | number | null;
    /** The title of the issue. */
    title: string | number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Issue> {
  const result = await api.repos.issuesCreate({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List issue comments for a repository
 * @request GET :/repos/{owner}/{repo}/issues/comments
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposIssuesListCommentsForRepo(
  owner: string,
  repo: string,
  query: {
    /** The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to. */
    sort?: "created" | "updated";
    /** Either `asc` or `desc`. Ignored without the `sort` parameter. */
    direction?: "asc" | "desc";
    /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
    since?: string;
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<IssueComment[]> {
  const result = await api.repos.issuesListCommentsForRepo({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete an issue comment
 * @request DELETE :/repos/{owner}/{repo}/issues/comments/{comment_id}
 */
export async function deleteReposIssuesDeleteComment(
  owner: string,
  repo: string,
  commentId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.issuesDeleteComment({
    owner: owner,
    repo: repo,
    commentId: commentId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get an issue comment
 * @request GET :/repos/{owner}/{repo}/issues/comments/{comment_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposIssuesGetComment(
  owner: string,
  repo: string,
  commentId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<IssueComment> {
  const result = await api.repos.issuesGetComment({
    owner: owner,
    repo: repo,
    commentId: commentId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update an issue comment
 * @request PATCH :/repos/{owner}/{repo}/issues/comments/{comment_id}
 * @allowrelaxedtypes
 */
export async function patchReposIssuesUpdateComment(
  owner: string,
  repo: string,
  commentId: number,
  /** Request body */
  data: {
    /** The contents of the comment. */
    body: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<IssueComment> {
  const result = await api.repos.issuesUpdateComment({
    owner: owner,
    repo: repo,
    commentId: commentId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List reactions for an issue comment
 * @request GET :/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposReactionsListForIssueComment(
  owner: string,
  repo: string,
  commentId: number,
  query: {
    /** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue comment. */
    content?:
      | "+1"
      | "-1"
      | "laugh"
      | "confused"
      | "heart"
      | "hooray"
      | "rocket"
      | "eyes";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Reaction[]> {
  const result = await api.repos.reactionsListForIssueComment({
    owner: owner,
    repo: repo,
    commentId: commentId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create reaction for an issue comment
 * @request POST :/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions
 * @allowrelaxedtypes
 */
export async function postReposReactionsCreateForIssueComment(
  owner: string,
  repo: string,
  commentId: number,
  /** Request body */
  data: {
    /** The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the issue comment. */
    content:
      | "+1"
      | "-1"
      | "laugh"
      | "confused"
      | "heart"
      | "hooray"
      | "rocket"
      | "eyes";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Reaction> {
  const result = await api.repos.reactionsCreateForIssueComment({
    owner: owner,
    repo: repo,
    commentId: commentId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete an issue comment reaction
 * @request DELETE :/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}
 */
export async function deleteReposReactionsDeleteForIssueComment(
  owner: string,
  repo: string,
  commentId: number,
  reactionId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.reactionsDeleteForIssueComment({
    owner: owner,
    repo: repo,
    commentId: commentId,
    reactionId: reactionId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List issue events for a repository
 * @request GET :/repos/{owner}/{repo}/issues/events
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposIssuesListEventsForRepo(
  owner: string,
  repo: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<IssueEvent[]> {
  const result = await api.repos.issuesListEventsForRepo({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get an issue event
 * @request GET :/repos/{owner}/{repo}/issues/events/{event_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposIssuesGetEvent(
  owner: string,
  repo: string,
  eventId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<IssueEvent> {
  const result = await api.repos.issuesGetEvent({
    owner: owner,
    repo: repo,
    eventId: eventId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get an issue
 * @request GET :/repos/{owner}/{repo}/issues/{issue_number}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposIssuesGet(
  owner: string,
  repo: string,
  /** The number that identifies the issue. */
  issueNumber: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Issue> {
  const result = await api.repos.issuesGet({
    owner: owner,
    repo: repo,
    issueNumber: issueNumber,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update an issue
 * @request PATCH :/repos/{owner}/{repo}/issues/{issue_number}
 * @allowrelaxedtypes
 */
export async function patchReposIssuesUpdate(
  owner: string,
  repo: string,
  issueNumber: number,
  /** Request body */
  data?: {
    /** Username to assign to this issue. **This field is deprecated.** */
    assignee?: string | null;
    /** Usernames to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this issue. Send an empty array (`[]`) to clear all assignees from the issue. Only users with push access can set assignees for new issues. Without push access to the repository, assignee changes are silently dropped. */
    assignees?: string[];
    /** The contents of the issue. */
    body?: string | null;
    /** Labels to associate with this issue. Pass one or more labels to _replace_ the set of labels on this issue. Send an empty array (`[]`) to clear all labels from the issue. Only users with push access can set labels for issues. Without push access to the repository, label changes are silently dropped. */
    labels?: (
      | string
      | {
          color?: string | null;
          description?: string | null;
          id?: number;
          name?: string;
        }
    )[];
    /** The `number` of the milestone to associate this issue with or use `null` to remove the current milestone. Only users with push access can set the milestone for issues. Without push access to the repository, milestone changes are silently dropped. */
    milestone?: string | number | null;
    /** The open or closed state of the issue. */
    state?: "open" | "closed";
    /**
     * The reason for the state change. Ignored unless `state` is changed.
     * @example "not_planned"
     */
    state_reason?: "completed" | "not_planned" | "reopened" | null;
    /** The title of the issue. */
    title?: string | number | null;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Issue> {
  const result = await api.repos.issuesUpdate({
    owner: owner,
    repo: repo,
    issueNumber: issueNumber,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Remove assignees from an issue
 * @request DELETE :/repos/{owner}/{repo}/issues/{issue_number}/assignees
 * @allowrelaxedtypes
 */
export async function deleteReposIssuesRemoveAssignees(
  owner: string,
  repo: string,
  issueNumber: number,
  /** Request body */
  data: {
    /** Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._ */
    assignees?: string[];
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Issue> {
  const result = await api.repos.issuesRemoveAssignees({
    owner: owner,
    repo: repo,
    issueNumber: issueNumber,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Add assignees to an issue
 * @request POST :/repos/{owner}/{repo}/issues/{issue_number}/assignees
 * @allowrelaxedtypes
 */
export async function postReposIssuesAddAssignees(
  owner: string,
  repo: string,
  issueNumber: number,
  /** Request body */
  data?: {
    /** Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._ */
    assignees?: string[];
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Issue> {
  const result = await api.repos.issuesAddAssignees({
    owner: owner,
    repo: repo,
    issueNumber: issueNumber,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Check if a user can be assigned to a issue
 * @request GET :/repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}
 * @readonly
 */
export async function getReposIssuesCheckUserCanBeAssignedToIssue(
  owner: string,
  repo: string,
  issueNumber: number,
  assignee: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.issuesCheckUserCanBeAssignedToIssue({
    owner: owner,
    repo: repo,
    issueNumber: issueNumber,
    assignee: assignee,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List issue comments
 * @request GET :/repos/{owner}/{repo}/issues/{issue_number}/comments
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposIssuesListComments(
  owner: string,
  repo: string,
  issueNumber: number,
  query: {
    /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
    since?: string;
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<IssueComment[]> {
  const result = await api.repos.issuesListComments({
    owner: owner,
    repo: repo,
    issueNumber: issueNumber,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create an issue comment
 * @request POST :/repos/{owner}/{repo}/issues/{issue_number}/comments
 * @allowrelaxedtypes
 */
export async function postReposIssuesCreateComment(
  owner: string,
  repo: string,
  issueNumber: number,
  /** Request body */
  data: {
    /** The contents of the comment. */
    body: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<IssueComment> {
  const result = await api.repos.issuesCreateComment({
    owner: owner,
    repo: repo,
    issueNumber: issueNumber,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List issue events
 * @request GET :/repos/{owner}/{repo}/issues/{issue_number}/events
 * @readonly
 */
export async function getReposIssuesListEvents(
  owner: string,
  repo: string,
  issueNumber: number,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<IssueEventForIssue[]> {
  const result = await api.repos.issuesListEvents({
    owner: owner,
    repo: repo,
    issueNumber: issueNumber,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Remove all labels from an issue
 * @request DELETE :/repos/{owner}/{repo}/issues/{issue_number}/labels
 */
export async function deleteReposIssuesRemoveAllLabels(
  owner: string,
  repo: string,
  issueNumber: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.issuesRemoveAllLabels({
    owner: owner,
    repo: repo,
    issueNumber: issueNumber,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List labels for an issue
 * @request GET :/repos/{owner}/{repo}/issues/{issue_number}/labels
 * @readonly
 */
export async function getReposIssuesListLabelsOnIssue(
  owner: string,
  repo: string,
  issueNumber: number,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Label[]> {
  const result = await api.repos.issuesListLabelsOnIssue({
    owner: owner,
    repo: repo,
    issueNumber: issueNumber,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Add labels to an issue
 * @request POST :/repos/{owner}/{repo}/issues/{issue_number}/labels
 * @allowrelaxedtypes
 */
export async function postReposIssuesAddLabels(
  owner: string,
  repo: string,
  issueNumber: number,
  /** Request body */
  data?:
    | {
        /**
         * The names of the labels to add to the issue's existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also replace all of the labels for an issue. For more information, see "[Set labels for an issue](https://docs.github.com/rest/reference/issues#set-labels-for-an-issue)."
         * @minItems 1
         */
        labels?: string[];
      }
    | string[]
    | {
        /** @minItems 1 */
        labels?: {
          name: string;
        }[];
      }
    | {
        name: string;
      }[]
    | string,
  headers?: hasuraSdk.JSONValue,
): Promise<Label[]> {
  const result = await api.repos.issuesAddLabels({
    owner: owner,
    repo: repo,
    issueNumber: issueNumber,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set labels for an issue
 * @request PUT :/repos/{owner}/{repo}/issues/{issue_number}/labels
 * @allowrelaxedtypes
 */
export async function putReposIssuesSetLabels(
  owner: string,
  repo: string,
  issueNumber: number,
  /** Request body */
  data?:
    | {
        /**
         * The names of the labels to set for the issue. The labels you set replace any existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also add labels to the existing labels for an issue. For more information, see "[Add labels to an issue](https://docs.github.com/rest/reference/issues#add-labels-to-an-issue)."
         * @minItems 1
         */
        labels?: string[];
      }
    | string[]
    | {
        /** @minItems 1 */
        labels?: {
          name: string;
        }[];
      }
    | {
        name: string;
      }[]
    | string,
  headers?: hasuraSdk.JSONValue,
): Promise<Label[]> {
  const result = await api.repos.issuesSetLabels({
    owner: owner,
    repo: repo,
    issueNumber: issueNumber,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Remove a label from an issue
 * @request DELETE :/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}
 */
export async function deleteReposIssuesRemoveLabel(
  owner: string,
  repo: string,
  issueNumber: number,
  name: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Label[]> {
  const result = await api.repos.issuesRemoveLabel({
    owner: owner,
    repo: repo,
    issueNumber: issueNumber,
    name: name,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Unlock an issue
 * @request DELETE :/repos/{owner}/{repo}/issues/{issue_number}/lock
 */
export async function deleteReposIssuesUnlock(
  owner: string,
  repo: string,
  issueNumber: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.issuesUnlock({
    owner: owner,
    repo: repo,
    issueNumber: issueNumber,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Lock an issue
 * @request PUT :/repos/{owner}/{repo}/issues/{issue_number}/lock
 * @allowrelaxedtypes
 */
export async function putReposIssuesLock(
  owner: string,
  repo: string,
  issueNumber: number,
  /** Request body */
  data?: {
    /**
     * The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:
     *  * `off-topic`
     *  * `too heated`
     *  * `resolved`
     *  * `spam`
     */
    lock_reason?: "off-topic" | "too heated" | "resolved" | "spam";
  } | null,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.issuesLock({
    owner: owner,
    repo: repo,
    issueNumber: issueNumber,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List reactions for an issue
 * @request GET :/repos/{owner}/{repo}/issues/{issue_number}/reactions
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposReactionsListForIssue(
  owner: string,
  repo: string,
  issueNumber: number,
  query: {
    /** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue. */
    content?:
      | "+1"
      | "-1"
      | "laugh"
      | "confused"
      | "heart"
      | "hooray"
      | "rocket"
      | "eyes";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Reaction[]> {
  const result = await api.repos.reactionsListForIssue({
    owner: owner,
    repo: repo,
    issueNumber: issueNumber,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create reaction for an issue
 * @request POST :/repos/{owner}/{repo}/issues/{issue_number}/reactions
 * @allowrelaxedtypes
 */
export async function postReposReactionsCreateForIssue(
  owner: string,
  repo: string,
  issueNumber: number,
  /** Request body */
  data: {
    /** The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the issue. */
    content:
      | "+1"
      | "-1"
      | "laugh"
      | "confused"
      | "heart"
      | "hooray"
      | "rocket"
      | "eyes";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Reaction> {
  const result = await api.repos.reactionsCreateForIssue({
    owner: owner,
    repo: repo,
    issueNumber: issueNumber,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete an issue reaction
 * @request DELETE :/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}
 */
export async function deleteReposReactionsDeleteForIssue(
  owner: string,
  repo: string,
  issueNumber: number,
  reactionId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.reactionsDeleteForIssue({
    owner: owner,
    repo: repo,
    issueNumber: issueNumber,
    reactionId: reactionId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List timeline events for an issue
 * @request GET :/repos/{owner}/{repo}/issues/{issue_number}/timeline
 * @readonly
 */
export async function getReposIssuesListEventsForTimeline(
  owner: string,
  repo: string,
  issueNumber: number,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<TimelineIssueEvents[]> {
  const result = await api.repos.issuesListEventsForTimeline({
    owner: owner,
    repo: repo,
    issueNumber: issueNumber,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List deploy keys
 * @request GET :/repos/{owner}/{repo}/keys
 * @readonly
 */
export async function getReposReposListDeployKeys(
  owner: string,
  repo: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<DeployKey[]> {
  const result = await api.repos.reposListDeployKeys({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a deploy key
 * @request POST :/repos/{owner}/{repo}/keys
 */
export async function postReposReposCreateDeployKey(
  owner: string,
  repo: string,
  /** Request body */
  data: {
    /** The contents of the key. */
    key: string;
    /**
     * If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.
     *
     * Deploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see "[Repository permission levels for an organization](https://docs.github.com/articles/repository-permission-levels-for-an-organization/)" and "[Permission levels for a user account repository](https://docs.github.com/articles/permission-levels-for-a-user-account-repository/)."
     */
    read_only?: boolean;
    /** A name for the key. */
    title?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<DeployKey> {
  const result = await api.repos.reposCreateDeployKey({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a deploy key
 * @request DELETE :/repos/{owner}/{repo}/keys/{key_id}
 */
export async function deleteReposReposDeleteDeployKey(
  owner: string,
  repo: string,
  /** The unique identifier of the key. */
  keyId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.reposDeleteDeployKey({
    owner: owner,
    repo: repo,
    keyId: keyId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a deploy key
 * @request GET :/repos/{owner}/{repo}/keys/{key_id}
 * @readonly
 */
export async function getReposReposGetDeployKey(
  owner: string,
  repo: string,
  keyId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<DeployKey> {
  const result = await api.repos.reposGetDeployKey({
    owner: owner,
    repo: repo,
    keyId: keyId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List labels for a repository
 * @request GET :/repos/{owner}/{repo}/labels
 * @readonly
 */
export async function getReposIssuesListLabelsForRepo(
  owner: string,
  repo: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Label[]> {
  const result = await api.repos.issuesListLabelsForRepo({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a label
 * @request POST :/repos/{owner}/{repo}/labels
 */
export async function postReposIssuesCreateLabel(
  owner: string,
  repo: string,
  /** Request body */
  data: {
    /** The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`. */
    color?: string;
    /** A short description of the label. Must be 100 characters or fewer. */
    description?: string;
    /** The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)." */
    name: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Label> {
  const result = await api.repos.issuesCreateLabel({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a label
 * @request DELETE :/repos/{owner}/{repo}/labels/{name}
 */
export async function deleteReposIssuesDeleteLabel(
  owner: string,
  repo: string,
  name: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.issuesDeleteLabel({
    owner: owner,
    repo: repo,
    name: name,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a label
 * @request GET :/repos/{owner}/{repo}/labels/{name}
 * @readonly
 */
export async function getReposIssuesGetLabel(
  owner: string,
  repo: string,
  name: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Label> {
  const result = await api.repos.issuesGetLabel({
    owner: owner,
    repo: repo,
    name: name,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update a label
 * @request PATCH :/repos/{owner}/{repo}/labels/{name}
 */
export async function patchReposIssuesUpdateLabel(
  owner: string,
  repo: string,
  name: string,
  /** Request body */
  data?: {
    /** The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`. */
    color?: string;
    /** A short description of the label. Must be 100 characters or fewer. */
    description?: string;
    /** The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)." */
    new_name?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Label> {
  const result = await api.repos.issuesUpdateLabel({
    owner: owner,
    repo: repo,
    name: name,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List repository languages
 * @request GET :/repos/{owner}/{repo}/languages
 * @readonly
 */
export async function getReposReposListLanguages(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Language> {
  const result = await api.repos.reposListLanguages({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Disable Git LFS for a repository
 * @request DELETE :/repos/{owner}/{repo}/lfs
 */
export async function deleteReposReposDisableLfsForRepo(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.reposDisableLfsForRepo({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Enable Git LFS for a repository
 * @request PUT :/repos/{owner}/{repo}/lfs
 */
export async function putReposReposEnableLfsForRepo(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.reposEnableLfsForRepo({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the license for a repository
 * @request GET :/repos/{owner}/{repo}/license
 * @readonly
 */
export async function getReposLicensesGetForRepo(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<LicenseContent> {
  const result = await api.repos.licensesGetForRepo({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Sync a fork branch with the upstream repository
 * @request POST :/repos/{owner}/{repo}/merge-upstream
 * @allowrelaxedtypes
 */
export async function postReposReposMergeUpstream(
  owner: string,
  repo: string,
  /** Request body */
  data: {
    /** The name of the branch which should be updated to match upstream. */
    branch: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<MergedUpstream> {
  const result = await api.repos.reposMergeUpstream({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Merge a branch
 * @request POST :/repos/{owner}/{repo}/merges
 * @allowrelaxedtypes
 */
export async function postReposReposMerge(
  owner: string,
  repo: string,
  /** Request body */
  data: {
    /** The name of the base branch that the head will be merged into. */
    base: string;
    /** Commit message to use for the merge commit. If omitted, a default message will be used. */
    commit_message?: string;
    /** The head to merge. This can be a branch name or a commit SHA1. */
    head: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Commit> {
  const result = await api.repos.reposMerge({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List milestones
 * @request GET :/repos/{owner}/{repo}/milestones
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposIssuesListMilestones(
  owner: string,
  repo: string,
  query: {
    /** The state of the milestone. Either `open`, `closed`, or `all`. */
    state?: "open" | "closed" | "all";
    /** What to sort results by. Either `due_on` or `completeness`. */
    sort?: "due_on" | "completeness";
    /** The direction of the sort. Either `asc` or `desc`. */
    direction?: "asc" | "desc";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Milestone[]> {
  const result = await api.repos.issuesListMilestones({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a milestone
 * @request POST :/repos/{owner}/{repo}/milestones
 * @allowrelaxedtypes
 */
export async function postReposIssuesCreateMilestone(
  owner: string,
  repo: string,
  /** Request body */
  data: {
    /** A description of the milestone. */
    description?: string;
    /**
     * The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @format date-time
     */
    due_on?: string;
    /**
     * The state of the milestone. Either `open` or `closed`.
     * @default "open"
     */
    state?: "open" | "closed";
    /** The title of the milestone. */
    title: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Milestone> {
  const result = await api.repos.issuesCreateMilestone({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a milestone
 * @request DELETE :/repos/{owner}/{repo}/milestones/{milestone_number}
 */
export async function deleteReposIssuesDeleteMilestone(
  owner: string,
  repo: string,
  /** The number that identifies the milestone. */
  milestoneNumber: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.issuesDeleteMilestone({
    owner: owner,
    repo: repo,
    milestoneNumber: milestoneNumber,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a milestone
 * @request GET :/repos/{owner}/{repo}/milestones/{milestone_number}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposIssuesGetMilestone(
  owner: string,
  repo: string,
  milestoneNumber: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Milestone> {
  const result = await api.repos.issuesGetMilestone({
    owner: owner,
    repo: repo,
    milestoneNumber: milestoneNumber,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update a milestone
 * @request PATCH :/repos/{owner}/{repo}/milestones/{milestone_number}
 * @allowrelaxedtypes
 */
export async function patchReposIssuesUpdateMilestone(
  owner: string,
  repo: string,
  milestoneNumber: number,
  /** Request body */
  data?: {
    /** A description of the milestone. */
    description?: string;
    /**
     * The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     * @format date-time
     */
    due_on?: string;
    /**
     * The state of the milestone. Either `open` or `closed`.
     * @default "open"
     */
    state?: "open" | "closed";
    /** The title of the milestone. */
    title?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Milestone> {
  const result = await api.repos.issuesUpdateMilestone({
    owner: owner,
    repo: repo,
    milestoneNumber: milestoneNumber,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List labels for issues in a milestone
 * @request GET :/repos/{owner}/{repo}/milestones/{milestone_number}/labels
 * @readonly
 */
export async function getReposIssuesListLabelsForMilestone(
  owner: string,
  repo: string,
  milestoneNumber: number,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Label[]> {
  const result = await api.repos.issuesListLabelsForMilestone({
    owner: owner,
    repo: repo,
    milestoneNumber: milestoneNumber,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List repository notifications for the authenticated user
 * @request GET :/repos/{owner}/{repo}/notifications
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposActivityListRepoNotificationsForAuthenticatedUser(
  owner: string,
  repo: string,
  query: {
    /** If `true`, show notifications marked as read. */
    all?: boolean;
    /** If `true`, only shows notifications in which the user is directly participating or mentioned. */
    participating?: boolean;
    /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
    since?: string;
    /** Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
    before?: string;
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Thread[]> {
  const result =
    await api.repos.activityListRepoNotificationsForAuthenticatedUser({
      owner: owner,
      repo: repo,
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Mark repository notifications as read
 * @request PUT :/repos/{owner}/{repo}/notifications
 */
export async function putReposActivityMarkRepoNotificationsAsRead(
  owner: string,
  repo: string,
  /** Request body */
  data?: {
    /**
     * Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.
     * @format date-time
     */
    last_read_at?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  message?: string;
  url?: string;
}> {
  const result = await api.repos.activityMarkRepoNotificationsAsRead({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a GitHub Pages site
 * @request DELETE :/repos/{owner}/{repo}/pages
 */
export async function deleteReposReposDeletePagesSite(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.reposDeletePagesSite({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a GitHub Pages site
 * @request GET :/repos/{owner}/{repo}/pages
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposReposGetPages(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Page> {
  const result = await api.repos.reposGetPages({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a GitHub Pages site
 * @request POST :/repos/{owner}/{repo}/pages
 * @allowrelaxedtypes
 */
export async function postReposReposCreatePagesSite(
  owner: string,
  repo: string,
  /** Request body */
  data: null &
    ({
      /** The process in which the Page will be built. Possible values are `"legacy"` and `"workflow"`. */
      build_type?: "legacy" | "workflow";
      /** The source branch and directory used to publish your Pages site. */
      source?: {
        /** The repository branch used to publish your site's source files. */
        branch: string;
        /**
         * The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/`
         * @default "/"
         */
        path?: "/" | "/docs";
      };
    } | null),
  headers?: hasuraSdk.JSONValue,
): Promise<Page> {
  const result = await api.repos.reposCreatePagesSite({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update information about a GitHub Pages site
 * @request PUT :/repos/{owner}/{repo}/pages
 * @allowrelaxedtypes
 */
export async function putReposReposUpdateInformationAboutPagesSite(
  owner: string,
  repo: string,
  /** Request body */
  data: {
    /** The process by which the GitHub Pages site will be built. `workflow` means that the site is built by a custom GitHub Actions workflow. `legacy` means that the site is built by GitHub when changes are pushed to a specific branch. */
    build_type?: "legacy" | "workflow";
    /** Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://docs.github.com/articles/using-a-custom-domain-with-github-pages/)." */
    cname?: string | null;
    /** Specify whether HTTPS should be enforced for the repository. */
    https_enforced?: boolean;
    /** Update the source for the repository. Must include the branch name, and may optionally specify the subdirectory `/docs`. Possible values are `"gh-pages"`, `"master"`, and `"master /docs"`. */
    source?:
      | "gh-pages"
      | "master"
      | "master /docs"
      | {
          /** The repository branch used to publish your site's source files. */
          branch: string;
          /** The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. */
          path: "/" | "/docs";
        };
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.reposUpdateInformationAboutPagesSite({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List GitHub Pages builds
 * @request GET :/repos/{owner}/{repo}/pages/builds
 * @readonly
 */
export async function getReposReposListPagesBuilds(
  owner: string,
  repo: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<PageBuild[]> {
  const result = await api.repos.reposListPagesBuilds({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Request a GitHub Pages build
 * @request POST :/repos/{owner}/{repo}/pages/builds
 */
export async function postReposReposRequestPagesBuild(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<PageBuildStatus> {
  const result = await api.repos.reposRequestPagesBuild({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get latest Pages build
 * @request GET :/repos/{owner}/{repo}/pages/builds/latest
 * @readonly
 */
export async function getReposReposGetLatestPagesBuild(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<PageBuild> {
  const result = await api.repos.reposGetLatestPagesBuild({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get GitHub Pages build
 * @request GET :/repos/{owner}/{repo}/pages/builds/{build_id}
 * @readonly
 */
export async function getReposReposGetPagesBuild(
  owner: string,
  repo: string,
  buildId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<PageBuild> {
  const result = await api.repos.reposGetPagesBuild({
    owner: owner,
    repo: repo,
    buildId: buildId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a GitHub Pages deployment
 * @request POST :/repos/{owner}/{repo}/pages/deployment
 */
export async function postReposReposCreatePagesDeployment(
  owner: string,
  repo: string,
  /** Request body */
  data: {
    /** The URL of an artifact that contains the .zip or .tar of static assets to deploy. The artifact belongs to the repository. */
    artifact_url: string;
    /**
     * The target environment for this GitHub Pages deployment.
     * @default "github-pages"
     */
    environment?: string;
    /** The OIDC token issued by GitHub Actions certifying the origin of the deployment. */
    oidc_token: string;
    /**
     * A unique string that represents the version of the build for this deployment.
     * @default "GITHUB_SHA"
     */
    pages_build_version: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<PageDeployment> {
  const result = await api.repos.reposCreatePagesDeployment({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a DNS health check for GitHub Pages
 * @request GET :/repos/{owner}/{repo}/pages/health
 * @readonly
 */
export async function getReposReposGetPagesHealthCheck(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<PagesHealthCheck> {
  const result = await api.repos.reposGetPagesHealthCheck({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List repository projects
 * @request GET :/repos/{owner}/{repo}/projects
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposProjectsListForRepo(
  owner: string,
  repo: string,
  query: {
    /** Indicates the state of the projects to return. */
    state?: "open" | "closed" | "all";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Project[]> {
  const result = await api.repos.projectsListForRepo({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a repository project
 * @request POST :/repos/{owner}/{repo}/projects
 * @allowrelaxedtypes
 */
export async function postReposProjectsCreateForRepo(
  owner: string,
  repo: string,
  /** Request body */
  data: {
    /** The description of the project. */
    body?: string;
    /** The name of the project. */
    name: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Project> {
  const result = await api.repos.projectsCreateForRepo({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List pull requests
 * @request GET :/repos/{owner}/{repo}/pulls
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposPullsList(
  owner: string,
  repo: string,
  query: {
    /** Either `open`, `closed`, or `all` to filter by state. */
    state?: "open" | "closed" | "all";
    /** Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`. */
    head?: string;
    /** Filter pulls by base branch name. Example: `gh-pages`. */
    base?: string;
    /** What to sort results by. `popularity` will sort by the number of comments. `long-running` will sort by date created and will limit the results to pull requests that have been open for more than a month and have had activity within the past month. */
    sort?: "created" | "updated" | "popularity" | "long-running";
    /** The direction of the sort. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`. */
    direction?: "asc" | "desc";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<PullRequestSimple[]> {
  const result = await api.repos.pullsList({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a pull request
 * @request POST :/repos/{owner}/{repo}/pulls
 * @allowrelaxedtypes
 */
export async function postReposPullsCreate(
  owner: string,
  repo: string,
  /** Request body */
  data: {
    /** The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository. */
    base: string;
    /** The contents of the pull request. */
    body?: string;
    /** Indicates whether the pull request is a draft. See "[Draft Pull Requests](https://docs.github.com/articles/about-pull-requests#draft-pull-requests)" in the GitHub Help documentation to learn more. */
    draft?: boolean;
    /** The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`. */
    head: string;
    /**
     * The name of the repository where the changes in the pull request were made. This field is required for cross-repository pull requests if both repositories are owned by the same organization.
     * @format repo.nwo
     * @example "octo-org/octo-repo"
     */
    head_repo?: string;
    /**
     * An issue in the repository to convert to a pull request. The issue title, body, and comments will become the title, body, and comments on the new pull request. Required unless `title` is specified.
     * @example 1
     */
    issue?: number;
    /** Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request. */
    maintainer_can_modify?: boolean;
    /** The title of the new pull request. Required unless `issue` is specified. */
    title?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<PullRequest> {
  const result = await api.repos.pullsCreate({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List review comments in a repository
 * @request GET :/repos/{owner}/{repo}/pulls/comments
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposPullsListReviewCommentsForRepo(
  owner: string,
  repo: string,
  query: {
    sort?: "created" | "updated" | "created_at";
    /** The direction to sort results. Ignored without `sort` parameter. */
    direction?: "asc" | "desc";
    /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
    since?: string;
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<PullRequestReviewComment[]> {
  const result = await api.repos.pullsListReviewCommentsForRepo({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a review comment for a pull request
 * @request DELETE :/repos/{owner}/{repo}/pulls/comments/{comment_id}
 */
export async function deleteReposPullsDeleteReviewComment(
  owner: string,
  repo: string,
  commentId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.pullsDeleteReviewComment({
    owner: owner,
    repo: repo,
    commentId: commentId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a review comment for a pull request
 * @request GET :/repos/{owner}/{repo}/pulls/comments/{comment_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposPullsGetReviewComment(
  owner: string,
  repo: string,
  commentId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<PullRequestReviewComment> {
  const result = await api.repos.pullsGetReviewComment({
    owner: owner,
    repo: repo,
    commentId: commentId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update a review comment for a pull request
 * @request PATCH :/repos/{owner}/{repo}/pulls/comments/{comment_id}
 * @allowrelaxedtypes
 */
export async function patchReposPullsUpdateReviewComment(
  owner: string,
  repo: string,
  commentId: number,
  /** Request body */
  data: {
    /** The text of the reply to the review comment. */
    body: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<PullRequestReviewComment> {
  const result = await api.repos.pullsUpdateReviewComment({
    owner: owner,
    repo: repo,
    commentId: commentId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List reactions for a pull request review comment
 * @request GET :/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposReactionsListForPullRequestReviewComment(
  owner: string,
  repo: string,
  commentId: number,
  query: {
    /** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a pull request review comment. */
    content?:
      | "+1"
      | "-1"
      | "laugh"
      | "confused"
      | "heart"
      | "hooray"
      | "rocket"
      | "eyes";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Reaction[]> {
  const result = await api.repos.reactionsListForPullRequestReviewComment({
    owner: owner,
    repo: repo,
    commentId: commentId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create reaction for a pull request review comment
 * @request POST :/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions
 * @allowrelaxedtypes
 */
export async function postReposReactionsCreateForPullRequestReviewComment(
  owner: string,
  repo: string,
  commentId: number,
  /** Request body */
  data: {
    /** The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the pull request review comment. */
    content:
      | "+1"
      | "-1"
      | "laugh"
      | "confused"
      | "heart"
      | "hooray"
      | "rocket"
      | "eyes";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Reaction> {
  const result = await api.repos.reactionsCreateForPullRequestReviewComment({
    owner: owner,
    repo: repo,
    commentId: commentId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a pull request comment reaction
 * @request DELETE :/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}
 */
export async function deleteReposReactionsDeleteForPullRequestComment(
  owner: string,
  repo: string,
  commentId: number,
  reactionId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.reactionsDeleteForPullRequestComment({
    owner: owner,
    repo: repo,
    commentId: commentId,
    reactionId: reactionId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a pull request
 * @request GET :/repos/{owner}/{repo}/pulls/{pull_number}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposPullsGet(
  owner: string,
  repo: string,
  /** The number that identifies the pull request. */
  pullNumber: number,
  headers?: hasuraSdk.JSONValue,
): Promise<PullRequest> {
  const result = await api.repos.pullsGet({
    owner: owner,
    repo: repo,
    pullNumber: pullNumber,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update a pull request
 * @request PATCH :/repos/{owner}/{repo}/pulls/{pull_number}
 * @allowrelaxedtypes
 */
export async function patchReposPullsUpdate(
  owner: string,
  repo: string,
  pullNumber: number,
  /** Request body */
  data?: {
    /** The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository. */
    base?: string;
    /** The contents of the pull request. */
    body?: string;
    /** Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request. */
    maintainer_can_modify?: boolean;
    /** State of this Pull Request. Either `open` or `closed`. */
    state?: "open" | "closed";
    /** The title of the pull request. */
    title?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<PullRequest> {
  const result = await api.repos.pullsUpdate({
    owner: owner,
    repo: repo,
    pullNumber: pullNumber,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a codespace from a pull request
 * @request POST :/repos/{owner}/{repo}/pulls/{pull_number}/codespaces
 * @allowrelaxedtypes
 */
export async function postReposCodespacesCreateWithPrForAuthenticatedUser(
  owner: string,
  repo: string,
  pullNumber: number,
  /** Request body */
  data: {
    /** IP for location auto-detection when proxying a request */
    client_ip?: string;
    /** Path to devcontainer.json config to use for this codespace */
    devcontainer_path?: string;
    /** Display name for this codespace */
    display_name?: string;
    /** Time in minutes before codespace stops from inactivity */
    idle_timeout_minutes?: number;
    /** Location for this codespace. Assigned by IP if not provided */
    location?: string;
    /** Machine type to use for this codespace */
    machine?: string;
    /** Whether to authorize requested permissions from devcontainer.json */
    multi_repo_permissions_opt_out?: boolean;
    /** Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days). */
    retention_period_minutes?: number;
    /** Working directory for this codespace */
    working_directory?: string;
  } | null,
  headers?: hasuraSdk.JSONValue,
): Promise<Codespace> {
  const result = await api.repos.codespacesCreateWithPrForAuthenticatedUser({
    owner: owner,
    repo: repo,
    pullNumber: pullNumber,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List review comments on a pull request
 * @request GET :/repos/{owner}/{repo}/pulls/{pull_number}/comments
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposPullsListReviewComments(
  owner: string,
  repo: string,
  pullNumber: number,
  query: {
    /** The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to. */
    sort?: "created" | "updated";
    /** The direction to sort results. Ignored without `sort` parameter. */
    direction?: "asc" | "desc";
    /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
    since?: string;
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<PullRequestReviewComment[]> {
  const result = await api.repos.pullsListReviewComments({
    owner: owner,
    repo: repo,
    pullNumber: pullNumber,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a review comment for a pull request
 * @request POST :/repos/{owner}/{repo}/pulls/{pull_number}/comments
 * @allowrelaxedtypes
 */
export async function postReposPullsCreateReviewComment(
  owner: string,
  repo: string,
  pullNumber: number,
  /** Request body */
  data: {
    /** The text of the review comment. */
    body: string;
    /** The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`. */
    commit_id: string;
    /**
     * The ID of the review comment to reply to. To find the ID of a review comment with ["List review comments on a pull request"](#list-review-comments-on-a-pull-request). When specified, all parameters other than `body` in the request body are ignored.
     * @example 2
     */
    in_reply_to?: number;
    /** The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to. */
    line: number;
    /** The relative path to the file that necessitates a comment. */
    path: string;
    /**
     * **This parameter is deprecated. Use `line` instead**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above.
     * @deprecated
     */
    position?: number;
    /** In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see "[Diff view options](https://docs.github.com/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub Help documentation. */
    side?: "LEFT" | "RIGHT";
    /** **Required when using multi-line comments unless using `in_reply_to`**. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. */
    start_line?: number;
    /** **Required when using multi-line comments unless using `in_reply_to`**. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. See `side` in this table for additional context. */
    start_side?: "LEFT" | "RIGHT" | "side";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<PullRequestReviewComment> {
  const result = await api.repos.pullsCreateReviewComment({
    owner: owner,
    repo: repo,
    pullNumber: pullNumber,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a reply for a review comment
 * @request POST :/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies
 * @allowrelaxedtypes
 */
export async function postReposPullsCreateReplyForReviewComment(
  owner: string,
  repo: string,
  pullNumber: number,
  commentId: number,
  /** Request body */
  data: {
    /** The text of the review comment. */
    body: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<PullRequestReviewComment> {
  const result = await api.repos.pullsCreateReplyForReviewComment({
    owner: owner,
    repo: repo,
    pullNumber: pullNumber,
    commentId: commentId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List commits on a pull request
 * @request GET :/repos/{owner}/{repo}/pulls/{pull_number}/commits
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposPullsListCommits(
  owner: string,
  repo: string,
  pullNumber: number,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Commit[]> {
  const result = await api.repos.pullsListCommits({
    owner: owner,
    repo: repo,
    pullNumber: pullNumber,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List pull requests files
 * @request GET :/repos/{owner}/{repo}/pulls/{pull_number}/files
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposPullsListFiles(
  owner: string,
  repo: string,
  pullNumber: number,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<DiffEntry[]> {
  const result = await api.repos.pullsListFiles({
    owner: owner,
    repo: repo,
    pullNumber: pullNumber,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Check if a pull request has been merged
 * @request GET :/repos/{owner}/{repo}/pulls/{pull_number}/merge
 * @readonly
 */
export async function getReposPullsCheckIfMerged(
  owner: string,
  repo: string,
  pullNumber: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.pullsCheckIfMerged({
    owner: owner,
    repo: repo,
    pullNumber: pullNumber,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Merge a pull request
 * @request PUT :/repos/{owner}/{repo}/pulls/{pull_number}/merge
 * @allowrelaxedtypes
 */
export async function putReposPullsMerge(
  owner: string,
  repo: string,
  pullNumber: number,
  /** Request body */
  data?: {
    /** Extra detail to append to automatic commit message. */
    commit_message?: string;
    /** Title for the automatic commit message. */
    commit_title?: string;
    /** The merge method to use. */
    merge_method?: "merge" | "squash" | "rebase";
    /** SHA that pull request head must match to allow merge. */
    sha?: string;
  } | null,
  headers?: hasuraSdk.JSONValue,
): Promise<PullRequestMergeResult> {
  const result = await api.repos.pullsMerge({
    owner: owner,
    repo: repo,
    pullNumber: pullNumber,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Remove requested reviewers from a pull request
 * @request DELETE :/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers
 * @allowrelaxedtypes
 */
export async function deleteReposPullsRemoveRequestedReviewers(
  owner: string,
  repo: string,
  pullNumber: number,
  /** Request body */
  data: {
    /** An array of user `login`s that will be removed. */
    reviewers: string[];
    /** An array of team `slug`s that will be removed. */
    team_reviewers?: string[];
  },
  headers?: hasuraSdk.JSONValue,
): Promise<PullRequestSimple> {
  const result = await api.repos.pullsRemoveRequestedReviewers({
    owner: owner,
    repo: repo,
    pullNumber: pullNumber,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get all requested reviewers for a pull request
 * @request GET :/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers
 * @readonly
 */
export async function getReposPullsListRequestedReviewers(
  owner: string,
  repo: string,
  pullNumber: number,
  headers?: hasuraSdk.JSONValue,
): Promise<PullRequestReviewRequest> {
  const result = await api.repos.pullsListRequestedReviewers({
    owner: owner,
    repo: repo,
    pullNumber: pullNumber,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Request reviewers for a pull request
 * @request POST :/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers
 * @allowrelaxedtypes
 */
export async function postReposPullsRequestReviewers(
  owner: string,
  repo: string,
  pullNumber: number,
  /** Request body */
  data?: {
    /** An array of user `login`s that will be requested. */
    reviewers?: string[];
    /** An array of team `slug`s that will be requested. */
    team_reviewers?: string[];
  },
  headers?: hasuraSdk.JSONValue,
): Promise<PullRequestSimple> {
  const result = await api.repos.pullsRequestReviewers({
    owner: owner,
    repo: repo,
    pullNumber: pullNumber,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List reviews for a pull request
 * @request GET :/repos/{owner}/{repo}/pulls/{pull_number}/reviews
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposPullsListReviews(
  owner: string,
  repo: string,
  pullNumber: number,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<PullRequestReview[]> {
  const result = await api.repos.pullsListReviews({
    owner: owner,
    repo: repo,
    pullNumber: pullNumber,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a review for a pull request
 * @request POST :/repos/{owner}/{repo}/pulls/{pull_number}/reviews
 * @allowrelaxedtypes
 */
export async function postReposPullsCreateReview(
  owner: string,
  repo: string,
  pullNumber: number,
  /** Request body */
  data?: {
    /** **Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review. */
    body?: string;
    /** Use the following table to specify the location, destination, and contents of the draft review comment. */
    comments?: {
      /** Text of the review comment. */
      body: string;
      /** @example 28 */
      line?: number;
      /** The relative path to the file that necessitates a review comment. */
      path: string;
      /** The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note below. */
      position?: number;
      /** @example "RIGHT" */
      side?: string;
      /** @example 26 */
      start_line?: number;
      /** @example "LEFT" */
      start_side?: string;
    }[];
    /** The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value. */
    commit_id?: string;
    /** The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/rest/pulls#submit-a-review-for-a-pull-request) when you are ready. */
    event?: "APPROVE" | "REQUEST_CHANGES" | "COMMENT";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<PullRequestReview> {
  const result = await api.repos.pullsCreateReview({
    owner: owner,
    repo: repo,
    pullNumber: pullNumber,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a pending review for a pull request
 * @request DELETE :/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}
 * @allowrelaxedtypes
 */
export async function deleteReposPullsDeletePendingReview(
  owner: string,
  repo: string,
  pullNumber: number,
  /** The unique identifier of the review. */
  reviewId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<PullRequestReview> {
  const result = await api.repos.pullsDeletePendingReview({
    owner: owner,
    repo: repo,
    pullNumber: pullNumber,
    reviewId: reviewId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a review for a pull request
 * @request GET :/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposPullsGetReview(
  owner: string,
  repo: string,
  pullNumber: number,
  reviewId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<PullRequestReview> {
  const result = await api.repos.pullsGetReview({
    owner: owner,
    repo: repo,
    pullNumber: pullNumber,
    reviewId: reviewId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update a review for a pull request
 * @request PUT :/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}
 * @allowrelaxedtypes
 */
export async function putReposPullsUpdateReview(
  owner: string,
  repo: string,
  pullNumber: number,
  reviewId: number,
  /** Request body */
  data: {
    /** The body text of the pull request review. */
    body: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<PullRequestReview> {
  const result = await api.repos.pullsUpdateReview({
    owner: owner,
    repo: repo,
    pullNumber: pullNumber,
    reviewId: reviewId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List comments for a pull request review
 * @request GET :/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposPullsListCommentsForReview(
  owner: string,
  repo: string,
  pullNumber: number,
  reviewId: number,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<ReviewComment[]> {
  const result = await api.repos.pullsListCommentsForReview({
    owner: owner,
    repo: repo,
    pullNumber: pullNumber,
    reviewId: reviewId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Dismiss a review for a pull request
 * @request PUT :/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals
 * @allowrelaxedtypes
 */
export async function putReposPullsDismissReview(
  owner: string,
  repo: string,
  pullNumber: number,
  reviewId: number,
  /** Request body */
  data: {
    /** @example ""DISMISS"" */
    event?: "DISMISS";
    /** The message for the pull request review dismissal */
    message: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<PullRequestReview> {
  const result = await api.repos.pullsDismissReview({
    owner: owner,
    repo: repo,
    pullNumber: pullNumber,
    reviewId: reviewId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Submit a review for a pull request
 * @request POST :/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events
 * @allowrelaxedtypes
 */
export async function postReposPullsSubmitReview(
  owner: string,
  repo: string,
  pullNumber: number,
  reviewId: number,
  /** Request body */
  data: {
    /** The body text of the pull request review */
    body?: string;
    /** The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action. */
    event: "APPROVE" | "REQUEST_CHANGES" | "COMMENT";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<PullRequestReview> {
  const result = await api.repos.pullsSubmitReview({
    owner: owner,
    repo: repo,
    pullNumber: pullNumber,
    reviewId: reviewId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update a pull request branch
 * @request PUT :/repos/{owner}/{repo}/pulls/{pull_number}/update-branch
 * @allowrelaxedtypes
 */
export async function putReposPullsUpdateBranch(
  owner: string,
  repo: string,
  pullNumber: number,
  /** Request body */
  data?: {
    /** The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a `422 Unprocessable Entity` status. You can use the "[List commits](https://docs.github.com/rest/reference/repos#list-commits)" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref. */
    expected_head_sha?: string;
  } | null,
  headers?: hasuraSdk.JSONValue,
): Promise<{
  message?: string;
  url?: string;
}> {
  const result = await api.repos.pullsUpdateBranch({
    owner: owner,
    repo: repo,
    pullNumber: pullNumber,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a repository README
 * @request GET :/repos/{owner}/{repo}/readme
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposReposGetReadme(
  owner: string,
  repo: string,
  query: {
    /** The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`) */
    ref?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<ContentFile> {
  const result = await api.repos.reposGetReadme({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a repository README for a directory
 * @request GET :/repos/{owner}/{repo}/readme/{dir}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposReposGetReadmeInDirectory(
  owner: string,
  repo: string,
  /** The alternate path to look for a README file */
  dir: string,
  query: {
    /** The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`) */
    ref?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<ContentFile> {
  const result = await api.repos.reposGetReadmeInDirectory({
    owner: owner,
    repo: repo,
    dir: dir,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List releases
 * @request GET :/repos/{owner}/{repo}/releases
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposReposListReleases(
  owner: string,
  repo: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Release[]> {
  const result = await api.repos.reposListReleases({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a release
 * @request POST :/repos/{owner}/{repo}/releases
 * @allowrelaxedtypes
 */
export async function postReposReposCreateRelease(
  owner: string,
  repo: string,
  /** Request body */
  data: {
    /** Text describing the contents of the tag. */
    body?: string;
    /** If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)." */
    discussion_category_name?: string;
    /**
     * `true` to create a draft (unpublished) release, `false` to create a published one.
     * @default false
     */
    draft?: boolean;
    /**
     * Whether to automatically generate the name and body for this release. If `name` is specified, the specified name will be used; otherwise, a name will be automatically generated. If `body` is specified, the body will be pre-pended to the automatically generated notes.
     * @default false
     */
    generate_release_notes?: boolean;
    /**
     * Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
     * @default true
     */
    make_latest?: "true" | "false" | "legacy";
    /** The name of the release. */
    name?: string;
    /**
     * `true` to identify the release as a prerelease. `false` to identify the release as a full release.
     * @default false
     */
    prerelease?: boolean;
    /** The name of the tag. */
    tag_name: string;
    /** Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`). */
    target_commitish?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Release> {
  const result = await api.repos.reposCreateRelease({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a release asset
 * @request DELETE :/repos/{owner}/{repo}/releases/assets/{asset_id}
 */
export async function deleteReposReposDeleteReleaseAsset(
  owner: string,
  repo: string,
  /** The unique identifier of the asset. */
  assetId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.reposDeleteReleaseAsset({
    owner: owner,
    repo: repo,
    assetId: assetId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a release asset
 * @request GET :/repos/{owner}/{repo}/releases/assets/{asset_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposReposGetReleaseAsset(
  owner: string,
  repo: string,
  assetId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<ReleaseAsset> {
  const result = await api.repos.reposGetReleaseAsset({
    owner: owner,
    repo: repo,
    assetId: assetId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update a release asset
 * @request PATCH :/repos/{owner}/{repo}/releases/assets/{asset_id}
 * @allowrelaxedtypes
 */
export async function patchReposReposUpdateReleaseAsset(
  owner: string,
  repo: string,
  assetId: number,
  /** Request body */
  data?: {
    /** An alternate short description of the asset. Used in place of the filename. */
    label?: string;
    /** The file name of the asset. */
    name?: string;
    /** @example ""uploaded"" */
    state?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<ReleaseAsset> {
  const result = await api.repos.reposUpdateReleaseAsset({
    owner: owner,
    repo: repo,
    assetId: assetId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Generate release notes content for a release
 * @request POST :/repos/{owner}/{repo}/releases/generate-notes
 */
export async function postReposReposGenerateReleaseNotes(
  owner: string,
  repo: string,
  /** Request body */
  data: {
    /** Specifies a path to a file in the repository containing configuration settings used for generating the release notes. If unspecified, the configuration file located in the repository at '.github/release.yml' or '.github/release.yaml' will be used. If that is not present, the default configuration will be used. */
    configuration_file_path?: string;
    /** The name of the previous tag to use as the starting point for the release notes. Use to manually specify the range for the set of changes considered as part this release. */
    previous_tag_name?: string;
    /** The tag name for the release. This can be an existing tag or a new one. */
    tag_name: string;
    /** Specifies the commitish value that will be the target for the release's tag. Required if the supplied tag_name does not reference an existing tag. Ignored if the tag_name already exists. */
    target_commitish?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<ReleaseNotesContent> {
  const result = await api.repos.reposGenerateReleaseNotes({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the latest release
 * @request GET :/repos/{owner}/{repo}/releases/latest
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposReposGetLatestRelease(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Release> {
  const result = await api.repos.reposGetLatestRelease({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a release by tag name
 * @request GET :/repos/{owner}/{repo}/releases/tags/{tag}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposReposGetReleaseByTag(
  owner: string,
  repo: string,
  /** tag parameter */
  tag: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Release> {
  const result = await api.repos.reposGetReleaseByTag({
    owner: owner,
    repo: repo,
    tag: tag,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a release
 * @request DELETE :/repos/{owner}/{repo}/releases/{release_id}
 */
export async function deleteReposReposDeleteRelease(
  owner: string,
  repo: string,
  /** The unique identifier of the release. */
  releaseId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.reposDeleteRelease({
    owner: owner,
    repo: repo,
    releaseId: releaseId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a release
 * @request GET :/repos/{owner}/{repo}/releases/{release_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposReposGetRelease(
  owner: string,
  repo: string,
  releaseId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Release> {
  const result = await api.repos.reposGetRelease({
    owner: owner,
    repo: repo,
    releaseId: releaseId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update a release
 * @request PATCH :/repos/{owner}/{repo}/releases/{release_id}
 * @allowrelaxedtypes
 */
export async function patchReposReposUpdateRelease(
  owner: string,
  repo: string,
  releaseId: number,
  /** Request body */
  data?: {
    /** Text describing the contents of the tag. */
    body?: string;
    /** If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. If there is already a discussion linked to the release, this parameter is ignored. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)." */
    discussion_category_name?: string;
    /** `true` makes the release a draft, and `false` publishes the release. */
    draft?: boolean;
    /**
     * Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
     * @default true
     */
    make_latest?: "true" | "false" | "legacy";
    /** The name of the release. */
    name?: string;
    /** `true` to identify the release as a prerelease, `false` to identify the release as a full release. */
    prerelease?: boolean;
    /** The name of the tag. */
    tag_name?: string;
    /** Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`). */
    target_commitish?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Release> {
  const result = await api.repos.reposUpdateRelease({
    owner: owner,
    repo: repo,
    releaseId: releaseId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List release assets
 * @request GET :/repos/{owner}/{repo}/releases/{release_id}/assets
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposReposListReleaseAssets(
  owner: string,
  repo: string,
  releaseId: number,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<ReleaseAsset[]> {
  const result = await api.repos.reposListReleaseAssets({
    owner: owner,
    repo: repo,
    releaseId: releaseId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Upload a release asset
 * @request POST :/repos/{owner}/{repo}/releases/{release_id}/assets
 * @allowrelaxedtypes
 */
export async function postReposReposUploadReleaseAsset(
  owner: string,
  repo: string,
  releaseId: number,
  query: { name: string; label?: string },
  /** Request body */
  data?: File,
  headers?: hasuraSdk.JSONValue,
): Promise<ReleaseAsset> {
  const result = await api.repos.reposUploadReleaseAsset({
    owner: owner,
    repo: repo,
    releaseId: releaseId,
    query: query,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List reactions for a release
 * @request GET :/repos/{owner}/{repo}/releases/{release_id}/reactions
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposReactionsListForRelease(
  owner: string,
  repo: string,
  releaseId: number,
  query: {
    /** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a release. */
    content?: "+1" | "laugh" | "heart" | "hooray" | "rocket" | "eyes";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Reaction[]> {
  const result = await api.repos.reactionsListForRelease({
    owner: owner,
    repo: repo,
    releaseId: releaseId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create reaction for a release
 * @request POST :/repos/{owner}/{repo}/releases/{release_id}/reactions
 * @allowrelaxedtypes
 */
export async function postReposReactionsCreateForRelease(
  owner: string,
  repo: string,
  releaseId: number,
  /** Request body */
  data: {
    /** The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the release. */
    content: "+1" | "laugh" | "heart" | "hooray" | "rocket" | "eyes";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Reaction> {
  const result = await api.repos.reactionsCreateForRelease({
    owner: owner,
    repo: repo,
    releaseId: releaseId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a release reaction
 * @request DELETE :/repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}
 */
export async function deleteReposReactionsDeleteForRelease(
  owner: string,
  repo: string,
  releaseId: number,
  reactionId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.reactionsDeleteForRelease({
    owner: owner,
    repo: repo,
    releaseId: releaseId,
    reactionId: reactionId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List secret scanning alerts for a repository
 * @request GET :/repos/{owner}/{repo}/secret-scanning/alerts
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposSecretScanningListAlertsForRepo(
  owner: string,
  repo: string,
  query: {
    /** Set to `open` or `resolved` to only list secret scanning alerts in a specific state. */
    state?: "open" | "resolved";
    /** A comma-separated list of secret types to return. By default all secret types are returned.
See "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)"
for a complete list of secret types. */
    secret_type?: string;
    /** A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`. */
    resolution?: string;
    /** The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved. */
    sort?: "created" | "updated";
    /** The direction to sort the results by. */
    direction?: "asc" | "desc";
    /** Page number of the results to fetch. */
    page?: number;
    /** The number of results per page (max 100). */
    per_page?: number;
    /** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty "before" query string. */
    before?: string;
    /** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty "after" query string. */
    after?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<SecretScanningAlert[]> {
  const result = await api.repos.secretScanningListAlertsForRepo({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a secret scanning alert
 * @request GET :/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposSecretScanningGetAlert(
  owner: string,
  repo: string,
  alertNumber: AlertNumber,
  headers?: hasuraSdk.JSONValue,
): Promise<SecretScanningAlert> {
  const result = await api.repos.secretScanningGetAlert({
    owner: owner,
    repo: repo,
    alertNumber: alertNumber,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update a secret scanning alert
 * @request PATCH :/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}
 * @allowrelaxedtypes
 */
export async function patchReposSecretScanningUpdateAlert(
  owner: string,
  repo: string,
  alertNumber: AlertNumber,
  /** Request body */
  data: {
    /** **Required when the `state` is `resolved`.** The reason for resolving the alert. */
    resolution?: SecretScanningAlertResolution;
    /** An optional comment when closing an alert. Cannot be updated or deleted. Must be `null` when changing `state` to `open`. */
    resolution_comment?: SecretScanningAlertResolutionComment;
    /** Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`. */
    state: SecretScanningAlertState;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<SecretScanningAlert> {
  const result = await api.repos.secretScanningUpdateAlert({
    owner: owner,
    repo: repo,
    alertNumber: alertNumber,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List locations for a secret scanning alert
 * @request GET :/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposSecretScanningListLocationsForAlert(
  owner: string,
  repo: string,
  alertNumber: AlertNumber,
  query: {
    /** Page number of the results to fetch. */
    page?: number;
    /** The number of results per page (max 100). */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<SecretScanningLocation[]> {
  const result = await api.repos.secretScanningListLocationsForAlert({
    owner: owner,
    repo: repo,
    alertNumber: alertNumber,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List stargazers
 * @request GET :/repos/{owner}/{repo}/stargazers
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposActivityListStargazersForRepo(
  owner: string,
  repo: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<SimpleUser[] | Stargazer[]> {
  const result = await api.repos.activityListStargazersForRepo({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the weekly commit activity
 * @request GET :/repos/{owner}/{repo}/stats/code_frequency
 * @readonly
 */
export async function getReposReposGetCodeFrequencyStats(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<CodeFrequencyStat[]> {
  const result = await api.repos.reposGetCodeFrequencyStats({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the last year of commit activity
 * @request GET :/repos/{owner}/{repo}/stats/commit_activity
 * @readonly
 */
export async function getReposReposGetCommitActivityStats(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<CommitActivity[]> {
  const result = await api.repos.reposGetCommitActivityStats({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get all contributor commit activity
 * @request GET :/repos/{owner}/{repo}/stats/contributors
 * @readonly
 */
export async function getReposReposGetContributorsStats(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<ContributorActivity[]> {
  const result = await api.repos.reposGetContributorsStats({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the weekly commit count
 * @request GET :/repos/{owner}/{repo}/stats/participation
 * @readonly
 */
export async function getReposReposGetParticipationStats(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<ParticipationStats> {
  const result = await api.repos.reposGetParticipationStats({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the hourly commit count for each day
 * @request GET :/repos/{owner}/{repo}/stats/punch_card
 * @readonly
 */
export async function getReposReposGetPunchCardStats(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<CodeFrequencyStat[]> {
  const result = await api.repos.reposGetPunchCardStats({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a commit status
 * @request POST :/repos/{owner}/{repo}/statuses/{sha}
 * @allowrelaxedtypes
 */
export async function postReposReposCreateCommitStatus(
  owner: string,
  repo: string,
  sha: string,
  /** Request body */
  data: {
    /**
     * A string label to differentiate this status from the status of other systems. This field is case-insensitive.
     * @default "default"
     */
    context?: string;
    /** A short description of the status. */
    description?: string | null;
    /** The state of the status. */
    state: "error" | "failure" | "pending" | "success";
    /**
     * The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.
     * For example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:
     * `http://ci.example.com/user/repo/build/sha`
     */
    target_url?: string | null;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Status> {
  const result = await api.repos.reposCreateCommitStatus({
    owner: owner,
    repo: repo,
    sha: sha,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List watchers
 * @request GET :/repos/{owner}/{repo}/subscribers
 * @readonly
 */
export async function getReposActivityListWatchersForRepo(
  owner: string,
  repo: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<SimpleUser[]> {
  const result = await api.repos.activityListWatchersForRepo({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a repository subscription
 * @request DELETE :/repos/{owner}/{repo}/subscription
 */
export async function deleteReposActivityDeleteRepoSubscription(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.activityDeleteRepoSubscription({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a repository subscription
 * @request GET :/repos/{owner}/{repo}/subscription
 * @readonly
 */
export async function getReposActivityGetRepoSubscription(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<RepositorySubscription> {
  const result = await api.repos.activityGetRepoSubscription({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set a repository subscription
 * @request PUT :/repos/{owner}/{repo}/subscription
 */
export async function putReposActivitySetRepoSubscription(
  owner: string,
  repo: string,
  /** Request body */
  data?: {
    /** Determines if all notifications should be blocked from this repository. */
    ignored?: boolean;
    /** Determines if notifications should be received from this repository. */
    subscribed?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<RepositorySubscription> {
  const result = await api.repos.activitySetRepoSubscription({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List repository tags
 * @request GET :/repos/{owner}/{repo}/tags
 * @readonly
 */
export async function getReposReposListTags(
  owner: string,
  repo: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Tag[]> {
  const result = await api.repos.reposListTags({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List tag protection states for a repository
 * @request GET :/repos/{owner}/{repo}/tags/protection
 * @readonly
 */
export async function getReposReposListTagProtection(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<TagProtection[]> {
  const result = await api.repos.reposListTagProtection({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a tag protection state for a repository
 * @request POST :/repos/{owner}/{repo}/tags/protection
 */
export async function postReposReposCreateTagProtection(
  owner: string,
  repo: string,
  /** Request body */
  data: {
    /** An optional glob pattern to match against when enforcing tag protection. */
    pattern: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<TagProtection> {
  const result = await api.repos.reposCreateTagProtection({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a tag protection state for a repository
 * @request DELETE :/repos/{owner}/{repo}/tags/protection/{tag_protection_id}
 */
export async function deleteReposReposDeleteTagProtection(
  owner: string,
  repo: string,
  /** The unique identifier of the tag protection. */
  tagProtectionId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.reposDeleteTagProtection({
    owner: owner,
    repo: repo,
    tagProtectionId: tagProtectionId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Download a repository archive (tar)
 * @request GET :/repos/{owner}/{repo}/tarball/{ref}
 * @readonly
 */
export async function getReposReposDownloadTarballArchive(
  owner: string,
  repo: string,
  ref: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.reposDownloadTarballArchive({
    owner: owner,
    repo: repo,
    ref: ref,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List repository teams
 * @request GET :/repos/{owner}/{repo}/teams
 * @readonly
 */
export async function getReposReposListTeams(
  owner: string,
  repo: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Team[]> {
  const result = await api.repos.reposListTeams({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get all repository topics
 * @request GET :/repos/{owner}/{repo}/topics
 * @readonly
 */
export async function getReposReposGetAllTopics(
  owner: string,
  repo: string,
  query: {
    /** Page number of the results to fetch. */
    page?: number;
    /** The number of results per page (max 100). */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Topic> {
  const result = await api.repos.reposGetAllTopics({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Replace all repository topics
 * @request PUT :/repos/{owner}/{repo}/topics
 */
export async function putReposReposReplaceAllTopics(
  owner: string,
  repo: string,
  /** Request body */
  data: {
    /** An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` cannot contain uppercase letters. */
    names: string[];
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Topic> {
  const result = await api.repos.reposReplaceAllTopics({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get repository clones
 * @request GET :/repos/{owner}/{repo}/traffic/clones
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposReposGetClones(
  owner: string,
  repo: string,
  query: {
    /** The time frame to display results for. */
    per?: "day" | "week";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<CloneTraffic> {
  const result = await api.repos.reposGetClones({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get top referral paths
 * @request GET :/repos/{owner}/{repo}/traffic/popular/paths
 * @readonly
 */
export async function getReposReposGetTopPaths(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<ContentTraffic[]> {
  const result = await api.repos.reposGetTopPaths({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get top referral sources
 * @request GET :/repos/{owner}/{repo}/traffic/popular/referrers
 * @readonly
 */
export async function getReposReposGetTopReferrers(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<ReferrerTraffic[]> {
  const result = await api.repos.reposGetTopReferrers({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get page views
 * @request GET :/repos/{owner}/{repo}/traffic/views
 * @allowrelaxedtypes
 * @readonly
 */
export async function getReposReposGetViews(
  owner: string,
  repo: string,
  query: {
    /** The time frame to display results for. */
    per?: "day" | "week";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<ViewTraffic> {
  const result = await api.repos.reposGetViews({
    owner: owner,
    repo: repo,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Transfer a repository
 * @request POST :/repos/{owner}/{repo}/transfer
 * @allowrelaxedtypes
 */
export async function postReposReposTransfer(
  owner: string,
  repo: string,
  /** Request body */
  data: {
    /** The new name to be given to the repository. */
    new_name?: string;
    /** The username or organization name the repository will be transferred to. */
    new_owner: string;
    /** ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories. */
    team_ids?: number[];
  },
  headers?: hasuraSdk.JSONValue,
): Promise<MinimalRepository> {
  const result = await api.repos.reposTransfer({
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Disable vulnerability alerts
 * @request DELETE :/repos/{owner}/{repo}/vulnerability-alerts
 */
export async function deleteReposReposDisableVulnerabilityAlerts(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.reposDisableVulnerabilityAlerts({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Check if vulnerability alerts are enabled for a repository
 * @request GET :/repos/{owner}/{repo}/vulnerability-alerts
 * @readonly
 */
export async function getReposReposCheckVulnerabilityAlerts(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.reposCheckVulnerabilityAlerts({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Enable vulnerability alerts
 * @request PUT :/repos/{owner}/{repo}/vulnerability-alerts
 */
export async function putReposReposEnableVulnerabilityAlerts(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.reposEnableVulnerabilityAlerts({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Download a repository archive (zip)
 * @request GET :/repos/{owner}/{repo}/zipball/{ref}
 * @readonly
 */
export async function getReposReposDownloadZipballArchive(
  owner: string,
  repo: string,
  ref: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repos.reposDownloadZipballArchive({
    owner: owner,
    repo: repo,
    ref: ref,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a repository using a template
 * @request POST :/repos/{template_owner}/{template_repo}/generate
 * @allowrelaxedtypes
 */
export async function postReposReposCreateUsingTemplate(
  templateOwner: string,
  templateRepo: string,
  /** Request body */
  data: {
    /** A short description of the new repository. */
    description?: string;
    /**
     * Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`.
     * @default false
     */
    include_all_branches?: boolean;
    /** The name of the new repository. */
    name: string;
    /** The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization. */
    owner?: string;
    /**
     * Either `true` to create a new private repository or `false` to create a new public one.
     * @default false
     */
    private?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Repository> {
  const result = await api.repos.reposCreateUsingTemplate({
    templateOwner: templateOwner,
    templateRepo: templateRepo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List public repositories
 * @request GET :/repositories
 * @allowrelaxedtypes
 * @readonly
 */
export async function getRepositoriesReposListPublic(
  query: {
    /** A repository ID. Only return repositories with an ID greater than this ID. */
    since?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<MinimalRepository[]> {
  const result = await api.repositories.reposListPublic({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List environment secrets
 * @request GET :/repositories/{repository_id}/environments/{environment_name}/secrets
 * @readonly
 */
export async function getRepositoriesActionsListEnvironmentSecrets(
  repositoryId: number,
  environmentName: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  secrets: ActionsSecret[];
  total_count: number;
}> {
  const result = await api.repositories.actionsListEnvironmentSecrets({
    repositoryId: repositoryId,
    environmentName: environmentName,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get an environment public key
 * @request GET :/repositories/{repository_id}/environments/{environment_name}/secrets/public-key
 * @readonly
 */
export async function getRepositoriesActionsGetEnvironmentPublicKey(
  repositoryId: number,
  environmentName: string,
  headers?: hasuraSdk.JSONValue,
): Promise<ActionsPublicKey> {
  const result = await api.repositories.actionsGetEnvironmentPublicKey({
    repositoryId: repositoryId,
    environmentName: environmentName,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete an environment secret
 * @request DELETE :/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}
 */
export async function deleteRepositoriesActionsDeleteEnvironmentSecret(
  repositoryId: number,
  environmentName: string,
  secretName: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repositories.actionsDeleteEnvironmentSecret({
    repositoryId: repositoryId,
    environmentName: environmentName,
    secretName: secretName,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get an environment secret
 * @request GET :/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}
 * @readonly
 */
export async function getRepositoriesActionsGetEnvironmentSecret(
  repositoryId: number,
  environmentName: string,
  secretName: string,
  headers?: hasuraSdk.JSONValue,
): Promise<ActionsSecret> {
  const result = await api.repositories.actionsGetEnvironmentSecret({
    repositoryId: repositoryId,
    environmentName: environmentName,
    secretName: secretName,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create or update an environment secret
 * @request PUT :/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}
 */
export async function putRepositoriesActionsCreateOrUpdateEnvironmentSecret(
  repositoryId: number,
  environmentName: string,
  secretName: string,
  /** Request body */
  data: {
    /**
     * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an environment public key](https://docs.github.com/rest/reference/actions#get-an-environment-public-key) endpoint.
     * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
     */
    encrypted_value: string;
    /** ID of the key you used to encrypt the secret. */
    key_id: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<EmptyObject> {
  const result = await api.repositories.actionsCreateOrUpdateEnvironmentSecret({
    repositoryId: repositoryId,
    environmentName: environmentName,
    secretName: secretName,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List environment variables
 * @request GET :/repositories/{repository_id}/environments/{environment_name}/variables
 * @readonly
 */
export async function getRepositoriesActionsListEnvironmentVariables(
  repositoryId: number,
  environmentName: string,
  query: {
    /** The number of results per page (max 30). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  total_count: number;
  variables: ActionsVariable[];
}> {
  const result = await api.repositories.actionsListEnvironmentVariables({
    repositoryId: repositoryId,
    environmentName: environmentName,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create an environment variable
 * @request POST :/repositories/{repository_id}/environments/{environment_name}/variables
 */
export async function postRepositoriesActionsCreateEnvironmentVariable(
  repositoryId: number,
  environmentName: string,
  /** Request body */
  data: {
    /** The name of the variable. */
    name: string;
    /** The value of the variable. */
    value: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<EmptyObject> {
  const result = await api.repositories.actionsCreateEnvironmentVariable({
    repositoryId: repositoryId,
    environmentName: environmentName,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete an environment variable
 * @request DELETE :/repositories/{repository_id}/environments/{environment_name}/variables/{name}
 */
export async function deleteRepositoriesActionsDeleteEnvironmentVariable(
  repositoryId: number,
  name: string,
  environmentName: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repositories.actionsDeleteEnvironmentVariable({
    repositoryId: repositoryId,
    name: name,
    environmentName: environmentName,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get an environment variable
 * @request GET :/repositories/{repository_id}/environments/{environment_name}/variables/{name}
 * @readonly
 */
export async function getRepositoriesActionsGetEnvironmentVariable(
  repositoryId: number,
  environmentName: string,
  name: string,
  headers?: hasuraSdk.JSONValue,
): Promise<ActionsVariable> {
  const result = await api.repositories.actionsGetEnvironmentVariable({
    repositoryId: repositoryId,
    environmentName: environmentName,
    name: name,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update an environment variable
 * @request PATCH :/repositories/{repository_id}/environments/{environment_name}/variables/{name}
 */
export async function patchRepositoriesActionsUpdateEnvironmentVariable(
  repositoryId: number,
  name: string,
  environmentName: string,
  /** Request body */
  data: {
    /** The name of the variable. */
    name?: string;
    /** The value of the variable. */
    value?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.repositories.actionsUpdateEnvironmentVariable({
    repositoryId: repositoryId,
    name: name,
    environmentName: environmentName,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Search code
 * @request GET :/search/code
 * @allowrelaxedtypes
 * @readonly
 */
export async function getSearchSearchCode(
  query: {
    /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching code](https://docs.github.com/search-github/searching-on-github/searching-code)" for a detailed list of qualifiers. */
    q: string;
    /** Sorts the results of your query. Can only be `indexed`, which indicates how recently a file has been indexed by the GitHub search infrastructure. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */
    sort?: "indexed";
    /** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */
    order?: "desc" | "asc";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  incomplete_results: boolean;
  items: CodeSearchResultItem[];
  total_count: number;
}> {
  const result = await api.search.searchCode({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Search commits
 * @request GET :/search/commits
 * @allowrelaxedtypes
 * @readonly
 */
export async function getSearchSearchCommits(
  query: {
    /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching commits](https://docs.github.com/search-github/searching-on-github/searching-commits)" for a detailed list of qualifiers. */
    q: string;
    /** Sorts the results of your query by `author-date` or `committer-date`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */
    sort?: "author-date" | "committer-date";
    /** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */
    order?: "desc" | "asc";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  incomplete_results: boolean;
  items: CommitSearchResultItem[];
  total_count: number;
}> {
  const result = await api.search.searchCommits({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Search issues and pull requests
 * @request GET :/search/issues
 * @allowrelaxedtypes
 * @readonly
 */
export async function getSearchSearchIssuesAndPullRequests(
  query: {
    /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching issues and pull requests](https://docs.github.com/search-github/searching-on-github/searching-issues-and-pull-requests)" for a detailed list of qualifiers. */
    q: string;
    /** Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`, Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */
    sort?:
      | "comments"
      | "reactions"
      | "reactions-+1"
      | "reactions--1"
      | "reactions-smile"
      | "reactions-thinking_face"
      | "reactions-heart"
      | "reactions-tada"
      | "interactions"
      | "created"
      | "updated";
    /** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */
    order?: "desc" | "asc";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  incomplete_results: boolean;
  items: IssueSearchResultItem[];
  total_count: number;
}> {
  const result = await api.search.searchIssuesAndPullRequests({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Search labels
 * @request GET :/search/labels
 * @allowrelaxedtypes
 * @readonly
 */
export async function getSearchSearchLabels(
  query: {
    /** The id of the repository. */
    repository_id: number;
    /** The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). */
    q: string;
    /** Sorts the results of your query by when the label was `created` or `updated`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */
    sort?: "created" | "updated";
    /** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */
    order?: "desc" | "asc";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  incomplete_results: boolean;
  items: LabelSearchResultItem[];
  total_count: number;
}> {
  const result = await api.search.searchLabels({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Search repositories
 * @request GET :/search/repositories
 * @allowrelaxedtypes
 * @readonly
 */
export async function getSearchSearchRepos(
  query: {
    /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching for repositories](https://docs.github.com/articles/searching-for-repositories/)" for a detailed list of qualifiers. */
    q: string;
    /** Sorts the results of your query by number of `stars`, `forks`, or `help-wanted-issues` or how recently the items were `updated`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */
    sort?: "stars" | "forks" | "help-wanted-issues" | "updated";
    /** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */
    order?: "desc" | "asc";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  incomplete_results: boolean;
  items: RepoSearchResultItem[];
  total_count: number;
}> {
  const result = await api.search.searchRepos({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Search topics
 * @request GET :/search/topics
 * @readonly
 */
export async function getSearchSearchTopics(
  query: {
    /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). */
    q: string;
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  incomplete_results: boolean;
  items: TopicSearchResultItem[];
  total_count: number;
}> {
  const result = await api.search.searchTopics({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Search users
 * @request GET :/search/users
 * @allowrelaxedtypes
 * @readonly
 */
export async function getSearchSearchUsers(
  query: {
    /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as the web interface for GitHub. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching users](https://docs.github.com/search-github/searching-on-github/searching-users)" for a detailed list of qualifiers. */
    q: string;
    /** Sorts the results of your query by number of `followers` or `repositories`, or when the person `joined` GitHub. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */
    sort?: "followers" | "repositories" | "joined";
    /** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */
    order?: "desc" | "asc";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  incomplete_results: boolean;
  items: UserSearchResultItem[];
  total_count: number;
}> {
  const result = await api.search.searchUsers({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a team (Legacy)
 * @request DELETE :/teams/{team_id}
 */
export async function deleteTeamsTeamsDeleteLegacy(
  /** The unique identifier of the team. */
  teamId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.teams.teamsDeleteLegacy({
    teamId: teamId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a team (Legacy)
 * @request GET :/teams/{team_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getTeamsTeamsGetLegacy(
  teamId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<TeamFull> {
  const result = await api.teams.teamsGetLegacy({
    teamId: teamId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update a team (Legacy)
 * @request PATCH :/teams/{team_id}
 * @allowrelaxedtypes
 */
export async function patchTeamsTeamsUpdateLegacy(
  teamId: number,
  /** Request body */
  data: {
    /** The description of the team. */
    description?: string;
    /** The name of the team. */
    name: string;
    /** The ID of a team to set as the parent team. */
    parent_team_id?: number | null;
    /**
     * **Deprecated**. The permission that new repositories will be added to the team with when none is specified.
     * @default "pull"
     */
    permission?: "pull" | "push" | "admin";
    /**
     * The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:
     * **For a non-nested team:**
     *  * `secret` - only visible to organization owners and members of this team.
     *  * `closed` - visible to all members of this organization.
     * **For a parent or child team:**
     *  * `closed` - visible to all members of this organization.
     */
    privacy?: "secret" | "closed";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<TeamFull> {
  const result = await api.teams.teamsUpdateLegacy({
    teamId: teamId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List discussions (Legacy)
 * @request GET :/teams/{team_id}/discussions
 * @allowrelaxedtypes
 * @readonly
 */
export async function getTeamsTeamsListDiscussionsLegacy(
  teamId: number,
  query: {
    /** The direction to sort the results by. */
    direction?: "asc" | "desc";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<TeamDiscussion[]> {
  const result = await api.teams.teamsListDiscussionsLegacy({
    teamId: teamId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a discussion (Legacy)
 * @request POST :/teams/{team_id}/discussions
 */
export async function postTeamsTeamsCreateDiscussionLegacy(
  teamId: number,
  /** Request body */
  data: {
    /** The discussion post's body text. */
    body: string;
    /**
     * Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
     * @default false
     */
    private?: boolean;
    /** The discussion post's title. */
    title: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<TeamDiscussion> {
  const result = await api.teams.teamsCreateDiscussionLegacy({
    teamId: teamId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a discussion (Legacy)
 * @request DELETE :/teams/{team_id}/discussions/{discussion_number}
 */
export async function deleteTeamsTeamsDeleteDiscussionLegacy(
  teamId: number,
  discussionNumber: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.teams.teamsDeleteDiscussionLegacy({
    teamId: teamId,
    discussionNumber: discussionNumber,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a discussion (Legacy)
 * @request GET :/teams/{team_id}/discussions/{discussion_number}
 * @readonly
 */
export async function getTeamsTeamsGetDiscussionLegacy(
  teamId: number,
  discussionNumber: number,
  headers?: hasuraSdk.JSONValue,
): Promise<TeamDiscussion> {
  const result = await api.teams.teamsGetDiscussionLegacy({
    teamId: teamId,
    discussionNumber: discussionNumber,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update a discussion (Legacy)
 * @request PATCH :/teams/{team_id}/discussions/{discussion_number}
 */
export async function patchTeamsTeamsUpdateDiscussionLegacy(
  teamId: number,
  discussionNumber: number,
  /** Request body */
  data?: {
    /** The discussion post's body text. */
    body?: string;
    /** The discussion post's title. */
    title?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<TeamDiscussion> {
  const result = await api.teams.teamsUpdateDiscussionLegacy({
    teamId: teamId,
    discussionNumber: discussionNumber,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List discussion comments (Legacy)
 * @request GET :/teams/{team_id}/discussions/{discussion_number}/comments
 * @allowrelaxedtypes
 * @readonly
 */
export async function getTeamsTeamsListDiscussionCommentsLegacy(
  teamId: number,
  discussionNumber: number,
  query: {
    /** The direction to sort the results by. */
    direction?: "asc" | "desc";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<TeamDiscussionComment[]> {
  const result = await api.teams.teamsListDiscussionCommentsLegacy({
    teamId: teamId,
    discussionNumber: discussionNumber,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a discussion comment (Legacy)
 * @request POST :/teams/{team_id}/discussions/{discussion_number}/comments
 */
export async function postTeamsTeamsCreateDiscussionCommentLegacy(
  teamId: number,
  discussionNumber: number,
  /** Request body */
  data: {
    /** The discussion comment's body text. */
    body: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<TeamDiscussionComment> {
  const result = await api.teams.teamsCreateDiscussionCommentLegacy({
    teamId: teamId,
    discussionNumber: discussionNumber,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a discussion comment (Legacy)
 * @request DELETE :/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}
 */
export async function deleteTeamsTeamsDeleteDiscussionCommentLegacy(
  teamId: number,
  discussionNumber: number,
  commentNumber: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.teams.teamsDeleteDiscussionCommentLegacy({
    teamId: teamId,
    discussionNumber: discussionNumber,
    commentNumber: commentNumber,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a discussion comment (Legacy)
 * @request GET :/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}
 * @readonly
 */
export async function getTeamsTeamsGetDiscussionCommentLegacy(
  teamId: number,
  discussionNumber: number,
  commentNumber: number,
  headers?: hasuraSdk.JSONValue,
): Promise<TeamDiscussionComment> {
  const result = await api.teams.teamsGetDiscussionCommentLegacy({
    teamId: teamId,
    discussionNumber: discussionNumber,
    commentNumber: commentNumber,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update a discussion comment (Legacy)
 * @request PATCH :/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}
 */
export async function patchTeamsTeamsUpdateDiscussionCommentLegacy(
  teamId: number,
  discussionNumber: number,
  commentNumber: number,
  /** Request body */
  data: {
    /** The discussion comment's body text. */
    body: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<TeamDiscussionComment> {
  const result = await api.teams.teamsUpdateDiscussionCommentLegacy({
    teamId: teamId,
    discussionNumber: discussionNumber,
    commentNumber: commentNumber,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List reactions for a team discussion comment (Legacy)
 * @request GET :/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions
 * @allowrelaxedtypes
 * @readonly
 */
export async function getTeamsReactionsListForTeamDiscussionCommentLegacy(
  teamId: number,
  discussionNumber: number,
  commentNumber: number,
  query: {
    /** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment. */
    content?:
      | "+1"
      | "-1"
      | "laugh"
      | "confused"
      | "heart"
      | "hooray"
      | "rocket"
      | "eyes";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Reaction[]> {
  const result = await api.teams.reactionsListForTeamDiscussionCommentLegacy({
    teamId: teamId,
    discussionNumber: discussionNumber,
    commentNumber: commentNumber,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create reaction for a team discussion comment (Legacy)
 * @request POST :/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions
 * @allowrelaxedtypes
 */
export async function postTeamsReactionsCreateForTeamDiscussionCommentLegacy(
  teamId: number,
  discussionNumber: number,
  commentNumber: number,
  /** Request body */
  data: {
    /** The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion comment. */
    content:
      | "+1"
      | "-1"
      | "laugh"
      | "confused"
      | "heart"
      | "hooray"
      | "rocket"
      | "eyes";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Reaction> {
  const result = await api.teams.reactionsCreateForTeamDiscussionCommentLegacy({
    teamId: teamId,
    discussionNumber: discussionNumber,
    commentNumber: commentNumber,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List reactions for a team discussion (Legacy)
 * @request GET :/teams/{team_id}/discussions/{discussion_number}/reactions
 * @allowrelaxedtypes
 * @readonly
 */
export async function getTeamsReactionsListForTeamDiscussionLegacy(
  teamId: number,
  discussionNumber: number,
  query: {
    /** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion. */
    content?:
      | "+1"
      | "-1"
      | "laugh"
      | "confused"
      | "heart"
      | "hooray"
      | "rocket"
      | "eyes";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Reaction[]> {
  const result = await api.teams.reactionsListForTeamDiscussionLegacy({
    teamId: teamId,
    discussionNumber: discussionNumber,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create reaction for a team discussion (Legacy)
 * @request POST :/teams/{team_id}/discussions/{discussion_number}/reactions
 * @allowrelaxedtypes
 */
export async function postTeamsReactionsCreateForTeamDiscussionLegacy(
  teamId: number,
  discussionNumber: number,
  /** Request body */
  data: {
    /** The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion. */
    content:
      | "+1"
      | "-1"
      | "laugh"
      | "confused"
      | "heart"
      | "hooray"
      | "rocket"
      | "eyes";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Reaction> {
  const result = await api.teams.reactionsCreateForTeamDiscussionLegacy({
    teamId: teamId,
    discussionNumber: discussionNumber,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List pending team invitations (Legacy)
 * @request GET :/teams/{team_id}/invitations
 * @readonly
 */
export async function getTeamsTeamsListPendingInvitationsLegacy(
  teamId: number,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<OrganizationInvitation[]> {
  const result = await api.teams.teamsListPendingInvitationsLegacy({
    teamId: teamId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List team members (Legacy)
 * @request GET :/teams/{team_id}/members
 * @allowrelaxedtypes
 * @readonly
 */
export async function getTeamsTeamsListMembersLegacy(
  teamId: number,
  query: {
    /** Filters members returned by their role in the team. */
    role?: "member" | "maintainer" | "all";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<SimpleUser[]> {
  const result = await api.teams.teamsListMembersLegacy({
    teamId: teamId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Remove team member (Legacy)
 * @request DELETE :/teams/{team_id}/members/{username}
 */
export async function deleteTeamsTeamsRemoveMemberLegacy(
  teamId: number,
  username: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.teams.teamsRemoveMemberLegacy({
    teamId: teamId,
    username: username,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get team member (Legacy)
 * @request GET :/teams/{team_id}/members/{username}
 * @readonly
 */
export async function getTeamsTeamsGetMemberLegacy(
  teamId: number,
  username: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.teams.teamsGetMemberLegacy({
    teamId: teamId,
    username: username,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Add team member (Legacy)
 * @request PUT :/teams/{team_id}/members/{username}
 */
export async function putTeamsTeamsAddMemberLegacy(
  teamId: number,
  username: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.teams.teamsAddMemberLegacy({
    teamId: teamId,
    username: username,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Remove team membership for a user (Legacy)
 * @request DELETE :/teams/{team_id}/memberships/{username}
 */
export async function deleteTeamsTeamsRemoveMembershipForUserLegacy(
  teamId: number,
  username: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.teams.teamsRemoveMembershipForUserLegacy({
    teamId: teamId,
    username: username,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get team membership for a user (Legacy)
 * @request GET :/teams/{team_id}/memberships/{username}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getTeamsTeamsGetMembershipForUserLegacy(
  teamId: number,
  username: string,
  headers?: hasuraSdk.JSONValue,
): Promise<TeamMembership> {
  const result = await api.teams.teamsGetMembershipForUserLegacy({
    teamId: teamId,
    username: username,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Add or update team membership for a user (Legacy)
 * @request PUT :/teams/{team_id}/memberships/{username}
 * @allowrelaxedtypes
 */
export async function putTeamsTeamsAddOrUpdateMembershipForUserLegacy(
  teamId: number,
  username: string,
  /** Request body */
  data?: {
    /**
     * The role that this user should have in the team.
     * @default "member"
     */
    role?: "member" | "maintainer";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<TeamMembership> {
  const result = await api.teams.teamsAddOrUpdateMembershipForUserLegacy({
    teamId: teamId,
    username: username,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List team projects (Legacy)
 * @request GET :/teams/{team_id}/projects
 * @readonly
 */
export async function getTeamsTeamsListProjectsLegacy(
  teamId: number,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<TeamProject[]> {
  const result = await api.teams.teamsListProjectsLegacy({
    teamId: teamId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Remove a project from a team (Legacy)
 * @request DELETE :/teams/{team_id}/projects/{project_id}
 */
export async function deleteTeamsTeamsRemoveProjectLegacy(
  teamId: number,
  projectId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.teams.teamsRemoveProjectLegacy({
    teamId: teamId,
    projectId: projectId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Check team permissions for a project (Legacy)
 * @request GET :/teams/{team_id}/projects/{project_id}
 * @readonly
 */
export async function getTeamsTeamsCheckPermissionsForProjectLegacy(
  teamId: number,
  projectId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<TeamProject> {
  const result = await api.teams.teamsCheckPermissionsForProjectLegacy({
    teamId: teamId,
    projectId: projectId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Add or update team project permissions (Legacy)
 * @request PUT :/teams/{team_id}/projects/{project_id}
 * @allowrelaxedtypes
 */
export async function putTeamsTeamsAddOrUpdateProjectPermissionsLegacy(
  teamId: number,
  projectId: number,
  /** Request body */
  data?: {
    /** The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)." */
    permission?: "read" | "write" | "admin";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.teams.teamsAddOrUpdateProjectPermissionsLegacy({
    teamId: teamId,
    projectId: projectId,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List team repositories (Legacy)
 * @request GET :/teams/{team_id}/repos
 * @allowrelaxedtypes
 * @readonly
 */
export async function getTeamsTeamsListReposLegacy(
  teamId: number,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<MinimalRepository[]> {
  const result = await api.teams.teamsListReposLegacy({
    teamId: teamId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Remove a repository from a team (Legacy)
 * @request DELETE :/teams/{team_id}/repos/{owner}/{repo}
 */
export async function deleteTeamsTeamsRemoveRepoLegacy(
  teamId: number,
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.teams.teamsRemoveRepoLegacy({
    teamId: teamId,
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Check team permissions for a repository (Legacy)
 * @request GET :/teams/{team_id}/repos/{owner}/{repo}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getTeamsTeamsCheckPermissionsForRepoLegacy(
  teamId: number,
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<TeamRepository> {
  const result = await api.teams.teamsCheckPermissionsForRepoLegacy({
    teamId: teamId,
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Add or update team repository permissions (Legacy)
 * @request PUT :/teams/{team_id}/repos/{owner}/{repo}
 * @allowrelaxedtypes
 */
export async function putTeamsTeamsAddOrUpdateRepoPermissionsLegacy(
  teamId: number,
  owner: string,
  repo: string,
  /** Request body */
  data?: {
    /** The permission to grant the team on this repository. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository. */
    permission?: "pull" | "push" | "admin";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.teams.teamsAddOrUpdateRepoPermissionsLegacy({
    teamId: teamId,
    owner: owner,
    repo: repo,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List child teams (Legacy)
 * @request GET :/teams/{team_id}/teams
 * @readonly
 */
export async function getTeamsTeamsListChildLegacy(
  teamId: number,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Team[]> {
  const result = await api.teams.teamsListChildLegacy({
    teamId: teamId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the authenticated user
 * @request GET :/user
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUserUsersGetAuthenticated(
  headers?: hasuraSdk.JSONValue,
): Promise<PrivateUser | PublicUser> {
  const result = await api.user.usersGetAuthenticated({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update the authenticated user
 * @request PATCH :/user
 * @allowrelaxedtypes
 */
export async function patchUserUsersUpdateAuthenticated(
  /** Request body */
  data?: {
    /** The new short biography of the user. */
    bio?: string;
    /**
     * The new blog URL of the user.
     * @example "blog.example.com"
     */
    blog?: string;
    /**
     * The new company of the user.
     * @example "Acme corporation"
     */
    company?: string;
    /**
     * The publicly visible email address of the user.
     * @example "omar@example.com"
     */
    email?: string;
    /** The new hiring availability of the user. */
    hireable?: boolean;
    /**
     * The new location of the user.
     * @example "Berlin, Germany"
     */
    location?: string;
    /**
     * The new name of the user.
     * @example "Omar Jahandar"
     */
    name?: string;
    /**
     * The new Twitter username of the user.
     * @example "therealomarj"
     */
    twitter_username?: string | null;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<PrivateUser> {
  const result = await api.user.usersUpdateAuthenticated({
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List users blocked by the authenticated user
 * @request GET :/user/blocks
 * @readonly
 */
export async function getUserUsersListBlockedByAuthenticatedUser(
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<SimpleUser[]> {
  const result = await api.user.usersListBlockedByAuthenticatedUser({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Unblock a user
 * @request DELETE :/user/blocks/{username}
 */
export async function deleteUserUsersUnblock(
  username: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.user.usersUnblock({
    username: username,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Check if a user is blocked by the authenticated user
 * @request GET :/user/blocks/{username}
 * @readonly
 */
export async function getUserUsersCheckBlocked(
  username: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.user.usersCheckBlocked({
    username: username,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Block a user
 * @request PUT :/user/blocks/{username}
 */
export async function putUserUsersBlock(
  username: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.user.usersBlock({
    username: username,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List codespaces for the authenticated user
 * @request GET :/user/codespaces
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUserCodespacesListForAuthenticatedUser(
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
    /** ID of the Repository to filter on */
    repository_id?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  codespaces: Codespace[];
  total_count: number;
}> {
  const result = await api.user.codespacesListForAuthenticatedUser({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a codespace for the authenticated user
 * @request POST :/user/codespaces
 * @allowrelaxedtypes
 */
export async function postUserCodespacesCreateForAuthenticatedUser(
  /** Request body */
  data:
    | {
        /** IP for location auto-detection when proxying a request */
        client_ip?: string;
        /** Path to devcontainer.json config to use for this codespace */
        devcontainer_path?: string;
        /** Display name for this codespace */
        display_name?: string;
        /** Time in minutes before codespace stops from inactivity */
        idle_timeout_minutes?: number;
        /** Location for this codespace. Assigned by IP if not provided */
        location?: string;
        /** Machine type to use for this codespace */
        machine?: string;
        /** Whether to authorize requested permissions from devcontainer.json */
        multi_repo_permissions_opt_out?: boolean;
        /** Git ref (typically a branch name) for this codespace */
        ref?: string;
        /** Repository id for this codespace */
        repository_id: number;
        /** Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days). */
        retention_period_minutes?: number;
        /** Working directory for this codespace */
        working_directory?: string;
      }
    | {
        /** Path to devcontainer.json config to use for this codespace */
        devcontainer_path?: string;
        /** Time in minutes before codespace stops from inactivity */
        idle_timeout_minutes?: number;
        /** Location for this codespace. Assigned by IP if not provided */
        location?: string;
        /** Machine type to use for this codespace */
        machine?: string;
        /** Pull request number for this codespace */
        pull_request: {
          /** Pull request number */
          pull_request_number: number;
          /** Repository id for this codespace */
          repository_id: number;
        };
        /** Working directory for this codespace */
        working_directory?: string;
      },
  headers?: hasuraSdk.JSONValue,
): Promise<Codespace> {
  const result = await api.user.codespacesCreateForAuthenticatedUser({
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List secrets for the authenticated user
 * @request GET :/user/codespaces/secrets
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUserCodespacesListSecretsForAuthenticatedUser(
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  secrets: CodespacesSecret[];
  total_count: number;
}> {
  const result = await api.user.codespacesListSecretsForAuthenticatedUser({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get public key for the authenticated user
 * @request GET :/user/codespaces/secrets/public-key
 * @readonly
 */
export async function getUserCodespacesGetPublicKeyForAuthenticatedUser(
  headers?: hasuraSdk.JSONValue,
): Promise<CodespacesUserPublicKey> {
  const result = await api.user.codespacesGetPublicKeyForAuthenticatedUser({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a secret for the authenticated user
 * @request DELETE :/user/codespaces/secrets/{secret_name}
 */
export async function deleteUserCodespacesDeleteSecretForAuthenticatedUser(
  secretName: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.user.codespacesDeleteSecretForAuthenticatedUser({
    secretName: secretName,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a secret for the authenticated user
 * @request GET :/user/codespaces/secrets/{secret_name}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUserCodespacesGetSecretForAuthenticatedUser(
  secretName: string,
  headers?: hasuraSdk.JSONValue,
): Promise<CodespacesSecret> {
  const result = await api.user.codespacesGetSecretForAuthenticatedUser({
    secretName: secretName,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create or update a secret for the authenticated user
 * @request PUT :/user/codespaces/secrets/{secret_name}
 * @allowrelaxedtypes
 */
export async function putUserCodespacesCreateOrUpdateSecretForAuthenticatedUser(
  secretName: string,
  /** Request body */
  data: {
    /**
     * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get the public key for the authenticated user](https://docs.github.com/rest/reference/codespaces#get-the-public-key-for-the-authenticated-user) endpoint.
     * @pattern ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$
     */
    encrypted_value?: string;
    /** ID of the key you used to encrypt the secret. */
    key_id: string;
    /** An array of repository ids that can access the user secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-a-user-secret), [Set selected repositories for a user secret](https://docs.github.com/rest/reference/codespaces#set-selected-repositories-for-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/reference/codespaces#remove-a-selected-repository-from-a-user-secret) endpoints. */
    selected_repository_ids?: (number | string)[];
  },
  headers?: hasuraSdk.JSONValue,
): Promise<EmptyObject> {
  const result =
    await api.user.codespacesCreateOrUpdateSecretForAuthenticatedUser({
      secretName: secretName,
      data: data,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List selected repositories for a user secret
 * @request GET :/user/codespaces/secrets/{secret_name}/repositories
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUserCodespacesListRepositoriesForSecretForAuthenticatedUser(
  secretName: string,
  headers?: hasuraSdk.JSONValue,
): Promise<{
  repositories: MinimalRepository[];
  total_count: number;
}> {
  const result =
    await api.user.codespacesListRepositoriesForSecretForAuthenticatedUser({
      secretName: secretName,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set selected repositories for a user secret
 * @request PUT :/user/codespaces/secrets/{secret_name}/repositories
 */
export async function putUserCodespacesSetRepositoriesForSecretForAuthenticatedUser(
  secretName: string,
  /** Request body */
  data: {
    /** An array of repository ids for which a codespace can access the secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-a-user-secret), [Add a selected repository to a user secret](https://docs.github.com/rest/reference/codespaces#add-a-selected-repository-to-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/reference/codespaces#remove-a-selected-repository-from-a-user-secret) endpoints. */
    selected_repository_ids: number[];
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.user.codespacesSetRepositoriesForSecretForAuthenticatedUser({
      secretName: secretName,
      data: data,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Remove a selected repository from a user secret
 * @request DELETE :/user/codespaces/secrets/{secret_name}/repositories/{repository_id}
 */
export async function deleteUserCodespacesRemoveRepositoryForSecretForAuthenticatedUser(
  secretName: string,
  repositoryId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.user.codespacesRemoveRepositoryForSecretForAuthenticatedUser({
      secretName: secretName,
      repositoryId: repositoryId,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Add a selected repository to a user secret
 * @request PUT :/user/codespaces/secrets/{secret_name}/repositories/{repository_id}
 */
export async function putUserCodespacesAddRepositoryForSecretForAuthenticatedUser(
  secretName: string,
  repositoryId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.user.codespacesAddRepositoryForSecretForAuthenticatedUser({
      secretName: secretName,
      repositoryId: repositoryId,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a codespace for the authenticated user
 * @request DELETE :/user/codespaces/{codespace_name}
 */
export async function deleteUserCodespacesDeleteForAuthenticatedUser(
  codespaceName: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.user.codespacesDeleteForAuthenticatedUser({
    codespaceName: codespaceName,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a codespace for the authenticated user
 * @request GET :/user/codespaces/{codespace_name}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUserCodespacesGetForAuthenticatedUser(
  codespaceName: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Codespace> {
  const result = await api.user.codespacesGetForAuthenticatedUser({
    codespaceName: codespaceName,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update a codespace for the authenticated user
 * @request PATCH :/user/codespaces/{codespace_name}
 * @allowrelaxedtypes
 */
export async function patchUserCodespacesUpdateForAuthenticatedUser(
  codespaceName: string,
  /** Request body */
  data?: {
    /** Display name for this codespace */
    display_name?: string;
    /** A valid machine to transition this codespace to. */
    machine?: string;
    /** Recently opened folders inside the codespace. It is currently used by the clients to determine the folder path to load the codespace in. */
    recent_folders?: string[];
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Codespace> {
  const result = await api.user.codespacesUpdateForAuthenticatedUser({
    codespaceName: codespaceName,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Export a codespace for the authenticated user
 * @request POST :/user/codespaces/{codespace_name}/exports
 */
export async function postUserCodespacesExportForAuthenticatedUser(
  codespaceName: string,
  headers?: hasuraSdk.JSONValue,
): Promise<CodespaceExportDetails> {
  const result = await api.user.codespacesExportForAuthenticatedUser({
    codespaceName: codespaceName,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get details about a codespace export
 * @request GET :/user/codespaces/{codespace_name}/exports/{export_id}
 * @readonly
 */
export async function getUserCodespacesGetExportDetailsForAuthenticatedUser(
  codespaceName: string,
  /** The ID of the export operation, or `latest`. Currently only `latest` is currently supported. */
  exportId: string,
  headers?: hasuraSdk.JSONValue,
): Promise<CodespaceExportDetails> {
  const result = await api.user.codespacesGetExportDetailsForAuthenticatedUser({
    codespaceName: codespaceName,
    exportId: exportId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List machine types for a codespace
 * @request GET :/user/codespaces/{codespace_name}/machines
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUserCodespacesCodespaceMachinesForAuthenticatedUser(
  codespaceName: string,
  headers?: hasuraSdk.JSONValue,
): Promise<{
  machines: CodespaceMachine[];
  total_count: number;
}> {
  const result = await api.user.codespacesCodespaceMachinesForAuthenticatedUser(
    {
      codespaceName: codespaceName,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    },
  );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a repository from an unpublished codespace
 * @request POST :/user/codespaces/{codespace_name}/publish
 * @allowrelaxedtypes
 */
export async function postUserCodespacesPublishForAuthenticatedUser(
  codespaceName: string,
  /** Request body */
  data: {
    /** A name for the new repository. */
    name?: string;
    /**
     * Whether the new repository should be private.
     * @default false
     */
    private?: boolean;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<CodespaceWithFullRepository> {
  const result = await api.user.codespacesPublishForAuthenticatedUser({
    codespaceName: codespaceName,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Start a codespace for the authenticated user
 * @request POST :/user/codespaces/{codespace_name}/start
 * @allowrelaxedtypes
 */
export async function postUserCodespacesStartForAuthenticatedUser(
  codespaceName: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Codespace> {
  const result = await api.user.codespacesStartForAuthenticatedUser({
    codespaceName: codespaceName,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Stop a codespace for the authenticated user
 * @request POST :/user/codespaces/{codespace_name}/stop
 * @allowrelaxedtypes
 */
export async function postUserCodespacesStopForAuthenticatedUser(
  codespaceName: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Codespace> {
  const result = await api.user.codespacesStopForAuthenticatedUser({
    codespaceName: codespaceName,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set primary email visibility for the authenticated user
 * @request PATCH :/user/email/visibility
 * @allowrelaxedtypes
 */
export async function patchUserUsersSetPrimaryEmailVisibilityForAuthenticatedUser(
  /** Request body */
  data: {
    /** Denotes whether an email is publicly visible. */
    visibility: "public" | "private";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Email[]> {
  const result =
    await api.user.usersSetPrimaryEmailVisibilityForAuthenticatedUser({
      data: data,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete an email address for the authenticated user
 * @request DELETE :/user/emails
 * @allowrelaxedtypes
 */
export async function deleteUserUsersDeleteEmailForAuthenticatedUser(
  /** Request body */
  data:
    | {
        /** Email addresses associated with the GitHub user account. */
        emails: string[];
      }
    | string[]
    | string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.user.usersDeleteEmailForAuthenticatedUser({
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List email addresses for the authenticated user
 * @request GET :/user/emails
 * @readonly
 */
export async function getUserUsersListEmailsForAuthenticatedUser(
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Email[]> {
  const result = await api.user.usersListEmailsForAuthenticatedUser({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Add an email address for the authenticated user
 * @request POST :/user/emails
 * @allowrelaxedtypes
 */
export async function postUserUsersAddEmailForAuthenticatedUser(
  /** Request body */
  data?:
    | {
        /**
         * Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.
         * @example []
         */
        emails: string[];
      }
    | string[]
    | string,
  headers?: hasuraSdk.JSONValue,
): Promise<Email[]> {
  const result = await api.user.usersAddEmailForAuthenticatedUser({
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List followers of the authenticated user
 * @request GET :/user/followers
 * @readonly
 */
export async function getUserUsersListFollowersForAuthenticatedUser(
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<SimpleUser[]> {
  const result = await api.user.usersListFollowersForAuthenticatedUser({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List the people the authenticated user follows
 * @request GET :/user/following
 * @readonly
 */
export async function getUserUsersListFollowedByAuthenticatedUser(
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<SimpleUser[]> {
  const result = await api.user.usersListFollowedByAuthenticatedUser({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Unfollow a user
 * @request DELETE :/user/following/{username}
 */
export async function deleteUserUsersUnfollow(
  username: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.user.usersUnfollow({
    username: username,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Check if a person is followed by the authenticated user
 * @request GET :/user/following/{username}
 * @readonly
 */
export async function getUserUsersCheckPersonIsFollowedByAuthenticated(
  username: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.user.usersCheckPersonIsFollowedByAuthenticated({
    username: username,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Follow a user
 * @request PUT :/user/following/{username}
 */
export async function putUserUsersFollow(
  username: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.user.usersFollow({
    username: username,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List GPG keys for the authenticated user
 * @request GET :/user/gpg_keys
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUserUsersListGpgKeysForAuthenticatedUser(
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<GpgKey[]> {
  const result = await api.user.usersListGpgKeysForAuthenticatedUser({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a GPG key for the authenticated user
 * @request POST :/user/gpg_keys
 * @allowrelaxedtypes
 */
export async function postUserUsersCreateGpgKeyForAuthenticatedUser(
  /** Request body */
  data: {
    /** A GPG key in ASCII-armored format. */
    armored_public_key: string;
    /** A descriptive name for the new key. */
    name?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<GpgKey> {
  const result = await api.user.usersCreateGpgKeyForAuthenticatedUser({
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a GPG key for the authenticated user
 * @request DELETE :/user/gpg_keys/{gpg_key_id}
 */
export async function deleteUserUsersDeleteGpgKeyForAuthenticatedUser(
  /** The unique identifier of the GPG key. */
  gpgKeyId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.user.usersDeleteGpgKeyForAuthenticatedUser({
    gpgKeyId: gpgKeyId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a GPG key for the authenticated user
 * @request GET :/user/gpg_keys/{gpg_key_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUserUsersGetGpgKeyForAuthenticatedUser(
  gpgKeyId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<GpgKey> {
  const result = await api.user.usersGetGpgKeyForAuthenticatedUser({
    gpgKeyId: gpgKeyId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List app installations accessible to the user access token
 * @request GET :/user/installations
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUserAppsListInstallationsForAuthenticatedUser(
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  installations: Installation[];
  total_count: number;
}> {
  const result = await api.user.appsListInstallationsForAuthenticatedUser({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List repositories accessible to the user access token
 * @request GET :/user/installations/{installation_id}/repositories
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUserAppsListInstallationReposForAuthenticatedUser(
  installationId: number,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<{
  repositories: Repository[];
  repository_selection?: string;
  total_count: number;
}> {
  const result = await api.user.appsListInstallationReposForAuthenticatedUser({
    installationId: installationId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Remove a repository from an app installation
 * @request DELETE :/user/installations/{installation_id}/repositories/{repository_id}
 */
export async function deleteUserAppsRemoveRepoFromInstallationForAuthenticatedUser(
  installationId: number,
  repositoryId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.user.appsRemoveRepoFromInstallationForAuthenticatedUser({
      installationId: installationId,
      repositoryId: repositoryId,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Add a repository to an app installation
 * @request PUT :/user/installations/{installation_id}/repositories/{repository_id}
 */
export async function putUserAppsAddRepoToInstallationForAuthenticatedUser(
  installationId: number,
  repositoryId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.user.appsAddRepoToInstallationForAuthenticatedUser({
    installationId: installationId,
    repositoryId: repositoryId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Remove interaction restrictions from your public repositories
 * @request DELETE :/user/interaction-limits
 */
export async function deleteUserInteractionsRemoveRestrictionsForAuthenticatedUser(
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.user.interactionsRemoveRestrictionsForAuthenticatedUser({
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get interaction restrictions for your public repositories
 * @request GET :/user/interaction-limits
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUserInteractionsGetRestrictionsForAuthenticatedUser(
  headers?: hasuraSdk.JSONValue,
): Promise<InteractionLimitResponse | hasuraSdk.JSONValue> {
  const result = await api.user.interactionsGetRestrictionsForAuthenticatedUser(
    {
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    },
  );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Set interaction restrictions for your public repositories
 * @request PUT :/user/interaction-limits
 * @allowrelaxedtypes
 */
export async function putUserInteractionsSetRestrictionsForAuthenticatedUser(
  /** Request body */
  data: InteractionLimit,
  headers?: hasuraSdk.JSONValue,
): Promise<InteractionLimitResponse> {
  const result = await api.user.interactionsSetRestrictionsForAuthenticatedUser(
    {
      data: data,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    },
  );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List user account issues assigned to the authenticated user
 * @request GET :/user/issues
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUserIssuesListForAuthenticatedUser(
  query: {
    /** Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation. */
    filter?:
      | "assigned"
      | "created"
      | "mentioned"
      | "subscribed"
      | "repos"
      | "all";
    /** Indicates the state of the issues to return. */
    state?: "open" | "closed" | "all";
    /** A list of comma separated label names. Example: `bug,ui,@high` */
    labels?: string;
    /** What to sort results by. */
    sort?: "created" | "updated" | "comments";
    /** The direction to sort the results by. */
    direction?: "asc" | "desc";
    /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
    since?: string;
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Issue[]> {
  const result = await api.user.issuesListForAuthenticatedUser({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List public SSH keys for the authenticated user
 * @request GET :/user/keys
 * @readonly
 */
export async function getUserUsersListPublicSshKeysForAuthenticatedUser(
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Key[]> {
  const result = await api.user.usersListPublicSshKeysForAuthenticatedUser({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a public SSH key for the authenticated user
 * @request POST :/user/keys
 */
export async function postUserUsersCreatePublicSshKeyForAuthenticatedUser(
  /** Request body */
  data: {
    /**
     * The public SSH key to add to your GitHub account.
     * @pattern ^ssh-(rsa|dss|ed25519) |^ecdsa-sha2-nistp(256|384|521)
     */
    key: string;
    /**
     * A descriptive name for the new key.
     * @example "Personal MacBook Air"
     */
    title?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Key> {
  const result = await api.user.usersCreatePublicSshKeyForAuthenticatedUser({
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a public SSH key for the authenticated user
 * @request DELETE :/user/keys/{key_id}
 */
export async function deleteUserUsersDeletePublicSshKeyForAuthenticatedUser(
  keyId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.user.usersDeletePublicSshKeyForAuthenticatedUser({
    keyId: keyId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a public SSH key for the authenticated user
 * @request GET :/user/keys/{key_id}
 * @readonly
 */
export async function getUserUsersGetPublicSshKeyForAuthenticatedUser(
  keyId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<Key> {
  const result = await api.user.usersGetPublicSshKeyForAuthenticatedUser({
    keyId: keyId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List subscriptions for the authenticated user
 * @request GET :/user/marketplace_purchases
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUserAppsListSubscriptionsForAuthenticatedUser(
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<UserMarketplacePurchase[]> {
  const result = await api.user.appsListSubscriptionsForAuthenticatedUser({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List subscriptions for the authenticated user (stubbed)
 * @request GET :/user/marketplace_purchases/stubbed
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUserAppsListSubscriptionsForAuthenticatedUserStubbed(
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<UserMarketplacePurchase[]> {
  const result =
    await api.user.appsListSubscriptionsForAuthenticatedUserStubbed({
      query: query,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List organization memberships for the authenticated user
 * @request GET :/user/memberships/orgs
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUserOrgsListMembershipsForAuthenticatedUser(
  query: {
    /** Indicates the state of the memberships to return. If not specified, the API returns both active and pending memberships. */
    state?: "active" | "pending";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<OrgMembership[]> {
  const result = await api.user.orgsListMembershipsForAuthenticatedUser({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get an organization membership for the authenticated user
 * @request GET :/user/memberships/orgs/{org}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUserOrgsGetMembershipForAuthenticatedUser(
  org: string,
  headers?: hasuraSdk.JSONValue,
): Promise<OrgMembership> {
  const result = await api.user.orgsGetMembershipForAuthenticatedUser({
    org: org,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Update an organization membership for the authenticated user
 * @request PATCH :/user/memberships/orgs/{org}
 * @allowrelaxedtypes
 */
export async function patchUserOrgsUpdateMembershipForAuthenticatedUser(
  org: string,
  /** Request body */
  data: {
    /** The state that the membership should be in. Only `"active"` will be accepted. */
    state: "active";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<OrgMembership> {
  const result = await api.user.orgsUpdateMembershipForAuthenticatedUser({
    org: org,
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List user migrations
 * @request GET :/user/migrations
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUserMigrationsListForAuthenticatedUser(
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Migration[]> {
  const result = await api.user.migrationsListForAuthenticatedUser({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Start a user migration
 * @request POST :/user/migrations
 * @allowrelaxedtypes
 */
export async function postUserMigrationsStartForAuthenticatedUser(
  /** Request body */
  data: {
    /**
     * Exclude attributes from the API response to improve performance
     * @example ["repositories"]
     */
    exclude?: "repositories"[];
    /**
     * Do not include attachments in the migration
     * @example true
     */
    exclude_attachments?: boolean;
    /**
     * Indicates whether the repository git data should be excluded from the migration.
     * @example true
     */
    exclude_git_data?: boolean;
    /**
     * Indicates whether metadata should be excluded and only git source should be included for the migration.
     * @example true
     */
    exclude_metadata?: boolean;
    /**
     * Indicates whether projects owned by the organization or users should be excluded.
     * @example true
     */
    exclude_owner_projects?: boolean;
    /**
     * Do not include releases in the migration
     * @example true
     */
    exclude_releases?: boolean;
    /**
     * Lock the repositories being migrated at the start of the migration
     * @example true
     */
    lock_repositories?: boolean;
    /**
     * Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).
     * @default false
     * @example true
     */
    org_metadata_only?: boolean;
    repositories: string[];
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Migration> {
  const result = await api.user.migrationsStartForAuthenticatedUser({
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a user migration status
 * @request GET :/user/migrations/{migration_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUserMigrationsGetStatusForAuthenticatedUser(
  migrationId: number,
  query: { exclude?: string[] },
  headers?: hasuraSdk.JSONValue,
): Promise<Migration> {
  const result = await api.user.migrationsGetStatusForAuthenticatedUser({
    migrationId: migrationId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a user migration archive
 * @request DELETE :/user/migrations/{migration_id}/archive
 */
export async function deleteUserMigrationsDeleteArchiveForAuthenticatedUser(
  migrationId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.user.migrationsDeleteArchiveForAuthenticatedUser({
    migrationId: migrationId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Download a user migration archive
 * @request GET :/user/migrations/{migration_id}/archive
 * @readonly
 */
export async function getUserMigrationsGetArchiveForAuthenticatedUser(
  migrationId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.user.migrationsGetArchiveForAuthenticatedUser({
    migrationId: migrationId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Unlock a user repository
 * @request DELETE :/user/migrations/{migration_id}/repos/{repo_name}/lock
 */
export async function deleteUserMigrationsUnlockRepoForAuthenticatedUser(
  migrationId: number,
  repoName: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.user.migrationsUnlockRepoForAuthenticatedUser({
    migrationId: migrationId,
    repoName: repoName,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List repositories for a user migration
 * @request GET :/user/migrations/{migration_id}/repositories
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUserMigrationsListReposForAuthenticatedUser(
  migrationId: number,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<MinimalRepository[]> {
  const result = await api.user.migrationsListReposForAuthenticatedUser({
    migrationId: migrationId,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List organizations for the authenticated user
 * @request GET :/user/orgs
 * @readonly
 */
export async function getUserOrgsListForAuthenticatedUser(
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<OrganizationSimple[]> {
  const result = await api.user.orgsListForAuthenticatedUser({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List packages for the authenticated user's namespace
 * @request GET :/user/packages
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUserPackagesListPackagesForAuthenticatedUser(
  query: {
    /** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */
    package_type:
      | "npm"
      | "maven"
      | "rubygems"
      | "docker"
      | "nuget"
      | "container";
    /** The selected visibility of the packages.  This parameter is optional and only filters an existing result set.

The `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.
For the list of GitHub Packages registries that support granular permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)." */
    visibility?: "public" | "private" | "internal";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Package[]> {
  const result = await api.user.packagesListPackagesForAuthenticatedUser({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a package for the authenticated user
 * @request DELETE :/user/packages/{package_type}/{package_name}
 * @allowrelaxedtypes
 */
export async function deleteUserPackagesDeletePackageForAuthenticatedUser(
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
  packageName: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.user.packagesDeletePackageForAuthenticatedUser({
    packageType: packageType,
    packageName: packageName,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a package for the authenticated user
 * @request GET :/user/packages/{package_type}/{package_name}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUserPackagesGetPackageForAuthenticatedUser(
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
  packageName: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Package> {
  const result = await api.user.packagesGetPackageForAuthenticatedUser({
    packageType: packageType,
    packageName: packageName,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Restore a package for the authenticated user
 * @request POST :/user/packages/{package_type}/{package_name}/restore
 * @allowrelaxedtypes
 */
export async function postUserPackagesRestorePackageForAuthenticatedUser(
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
  packageName: string,
  query: {
    /** package token */
    token?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.user.packagesRestorePackageForAuthenticatedUser({
    packageType: packageType,
    packageName: packageName,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List package versions for a package owned by the authenticated user
 * @request GET :/user/packages/{package_type}/{package_name}/versions
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUserPackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser(
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
  packageName: string,
  query: {
    /** Page number of the results to fetch. */
    page?: number;
    /** The number of results per page (max 100). */
    per_page?: number;
    /** The state of the package, either active or deleted. */
    state?: "active" | "deleted";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<PackageVersion[]> {
  const result =
    await api.user.packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser(
      {
        packageType: packageType,
        packageName: packageName,
        query: query,
        params: {
          headers: (headers?.value as Record<string, string>) ?? undefined,
        },
      },
    );
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a package version for the authenticated user
 * @request DELETE :/user/packages/{package_type}/{package_name}/versions/{package_version_id}
 * @allowrelaxedtypes
 */
export async function deleteUserPackagesDeletePackageVersionForAuthenticatedUser(
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
  packageName: string,
  packageVersionId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.user.packagesDeletePackageVersionForAuthenticatedUser({
      packageType: packageType,
      packageName: packageName,
      packageVersionId: packageVersionId,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a package version for the authenticated user
 * @request GET :/user/packages/{package_type}/{package_name}/versions/{package_version_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUserPackagesGetPackageVersionForAuthenticatedUser(
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
  packageName: string,
  packageVersionId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<PackageVersion> {
  const result = await api.user.packagesGetPackageVersionForAuthenticatedUser({
    packageType: packageType,
    packageName: packageName,
    packageVersionId: packageVersionId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Restore a package version for the authenticated user
 * @request POST :/user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore
 * @allowrelaxedtypes
 */
export async function postUserPackagesRestorePackageVersionForAuthenticatedUser(
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
  packageName: string,
  packageVersionId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result =
    await api.user.packagesRestorePackageVersionForAuthenticatedUser({
      packageType: packageType,
      packageName: packageName,
      packageVersionId: packageVersionId,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a user project
 * @request POST :/user/projects
 * @allowrelaxedtypes
 */
export async function postUserProjectsCreateForAuthenticatedUser(
  /** Request body */
  data: {
    /**
     * Body of the project
     * @example "This project represents the sprint of the first week in January"
     */
    body?: string | null;
    /**
     * Name of the project
     * @example "Week One Sprint"
     */
    name: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Project> {
  const result = await api.user.projectsCreateForAuthenticatedUser({
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List public email addresses for the authenticated user
 * @request GET :/user/public_emails
 * @readonly
 */
export async function getUserUsersListPublicEmailsForAuthenticatedUser(
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Email[]> {
  const result = await api.user.usersListPublicEmailsForAuthenticatedUser({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List repositories for the authenticated user
 * @request GET :/user/repos
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUserReposListForAuthenticatedUser(
  query: {
    /** Limit results to repositories with the specified visibility. */
    visibility?: "all" | "public" | "private";
    /** Comma-separated list of values. Can include:
     * `owner`: Repositories that are owned by the authenticated user.
     * `collaborator`: Repositories that the user has been added to as a collaborator.
     * `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on. */
    affiliation?: string;
    /** Limit results to repositories of the specified type. Will cause a `422` error if used in the same request as **visibility** or **affiliation**. */
    type?: "all" | "owner" | "public" | "private" | "member";
    /** The property to sort the results by. */
    sort?: "created" | "updated" | "pushed" | "full_name";
    /** The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`. */
    direction?: "asc" | "desc";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
    /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
    since?: string;
    /** Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
    before?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Repository[]> {
  const result = await api.user.reposListForAuthenticatedUser({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a repository for the authenticated user
 * @request POST :/user/repos
 * @allowrelaxedtypes
 */
export async function postUserReposCreateForAuthenticatedUser(
  /** Request body */
  data: {
    /**
     * Whether to allow Auto-merge to be used on pull requests.
     * @default false
     * @example false
     */
    allow_auto_merge?: boolean;
    /**
     * Whether to allow merge commits for pull requests.
     * @default true
     * @example true
     */
    allow_merge_commit?: boolean;
    /**
     * Whether to allow rebase merges for pull requests.
     * @default true
     * @example true
     */
    allow_rebase_merge?: boolean;
    /**
     * Whether to allow squash merges for pull requests.
     * @default true
     * @example true
     */
    allow_squash_merge?: boolean;
    /**
     * Whether the repository is initialized with a minimal README.
     * @default false
     */
    auto_init?: boolean;
    /**
     * Whether to delete head branches when pull requests are merged
     * @default false
     * @example false
     */
    delete_branch_on_merge?: boolean;
    /** A short description of the repository. */
    description?: string;
    /**
     * The desired language or platform to apply to the .gitignore.
     * @example "Haskell"
     */
    gitignore_template?: string;
    /**
     * Whether discussions are enabled.
     * @default false
     * @example true
     */
    has_discussions?: boolean;
    /**
     * Whether downloads are enabled.
     * @default true
     * @example true
     */
    has_downloads?: boolean;
    /**
     * Whether issues are enabled.
     * @default true
     * @example true
     */
    has_issues?: boolean;
    /**
     * Whether projects are enabled.
     * @default true
     * @example true
     */
    has_projects?: boolean;
    /**
     * Whether the wiki is enabled.
     * @default true
     * @example true
     */
    has_wiki?: boolean;
    /** A URL with more information about the repository. */
    homepage?: string;
    /**
     * Whether this repository acts as a template that can be used to generate new repositories.
     * @default false
     * @example true
     */
    is_template?: boolean;
    /**
     * The license keyword of the open source license for this repository.
     * @example "mit"
     */
    license_template?: string;
    /**
     * The default value for a merge commit message.
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `PR_BODY` - default to the pull request's body.
     * - `BLANK` - default to a blank commit message.
     */
    merge_commit_message?: "PR_BODY" | "PR_TITLE" | "BLANK";
    /**
     * The default value for a merge commit title.
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
     */
    merge_commit_title?: "PR_TITLE" | "MERGE_MESSAGE";
    /**
     * The name of the repository.
     * @example "Team Environment"
     */
    name: string;
    /**
     * Whether the repository is private.
     * @default false
     */
    private?: boolean;
    /**
     * The default value for a squash merge commit message:
     *
     * - `PR_BODY` - default to the pull request's body.
     * - `COMMIT_MESSAGES` - default to the branch's commit messages.
     * - `BLANK` - default to a blank commit message.
     */
    squash_merge_commit_message?: "PR_BODY" | "COMMIT_MESSAGES" | "BLANK";
    /**
     * The default value for a squash merge commit title:
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
     */
    squash_merge_commit_title?: "PR_TITLE" | "COMMIT_OR_PR_TITLE";
    /** The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization. */
    team_id?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Repository> {
  const result = await api.user.reposCreateForAuthenticatedUser({
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List repository invitations for the authenticated user
 * @request GET :/user/repository_invitations
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUserReposListInvitationsForAuthenticatedUser(
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<RepositoryInvitation[]> {
  const result = await api.user.reposListInvitationsForAuthenticatedUser({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Decline a repository invitation
 * @request DELETE :/user/repository_invitations/{invitation_id}
 */
export async function deleteUserReposDeclineInvitationForAuthenticatedUser(
  invitationId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.user.reposDeclineInvitationForAuthenticatedUser({
    invitationId: invitationId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Accept a repository invitation
 * @request PATCH :/user/repository_invitations/{invitation_id}
 */
export async function patchUserReposAcceptInvitationForAuthenticatedUser(
  invitationId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.user.reposAcceptInvitationForAuthenticatedUser({
    invitationId: invitationId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List SSH signing keys for the authenticated user
 * @request GET :/user/ssh_signing_keys
 * @readonly
 */
export async function getUserUsersListSshSigningKeysForAuthenticatedUser(
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<SshSigningKey[]> {
  const result = await api.user.usersListSshSigningKeysForAuthenticatedUser({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Create a SSH signing key for the authenticated user
 * @request POST :/user/ssh_signing_keys
 */
export async function postUserUsersCreateSshSigningKeyForAuthenticatedUser(
  /** Request body */
  data: {
    /**
     * The public SSH key to add to your GitHub account. For more information, see "[Checking for existing SSH keys](https://docs.github.com/authentication/connecting-to-github-with-ssh/checking-for-existing-ssh-keys)."
     * @pattern ^ssh-(rsa|dss|ed25519) |^ecdsa-sha2-nistp(256|384|521) |^(sk-ssh-ed25519|sk-ecdsa-sha2-nistp256)@openssh.com
     */
    key: string;
    /**
     * A descriptive name for the new key.
     * @example "Personal MacBook Air"
     */
    title?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<SshSigningKey> {
  const result = await api.user.usersCreateSshSigningKeyForAuthenticatedUser({
    data: data,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete an SSH signing key for the authenticated user
 * @request DELETE :/user/ssh_signing_keys/{ssh_signing_key_id}
 */
export async function deleteUserUsersDeleteSshSigningKeyForAuthenticatedUser(
  /** The unique identifier of the SSH signing key. */
  sshSigningKeyId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.user.usersDeleteSshSigningKeyForAuthenticatedUser({
    sshSigningKeyId: sshSigningKeyId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get an SSH signing key for the authenticated user
 * @request GET :/user/ssh_signing_keys/{ssh_signing_key_id}
 * @readonly
 */
export async function getUserUsersGetSshSigningKeyForAuthenticatedUser(
  sshSigningKeyId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<SshSigningKey> {
  const result = await api.user.usersGetSshSigningKeyForAuthenticatedUser({
    sshSigningKeyId: sshSigningKeyId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List repositories starred by the authenticated user
 * @request GET :/user/starred
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUserActivityListReposStarredByAuthenticatedUser(
  query: {
    /** The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to. */
    sort?: "created" | "updated";
    /** The direction to sort the results by. */
    direction?: "asc" | "desc";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Repository[]> {
  const result = await api.user.activityListReposStarredByAuthenticatedUser({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Unstar a repository for the authenticated user
 * @request DELETE :/user/starred/{owner}/{repo}
 */
export async function deleteUserActivityUnstarRepoForAuthenticatedUser(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.user.activityUnstarRepoForAuthenticatedUser({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Check if a repository is starred by the authenticated user
 * @request GET :/user/starred/{owner}/{repo}
 * @readonly
 */
export async function getUserActivityCheckRepoIsStarredByAuthenticatedUser(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.user.activityCheckRepoIsStarredByAuthenticatedUser({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Star a repository for the authenticated user
 * @request PUT :/user/starred/{owner}/{repo}
 */
export async function putUserActivityStarRepoForAuthenticatedUser(
  owner: string,
  repo: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.user.activityStarRepoForAuthenticatedUser({
    owner: owner,
    repo: repo,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List repositories watched by the authenticated user
 * @request GET :/user/subscriptions
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUserActivityListWatchedReposForAuthenticatedUser(
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<MinimalRepository[]> {
  const result = await api.user.activityListWatchedReposForAuthenticatedUser({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List teams for the authenticated user
 * @request GET :/user/teams
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUserTeamsListForAuthenticatedUser(
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<TeamFull[]> {
  const result = await api.user.teamsListForAuthenticatedUser({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List users
 * @request GET :/users
 * @readonly
 */
export async function getUsersUsersList(
  query: {
    /** A user ID. Only return users with an ID greater than this ID. */
    since?: number;
    /** The number of results per page (max 100). */
    per_page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<SimpleUser[]> {
  const result = await api.users.usersList({
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a user
 * @request GET :/users/{username}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUsersUsersGetByUsername(
  username: string,
  headers?: hasuraSdk.JSONValue,
): Promise<PrivateUser | PublicUser> {
  const result = await api.users.usersGetByUsername({
    username: username,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List events for the authenticated user
 * @request GET :/users/{username}/events
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUsersActivityListEventsForAuthenticatedUser(
  username: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Event[]> {
  const result = await api.users.activityListEventsForAuthenticatedUser({
    username: username,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List organization events for the authenticated user
 * @request GET :/users/{username}/events/orgs/{org}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUsersActivityListOrgEventsForAuthenticatedUser(
  username: string,
  org: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Event[]> {
  const result = await api.users.activityListOrgEventsForAuthenticatedUser({
    username: username,
    org: org,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List public events for a user
 * @request GET :/users/{username}/events/public
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUsersActivityListPublicEventsForUser(
  username: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Event[]> {
  const result = await api.users.activityListPublicEventsForUser({
    username: username,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List followers of a user
 * @request GET :/users/{username}/followers
 * @readonly
 */
export async function getUsersUsersListFollowersForUser(
  username: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<SimpleUser[]> {
  const result = await api.users.usersListFollowersForUser({
    username: username,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List the people a user follows
 * @request GET :/users/{username}/following
 * @readonly
 */
export async function getUsersUsersListFollowingForUser(
  username: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<SimpleUser[]> {
  const result = await api.users.usersListFollowingForUser({
    username: username,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Check if a user follows another user
 * @request GET :/users/{username}/following/{target_user}
 * @readonly
 */
export async function getUsersUsersCheckFollowingForUser(
  username: string,
  targetUser: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.users.usersCheckFollowingForUser({
    username: username,
    targetUser: targetUser,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List gists for a user
 * @request GET :/users/{username}/gists
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUsersGistsListForUser(
  username: string,
  query: {
    /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
    since?: string;
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<BaseGist[]> {
  const result = await api.users.gistsListForUser({
    username: username,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List GPG keys for a user
 * @request GET :/users/{username}/gpg_keys
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUsersUsersListGpgKeysForUser(
  username: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<GpgKey[]> {
  const result = await api.users.usersListGpgKeysForUser({
    username: username,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get contextual information for a user
 * @request GET :/users/{username}/hovercard
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUsersUsersGetContextForUser(
  username: string,
  query: {
    /** Identifies which additional information you'd like to receive about the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`. */
    subject_type?: "organization" | "repository" | "issue" | "pull_request";
    /** Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`. */
    subject_id?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Hovercard> {
  const result = await api.users.usersGetContextForUser({
    username: username,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a user installation for the authenticated app
 * @request GET :/users/{username}/installation
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUsersAppsGetUserInstallation(
  username: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Installation> {
  const result = await api.users.appsGetUserInstallation({
    username: username,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List public keys for a user
 * @request GET :/users/{username}/keys
 * @readonly
 */
export async function getUsersUsersListPublicKeysForUser(
  username: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<KeySimple[]> {
  const result = await api.users.usersListPublicKeysForUser({
    username: username,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List organizations for a user
 * @request GET :/users/{username}/orgs
 * @readonly
 */
export async function getUsersOrgsListForUser(
  username: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<OrganizationSimple[]> {
  const result = await api.users.orgsListForUser({
    username: username,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List packages for a user
 * @request GET :/users/{username}/packages
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUsersPackagesListPackagesForUser(
  username: string,
  query: {
    /** The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry. */
    package_type:
      | "npm"
      | "maven"
      | "rubygems"
      | "docker"
      | "nuget"
      | "container";
    /** The selected visibility of the packages.  This parameter is optional and only filters an existing result set.

The `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`.
For the list of GitHub Packages registries that support granular permissions, see "[About permissions for GitHub Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)." */
    visibility?: "public" | "private" | "internal";
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Package[]> {
  const result = await api.users.packagesListPackagesForUser({
    username: username,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete a package for a user
 * @request DELETE :/users/{username}/packages/{package_type}/{package_name}
 * @allowrelaxedtypes
 */
export async function deleteUsersPackagesDeletePackageForUser(
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
  packageName: string,
  username: string,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.users.packagesDeletePackageForUser({
    packageType: packageType,
    packageName: packageName,
    username: username,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a package for a user
 * @request GET :/users/{username}/packages/{package_type}/{package_name}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUsersPackagesGetPackageForUser(
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
  packageName: string,
  username: string,
  headers?: hasuraSdk.JSONValue,
): Promise<Package> {
  const result = await api.users.packagesGetPackageForUser({
    packageType: packageType,
    packageName: packageName,
    username: username,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Restore a package for a user
 * @request POST :/users/{username}/packages/{package_type}/{package_name}/restore
 * @allowrelaxedtypes
 */
export async function postUsersPackagesRestorePackageForUser(
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
  packageName: string,
  username: string,
  query: {
    /** package token */
    token?: string;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.users.packagesRestorePackageForUser({
    packageType: packageType,
    packageName: packageName,
    username: username,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List package versions for a package owned by a user
 * @request GET :/users/{username}/packages/{package_type}/{package_name}/versions
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUsersPackagesGetAllPackageVersionsForPackageOwnedByUser(
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
  packageName: string,
  username: string,
  headers?: hasuraSdk.JSONValue,
): Promise<PackageVersion[]> {
  const result =
    await api.users.packagesGetAllPackageVersionsForPackageOwnedByUser({
      packageType: packageType,
      packageName: packageName,
      username: username,
      params: {
        headers: (headers?.value as Record<string, string>) ?? undefined,
      },
    });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Delete package version for a user
 * @request DELETE :/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}
 * @allowrelaxedtypes
 */
export async function deleteUsersPackagesDeletePackageVersionForUser(
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
  packageName: string,
  username: string,
  packageVersionId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.users.packagesDeletePackageVersionForUser({
    packageType: packageType,
    packageName: packageName,
    username: username,
    packageVersionId: packageVersionId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get a package version for a user
 * @request GET :/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUsersPackagesGetPackageVersionForUser(
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
  packageName: string,
  packageVersionId: number,
  username: string,
  headers?: hasuraSdk.JSONValue,
): Promise<PackageVersion> {
  const result = await api.users.packagesGetPackageVersionForUser({
    packageType: packageType,
    packageName: packageName,
    packageVersionId: packageVersionId,
    username: username,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Restore package version for a user
 * @request POST :/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore
 * @allowrelaxedtypes
 */
export async function postUsersPackagesRestorePackageVersionForUser(
  packageType: "npm" | "maven" | "rubygems" | "docker" | "nuget" | "container",
  packageName: string,
  username: string,
  packageVersionId: number,
  headers?: hasuraSdk.JSONValue,
): Promise<hasuraSdk.JSONValue> {
  const result = await api.users.packagesRestorePackageVersionForUser({
    packageType: packageType,
    packageName: packageName,
    username: username,
    packageVersionId: packageVersionId,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List user projects
 * @request GET :/users/{username}/projects
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUsersProjectsListForUser(
  username: string,
  query: {
    /** Indicates the state of the projects to return. */
    state?: "open" | "closed" | "all";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Project[]> {
  const result = await api.users.projectsListForUser({
    username: username,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List events received by the authenticated user
 * @request GET :/users/{username}/received_events
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUsersActivityListReceivedEventsForUser(
  username: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Event[]> {
  const result = await api.users.activityListReceivedEventsForUser({
    username: username,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List public events received by a user
 * @request GET :/users/{username}/received_events/public
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUsersActivityListReceivedPublicEventsForUser(
  username: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<Event[]> {
  const result = await api.users.activityListReceivedPublicEventsForUser({
    username: username,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List repositories for a user
 * @request GET :/users/{username}/repos
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUsersReposListForUser(
  username: string,
  query: {
    /** Limit results to repositories of the specified type. */
    type?: "all" | "owner" | "member";
    /** The property to sort the results by. */
    sort?: "created" | "updated" | "pushed" | "full_name";
    /** The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`. */
    direction?: "asc" | "desc";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<MinimalRepository[]> {
  const result = await api.users.reposListForUser({
    username: username,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get GitHub Actions billing for a user
 * @request GET :/users/{username}/settings/billing/actions
 * @readonly
 */
export async function getUsersBillingGetGithubActionsBillingUser(
  username: string,
  headers?: hasuraSdk.JSONValue,
): Promise<ActionsBillingUsage> {
  const result = await api.users.billingGetGithubActionsBillingUser({
    username: username,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get GitHub Packages billing for a user
 * @request GET :/users/{username}/settings/billing/packages
 * @readonly
 */
export async function getUsersBillingGetGithubPackagesBillingUser(
  username: string,
  headers?: hasuraSdk.JSONValue,
): Promise<PackagesBillingUsage> {
  const result = await api.users.billingGetGithubPackagesBillingUser({
    username: username,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get shared storage billing for a user
 * @request GET :/users/{username}/settings/billing/shared-storage
 * @readonly
 */
export async function getUsersBillingGetSharedStorageBillingUser(
  username: string,
  headers?: hasuraSdk.JSONValue,
): Promise<CombinedBillingUsage> {
  const result = await api.users.billingGetSharedStorageBillingUser({
    username: username,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List SSH signing keys for a user
 * @request GET :/users/{username}/ssh_signing_keys
 * @readonly
 */
export async function getUsersUsersListSshSigningKeysForUser(
  username: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<SshSigningKey[]> {
  const result = await api.users.usersListSshSigningKeysForUser({
    username: username,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List repositories starred by a user
 * @request GET :/users/{username}/starred
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUsersActivityListReposStarredByUser(
  username: string,
  query: {
    /** The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to. */
    sort?: "created" | "updated";
    /** The direction to sort the results by. */
    direction?: "asc" | "desc";
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<StarredRepository[] | Repository[]> {
  const result = await api.users.activityListReposStarredByUser({
    username: username,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * List repositories watched by a user
 * @request GET :/users/{username}/subscriptions
 * @allowrelaxedtypes
 * @readonly
 */
export async function getUsersActivityListReposWatchedByUser(
  username: string,
  query: {
    /** The number of results per page (max 100). */
    per_page?: number;
    /** Page number of the results to fetch. */
    page?: number;
  },
  headers?: hasuraSdk.JSONValue,
): Promise<MinimalRepository[]> {
  const result = await api.users.activityListReposWatchedByUser({
    username: username,
    query: query,
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get all API versions
 * @request GET :/versions
 * @readonly
 */
export async function getVersionsMetaGetAllVersions(
  headers?: hasuraSdk.JSONValue,
): Promise<string[]> {
  const result = await api.versions.metaGetAllVersions({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}

/**
 * Get the Zen of GitHub
 * @request GET :/zen
 * @readonly
 */
export async function getZenMetaGetZen(
  headers?: hasuraSdk.JSONValue,
): Promise<AlertCreatedAt> {
  const result = await api.zen.metaGetZen({
    params: {
      headers: (headers?.value as Record<string, string>) ?? undefined,
    },
  });
  if (result.data) {
    return result.data;
  } else {
    throw result.error;
  }
}
